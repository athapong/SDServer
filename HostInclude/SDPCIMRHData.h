#ifndef AsdSDPCIMRHData_H
#define AsdSDPCIMRHData_H

#include <stdlib.h>
#ifdef  AsdSDPCIMRH_INTEGRITY_STRING
#undef  AsdSDPCIMRH_INTEGRITY_STRING
#endif
#define AsdSDPCIMRH_INTEGRITY_STRING        ""

#ifdef  AsdSDPCIMRH_CRC_STRING
#undef  AsdSDPCIMRH_CRC_STRING
#endif
#define AsdSDPCIMRH_CRC_STRING "3937311553"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCIMRHData Definition ****************
//                 IM Tran History

//                 SDPCIMRHData.h generated by AceGen2 ver. 2.5.09

class AsdSDPCIMRHData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCIMRHData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCIMRH.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCIMRH_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDIMINPI = &CSDIMINPI;
        SDIMACCO = &CSDIMACCO;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCIMRHData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDIMINPI.Reinit();
            CSDIMACCO.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCIMRH_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIMRH_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDIMINPI.Save(&m_Sess);
        CSDIMACCO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIMRH", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDIMINPI.Load(&m_Sess);
                        CSDIMACCO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIMRH");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIMRH_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDIMINPI.Save(&m_Sess);
        CSDIMACCO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIMRH", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDIMINPI.Load(&m_Sess);
                        CSDIMACCO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIMRH");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIMRH_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDIMINPI Definition ****************
    //                 SERVICE DELIVERY IM HISTORY INQUIRY INPUT                   
    
    //    SDIMINPI.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:20
    class AsdSDIMINPI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bControl1;
        char      m_szControl1[2+1];
        bool      m_bControl2;
        char      m_szControl2[3+1];
        bool      m_bControl3;
        char      m_szControl3[3+1];
        bool      m_bControl4;
        char      m_szControl4[4+1];
        bool      m_bAcctNo;
        char      m_szAcctNo[10+1];
        bool      m_bActivity;
        char      m_szActivity[1+1];
        bool      m_bSelectType;
        char      m_szSelectType[1+1];
        bool      m_bRangeValues;
        char      m_szRangeValues[32+1];
        bool      m_bWkUserArea;
        char      m_szWkUserArea[30+1];
    
      public:
        long      m_lIndex;

        AsdSDIMINPI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bControl1 = false;
            strcpy(m_szControl1, "");
            m_bControl2 = false;
            strcpy(m_szControl2, "");
            m_bControl3 = false;
            strcpy(m_szControl3, "");
            m_bControl4 = false;
            strcpy(m_szControl4, "");
            m_bAcctNo = false;
            strcpy(m_szAcctNo, "");
            m_bActivity = false;
            strcpy(m_szActivity, "");
            m_bSelectType = false;
            strcpy(m_szSelectType, "");
            m_bRangeValues = false;
            strcpy(m_szRangeValues, "");
            m_bWkUserArea = false;
            strcpy(m_szWkUserArea, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bControl1 = false;
            strcpy(m_szControl1, "");
            m_bControl2 = false;
            strcpy(m_szControl2, "");
            m_bControl3 = false;
            strcpy(m_szControl3, "");
            m_bControl4 = false;
            strcpy(m_szControl4, "");
            m_bAcctNo = false;
            strcpy(m_szAcctNo, "");
            m_bActivity = false;
            strcpy(m_szActivity, "");
            m_bSelectType = false;
            strcpy(m_szSelectType, "");
            m_bRangeValues = false;
            strcpy(m_szRangeValues, "");
            m_bWkUserArea = false;
            strcpy(m_szWkUserArea, "");
        }

        
        //    HIGHEST LEVEL OF CONTROL
        long lControl1 () { return 2; };
        RWCString Control1 (void)
        {
            return m_szControl1;
        }
        long Control1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl1, sizeof(m_szControl1), &m_bControl1);
        }
        
        //    SECOND LEVEL OF CONTROL
        long lControl2 () { return 3; };
        RWCString Control2 (void)
        {
            return m_szControl2;
        }
        long Control2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl2, sizeof(m_szControl2), &m_bControl2);
        }
        
        //    THIRD LEVEL OF CONTROL
        long lControl3 () { return 3; };
        RWCString Control3 (void)
        {
            return m_szControl3;
        }
        long Control3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl3, sizeof(m_szControl3), &m_bControl3);
        }
        
        //    FOURTH LEVEL OF CONTROL
        long lControl4 () { return 4; };
        RWCString Control4 (void)
        {
            return m_szControl4;
        }
        long Control4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl4, sizeof(m_szControl4), &m_bControl4);
        }
        
        //    CUSTOMER ACCOUNT NUMBER
        long lAcctNo () { return 10; };
        RWCString AcctNo (void)
        {
            return m_szAcctNo;
        }
        long AcctNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcctNo, sizeof(m_szAcctNo), &m_bAcctNo);
        }
        
        //    TYPE OF TRANSACTION ACTIVITY TO DOWNLOAD
        long lActivity () { return 1; };
        RWCString Activity (void)
        {
            return m_szActivity;
        }
        long Activity (const RWCString& rwc)
        {
            return SetString(rwc, m_szActivity, sizeof(m_szActivity), &m_bActivity);
        }
        
        //    DEFINES THE QUERY
        long lSelectType () { return 1; };
        RWCString SelectType (void)
        {
            return m_szSelectType;
        }
        long SelectType (const RWCString& rwc)
        {
            return SetString(rwc, m_szSelectType, sizeof(m_szSelectType), &m_bSelectType);
        }
        
        //    RANGE OF VALUES TO LIMIT THE QUERY
        long lRangeValues () { return 32; };
        RWCString RangeValues (void)
        {
            return m_szRangeValues;
        }
        long RangeValues (const RWCString& rwc)
        {
            return SetString(rwc, m_szRangeValues, sizeof(m_szRangeValues), &m_bRangeValues);
        }
        
        //    USER AREA FILLER
        long lWkUserArea () { return 30; };
        RWCString WkUserArea (void)
        {
            return m_szWkUserArea;
        }
        long WkUserArea (const RWCString& rwc)
        {
            return SetString(rwc, m_szWkUserArea, sizeof(m_szWkUserArea), &m_bWkUserArea);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bControl1) return true;
            if (m_bControl2) return true;
            if (m_bControl3) return true;
            if (m_bControl4) return true;
            if (m_bAcctNo) return true;
            if (m_bActivity) return true;
            if (m_bSelectType) return true;
            if (m_bRangeValues) return true;
            if (m_bWkUserArea) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDIMINPI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "Control1", m_szControl1, &m_bControl1);
                AddXMLField(pSess, "Control2", m_szControl2, &m_bControl2);
                AddXMLField(pSess, "Control3", m_szControl3, &m_bControl3);
                AddXMLField(pSess, "Control4", m_szControl4, &m_bControl4);
                AddXMLField(pSess, "AcctNo", m_szAcctNo, &m_bAcctNo);
                AddXMLField(pSess, "Activity", m_szActivity, &m_bActivity);
                AddXMLField(pSess, "SelectType", m_szSelectType, &m_bSelectType);
                AddXMLField(pSess, "RangeValues", m_szRangeValues, &m_bRangeValues);
                AddXMLField(pSess, "WkUserArea", m_szWkUserArea, &m_bWkUserArea);
                AddXMLCloseRecord(pSess, "SDIMINPI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDIMINPI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "Control1", m_szControl1);
                GetXMLField(pSess, "Control2", m_szControl2);
                GetXMLField(pSess, "Control3", m_szControl3);
                GetXMLField(pSess, "Control4", m_szControl4);
                GetXMLField(pSess, "AcctNo", m_szAcctNo);
                GetXMLField(pSess, "Activity", m_szActivity);
                GetXMLField(pSess, "SelectType", m_szSelectType);
                GetXMLField(pSess, "RangeValues", m_szRangeValues);
                GetXMLField(pSess, "WkUserArea", m_szWkUserArea);
                CloseXMLRecord(pSess, "SDIMINPI");
            };
        }
    };

    AsdSDIMINPI CSDIMINPI;
    AsdSDIMINPI *SDIMINPI;
    
    //**************** End AsdSDIMINPI Definition ****************

    
    //**************** Start AsdSDIMACCO Definition ****************
    //                 SERVICE DELIVERY IM HISTORY INQUIRY OUTPUT                  
    
    //    SDIMACCO.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/16/02 16:39:43
    class AsdSDIMACCO
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bProcStatusFlag;
        char      m_szProcStatusFlag[1+1];
        bool      m_bSaveAcctNo;
        char      m_szSaveAcctNo[22+1];
        bool      m_bAccCcyyddd;
        char      m_szAccCcyyddd[8+1];
        bool      m_bAccRecSeq;
        char      m_szAccRecSeq[8+1];
        bool      m_bSaveBalance;
        char      m_szSaveBalance[17+1];
        bool      m_bErrCode;
        char      m_szErrCode[4+1];
        bool      m_bErrDesc;
        char      m_szErrDesc[40+1];
        bool      m_bCreditCounter;
        short     m_nCreditCounter;
        bool      m_bDebitCounter;
        short     m_nDebitCounter;
        bool      m_bTotalCounter;
        short     m_nTotalCounter;
        bool      m_bWkTsdReserved;
        char      m_szWkTsdReserved[30+1];
        bool      m_bWkUserArea;
        char      m_szWkUserArea[30+1];
    
      public:
        long      m_lIndex;

        AsdSDIMACCO ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bProcStatusFlag = false;
            strcpy(m_szProcStatusFlag, "");
            m_bSaveAcctNo = false;
            strcpy(m_szSaveAcctNo, "");
            m_bAccCcyyddd = false;
            strcpy(m_szAccCcyyddd, "+0000000");
            m_bAccRecSeq = false;
            strcpy(m_szAccRecSeq, "+0000000");
            m_bSaveBalance = false;
            strcpy(m_szSaveBalance, "+0000000000000.00");
            m_bErrCode = false;
            strcpy(m_szErrCode, "0000");
            m_bErrDesc = false;
            strcpy(m_szErrDesc, "");
            m_bCreditCounter = false;
            m_nCreditCounter = 0;
            m_bDebitCounter = false;
            m_nDebitCounter = 0;
            m_bTotalCounter = false;
            m_nTotalCounter = 0;
            m_bWkTsdReserved = false;
            strcpy(m_szWkTsdReserved, "");
            m_bWkUserArea = false;
            strcpy(m_szWkUserArea, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 100; lOccurs++)
            {
                OutputRecord[lOccurs]  = &COutputRecord[lOccurs];
                COutputRecord[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bProcStatusFlag = false;
            strcpy(m_szProcStatusFlag, "");
            m_bSaveAcctNo = false;
            strcpy(m_szSaveAcctNo, "");
            m_bAccCcyyddd = false;
            strcpy(m_szAccCcyyddd, "+0000000");
            m_bAccRecSeq = false;
            strcpy(m_szAccRecSeq, "+0000000");
            m_bSaveBalance = false;
            strcpy(m_szSaveBalance, "+0000000000000.00");
            m_bErrCode = false;
            strcpy(m_szErrCode, "0000");
            m_bErrDesc = false;
            strcpy(m_szErrDesc, "");
            m_bCreditCounter = false;
            m_nCreditCounter = 0;
            m_bDebitCounter = false;
            m_nDebitCounter = 0;
            m_bTotalCounter = false;
            m_nTotalCounter = 0;
            m_bWkTsdReserved = false;
            strcpy(m_szWkTsdReserved, "");
            m_bWkUserArea = false;
            strcpy(m_szWkUserArea, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 100; lOccurs++)
            {
                OutputRecord[lOccurs]  = &COutputRecord[lOccurs];
                COutputRecord[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    PROCESSING STATUS FLAG
        long lProcStatusFlag () { return 1; };
        RWCString ProcStatusFlag (void)
        {
            return m_szProcStatusFlag;
        }
        long ProcStatusFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szProcStatusFlag, sizeof(m_szProcStatusFlag), &m_bProcStatusFlag);
        }
        
        //    SAVED ACCOUNT CTLS AND ACCOUNT
        long lSaveAcctNo () { return 22; };
        RWCString SaveAcctNo (void)
        {
            return m_szSaveAcctNo;
        }
        long SaveAcctNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveAcctNo, sizeof(m_szSaveAcctNo), &m_bSaveAcctNo);
        }
        
        //    ACCUM TRAN DATE
        long lAccCcyyddd () { return 8; };
        RWCString AccCcyyddd (void)
        {
            return AceZeroSupp(m_szAccCcyyddd, &m_szSuppressBuff[0]);
        }
        RWCString AccCcyydddRaw (void)
        {
            return m_szAccCcyyddd;
        }
        long AccCcyyddd (const RWCString& rwc)
        {
            return SetString(rwc, m_szAccCcyyddd, sizeof(m_szAccCcyyddd), &m_bAccCcyyddd);
        }
        
        //    RECORD SEQUENCE
        long lAccRecSeq () { return 8; };
        RWCString AccRecSeq (void)
        {
            return AceZeroSupp(m_szAccRecSeq, &m_szSuppressBuff[0]);
        }
        RWCString AccRecSeqRaw (void)
        {
            return m_szAccRecSeq;
        }
        long AccRecSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szAccRecSeq, sizeof(m_szAccRecSeq), &m_bAccRecSeq);
        }
        
        //    SAVE BALANCE OF LAST RECORD READ
        long lSaveBalance () { return 17; };
        RWCString SaveBalance (void)
        {
            return AceZeroSupp(m_szSaveBalance, &m_szSuppressBuff[0]);
        }
        RWCString SaveBalanceRaw (void)
        {
            return m_szSaveBalance;
        }
        long SaveBalance (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveBalance, sizeof(m_szSaveBalance), &m_bSaveBalance);
        }
        
        //    ERROR CODE
        long lErrCode () { return 4; };
        RWCString ErrCode (void)
        {
            return m_szErrCode;
        }
        long ErrCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szErrCode, sizeof(m_szErrCode), &m_bErrCode);
        }
        
        //    ERROR DESCRIPTION
        long lErrDesc () { return 40; };
        RWCString ErrDesc (void)
        {
            return m_szErrDesc;
        }
        long ErrDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szErrDesc, sizeof(m_szErrDesc), &m_bErrDesc);
        }
        
        //    RUNNING TOTAL OF CREDIT TRANSACTIONS
        short CreditCounter (void)
        {
            return m_nCreditCounter;
        }
        long CreditCounter (const short nValue)
        {
            return SetShort(nValue, &m_nCreditCounter, &m_bCreditCounter);
        }
        
        //    RUNNING TOTAL OF DEBIT TRANSACTIONS
        short DebitCounter (void)
        {
            return m_nDebitCounter;
        }
        long DebitCounter (const short nValue)
        {
            return SetShort(nValue, &m_nDebitCounter, &m_bDebitCounter);
        }
        
        //    RUNNING TOTAL OF ALL TRANSACTIONS
        short TotalCounter (void)
        {
            return m_nTotalCounter;
        }
        long TotalCounter (const short nValue)
        {
            return SetShort(nValue, &m_nTotalCounter, &m_bTotalCounter);
        }
        
        //    TSD RESERVED FILLER
        long lWkTsdReserved () { return 30; };
        RWCString WkTsdReserved (void)
        {
            return m_szWkTsdReserved;
        }
        long WkTsdReserved (const RWCString& rwc)
        {
            return SetString(rwc, m_szWkTsdReserved, sizeof(m_szWkTsdReserved), &m_bWkTsdReserved);
        }
        
        //    USER AREA FILLER
        long lWkUserArea () { return 30; };
        RWCString WkUserArea (void)
        {
            return m_szWkUserArea;
        }
        long WkUserArea (const RWCString& rwc)
        {
            return SetString(rwc, m_szWkUserArea, sizeof(m_szWkUserArea), &m_bWkUserArea);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bProcStatusFlag) return true;
            if (m_bSaveAcctNo) return true;
            if (m_bAccCcyyddd) return true;
            if (m_bAccRecSeq) return true;
            if (m_bSaveBalance) return true;
            if (m_bErrCode) return true;
            if (m_bErrDesc) return true;
            if (m_bCreditCounter) return true;
            if (m_bDebitCounter) return true;
            if (m_bTotalCounter) return true;
            if (m_bWkTsdReserved) return true;
            if (m_bWkUserArea) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 100; lOccurs++)
            {
                if(COutputRecord[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDIMACCO", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "ProcStatusFlag", m_szProcStatusFlag, &m_bProcStatusFlag);
                AddXMLField(pSess, "SaveAcctNo", m_szSaveAcctNo, &m_bSaveAcctNo);
                AddXMLField(pSess, "AccCcyyddd", m_szAccCcyyddd, &m_bAccCcyyddd);
                AddXMLField(pSess, "AccRecSeq", m_szAccRecSeq, &m_bAccRecSeq);
                AddXMLField(pSess, "SaveBalance", m_szSaveBalance, &m_bSaveBalance);
                AddXMLField(pSess, "ErrCode", m_szErrCode, &m_bErrCode);
                AddXMLField(pSess, "ErrDesc", m_szErrDesc, &m_bErrDesc);
                AddXMLField(pSess, "CreditCounter", m_nCreditCounter, &m_bCreditCounter);
                AddXMLField(pSess, "DebitCounter", m_nDebitCounter, &m_bDebitCounter);
                AddXMLField(pSess, "TotalCounter", m_nTotalCounter, &m_bTotalCounter);
                AddXMLField(pSess, "WkTsdReserved", m_szWkTsdReserved, &m_bWkTsdReserved);
                AddXMLField(pSess, "WkUserArea", m_szWkUserArea, &m_bWkUserArea);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 100; lOccurs++)
                {
                    COutputRecord[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDIMACCO");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDIMACCO", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "ProcStatusFlag", m_szProcStatusFlag);
                GetXMLField(pSess, "SaveAcctNo", m_szSaveAcctNo);
                GetXMLField(pSess, "AccCcyyddd", m_szAccCcyyddd);
                GetXMLField(pSess, "AccRecSeq", m_szAccRecSeq);
                GetXMLField(pSess, "SaveBalance", m_szSaveBalance);
                GetXMLField(pSess, "ErrCode", m_szErrCode);
                GetXMLField(pSess, "ErrDesc", m_szErrDesc);
                GetXMLField(pSess, "CreditCounter", &m_nCreditCounter);
                GetXMLField(pSess, "DebitCounter", &m_nDebitCounter);
                GetXMLField(pSess, "TotalCounter", &m_nTotalCounter);
                GetXMLField(pSess, "WkTsdReserved", m_szWkTsdReserved);
                GetXMLField(pSess, "WkUserArea", m_szWkUserArea);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 100; lOccurs++)
                {
                    COutputRecord[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDIMACCO");
            };
        }
        
        //**************** Start AsdOutputRecord Definition ****************
        //                 ATL OUTPUT RECORD
        
        class AsdOutputRecord
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bHistCcyyddd;
            char      m_szHistCcyyddd[7+1];
            bool      m_bHistRecSeq;
            char      m_szHistRecSeq[7+1];
            bool      m_bSerial;
            char      m_szSerial[10+1];
            bool      m_bPostCent;
            char      m_szPostCent[2+1];
            bool      m_bPostYr;
            char      m_szPostYr[2+1];
            bool      m_bPostMo;
            char      m_szPostMo[2+1];
            bool      m_bPostDa;
            char      m_szPostDa[2+1];
            bool      m_bBatchNo;
            char      m_szBatchNo[5+1];
            bool      m_bSeqNo;
            char      m_szSeqNo[5+1];
            bool      m_bIntlCd;
            char      m_szIntlCd[2+1];
            bool      m_bUsrGtCd;
            char      m_szUsrGtCd[2+1];
            bool      m_bAmount;
            char      m_szAmount[17+1];
            bool      m_bStmtSymbol;
            char      m_szStmtSymbol[2+1];
            bool      m_bRetFlagHigh;
            char      m_szRetFlagHigh[1+1];
            bool      m_bPresBal;
            char      m_szPresBal[17+1];
            bool      m_bOnCurrStmt;
            char      m_szOnCurrStmt[1+1];
            bool      m_bAccId;
            char      m_szAccId[2+1];
            bool      m_bAccSubType;
            char      m_szAccSubType[1+1];
            bool      m_bAccType;
            char      m_szAccType[1+1];
        
          public:
            long      m_lIndex;

            AsdOutputRecord ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bHistCcyyddd = false;
                strcpy(m_szHistCcyyddd, "0000000");
                m_bHistRecSeq = false;
                strcpy(m_szHistRecSeq, "0000000");
                m_bSerial = false;
                strcpy(m_szSerial, "");
                m_bPostCent = false;
                strcpy(m_szPostCent, "");
                m_bPostYr = false;
                strcpy(m_szPostYr, "");
                m_bPostMo = false;
                strcpy(m_szPostMo, "");
                m_bPostDa = false;
                strcpy(m_szPostDa, "");
                m_bBatchNo = false;
                strcpy(m_szBatchNo, "00000");
                m_bSeqNo = false;
                strcpy(m_szSeqNo, "00000");
                m_bIntlCd = false;
                strcpy(m_szIntlCd, "");
                m_bUsrGtCd = false;
                strcpy(m_szUsrGtCd, "");
                m_bAmount = false;
                strcpy(m_szAmount, "+0000000000000.00");
                m_bStmtSymbol = false;
                strcpy(m_szStmtSymbol, "");
                m_bRetFlagHigh = false;
                strcpy(m_szRetFlagHigh, "");
                m_bPresBal = false;
                strcpy(m_szPresBal, "+0000000000000.00");
                m_bOnCurrStmt = false;
                strcpy(m_szOnCurrStmt, "");
                m_bAccId = false;
                strcpy(m_szAccId, "");
                m_bAccSubType = false;
                strcpy(m_szAccSubType, "");
                m_bAccType = false;
                strcpy(m_szAccType, "");
            
                Description  = &CDescription;
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    DATE THE TRANSACTION WAS POSTED.
            long lHistCcyyddd () { return 7; };
            RWCString HistCcyyddd (void)
            {
                return m_szHistCcyyddd;
            }
            long HistCcyyddd (const RWCString& rwc)
            {
                return SetString(rwc, m_szHistCcyyddd, sizeof(m_szHistCcyyddd), &m_bHistCcyyddd);
            }
            
            //    RECORD SEQUENCE WITHIN THE POSTING DATE.
            long lHistRecSeq () { return 7; };
            RWCString HistRecSeq (void)
            {
                return m_szHistRecSeq;
            }
            long HistRecSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szHistRecSeq, sizeof(m_szHistRecSeq), &m_bHistRecSeq);
            }
            
            //    TRANSACTION SERIAL NUMBER
            long lSerial () { return 10; };
            RWCString Serial (void)
            {
                return m_szSerial;
            }
            long Serial (const RWCString& rwc)
            {
                return SetString(rwc, m_szSerial, sizeof(m_szSerial), &m_bSerial);
            }
            
            //    CENTURY TRANSACTION POSTED
            long lPostCent () { return 2; };
            RWCString PostCent (void)
            {
                return m_szPostCent;
            }
            long PostCent (const RWCString& rwc)
            {
                return SetString(rwc, m_szPostCent, sizeof(m_szPostCent), &m_bPostCent);
            }
            
            //    YEAR TRANSACTION POSTED
            long lPostYr () { return 2; };
            RWCString PostYr (void)
            {
                return m_szPostYr;
            }
            long PostYr (const RWCString& rwc)
            {
                return SetString(rwc, m_szPostYr, sizeof(m_szPostYr), &m_bPostYr);
            }
            
            //    MONTH TRANSACTION POSTED
            long lPostMo () { return 2; };
            RWCString PostMo (void)
            {
                return m_szPostMo;
            }
            long PostMo (const RWCString& rwc)
            {
                return SetString(rwc, m_szPostMo, sizeof(m_szPostMo), &m_bPostMo);
            }
            
            //    DAY TRANSACTION POSTED
            long lPostDa () { return 2; };
            RWCString PostDa (void)
            {
                return m_szPostDa;
            }
            long PostDa (const RWCString& rwc)
            {
                return SetString(rwc, m_szPostDa, sizeof(m_szPostDa), &m_bPostDa);
            }
            
            //    BATCH NUMBER OF TRANSACTIONS
            long lBatchNo () { return 5; };
            RWCString BatchNo (void)
            {
                return m_szBatchNo;
            }
            long BatchNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szBatchNo, sizeof(m_szBatchNo), &m_bBatchNo);
            }
            
            //    SEQUENCE NUMBER WITHIN A BATCH OF TRANSACTIONS
            long lSeqNo () { return 5; };
            RWCString SeqNo (void)
            {
                return m_szSeqNo;
            }
            long SeqNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szSeqNo, sizeof(m_szSeqNo), &m_bSeqNo);
            }
            
            //    INTERNAL FINANCIAL TRANSACTION CODE
            long lIntlCd () { return 2; };
            RWCString IntlCd (void)
            {
                return m_szIntlCd;
            }
            long IntlCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szIntlCd, sizeof(m_szIntlCd), &m_bIntlCd);
            }
            
            //    USER INTEREST ADJUSTMENT CODES.
            long lUsrGtCd () { return 2; };
            RWCString UsrGtCd (void)
            {
                return m_szUsrGtCd;
            }
            long UsrGtCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szUsrGtCd, sizeof(m_szUsrGtCd), &m_bUsrGtCd);
            }
            
            //    TRANSACTION AMOUNT
            long lAmount () { return 17; };
            RWCString Amount (void)
            {
                return AceZeroSupp(m_szAmount, &m_szSuppressBuff[0]);
            }
            RWCString AmountRaw (void)
            {
                return m_szAmount;
            }
            long Amount (const RWCString& rwc)
            {
                return SetString(rwc, m_szAmount, sizeof(m_szAmount), &m_bAmount);
            }
            
            //    STATEMENT SYMBOL
            long lStmtSymbol () { return 2; };
            RWCString StmtSymbol (void)
            {
                return m_szStmtSymbol;
            }
            long StmtSymbol (const RWCString& rwc)
            {
                return SetString(rwc, m_szStmtSymbol, sizeof(m_szStmtSymbol), &m_bStmtSymbol);
            }
            
            //    RETURN FLAG IS HIGH VALUES
            long lRetFlagHigh () { return 1; };
            RWCString RetFlagHigh (void)
            {
                return m_szRetFlagHigh;
            }
            long RetFlagHigh (const RWCString& rwc)
            {
                return SetString(rwc, m_szRetFlagHigh, sizeof(m_szRetFlagHigh), &m_bRetFlagHigh);
            }
            
            //    PRESENT BALANCE
            long lPresBal () { return 17; };
            RWCString PresBal (void)
            {
                return AceZeroSupp(m_szPresBal, &m_szSuppressBuff[0]);
            }
            RWCString PresBalRaw (void)
            {
                return m_szPresBal;
            }
            long PresBal (const RWCString& rwc)
            {
                return SetString(rwc, m_szPresBal, sizeof(m_szPresBal), &m_bPresBal);
            }
            
            //    HAS TRAN PRINTED ON CUSTOMER STMT
            long lOnCurrStmt () { return 1; };
            RWCString OnCurrStmt (void)
            {
                return m_szOnCurrStmt;
            }
            long OnCurrStmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szOnCurrStmt, sizeof(m_szOnCurrStmt), &m_bOnCurrStmt);
            }
            
            //    TRANSACTION IDENTIFIER
            long lAccId () { return 2; };
            RWCString AccId (void)
            {
                return m_szAccId;
            }
            long AccId (const RWCString& rwc)
            {
                return SetString(rwc, m_szAccId, sizeof(m_szAccId), &m_bAccId);
            }
            
            //    IDENTIFIES THE TRAN SUBTYPE THAT CORRESPONDS WITH TRAN TYPE
            long lAccSubType () { return 1; };
            RWCString AccSubType (void)
            {
                return m_szAccSubType;
            }
            long AccSubType (const RWCString& rwc)
            {
                return SetString(rwc, m_szAccSubType, sizeof(m_szAccSubType), &m_bAccSubType);
            }
            
            //    IDENTIFIES THE TYPE OF TRANSACTION
            long lAccType () { return 1; };
            RWCString AccType (void)
            {
                return m_szAccType;
            }
            long AccType (const RWCString& rwc)
            {
                return SetString(rwc, m_szAccType, sizeof(m_szAccType), &m_bAccType);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bHistCcyyddd) return true;
                if (m_bHistRecSeq) return true;
                if (m_bSerial) return true;
                if (m_bPostCent) return true;
                if (m_bPostYr) return true;
                if (m_bPostMo) return true;
                if (m_bPostDa) return true;
                if (m_bBatchNo) return true;
                if (m_bSeqNo) return true;
                if (m_bIntlCd) return true;
                if (m_bUsrGtCd) return true;
                if (m_bAmount) return true;
                if (m_bStmtSymbol) return true;
                if (m_bRetFlagHigh) return true;
                if (m_bPresBal) return true;
                if (m_bOnCurrStmt) return true;
                if (m_bAccId) return true;
                if (m_bAccSubType) return true;
                if (m_bAccType) return true;
                if (CDescription.HasDataToSave()) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "OutputRecord", m_lIndex);
                    AddXMLField(pSess, "HistCcyyddd", m_szHistCcyyddd, &m_bHistCcyyddd);
                    AddXMLField(pSess, "HistRecSeq", m_szHistRecSeq, &m_bHistRecSeq);
                    AddXMLField(pSess, "Serial", m_szSerial, &m_bSerial);
                    AddXMLField(pSess, "PostCent", m_szPostCent, &m_bPostCent);
                    AddXMLField(pSess, "PostYr", m_szPostYr, &m_bPostYr);
                    AddXMLField(pSess, "PostMo", m_szPostMo, &m_bPostMo);
                    AddXMLField(pSess, "PostDa", m_szPostDa, &m_bPostDa);
                    AddXMLField(pSess, "BatchNo", m_szBatchNo, &m_bBatchNo);
                    AddXMLField(pSess, "SeqNo", m_szSeqNo, &m_bSeqNo);
                    AddXMLField(pSess, "IntlCd", m_szIntlCd, &m_bIntlCd);
                    AddXMLField(pSess, "UsrGtCd", m_szUsrGtCd, &m_bUsrGtCd);
                    AddXMLField(pSess, "Amount", m_szAmount, &m_bAmount);
                    AddXMLField(pSess, "StmtSymbol", m_szStmtSymbol, &m_bStmtSymbol);
                    AddXMLField(pSess, "RetFlagHigh", m_szRetFlagHigh, &m_bRetFlagHigh);
                    AddXMLField(pSess, "PresBal", m_szPresBal, &m_bPresBal);
                    AddXMLField(pSess, "OnCurrStmt", m_szOnCurrStmt, &m_bOnCurrStmt);
                    AddXMLField(pSess, "AccId", m_szAccId, &m_bAccId);
                    AddXMLField(pSess, "AccSubType", m_szAccSubType, &m_bAccSubType);
                    AddXMLField(pSess, "AccType", m_szAccType, &m_bAccType);
                    CDescription.Save(pSess);
                    AddXMLCloseRecord(pSess, "OutputRecord");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "OutputRecord", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "HistCcyyddd", m_szHistCcyyddd);
                    GetXMLField(pSess, "HistRecSeq", m_szHistRecSeq);
                    GetXMLField(pSess, "Serial", m_szSerial);
                    GetXMLField(pSess, "PostCent", m_szPostCent);
                    GetXMLField(pSess, "PostYr", m_szPostYr);
                    GetXMLField(pSess, "PostMo", m_szPostMo);
                    GetXMLField(pSess, "PostDa", m_szPostDa);
                    GetXMLField(pSess, "BatchNo", m_szBatchNo);
                    GetXMLField(pSess, "SeqNo", m_szSeqNo);
                    GetXMLField(pSess, "IntlCd", m_szIntlCd);
                    GetXMLField(pSess, "UsrGtCd", m_szUsrGtCd);
                    GetXMLField(pSess, "Amount", m_szAmount);
                    GetXMLField(pSess, "StmtSymbol", m_szStmtSymbol);
                    GetXMLField(pSess, "RetFlagHigh", m_szRetFlagHigh);
                    GetXMLField(pSess, "PresBal", m_szPresBal);
                    GetXMLField(pSess, "OnCurrStmt", m_szOnCurrStmt);
                    GetXMLField(pSess, "AccId", m_szAccId);
                    GetXMLField(pSess, "AccSubType", m_szAccSubType);
                    GetXMLField(pSess, "AccType", m_szAccType);
                    CDescription.Load(pSess);
                    CloseXMLRecord(pSess, "OutputRecord");
                };
            }
            
            //**************** Start AsdDescription Definition ****************
            //                 TRANSACTION DESCRIPTION
            
            class AsdDescription
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bDesc;
                char      m_szDesc[27+1];
            
              public:
                long      m_lIndex;

                AsdDescription ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bDesc = false;
                    strcpy(m_szDesc, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    TRANSACTION DESCRIPTION TEXT
                long lDesc () { return 27; };
                RWCString Desc (void)
                {
                    return m_szDesc;
                }
                long Desc (const RWCString& rwc)
                {
                    return SetString(rwc, m_szDesc, sizeof(m_szDesc), &m_bDesc);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bDesc) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "Description", m_lIndex);
                        AddXMLField(pSess, "Desc", m_szDesc, &m_bDesc);
                        AddXMLCloseRecord(pSess, "Description");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "Description", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "Desc", m_szDesc);
                        CloseXMLRecord(pSess, "Description");
                    };
                }
            };

            AsdDescription  CDescription;
            AsdDescription *Description;
            
            //**************** End AsdDescription Definition ****************
            
        };

        AsdOutputRecord  COutputRecord[100];
        AsdOutputRecord *OutputRecord[100];
        
        //**************** End AsdOutputRecord Definition ****************
        
    };

    AsdSDIMACCO CSDIMACCO;
    AsdSDIMACCO *SDIMACCO;
    
    //**************** End AsdSDIMACCO Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCIMRHData Definition ****************

typedef AsdSDPCIMRHData *LPSDPCIMRH;
typedef AsdSDPCIMRHData::AsdTSHeader *LPSDPCIMRH_TSHeader;
typedef AsdSDPCIMRHData::AsdSDIMINPI *LPSDPCIMRH_SDIMINPI;
typedef AsdSDPCIMRHData::AsdSDIMACCO *LPSDPCIMRH_SDIMACCO;
typedef AsdSDPCIMRHData::AsdSDIMACCO::AsdOutputRecord *LPSDPCIMRH_SDIMACCO_OutputRecord;
typedef AsdSDPCIMRHData::AsdSDIMACCO::AsdOutputRecord::AsdDescription *LPSDPCIMRH_SDIMACCO_OutputRecord_Description;
typedef AsdSDPCIMRHData::AsdTSMDA *LPSDPCIMRH_TSMDA;
typedef AsdSDPCIMRHData::AsdTSMDA::AsdMdaTrmMsg *LPSDPCIMRH_TSMDA_MdaTrmMsg;
typedef AsdSDPCIMRHData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCIMRH_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCIMRHData_H

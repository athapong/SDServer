#ifndef AsdTWQKTRANData_H
#define AsdTWQKTRANData_H

#include <stdlib.h>
#ifdef  AsdTWQKTRAN_INTEGRITY_STRING
#undef  AsdTWQKTRAN_INTEGRITY_STRING
#endif
#define AsdTWQKTRAN_INTEGRITY_STRING        ""

#ifdef  AsdTWQKTRAN_CRC_STRING
#undef  AsdTWQKTRAN_CRC_STRING
#endif
#define AsdTWQKTRAN_CRC_STRING "3789792473"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdTWQKTRANData Definition ****************
//                 Quick credit_debit

//                 TWQKTRANData.h generated by AceGen2 ver. 2.5.09

class AsdTWQKTRANData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdTWQKTRANData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "TWQKTRAN.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdTWQKTRAN_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        TWQKTRIN = &CTWQKTRIN;
        TWQKTFEE = &CTWQKTFEE;
        TSMDA = &CTSMDA;
    }

    ~AsdTWQKTRANData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CTWQKTRIN.Reinit();
            CTWQKTFEE.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdTWQKTRAN_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdTWQKTRAN_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CTWQKTRIN.Save(&m_Sess);
        CTWQKTFEE.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "TWQKTRAN", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CTWQKTRIN.Load(&m_Sess);
                        CTWQKTFEE.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "TWQKTRAN");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdTWQKTRAN_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CTWQKTRIN.Save(&m_Sess);
        CTWQKTFEE.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "TWQKTRAN", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CTWQKTRIN.Load(&m_Sess);
                        CTWQKTFEE.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "TWQKTRAN");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdTWQKTRAN_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdTWQKTRIN Definition ****************
    //                 QUICK DEBIT/CREDIT MONETARY TRAN DAG FOR CLIENT/SERVER APPS 
    
    //    TWQKTRIN.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:32
    class AsdTWQKTRIN
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bDrawerNumber;
        char      m_szDrawerNumber[5+1];
        bool      m_bCashIn;
        char      m_szCashIn[21+1];
        bool      m_bCashOut;
        char      m_szCashOut[21+1];
        bool      m_bEffectiveDate;
        char      m_szEffectiveDate[8+1];
        bool      m_bCtrCheckExemption;
        char      m_szCtrCheckExemption[1+1];
        bool      m_bCtrExemptStatus;
        char      m_szCtrExemptStatus[1+1];
        bool      m_bCtrInst;
        char      m_szCtrInst[4+1];
        bool      m_bCtrTin;
        char      m_szCtrTin[9+1];
        bool      m_bCommonExpansionArea;
        char      m_szCommonExpansionArea[7+1];
        bool      m_bCtl1;
        char      m_szCtl1[2+1];
        bool      m_bCtl2;
        char      m_szCtl2[3+1];
        bool      m_bCtl3;
        char      m_szCtl3[3+1];
        bool      m_bCtl4;
        char      m_szCtl4[4+1];
        bool      m_bAcctNbr;
        char      m_szAcctNbr[16+1];
        bool      m_bType;
        char      m_szType[2+1];
        bool      m_bUserTranCd;
        char      m_szUserTranCd[4+1];
        bool      m_bAmount;
        char      m_szAmount[21+1];
        bool      m_bCheckNumber;
        char      m_szCheckNumber[10+1];
        bool      m_bNewAccount;
        char      m_szNewAccount[1+1];
        bool      m_bWaiveFees;
        char      m_szWaiveFees[1+1];
        bool      m_bFeeAmount;
        char      m_szFeeAmount[21+1];
        bool      m_bAvailableBalance;
        char      m_szAvailableBalance[21+1];
        bool      m_bDrIlLoanAdvTotal;
        char      m_szDrIlLoanAdvTotal[21+1];
        bool      m_bDrClLoanAdvTotal;
        char      m_szDrClLoanAdvTotal[21+1];
        bool      m_bDrOnusCheckTotal;
        char      m_szDrOnusCheckTotal[21+1];
        bool      m_bDrSavingsWdTotal;
        char      m_szDrSavingsWdTotal[21+1];
        bool      m_bDrTravCheckTotal;
        char      m_szDrTravCheckTotal[21+1];
        bool      m_bDrIraDistrTotal;
        char      m_szDrIraDistrTotal[21+1];
        bool      m_bDrCdWdTotal;
        char      m_szDrCdWdTotal[21+1];
        bool      m_bDrSavingsBndsTotal;
        char      m_szDrSavingsBndsTotal[21+1];
        bool      m_bDrMiscTotal;
        char      m_szDrMiscTotal[21+1];
        bool      m_bDrGlTotal;
        char      m_szDrGlTotal[21+1];
        bool      m_bDrCashAdvanceTotal;
        char      m_szDrCashAdvanceTotal[21+1];
        bool      m_bDrFoodStampsTotal;
        char      m_szDrFoodStampsTotal[21+1];
        bool      m_bDrCouponsTotal;
        char      m_szDrCouponsTotal[21+1];
        bool      m_bDrMoneyOrderTotal;
        char      m_szDrMoneyOrderTotal[21+1];
        bool      m_bDrCashierChkTotal;
        char      m_szDrCashierChkTotal[21+1];
        bool      m_bDrImpacsWdTotal;
        char      m_szDrImpacsWdTotal[21+1];
        bool      m_bDrImTransferTotal;
        char      m_szDrImTransferTotal[21+1];
        bool      m_bDrStTransferTotal;
        char      m_szDrStTransferTotal[21+1];
        bool      m_bDrTransitChkTotal;
        char      m_szDrTransitChkTotal[21+1];
        bool      m_bDrAmLoanAdvTotal;
        char      m_szDrAmLoanAdvTotal[21+1];
        bool      m_bDrReLoanAdvTotal;
        char      m_szDrReLoanAdvTotal[21+1];
        bool      m_bDrShortName;
        char      m_szDrShortName[13+1];
        bool      m_bDrDateOpened;
        char      m_szDrDateOpened[8+1];
    
      public:
        long      m_lIndex;

        AsdTWQKTRIN ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bDrawerNumber = false;
            strcpy(m_szDrawerNumber, "00000");
            m_bCashIn = false;
            strcpy(m_szCashIn, "+0000000000000000.000");
            m_bCashOut = false;
            strcpy(m_szCashOut, "+0000000000000000.000");
            m_bEffectiveDate = false;
            strcpy(m_szEffectiveDate, "");
            m_bCtrCheckExemption = false;
            strcpy(m_szCtrCheckExemption, "");
            m_bCtrExemptStatus = false;
            strcpy(m_szCtrExemptStatus, "");
            m_bCtrInst = false;
            strcpy(m_szCtrInst, "");
            m_bCtrTin = false;
            strcpy(m_szCtrTin, "");
            m_bCommonExpansionArea = false;
            strcpy(m_szCommonExpansionArea, "");
            m_bCtl1 = false;
            strcpy(m_szCtl1, "");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "");
            m_bAcctNbr = false;
            strcpy(m_szAcctNbr, "");
            m_bType = false;
            strcpy(m_szType, "");
            m_bUserTranCd = false;
            strcpy(m_szUserTranCd, "");
            m_bAmount = false;
            strcpy(m_szAmount, "+0000000000000000.000");
            m_bCheckNumber = false;
            strcpy(m_szCheckNumber, "");
            m_bNewAccount = false;
            strcpy(m_szNewAccount, "");
            m_bWaiveFees = false;
            strcpy(m_szWaiveFees, "");
            m_bFeeAmount = false;
            strcpy(m_szFeeAmount, "+0000000000000000.000");
            m_bAvailableBalance = false;
            strcpy(m_szAvailableBalance, "+0000000000000000.000");
            m_bDrIlLoanAdvTotal = false;
            strcpy(m_szDrIlLoanAdvTotal, "+0000000000000000.000");
            m_bDrClLoanAdvTotal = false;
            strcpy(m_szDrClLoanAdvTotal, "+0000000000000000.000");
            m_bDrOnusCheckTotal = false;
            strcpy(m_szDrOnusCheckTotal, "+0000000000000000.000");
            m_bDrSavingsWdTotal = false;
            strcpy(m_szDrSavingsWdTotal, "+0000000000000000.000");
            m_bDrTravCheckTotal = false;
            strcpy(m_szDrTravCheckTotal, "+0000000000000000.000");
            m_bDrIraDistrTotal = false;
            strcpy(m_szDrIraDistrTotal, "+0000000000000000.000");
            m_bDrCdWdTotal = false;
            strcpy(m_szDrCdWdTotal, "+0000000000000000.000");
            m_bDrSavingsBndsTotal = false;
            strcpy(m_szDrSavingsBndsTotal, "+0000000000000000.000");
            m_bDrMiscTotal = false;
            strcpy(m_szDrMiscTotal, "+0000000000000000.000");
            m_bDrGlTotal = false;
            strcpy(m_szDrGlTotal, "+0000000000000000.000");
            m_bDrCashAdvanceTotal = false;
            strcpy(m_szDrCashAdvanceTotal, "+0000000000000000.000");
            m_bDrFoodStampsTotal = false;
            strcpy(m_szDrFoodStampsTotal, "+0000000000000000.000");
            m_bDrCouponsTotal = false;
            strcpy(m_szDrCouponsTotal, "+0000000000000000.000");
            m_bDrMoneyOrderTotal = false;
            strcpy(m_szDrMoneyOrderTotal, "+0000000000000000.000");
            m_bDrCashierChkTotal = false;
            strcpy(m_szDrCashierChkTotal, "+0000000000000000.000");
            m_bDrImpacsWdTotal = false;
            strcpy(m_szDrImpacsWdTotal, "+0000000000000000.000");
            m_bDrImTransferTotal = false;
            strcpy(m_szDrImTransferTotal, "+0000000000000000.000");
            m_bDrStTransferTotal = false;
            strcpy(m_szDrStTransferTotal, "+0000000000000000.000");
            m_bDrTransitChkTotal = false;
            strcpy(m_szDrTransitChkTotal, "+0000000000000000.000");
            m_bDrAmLoanAdvTotal = false;
            strcpy(m_szDrAmLoanAdvTotal, "+0000000000000000.000");
            m_bDrReLoanAdvTotal = false;
            strcpy(m_szDrReLoanAdvTotal, "+0000000000000000.000");
            m_bDrShortName = false;
            strcpy(m_szDrShortName, "");
            m_bDrDateOpened = false;
            strcpy(m_szDrDateOpened, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bDrawerNumber = false;
            strcpy(m_szDrawerNumber, "00000");
            m_bCashIn = false;
            strcpy(m_szCashIn, "+0000000000000000.000");
            m_bCashOut = false;
            strcpy(m_szCashOut, "+0000000000000000.000");
            m_bEffectiveDate = false;
            strcpy(m_szEffectiveDate, "");
            m_bCtrCheckExemption = false;
            strcpy(m_szCtrCheckExemption, "");
            m_bCtrExemptStatus = false;
            strcpy(m_szCtrExemptStatus, "");
            m_bCtrInst = false;
            strcpy(m_szCtrInst, "");
            m_bCtrTin = false;
            strcpy(m_szCtrTin, "");
            m_bCommonExpansionArea = false;
            strcpy(m_szCommonExpansionArea, "");
            m_bCtl1 = false;
            strcpy(m_szCtl1, "");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "");
            m_bAcctNbr = false;
            strcpy(m_szAcctNbr, "");
            m_bType = false;
            strcpy(m_szType, "");
            m_bUserTranCd = false;
            strcpy(m_szUserTranCd, "");
            m_bAmount = false;
            strcpy(m_szAmount, "+0000000000000000.000");
            m_bCheckNumber = false;
            strcpy(m_szCheckNumber, "");
            m_bNewAccount = false;
            strcpy(m_szNewAccount, "");
            m_bWaiveFees = false;
            strcpy(m_szWaiveFees, "");
            m_bFeeAmount = false;
            strcpy(m_szFeeAmount, "+0000000000000000.000");
            m_bAvailableBalance = false;
            strcpy(m_szAvailableBalance, "+0000000000000000.000");
            m_bDrIlLoanAdvTotal = false;
            strcpy(m_szDrIlLoanAdvTotal, "+0000000000000000.000");
            m_bDrClLoanAdvTotal = false;
            strcpy(m_szDrClLoanAdvTotal, "+0000000000000000.000");
            m_bDrOnusCheckTotal = false;
            strcpy(m_szDrOnusCheckTotal, "+0000000000000000.000");
            m_bDrSavingsWdTotal = false;
            strcpy(m_szDrSavingsWdTotal, "+0000000000000000.000");
            m_bDrTravCheckTotal = false;
            strcpy(m_szDrTravCheckTotal, "+0000000000000000.000");
            m_bDrIraDistrTotal = false;
            strcpy(m_szDrIraDistrTotal, "+0000000000000000.000");
            m_bDrCdWdTotal = false;
            strcpy(m_szDrCdWdTotal, "+0000000000000000.000");
            m_bDrSavingsBndsTotal = false;
            strcpy(m_szDrSavingsBndsTotal, "+0000000000000000.000");
            m_bDrMiscTotal = false;
            strcpy(m_szDrMiscTotal, "+0000000000000000.000");
            m_bDrGlTotal = false;
            strcpy(m_szDrGlTotal, "+0000000000000000.000");
            m_bDrCashAdvanceTotal = false;
            strcpy(m_szDrCashAdvanceTotal, "+0000000000000000.000");
            m_bDrFoodStampsTotal = false;
            strcpy(m_szDrFoodStampsTotal, "+0000000000000000.000");
            m_bDrCouponsTotal = false;
            strcpy(m_szDrCouponsTotal, "+0000000000000000.000");
            m_bDrMoneyOrderTotal = false;
            strcpy(m_szDrMoneyOrderTotal, "+0000000000000000.000");
            m_bDrCashierChkTotal = false;
            strcpy(m_szDrCashierChkTotal, "+0000000000000000.000");
            m_bDrImpacsWdTotal = false;
            strcpy(m_szDrImpacsWdTotal, "+0000000000000000.000");
            m_bDrImTransferTotal = false;
            strcpy(m_szDrImTransferTotal, "+0000000000000000.000");
            m_bDrStTransferTotal = false;
            strcpy(m_szDrStTransferTotal, "+0000000000000000.000");
            m_bDrTransitChkTotal = false;
            strcpy(m_szDrTransitChkTotal, "+0000000000000000.000");
            m_bDrAmLoanAdvTotal = false;
            strcpy(m_szDrAmLoanAdvTotal, "+0000000000000000.000");
            m_bDrReLoanAdvTotal = false;
            strcpy(m_szDrReLoanAdvTotal, "+0000000000000000.000");
            m_bDrShortName = false;
            strcpy(m_szDrShortName, "");
            m_bDrDateOpened = false;
            strcpy(m_szDrDateOpened, "");
        }

        
        //    DRAWER NUMBER
        long lDrawerNumber () { return 5; };
        RWCString DrawerNumber (void)
        {
            return m_szDrawerNumber;
        }
        long DrawerNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrawerNumber, sizeof(m_szDrawerNumber), &m_bDrawerNumber);
        }
        
        //    CASH IN AMOUNT
        long lCashIn () { return 21; };
        RWCString CashIn (void)
        {
            return AceZeroSupp(m_szCashIn, &m_szSuppressBuff[0]);
        }
        RWCString CashInRaw (void)
        {
            return m_szCashIn;
        }
        long CashIn (const RWCString& rwc)
        {
            return SetString(rwc, m_szCashIn, sizeof(m_szCashIn), &m_bCashIn);
        }
        
        //    CASH OUT AMOUNT
        long lCashOut () { return 21; };
        RWCString CashOut (void)
        {
            return AceZeroSupp(m_szCashOut, &m_szSuppressBuff[0]);
        }
        RWCString CashOutRaw (void)
        {
            return m_szCashOut;
        }
        long CashOut (const RWCString& rwc)
        {
            return SetString(rwc, m_szCashOut, sizeof(m_szCashOut), &m_bCashOut);
        }
        
        //    TRANSACTION EFFECTIVE DATE
        long lEffectiveDate () { return 8; };
        RWCString EffectiveDate (void)
        {
            return m_szEffectiveDate;
        }
        long EffectiveDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szEffectiveDate, sizeof(m_szEffectiveDate), &m_bEffectiveDate);
        }
        
        //    CURRENCY TRANS PRT CHECK EXEMPTION FLAG
        long lCtrCheckExemption () { return 1; };
        RWCString CtrCheckExemption (void)
        {
            return m_szCtrCheckExemption;
        }
        long CtrCheckExemption (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtrCheckExemption, sizeof(m_szCtrCheckExemption), &m_bCtrCheckExemption);
        }
        
        //    CURRENCY TRANS RPT EXEMPT STATUS
        long lCtrExemptStatus () { return 1; };
        RWCString CtrExemptStatus (void)
        {
            return m_szCtrExemptStatus;
        }
        long CtrExemptStatus (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtrExemptStatus, sizeof(m_szCtrExemptStatus), &m_bCtrExemptStatus);
        }
        
        //    CURRENCY TRANS RPT INSTITUTION
        long lCtrInst () { return 4; };
        RWCString CtrInst (void)
        {
            return m_szCtrInst;
        }
        long CtrInst (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtrInst, sizeof(m_szCtrInst), &m_bCtrInst);
        }
        
        //    CURRENCY TRANS RPT TIN
        long lCtrTin () { return 9; };
        RWCString CtrTin (void)
        {
            return m_szCtrTin;
        }
        long CtrTin (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtrTin, sizeof(m_szCtrTin), &m_bCtrTin);
        }
        
        //    COMMON EXPANSION AREA
        long lCommonExpansionArea () { return 7; };
        RWCString CommonExpansionArea (void)
        {
            return m_szCommonExpansionArea;
        }
        long CommonExpansionArea (const RWCString& rwc)
        {
            return SetString(rwc, m_szCommonExpansionArea, sizeof(m_szCommonExpansionArea), &m_bCommonExpansionArea);
        }
        
        //    HIGHEST LEVEL OF CONTROL
        long lCtl1 () { return 2; };
        RWCString Ctl1 (void)
        {
            return m_szCtl1;
        }
        long Ctl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl1, sizeof(m_szCtl1), &m_bCtl1);
        }
        
        //    SECOND LEVEL OF CONTROL
        long lCtl2 () { return 3; };
        RWCString Ctl2 (void)
        {
            return m_szCtl2;
        }
        long Ctl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl2, sizeof(m_szCtl2), &m_bCtl2);
        }
        
        //    THIRD LEVEL OF CONTROL
        long lCtl3 () { return 3; };
        RWCString Ctl3 (void)
        {
            return m_szCtl3;
        }
        long Ctl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl3, sizeof(m_szCtl3), &m_bCtl3);
        }
        
        //    FOURTH LEVEL OF CONTROL
        long lCtl4 () { return 4; };
        RWCString Ctl4 (void)
        {
            return m_szCtl4;
        }
        long Ctl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl4, sizeof(m_szCtl4), &m_bCtl4);
        }
        
        //    CUSTOMER ACCOUNT NUMBER
        long lAcctNbr () { return 16; };
        RWCString AcctNbr (void)
        {
            return m_szAcctNbr;
        }
        long AcctNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcctNbr, sizeof(m_szAcctNbr), &m_bAcctNbr);
        }
        
        //    ACCOUNT TYPE
        long lType () { return 2; };
        RWCString Type (void)
        {
            return m_szType;
        }
        long Type (const RWCString& rwc)
        {
            return SetString(rwc, m_szType, sizeof(m_szType), &m_bType);
        }
        
        //    USER TRAN CODE
        long lUserTranCd () { return 4; };
        RWCString UserTranCd (void)
        {
            return m_szUserTranCd;
        }
        long UserTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserTranCd, sizeof(m_szUserTranCd), &m_bUserTranCd);
        }
        
        //    TRANSACTION AMOUNT
        long lAmount () { return 21; };
        RWCString Amount (void)
        {
            return AceZeroSupp(m_szAmount, &m_szSuppressBuff[0]);
        }
        RWCString AmountRaw (void)
        {
            return m_szAmount;
        }
        long Amount (const RWCString& rwc)
        {
            return SetString(rwc, m_szAmount, sizeof(m_szAmount), &m_bAmount);
        }
        
        //    CHECK NUMBER
        long lCheckNumber () { return 10; };
        RWCString CheckNumber (void)
        {
            return m_szCheckNumber;
        }
        long CheckNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szCheckNumber, sizeof(m_szCheckNumber), &m_bCheckNumber);
        }
        
        //    NEW ACCOUNT FLAG
        long lNewAccount () { return 1; };
        RWCString NewAccount (void)
        {
            return m_szNewAccount;
        }
        long NewAccount (const RWCString& rwc)
        {
            return SetString(rwc, m_szNewAccount, sizeof(m_szNewAccount), &m_bNewAccount);
        }
        
        //    WAIVE FEES FLAG
        long lWaiveFees () { return 1; };
        RWCString WaiveFees (void)
        {
            return m_szWaiveFees;
        }
        long WaiveFees (const RWCString& rwc)
        {
            return SetString(rwc, m_szWaiveFees, sizeof(m_szWaiveFees), &m_bWaiveFees);
        }
        
        //    FEE AMOUNT
        long lFeeAmount () { return 21; };
        RWCString FeeAmount (void)
        {
            return AceZeroSupp(m_szFeeAmount, &m_szSuppressBuff[0]);
        }
        RWCString FeeAmountRaw (void)
        {
            return m_szFeeAmount;
        }
        long FeeAmount (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeAmount, sizeof(m_szFeeAmount), &m_bFeeAmount);
        }
        
        //    AVAILABLE BALANCE
        long lAvailableBalance () { return 21; };
        RWCString AvailableBalance (void)
        {
            return AceZeroSupp(m_szAvailableBalance, &m_szSuppressBuff[0]);
        }
        RWCString AvailableBalanceRaw (void)
        {
            return m_szAvailableBalance;
        }
        long AvailableBalance (const RWCString& rwc)
        {
            return SetString(rwc, m_szAvailableBalance, sizeof(m_szAvailableBalance), &m_bAvailableBalance);
        }
        
        //    DEBIT IL LOAN ADVANCE TOTAL
        long lDrIlLoanAdvTotal () { return 21; };
        RWCString DrIlLoanAdvTotal (void)
        {
            return AceZeroSupp(m_szDrIlLoanAdvTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrIlLoanAdvTotalRaw (void)
        {
            return m_szDrIlLoanAdvTotal;
        }
        long DrIlLoanAdvTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrIlLoanAdvTotal, sizeof(m_szDrIlLoanAdvTotal), &m_bDrIlLoanAdvTotal);
        }
        
        //    DEBIT CL LOAN ADVANCE TOTAL
        long lDrClLoanAdvTotal () { return 21; };
        RWCString DrClLoanAdvTotal (void)
        {
            return AceZeroSupp(m_szDrClLoanAdvTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrClLoanAdvTotalRaw (void)
        {
            return m_szDrClLoanAdvTotal;
        }
        long DrClLoanAdvTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrClLoanAdvTotal, sizeof(m_szDrClLoanAdvTotal), &m_bDrClLoanAdvTotal);
        }
        
        //    DEBIT ONUS CHECK TOTAL
        long lDrOnusCheckTotal () { return 21; };
        RWCString DrOnusCheckTotal (void)
        {
            return AceZeroSupp(m_szDrOnusCheckTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrOnusCheckTotalRaw (void)
        {
            return m_szDrOnusCheckTotal;
        }
        long DrOnusCheckTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrOnusCheckTotal, sizeof(m_szDrOnusCheckTotal), &m_bDrOnusCheckTotal);
        }
        
        //    DEBIT SAVINGS WITHDRAWAL TOTAL
        long lDrSavingsWdTotal () { return 21; };
        RWCString DrSavingsWdTotal (void)
        {
            return AceZeroSupp(m_szDrSavingsWdTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrSavingsWdTotalRaw (void)
        {
            return m_szDrSavingsWdTotal;
        }
        long DrSavingsWdTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrSavingsWdTotal, sizeof(m_szDrSavingsWdTotal), &m_bDrSavingsWdTotal);
        }
        
        //    DEBIT TRAVLERS CHECKS TOTAL
        long lDrTravCheckTotal () { return 21; };
        RWCString DrTravCheckTotal (void)
        {
            return AceZeroSupp(m_szDrTravCheckTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrTravCheckTotalRaw (void)
        {
            return m_szDrTravCheckTotal;
        }
        long DrTravCheckTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrTravCheckTotal, sizeof(m_szDrTravCheckTotal), &m_bDrTravCheckTotal);
        }
        
        //    DEBIT IRA DISTRIBUTION TOTAL
        long lDrIraDistrTotal () { return 21; };
        RWCString DrIraDistrTotal (void)
        {
            return AceZeroSupp(m_szDrIraDistrTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrIraDistrTotalRaw (void)
        {
            return m_szDrIraDistrTotal;
        }
        long DrIraDistrTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrIraDistrTotal, sizeof(m_szDrIraDistrTotal), &m_bDrIraDistrTotal);
        }
        
        //    DEBIT CD WITHDRAWAL TOTAL
        long lDrCdWdTotal () { return 21; };
        RWCString DrCdWdTotal (void)
        {
            return AceZeroSupp(m_szDrCdWdTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrCdWdTotalRaw (void)
        {
            return m_szDrCdWdTotal;
        }
        long DrCdWdTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrCdWdTotal, sizeof(m_szDrCdWdTotal), &m_bDrCdWdTotal);
        }
        
        //    DEBIT SAVINGS BONDS TOTAL
        long lDrSavingsBndsTotal () { return 21; };
        RWCString DrSavingsBndsTotal (void)
        {
            return AceZeroSupp(m_szDrSavingsBndsTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrSavingsBndsTotalRaw (void)
        {
            return m_szDrSavingsBndsTotal;
        }
        long DrSavingsBndsTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrSavingsBndsTotal, sizeof(m_szDrSavingsBndsTotal), &m_bDrSavingsBndsTotal);
        }
        
        //    DEBIT MISCELLANEOUS TOTAL
        long lDrMiscTotal () { return 21; };
        RWCString DrMiscTotal (void)
        {
            return AceZeroSupp(m_szDrMiscTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrMiscTotalRaw (void)
        {
            return m_szDrMiscTotal;
        }
        long DrMiscTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrMiscTotal, sizeof(m_szDrMiscTotal), &m_bDrMiscTotal);
        }
        
        //    DEBIT GENERAL LEGDER TOTAL
        long lDrGlTotal () { return 21; };
        RWCString DrGlTotal (void)
        {
            return AceZeroSupp(m_szDrGlTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrGlTotalRaw (void)
        {
            return m_szDrGlTotal;
        }
        long DrGlTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrGlTotal, sizeof(m_szDrGlTotal), &m_bDrGlTotal);
        }
        
        //    DEBIT CASH ADVANCE TOTAL
        long lDrCashAdvanceTotal () { return 21; };
        RWCString DrCashAdvanceTotal (void)
        {
            return AceZeroSupp(m_szDrCashAdvanceTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrCashAdvanceTotalRaw (void)
        {
            return m_szDrCashAdvanceTotal;
        }
        long DrCashAdvanceTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrCashAdvanceTotal, sizeof(m_szDrCashAdvanceTotal), &m_bDrCashAdvanceTotal);
        }
        
        //    DEBIT FOOD STAMPS TOTAL
        long lDrFoodStampsTotal () { return 21; };
        RWCString DrFoodStampsTotal (void)
        {
            return AceZeroSupp(m_szDrFoodStampsTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrFoodStampsTotalRaw (void)
        {
            return m_szDrFoodStampsTotal;
        }
        long DrFoodStampsTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrFoodStampsTotal, sizeof(m_szDrFoodStampsTotal), &m_bDrFoodStampsTotal);
        }
        
        //    DEBIT COUPONS TOTAL
        long lDrCouponsTotal () { return 21; };
        RWCString DrCouponsTotal (void)
        {
            return AceZeroSupp(m_szDrCouponsTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrCouponsTotalRaw (void)
        {
            return m_szDrCouponsTotal;
        }
        long DrCouponsTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrCouponsTotal, sizeof(m_szDrCouponsTotal), &m_bDrCouponsTotal);
        }
        
        //    DEBIT MONEY ORDER TOTAL
        long lDrMoneyOrderTotal () { return 21; };
        RWCString DrMoneyOrderTotal (void)
        {
            return AceZeroSupp(m_szDrMoneyOrderTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrMoneyOrderTotalRaw (void)
        {
            return m_szDrMoneyOrderTotal;
        }
        long DrMoneyOrderTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrMoneyOrderTotal, sizeof(m_szDrMoneyOrderTotal), &m_bDrMoneyOrderTotal);
        }
        
        //    DEBIT CASHIERS CHECKS TOTAL
        long lDrCashierChkTotal () { return 21; };
        RWCString DrCashierChkTotal (void)
        {
            return AceZeroSupp(m_szDrCashierChkTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrCashierChkTotalRaw (void)
        {
            return m_szDrCashierChkTotal;
        }
        long DrCashierChkTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrCashierChkTotal, sizeof(m_szDrCashierChkTotal), &m_bDrCashierChkTotal);
        }
        
        //    DEBIT IMPACS WITHDRAWAL TOTAL
        long lDrImpacsWdTotal () { return 21; };
        RWCString DrImpacsWdTotal (void)
        {
            return AceZeroSupp(m_szDrImpacsWdTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrImpacsWdTotalRaw (void)
        {
            return m_szDrImpacsWdTotal;
        }
        long DrImpacsWdTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrImpacsWdTotal, sizeof(m_szDrImpacsWdTotal), &m_bDrImpacsWdTotal);
        }
        
        //    DEBIT IMPACS TRANSFER TOTAL
        long lDrImTransferTotal () { return 21; };
        RWCString DrImTransferTotal (void)
        {
            return AceZeroSupp(m_szDrImTransferTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrImTransferTotalRaw (void)
        {
            return m_szDrImTransferTotal;
        }
        long DrImTransferTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrImTransferTotal, sizeof(m_szDrImTransferTotal), &m_bDrImTransferTotal);
        }
        
        //    DEBIT SAVINGS TRANSFER TOTAL
        long lDrStTransferTotal () { return 21; };
        RWCString DrStTransferTotal (void)
        {
            return AceZeroSupp(m_szDrStTransferTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrStTransferTotalRaw (void)
        {
            return m_szDrStTransferTotal;
        }
        long DrStTransferTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrStTransferTotal, sizeof(m_szDrStTransferTotal), &m_bDrStTransferTotal);
        }
        
        //    DEBIT TRANSIT CHECK TOTAL
        long lDrTransitChkTotal () { return 21; };
        RWCString DrTransitChkTotal (void)
        {
            return AceZeroSupp(m_szDrTransitChkTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrTransitChkTotalRaw (void)
        {
            return m_szDrTransitChkTotal;
        }
        long DrTransitChkTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrTransitChkTotal, sizeof(m_szDrTransitChkTotal), &m_bDrTransitChkTotal);
        }
        
        //    DEBIT AM LOAN ADVANCE TOTAL
        long lDrAmLoanAdvTotal () { return 21; };
        RWCString DrAmLoanAdvTotal (void)
        {
            return AceZeroSupp(m_szDrAmLoanAdvTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrAmLoanAdvTotalRaw (void)
        {
            return m_szDrAmLoanAdvTotal;
        }
        long DrAmLoanAdvTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrAmLoanAdvTotal, sizeof(m_szDrAmLoanAdvTotal), &m_bDrAmLoanAdvTotal);
        }
        
        //    DEBIT RE LOAN ADVANCE TOTAL
        long lDrReLoanAdvTotal () { return 21; };
        RWCString DrReLoanAdvTotal (void)
        {
            return AceZeroSupp(m_szDrReLoanAdvTotal, &m_szSuppressBuff[0]);
        }
        RWCString DrReLoanAdvTotalRaw (void)
        {
            return m_szDrReLoanAdvTotal;
        }
        long DrReLoanAdvTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrReLoanAdvTotal, sizeof(m_szDrReLoanAdvTotal), &m_bDrReLoanAdvTotal);
        }
        
        //    SHORT NAME USED IN REPORTING AND ALPHA SORTING
        long lDrShortName () { return 13; };
        RWCString DrShortName (void)
        {
            return m_szDrShortName;
        }
        long DrShortName (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrShortName, sizeof(m_szDrShortName), &m_bDrShortName);
        }
        
        //    DATE OPENED CCYYMMDD
        long lDrDateOpened () { return 8; };
        RWCString DrDateOpened (void)
        {
            return m_szDrDateOpened;
        }
        long DrDateOpened (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrDateOpened, sizeof(m_szDrDateOpened), &m_bDrDateOpened);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bDrawerNumber) return true;
            if (m_bCashIn) return true;
            if (m_bCashOut) return true;
            if (m_bEffectiveDate) return true;
            if (m_bCtrCheckExemption) return true;
            if (m_bCtrExemptStatus) return true;
            if (m_bCtrInst) return true;
            if (m_bCtrTin) return true;
            if (m_bCommonExpansionArea) return true;
            if (m_bCtl1) return true;
            if (m_bCtl2) return true;
            if (m_bCtl3) return true;
            if (m_bCtl4) return true;
            if (m_bAcctNbr) return true;
            if (m_bType) return true;
            if (m_bUserTranCd) return true;
            if (m_bAmount) return true;
            if (m_bCheckNumber) return true;
            if (m_bNewAccount) return true;
            if (m_bWaiveFees) return true;
            if (m_bFeeAmount) return true;
            if (m_bAvailableBalance) return true;
            if (m_bDrIlLoanAdvTotal) return true;
            if (m_bDrClLoanAdvTotal) return true;
            if (m_bDrOnusCheckTotal) return true;
            if (m_bDrSavingsWdTotal) return true;
            if (m_bDrTravCheckTotal) return true;
            if (m_bDrIraDistrTotal) return true;
            if (m_bDrCdWdTotal) return true;
            if (m_bDrSavingsBndsTotal) return true;
            if (m_bDrMiscTotal) return true;
            if (m_bDrGlTotal) return true;
            if (m_bDrCashAdvanceTotal) return true;
            if (m_bDrFoodStampsTotal) return true;
            if (m_bDrCouponsTotal) return true;
            if (m_bDrMoneyOrderTotal) return true;
            if (m_bDrCashierChkTotal) return true;
            if (m_bDrImpacsWdTotal) return true;
            if (m_bDrImTransferTotal) return true;
            if (m_bDrStTransferTotal) return true;
            if (m_bDrTransitChkTotal) return true;
            if (m_bDrAmLoanAdvTotal) return true;
            if (m_bDrReLoanAdvTotal) return true;
            if (m_bDrShortName) return true;
            if (m_bDrDateOpened) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TWQKTRIN", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "DrawerNumber", m_szDrawerNumber, &m_bDrawerNumber);
                AddXMLField(pSess, "CashIn", m_szCashIn, &m_bCashIn);
                AddXMLField(pSess, "CashOut", m_szCashOut, &m_bCashOut);
                AddXMLField(pSess, "EffectiveDate", m_szEffectiveDate, &m_bEffectiveDate);
                AddXMLField(pSess, "CtrCheckExemption", m_szCtrCheckExemption, &m_bCtrCheckExemption);
                AddXMLField(pSess, "CtrExemptStatus", m_szCtrExemptStatus, &m_bCtrExemptStatus);
                AddXMLField(pSess, "CtrInst", m_szCtrInst, &m_bCtrInst);
                AddXMLField(pSess, "CtrTin", m_szCtrTin, &m_bCtrTin);
                AddXMLField(pSess, "CommonExpansionArea", m_szCommonExpansionArea, &m_bCommonExpansionArea);
                AddXMLField(pSess, "Ctl1", m_szCtl1, &m_bCtl1);
                AddXMLField(pSess, "Ctl2", m_szCtl2, &m_bCtl2);
                AddXMLField(pSess, "Ctl3", m_szCtl3, &m_bCtl3);
                AddXMLField(pSess, "Ctl4", m_szCtl4, &m_bCtl4);
                AddXMLField(pSess, "AcctNbr", m_szAcctNbr, &m_bAcctNbr);
                AddXMLField(pSess, "Type", m_szType, &m_bType);
                AddXMLField(pSess, "UserTranCd", m_szUserTranCd, &m_bUserTranCd);
                AddXMLField(pSess, "Amount", m_szAmount, &m_bAmount);
                AddXMLField(pSess, "CheckNumber", m_szCheckNumber, &m_bCheckNumber);
                AddXMLField(pSess, "NewAccount", m_szNewAccount, &m_bNewAccount);
                AddXMLField(pSess, "WaiveFees", m_szWaiveFees, &m_bWaiveFees);
                AddXMLField(pSess, "FeeAmount", m_szFeeAmount, &m_bFeeAmount);
                AddXMLField(pSess, "AvailableBalance", m_szAvailableBalance, &m_bAvailableBalance);
                AddXMLField(pSess, "DrIlLoanAdvTotal", m_szDrIlLoanAdvTotal, &m_bDrIlLoanAdvTotal);
                AddXMLField(pSess, "DrClLoanAdvTotal", m_szDrClLoanAdvTotal, &m_bDrClLoanAdvTotal);
                AddXMLField(pSess, "DrOnusCheckTotal", m_szDrOnusCheckTotal, &m_bDrOnusCheckTotal);
                AddXMLField(pSess, "DrSavingsWdTotal", m_szDrSavingsWdTotal, &m_bDrSavingsWdTotal);
                AddXMLField(pSess, "DrTravCheckTotal", m_szDrTravCheckTotal, &m_bDrTravCheckTotal);
                AddXMLField(pSess, "DrIraDistrTotal", m_szDrIraDistrTotal, &m_bDrIraDistrTotal);
                AddXMLField(pSess, "DrCdWdTotal", m_szDrCdWdTotal, &m_bDrCdWdTotal);
                AddXMLField(pSess, "DrSavingsBndsTotal", m_szDrSavingsBndsTotal, &m_bDrSavingsBndsTotal);
                AddXMLField(pSess, "DrMiscTotal", m_szDrMiscTotal, &m_bDrMiscTotal);
                AddXMLField(pSess, "DrGlTotal", m_szDrGlTotal, &m_bDrGlTotal);
                AddXMLField(pSess, "DrCashAdvanceTotal", m_szDrCashAdvanceTotal, &m_bDrCashAdvanceTotal);
                AddXMLField(pSess, "DrFoodStampsTotal", m_szDrFoodStampsTotal, &m_bDrFoodStampsTotal);
                AddXMLField(pSess, "DrCouponsTotal", m_szDrCouponsTotal, &m_bDrCouponsTotal);
                AddXMLField(pSess, "DrMoneyOrderTotal", m_szDrMoneyOrderTotal, &m_bDrMoneyOrderTotal);
                AddXMLField(pSess, "DrCashierChkTotal", m_szDrCashierChkTotal, &m_bDrCashierChkTotal);
                AddXMLField(pSess, "DrImpacsWdTotal", m_szDrImpacsWdTotal, &m_bDrImpacsWdTotal);
                AddXMLField(pSess, "DrImTransferTotal", m_szDrImTransferTotal, &m_bDrImTransferTotal);
                AddXMLField(pSess, "DrStTransferTotal", m_szDrStTransferTotal, &m_bDrStTransferTotal);
                AddXMLField(pSess, "DrTransitChkTotal", m_szDrTransitChkTotal, &m_bDrTransitChkTotal);
                AddXMLField(pSess, "DrAmLoanAdvTotal", m_szDrAmLoanAdvTotal, &m_bDrAmLoanAdvTotal);
                AddXMLField(pSess, "DrReLoanAdvTotal", m_szDrReLoanAdvTotal, &m_bDrReLoanAdvTotal);
                AddXMLField(pSess, "DrShortName", m_szDrShortName, &m_bDrShortName);
                AddXMLField(pSess, "DrDateOpened", m_szDrDateOpened, &m_bDrDateOpened);
                AddXMLCloseRecord(pSess, "TWQKTRIN");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TWQKTRIN", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "DrawerNumber", m_szDrawerNumber);
                GetXMLField(pSess, "CashIn", m_szCashIn);
                GetXMLField(pSess, "CashOut", m_szCashOut);
                GetXMLField(pSess, "EffectiveDate", m_szEffectiveDate);
                GetXMLField(pSess, "CtrCheckExemption", m_szCtrCheckExemption);
                GetXMLField(pSess, "CtrExemptStatus", m_szCtrExemptStatus);
                GetXMLField(pSess, "CtrInst", m_szCtrInst);
                GetXMLField(pSess, "CtrTin", m_szCtrTin);
                GetXMLField(pSess, "CommonExpansionArea", m_szCommonExpansionArea);
                GetXMLField(pSess, "Ctl1", m_szCtl1);
                GetXMLField(pSess, "Ctl2", m_szCtl2);
                GetXMLField(pSess, "Ctl3", m_szCtl3);
                GetXMLField(pSess, "Ctl4", m_szCtl4);
                GetXMLField(pSess, "AcctNbr", m_szAcctNbr);
                GetXMLField(pSess, "Type", m_szType);
                GetXMLField(pSess, "UserTranCd", m_szUserTranCd);
                GetXMLField(pSess, "Amount", m_szAmount);
                GetXMLField(pSess, "CheckNumber", m_szCheckNumber);
                GetXMLField(pSess, "NewAccount", m_szNewAccount);
                GetXMLField(pSess, "WaiveFees", m_szWaiveFees);
                GetXMLField(pSess, "FeeAmount", m_szFeeAmount);
                GetXMLField(pSess, "AvailableBalance", m_szAvailableBalance);
                GetXMLField(pSess, "DrIlLoanAdvTotal", m_szDrIlLoanAdvTotal);
                GetXMLField(pSess, "DrClLoanAdvTotal", m_szDrClLoanAdvTotal);
                GetXMLField(pSess, "DrOnusCheckTotal", m_szDrOnusCheckTotal);
                GetXMLField(pSess, "DrSavingsWdTotal", m_szDrSavingsWdTotal);
                GetXMLField(pSess, "DrTravCheckTotal", m_szDrTravCheckTotal);
                GetXMLField(pSess, "DrIraDistrTotal", m_szDrIraDistrTotal);
                GetXMLField(pSess, "DrCdWdTotal", m_szDrCdWdTotal);
                GetXMLField(pSess, "DrSavingsBndsTotal", m_szDrSavingsBndsTotal);
                GetXMLField(pSess, "DrMiscTotal", m_szDrMiscTotal);
                GetXMLField(pSess, "DrGlTotal", m_szDrGlTotal);
                GetXMLField(pSess, "DrCashAdvanceTotal", m_szDrCashAdvanceTotal);
                GetXMLField(pSess, "DrFoodStampsTotal", m_szDrFoodStampsTotal);
                GetXMLField(pSess, "DrCouponsTotal", m_szDrCouponsTotal);
                GetXMLField(pSess, "DrMoneyOrderTotal", m_szDrMoneyOrderTotal);
                GetXMLField(pSess, "DrCashierChkTotal", m_szDrCashierChkTotal);
                GetXMLField(pSess, "DrImpacsWdTotal", m_szDrImpacsWdTotal);
                GetXMLField(pSess, "DrImTransferTotal", m_szDrImTransferTotal);
                GetXMLField(pSess, "DrStTransferTotal", m_szDrStTransferTotal);
                GetXMLField(pSess, "DrTransitChkTotal", m_szDrTransitChkTotal);
                GetXMLField(pSess, "DrAmLoanAdvTotal", m_szDrAmLoanAdvTotal);
                GetXMLField(pSess, "DrReLoanAdvTotal", m_szDrReLoanAdvTotal);
                GetXMLField(pSess, "DrShortName", m_szDrShortName);
                GetXMLField(pSess, "DrDateOpened", m_szDrDateOpened);
                CloseXMLRecord(pSess, "TWQKTRIN");
            };
        }
    };

    AsdTWQKTRIN CTWQKTRIN;
    AsdTWQKTRIN *TWQKTRIN;
    
    //**************** End AsdTWQKTRIN Definition ****************

    
    //**************** Start AsdTWQKTFEE Definition ****************
    //                 QUICK DEBIT/CREDIT FEE DAG FOR CLIENT/SERVER APPS           
    
    //    TWQKTFEE.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 03/10/03 12:00:26
    class AsdTWQKTFEE
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bFeeType1;
        char      m_szFeeType1[2+1];
        bool      m_bFeeAmount1;
        char      m_szFeeAmount1[21+1];
        bool      m_bFeeType2;
        char      m_szFeeType2[2+1];
        bool      m_bFeeAmount2;
        char      m_szFeeAmount2[21+1];
        bool      m_bFeeType3;
        char      m_szFeeType3[2+1];
        bool      m_bFeeAmount3;
        char      m_szFeeAmount3[21+1];
        bool      m_bFeeType4;
        char      m_szFeeType4[2+1];
        bool      m_bFeeAmount4;
        char      m_szFeeAmount4[21+1];
    
      public:
        long      m_lIndex;

        AsdTWQKTFEE ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bFeeType1 = false;
            strcpy(m_szFeeType1, "");
            m_bFeeAmount1 = false;
            strcpy(m_szFeeAmount1, "+0000000000000000.000");
            m_bFeeType2 = false;
            strcpy(m_szFeeType2, "");
            m_bFeeAmount2 = false;
            strcpy(m_szFeeAmount2, "+0000000000000000.000");
            m_bFeeType3 = false;
            strcpy(m_szFeeType3, "");
            m_bFeeAmount3 = false;
            strcpy(m_szFeeAmount3, "+0000000000000000.000");
            m_bFeeType4 = false;
            strcpy(m_szFeeType4, "");
            m_bFeeAmount4 = false;
            strcpy(m_szFeeAmount4, "+0000000000000000.000");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bFeeType1 = false;
            strcpy(m_szFeeType1, "");
            m_bFeeAmount1 = false;
            strcpy(m_szFeeAmount1, "+0000000000000000.000");
            m_bFeeType2 = false;
            strcpy(m_szFeeType2, "");
            m_bFeeAmount2 = false;
            strcpy(m_szFeeAmount2, "+0000000000000000.000");
            m_bFeeType3 = false;
            strcpy(m_szFeeType3, "");
            m_bFeeAmount3 = false;
            strcpy(m_szFeeAmount3, "+0000000000000000.000");
            m_bFeeType4 = false;
            strcpy(m_szFeeType4, "");
            m_bFeeAmount4 = false;
            strcpy(m_szFeeAmount4, "+0000000000000000.000");
        }

        
        //    FEE TYPE-1
        long lFeeType1 () { return 2; };
        RWCString FeeType1 (void)
        {
            return m_szFeeType1;
        }
        long FeeType1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeType1, sizeof(m_szFeeType1), &m_bFeeType1);
        }
        
        //    FEE AMOUNT 1
        long lFeeAmount1 () { return 21; };
        RWCString FeeAmount1 (void)
        {
            return AceZeroSupp(m_szFeeAmount1, &m_szSuppressBuff[0]);
        }
        RWCString FeeAmount1Raw (void)
        {
            return m_szFeeAmount1;
        }
        long FeeAmount1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeAmount1, sizeof(m_szFeeAmount1), &m_bFeeAmount1);
        }
        
        //    FEE TYPE-2
        long lFeeType2 () { return 2; };
        RWCString FeeType2 (void)
        {
            return m_szFeeType2;
        }
        long FeeType2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeType2, sizeof(m_szFeeType2), &m_bFeeType2);
        }
        
        //    FEE AMOUNT 2
        long lFeeAmount2 () { return 21; };
        RWCString FeeAmount2 (void)
        {
            return AceZeroSupp(m_szFeeAmount2, &m_szSuppressBuff[0]);
        }
        RWCString FeeAmount2Raw (void)
        {
            return m_szFeeAmount2;
        }
        long FeeAmount2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeAmount2, sizeof(m_szFeeAmount2), &m_bFeeAmount2);
        }
        
        //    FEE TYPE-3
        long lFeeType3 () { return 2; };
        RWCString FeeType3 (void)
        {
            return m_szFeeType3;
        }
        long FeeType3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeType3, sizeof(m_szFeeType3), &m_bFeeType3);
        }
        
        //    FEE AMOUNT 3
        long lFeeAmount3 () { return 21; };
        RWCString FeeAmount3 (void)
        {
            return AceZeroSupp(m_szFeeAmount3, &m_szSuppressBuff[0]);
        }
        RWCString FeeAmount3Raw (void)
        {
            return m_szFeeAmount3;
        }
        long FeeAmount3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeAmount3, sizeof(m_szFeeAmount3), &m_bFeeAmount3);
        }
        
        //    FEE TYPE-4
        long lFeeType4 () { return 2; };
        RWCString FeeType4 (void)
        {
            return m_szFeeType4;
        }
        long FeeType4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeType4, sizeof(m_szFeeType4), &m_bFeeType4);
        }
        
        //    FEE AMOUNT 4
        long lFeeAmount4 () { return 21; };
        RWCString FeeAmount4 (void)
        {
            return AceZeroSupp(m_szFeeAmount4, &m_szSuppressBuff[0]);
        }
        RWCString FeeAmount4Raw (void)
        {
            return m_szFeeAmount4;
        }
        long FeeAmount4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFeeAmount4, sizeof(m_szFeeAmount4), &m_bFeeAmount4);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bFeeType1) return true;
            if (m_bFeeAmount1) return true;
            if (m_bFeeType2) return true;
            if (m_bFeeAmount2) return true;
            if (m_bFeeType3) return true;
            if (m_bFeeAmount3) return true;
            if (m_bFeeType4) return true;
            if (m_bFeeAmount4) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                if (m_szFeeAmount1[0]=='-') m_szFeeAmount1[0] = ' ';
                if (m_szFeeAmount2[0]=='-') m_szFeeAmount2[0] = ' ';
                if (m_szFeeAmount3[0]=='-') m_szFeeAmount3[0] = ' ';
                if (m_szFeeAmount4[0]=='-') m_szFeeAmount4[0] = ' ';
                
                AddXMLRecord(pSess, "TWQKTFEE", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "FeeType1", m_szFeeType1, &m_bFeeType1);
                AddXMLField(pSess, "FeeAmount1", m_szFeeAmount1, &m_bFeeAmount1);
                AddXMLField(pSess, "FeeType2", m_szFeeType2, &m_bFeeType2);
                AddXMLField(pSess, "FeeAmount2", m_szFeeAmount2, &m_bFeeAmount2);
                AddXMLField(pSess, "FeeType3", m_szFeeType3, &m_bFeeType3);
                AddXMLField(pSess, "FeeAmount3", m_szFeeAmount3, &m_bFeeAmount3);
                AddXMLField(pSess, "FeeType4", m_szFeeType4, &m_bFeeType4);
                AddXMLField(pSess, "FeeAmount4", m_szFeeAmount4, &m_bFeeAmount4);
                AddXMLCloseRecord(pSess, "TWQKTFEE");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TWQKTFEE", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "FeeType1", m_szFeeType1);
                GetXMLField(pSess, "FeeAmount1", m_szFeeAmount1);
                GetXMLField(pSess, "FeeType2", m_szFeeType2);
                GetXMLField(pSess, "FeeAmount2", m_szFeeAmount2);
                GetXMLField(pSess, "FeeType3", m_szFeeType3);
                GetXMLField(pSess, "FeeAmount3", m_szFeeAmount3);
                GetXMLField(pSess, "FeeType4", m_szFeeType4);
                GetXMLField(pSess, "FeeAmount4", m_szFeeAmount4);
                CloseXMLRecord(pSess, "TWQKTFEE");
            };
        }
    };

    AsdTWQKTFEE CTWQKTFEE;
    AsdTWQKTFEE *TWQKTFEE;
    
    //**************** End AsdTWQKTFEE Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdTWQKTRANData Definition ****************

typedef AsdTWQKTRANData *LPTWQKTRAN;
typedef AsdTWQKTRANData::AsdTSHeader *LPTWQKTRAN_TSHeader;
typedef AsdTWQKTRANData::AsdTWQKTRIN *LPTWQKTRAN_TWQKTRIN;
typedef AsdTWQKTRANData::AsdTWQKTFEE *LPTWQKTRAN_TWQKTFEE;
typedef AsdTWQKTRANData::AsdTSMDA *LPTWQKTRAN_TSMDA;
typedef AsdTWQKTRANData::AsdTSMDA::AsdMdaTrmMsg *LPTWQKTRAN_TSMDA_MdaTrmMsg;
typedef AsdTWQKTRANData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPTWQKTRAN_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdTWQKTRANData_H

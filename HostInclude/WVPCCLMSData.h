#ifndef AsdWVPCCLMSData_H
#define AsdWVPCCLMSData_H

#include <stdlib.h>
#ifdef  AsdWVPCCLMS_INTEGRITY_STRING
#undef  AsdWVPCCLMS_INTEGRITY_STRING
#endif
#define AsdWVPCCLMS_INTEGRITY_STRING        ""

#ifdef  AsdWVPCCLMS_CRC_STRING
#undef  AsdWVPCCLMS_CRC_STRING
#endif
#define AsdWVPCCLMS_CRC_STRING "751706805"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdWVPCCLMSData Definition ****************
//                 XL Account Detail

//                 WVPCCLMSData.h generated by AceGen2 ver. 2.5.09

class AsdWVPCCLMSData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdWVPCCLMSData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "WVPCCLMS.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdWVPCCLMS_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        WVCLTR00 = &CWVCLTR00;
        WVCLACCT = &CWVCLACCT;
        TSMDA = &CTSMDA;
    }

    ~AsdWVPCCLMSData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CWVCLTR00.Reinit();
            CWVCLACCT.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdWVPCCLMS_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCCLMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVCLTR00.Save(&m_Sess);
        CWVCLACCT.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCCLMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVCLTR00.Load(&m_Sess);
                        CWVCLACCT.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCCLMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCCLMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVCLTR00.Save(&m_Sess);
        CWVCLACCT.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCCLMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVCLTR00.Load(&m_Sess);
                        CWVCLACCT.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCCLMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCCLMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdWVCLTR00 Definition ****************
    //                 CSW INTERFACE WITH CL - INPUT                               
    
    //    WVCLTR00.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:32
    class AsdWVCLTR00
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bTrnBk;
        char      m_szTrnBk[2+1];
        bool      m_bTrnCtl2;
        char      m_szTrnCtl2[3+1];
        bool      m_bTrnCtl3;
        char      m_szTrnCtl3[3+1];
        bool      m_bTrnDlr;
        char      m_szTrnDlr[7+1];
        bool      m_bTrnLine;
        char      m_szTrnLine[2+1];
        bool      m_bTrnClass;
        char      m_szTrnClass[1+1];
        bool      m_bTrnNote;
        char      m_szTrnNote[8+1];
        bool      m_bTrnNoteSeq;
        char      m_szTrnNoteSeq[3+1];
        bool      m_bTrnPartSeq;
        char      m_szTrnPartSeq[2+1];
        bool      m_bTrnSeq;
        char      m_szTrnSeq[6+1];
        bool      m_bBankNo;
        char      m_szBankNo[2+1];
        bool      m_bControl2;
        char      m_szControl2[3+1];
        bool      m_bControl3;
        char      m_szControl3[3+1];
        bool      m_bRefCust;
        char      m_szRefCust[10+1];
        bool      m_bSecondNoteRead;
        char      m_szSecondNoteRead[1+1];
        bool      m_bKeyedNoteRead;
        char      m_szKeyedNoteRead[1+1];
        bool      m_bTrnAmountLow;
        char      m_szTrnAmountLow[17+1];
        bool      m_bTrnAmountHigh;
        char      m_szTrnAmountHigh[17+1];
        bool      m_bTrnLowDate;
        char      m_szTrnLowDate[8+1];
        bool      m_bTrnHighDate;
        char      m_szTrnHighDate[8+1];
        bool      m_bFill0;
        char      m_szFill0[30+1];
    
      public:
        long      m_lIndex;

        AsdWVCLTR00 ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bTrnBk = false;
            strcpy(m_szTrnBk, "");
            m_bTrnCtl2 = false;
            strcpy(m_szTrnCtl2, "");
            m_bTrnCtl3 = false;
            strcpy(m_szTrnCtl3, "");
            m_bTrnDlr = false;
            strcpy(m_szTrnDlr, "");
            m_bTrnLine = false;
            strcpy(m_szTrnLine, "");
            m_bTrnClass = false;
            strcpy(m_szTrnClass, "");
            m_bTrnNote = false;
            strcpy(m_szTrnNote, "");
            m_bTrnNoteSeq = false;
            strcpy(m_szTrnNoteSeq, "");
            m_bTrnPartSeq = false;
            strcpy(m_szTrnPartSeq, "");
            m_bTrnSeq = false;
            strcpy(m_szTrnSeq, "+00000");
            m_bBankNo = false;
            strcpy(m_szBankNo, "");
            m_bControl2 = false;
            strcpy(m_szControl2, "");
            m_bControl3 = false;
            strcpy(m_szControl3, "");
            m_bRefCust = false;
            strcpy(m_szRefCust, "");
            m_bSecondNoteRead = false;
            strcpy(m_szSecondNoteRead, "");
            m_bKeyedNoteRead = false;
            strcpy(m_szKeyedNoteRead, "");
            m_bTrnAmountLow = false;
            strcpy(m_szTrnAmountLow, "+0000000000000.00");
            m_bTrnAmountHigh = false;
            strcpy(m_szTrnAmountHigh, "+0000000000000.00");
            m_bTrnLowDate = false;
            strcpy(m_szTrnLowDate, "");
            m_bTrnHighDate = false;
            strcpy(m_szTrnHighDate, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bTrnBk = false;
            strcpy(m_szTrnBk, "");
            m_bTrnCtl2 = false;
            strcpy(m_szTrnCtl2, "");
            m_bTrnCtl3 = false;
            strcpy(m_szTrnCtl3, "");
            m_bTrnDlr = false;
            strcpy(m_szTrnDlr, "");
            m_bTrnLine = false;
            strcpy(m_szTrnLine, "");
            m_bTrnClass = false;
            strcpy(m_szTrnClass, "");
            m_bTrnNote = false;
            strcpy(m_szTrnNote, "");
            m_bTrnNoteSeq = false;
            strcpy(m_szTrnNoteSeq, "");
            m_bTrnPartSeq = false;
            strcpy(m_szTrnPartSeq, "");
            m_bTrnSeq = false;
            strcpy(m_szTrnSeq, "+00000");
            m_bBankNo = false;
            strcpy(m_szBankNo, "");
            m_bControl2 = false;
            strcpy(m_szControl2, "");
            m_bControl3 = false;
            strcpy(m_szControl3, "");
            m_bRefCust = false;
            strcpy(m_szRefCust, "");
            m_bSecondNoteRead = false;
            strcpy(m_szSecondNoteRead, "");
            m_bKeyedNoteRead = false;
            strcpy(m_szKeyedNoteRead, "");
            m_bTrnAmountLow = false;
            strcpy(m_szTrnAmountLow, "+0000000000000.00");
            m_bTrnAmountHigh = false;
            strcpy(m_szTrnAmountHigh, "+0000000000000.00");
            m_bTrnLowDate = false;
            strcpy(m_szTrnLowDate, "");
            m_bTrnHighDate = false;
            strcpy(m_szTrnHighDate, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
        }

        
        //    BANK NUMBER
        long lTrnBk () { return 2; };
        RWCString TrnBk (void)
        {
            return m_szTrnBk;
        }
        long TrnBk (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnBk, sizeof(m_szTrnBk), &m_bTrnBk);
        }
        
        //    CONTROL 2
        long lTrnCtl2 () { return 3; };
        RWCString TrnCtl2 (void)
        {
            return m_szTrnCtl2;
        }
        long TrnCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnCtl2, sizeof(m_szTrnCtl2), &m_bTrnCtl2);
        }
        
        //    CONTROL 3
        long lTrnCtl3 () { return 3; };
        RWCString TrnCtl3 (void)
        {
            return m_szTrnCtl3;
        }
        long TrnCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnCtl3, sizeof(m_szTrnCtl3), &m_bTrnCtl3);
        }
        
        //    DEALER NUMBER
        long lTrnDlr () { return 7; };
        RWCString TrnDlr (void)
        {
            return m_szTrnDlr;
        }
        long TrnDlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnDlr, sizeof(m_szTrnDlr), &m_bTrnDlr);
        }
        
        //    LINE NUMBER
        long lTrnLine () { return 2; };
        RWCString TrnLine (void)
        {
            return m_szTrnLine;
        }
        long TrnLine (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnLine, sizeof(m_szTrnLine), &m_bTrnLine);
        }
        
        //    CLASS NUMBER
        long lTrnClass () { return 1; };
        RWCString TrnClass (void)
        {
            return m_szTrnClass;
        }
        long TrnClass (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnClass, sizeof(m_szTrnClass), &m_bTrnClass);
        }
        
        //    NOTE NUMBER
        long lTrnNote () { return 8; };
        RWCString TrnNote (void)
        {
            return m_szTrnNote;
        }
        long TrnNote (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnNote, sizeof(m_szTrnNote), &m_bTrnNote);
        }
        
        //    DRAW SEQUENCE
        long lTrnNoteSeq () { return 3; };
        RWCString TrnNoteSeq (void)
        {
            return m_szTrnNoteSeq;
        }
        long TrnNoteSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnNoteSeq, sizeof(m_szTrnNoteSeq), &m_bTrnNoteSeq);
        }
        
        //    PARTICIPATION SEQUENCE
        long lTrnPartSeq () { return 2; };
        RWCString TrnPartSeq (void)
        {
            return m_szTrnPartSeq;
        }
        long TrnPartSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnPartSeq, sizeof(m_szTrnPartSeq), &m_bTrnPartSeq);
        }
        
        //    TRANSACTION SEQUENCE
        long lTrnSeq () { return 6; };
        RWCString TrnSeq (void)
        {
            return AceZeroSupp(m_szTrnSeq, &m_szSuppressBuff[0]);
        }
        RWCString TrnSeqRaw (void)
        {
            return m_szTrnSeq;
        }
        long TrnSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnSeq, sizeof(m_szTrnSeq), &m_bTrnSeq);
        }
        
        //    BANK NUMBER - CTL1
        long lBankNo () { return 2; };
        RWCString BankNo (void)
        {
            return m_szBankNo;
        }
        long BankNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szBankNo, sizeof(m_szBankNo), &m_bBankNo);
        }
        
        //    CONTROL2
        long lControl2 () { return 3; };
        RWCString Control2 (void)
        {
            return m_szControl2;
        }
        long Control2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl2, sizeof(m_szControl2), &m_bControl2);
        }
        
        //    CONTROL 3
        long lControl3 () { return 3; };
        RWCString Control3 (void)
        {
            return m_szControl3;
        }
        long Control3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl3, sizeof(m_szControl3), &m_bControl3);
        }
        
        //    REFERENCE CUSTOMER
        long lRefCust () { return 10; };
        RWCString RefCust (void)
        {
            return m_szRefCust;
        }
        long RefCust (const RWCString& rwc)
        {
            return SetString(rwc, m_szRefCust, sizeof(m_szRefCust), &m_bRefCust);
        }
        
        //    SECOND NOTE READ
        long lSecondNoteRead () { return 1; };
        RWCString SecondNoteRead (void)
        {
            return m_szSecondNoteRead;
        }
        long SecondNoteRead (const RWCString& rwc)
        {
            return SetString(rwc, m_szSecondNoteRead, sizeof(m_szSecondNoteRead), &m_bSecondNoteRead);
        }
        
        //    KEYED NOTE READ
        long lKeyedNoteRead () { return 1; };
        RWCString KeyedNoteRead (void)
        {
            return m_szKeyedNoteRead;
        }
        long KeyedNoteRead (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyedNoteRead, sizeof(m_szKeyedNoteRead), &m_bKeyedNoteRead);
        }
        
        //    TRANSACTION AMOUNT LOW
        long lTrnAmountLow () { return 17; };
        RWCString TrnAmountLow (void)
        {
            return AceZeroSupp(m_szTrnAmountLow, &m_szSuppressBuff[0]);
        }
        RWCString TrnAmountLowRaw (void)
        {
            return m_szTrnAmountLow;
        }
        long TrnAmountLow (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnAmountLow, sizeof(m_szTrnAmountLow), &m_bTrnAmountLow);
        }
        
        //    TRANSACTION AMOUNT HIGH
        long lTrnAmountHigh () { return 17; };
        RWCString TrnAmountHigh (void)
        {
            return AceZeroSupp(m_szTrnAmountHigh, &m_szSuppressBuff[0]);
        }
        RWCString TrnAmountHighRaw (void)
        {
            return m_szTrnAmountHigh;
        }
        long TrnAmountHigh (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnAmountHigh, sizeof(m_szTrnAmountHigh), &m_bTrnAmountHigh);
        }
        
        //    TRANSACTION LOW DATE
        long lTrnLowDate () { return 8; };
        RWCString TrnLowDate (void)
        {
            return m_szTrnLowDate;
        }
        long TrnLowDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnLowDate, sizeof(m_szTrnLowDate), &m_bTrnLowDate);
        }
        
        //    TRANSACTION HIGH DATE
        long lTrnHighDate () { return 8; };
        RWCString TrnHighDate (void)
        {
            return m_szTrnHighDate;
        }
        long TrnHighDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrnHighDate, sizeof(m_szTrnHighDate), &m_bTrnHighDate);
        }
        
        long lFill0 () { return 30; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bTrnBk) return true;
            if (m_bTrnCtl2) return true;
            if (m_bTrnCtl3) return true;
            if (m_bTrnDlr) return true;
            if (m_bTrnLine) return true;
            if (m_bTrnClass) return true;
            if (m_bTrnNote) return true;
            if (m_bTrnNoteSeq) return true;
            if (m_bTrnPartSeq) return true;
            if (m_bTrnSeq) return true;
            if (m_bBankNo) return true;
            if (m_bControl2) return true;
            if (m_bControl3) return true;
            if (m_bRefCust) return true;
            if (m_bSecondNoteRead) return true;
            if (m_bKeyedNoteRead) return true;
            if (m_bTrnAmountLow) return true;
            if (m_bTrnAmountHigh) return true;
            if (m_bTrnLowDate) return true;
            if (m_bTrnHighDate) return true;
            if (m_bFill0) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVCLTR00", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "TrnBk", m_szTrnBk, &m_bTrnBk);
                AddXMLField(pSess, "TrnCtl2", m_szTrnCtl2, &m_bTrnCtl2);
                AddXMLField(pSess, "TrnCtl3", m_szTrnCtl3, &m_bTrnCtl3);
                AddXMLField(pSess, "TrnDlr", m_szTrnDlr, &m_bTrnDlr);
                AddXMLField(pSess, "TrnLine", m_szTrnLine, &m_bTrnLine);
                AddXMLField(pSess, "TrnClass", m_szTrnClass, &m_bTrnClass);
                AddXMLField(pSess, "TrnNote", m_szTrnNote, &m_bTrnNote);
                AddXMLField(pSess, "TrnNoteSeq", m_szTrnNoteSeq, &m_bTrnNoteSeq);
                AddXMLField(pSess, "TrnPartSeq", m_szTrnPartSeq, &m_bTrnPartSeq);
                AddXMLField(pSess, "TrnSeq", m_szTrnSeq, &m_bTrnSeq);
                AddXMLField(pSess, "BankNo", m_szBankNo, &m_bBankNo);
                AddXMLField(pSess, "Control2", m_szControl2, &m_bControl2);
                AddXMLField(pSess, "Control3", m_szControl3, &m_bControl3);
                AddXMLField(pSess, "RefCust", m_szRefCust, &m_bRefCust);
                AddXMLField(pSess, "SecondNoteRead", m_szSecondNoteRead, &m_bSecondNoteRead);
                AddXMLField(pSess, "KeyedNoteRead", m_szKeyedNoteRead, &m_bKeyedNoteRead);
                AddXMLField(pSess, "TrnAmountLow", m_szTrnAmountLow, &m_bTrnAmountLow);
                AddXMLField(pSess, "TrnAmountHigh", m_szTrnAmountHigh, &m_bTrnAmountHigh);
                AddXMLField(pSess, "TrnLowDate", m_szTrnLowDate, &m_bTrnLowDate);
                AddXMLField(pSess, "TrnHighDate", m_szTrnHighDate, &m_bTrnHighDate);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLCloseRecord(pSess, "WVCLTR00");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVCLTR00", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "TrnBk", m_szTrnBk);
                GetXMLField(pSess, "TrnCtl2", m_szTrnCtl2);
                GetXMLField(pSess, "TrnCtl3", m_szTrnCtl3);
                GetXMLField(pSess, "TrnDlr", m_szTrnDlr);
                GetXMLField(pSess, "TrnLine", m_szTrnLine);
                GetXMLField(pSess, "TrnClass", m_szTrnClass);
                GetXMLField(pSess, "TrnNote", m_szTrnNote);
                GetXMLField(pSess, "TrnNoteSeq", m_szTrnNoteSeq);
                GetXMLField(pSess, "TrnPartSeq", m_szTrnPartSeq);
                GetXMLField(pSess, "TrnSeq", m_szTrnSeq);
                GetXMLField(pSess, "BankNo", m_szBankNo);
                GetXMLField(pSess, "Control2", m_szControl2);
                GetXMLField(pSess, "Control3", m_szControl3);
                GetXMLField(pSess, "RefCust", m_szRefCust);
                GetXMLField(pSess, "SecondNoteRead", m_szSecondNoteRead);
                GetXMLField(pSess, "KeyedNoteRead", m_szKeyedNoteRead);
                GetXMLField(pSess, "TrnAmountLow", m_szTrnAmountLow);
                GetXMLField(pSess, "TrnAmountHigh", m_szTrnAmountHigh);
                GetXMLField(pSess, "TrnLowDate", m_szTrnLowDate);
                GetXMLField(pSess, "TrnHighDate", m_szTrnHighDate);
                GetXMLField(pSess, "Fill0", m_szFill0);
                CloseXMLRecord(pSess, "WVCLTR00");
            };
        }
    };

    AsdWVCLTR00 CWVCLTR00;
    AsdWVCLTR00 *WVCLTR00;
    
    //**************** End AsdWVCLTR00 Definition ****************

    
    //**************** Start AsdWVCLACCT Definition ****************
    //                 CSW INTERFACE WITH CL - MASTER                              
    
    //    WVCLACCT.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:32
    class AsdWVCLACCT
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bCustNo;
        char      m_szCustNo[10+1];
        bool      m_bSsTidNo;
        char      m_szSsTidNo[11+1];
        bool      m_bOffPh1Area;
        char      m_szOffPh1Area[3+1];
        bool      m_bOffPh11;
        char      m_szOffPh11[3+1];
        bool      m_bOffPh12;
        char      m_szOffPh12[4+1];
        bool      m_bOffPh1Ext;
        char      m_szOffPh1Ext[4+1];
        bool      m_bHmPhArea;
        char      m_szHmPhArea[3+1];
        bool      m_bHmPh1;
        char      m_szHmPh1[3+1];
        bool      m_bHmPh2;
        char      m_szHmPh2[4+1];
        bool      m_bHmPhExt;
        char      m_szHmPhExt[4+1];
        bool      m_bNmadr1Type;
        char      m_szNmadr1Type[1+1];
        bool      m_bNmadr1;
        char      m_szNmadr1[40+1];
        bool      m_bNmadr2Type;
        char      m_szNmadr2Type[1+1];
        bool      m_bNmadr2;
        char      m_szNmadr2[40+1];
        bool      m_bNmadr3Type;
        char      m_szNmadr3Type[1+1];
        bool      m_bNmadr3;
        char      m_szNmadr3[40+1];
        bool      m_bNmadr4Type;
        char      m_szNmadr4Type[1+1];
        bool      m_bNmadr4;
        char      m_szNmadr4[40+1];
        bool      m_bNmadr5Type;
        char      m_szNmadr5Type[1+1];
        bool      m_bNmadr5;
        char      m_szNmadr5[40+1];
        bool      m_bNmadr6Type;
        char      m_szNmadr6Type[1+1];
        bool      m_bNmadr6;
        char      m_szNmadr6[40+1];
        bool      m_bClCity;
        char      m_szClCity[30+1];
        bool      m_bState;
        char      m_szState[10+1];
        bool      m_bZipCode;
        char      m_szZipCode[10+1];
        bool      m_bCountry;
        char      m_szCountry[40+1];
        bool      m_bForeignAddressInd;
        char      m_szForeignAddressInd[1+1];
        bool      m_bCsMsaBaseCurrency;
        char      m_szCsMsaBaseCurrency[3+1];
        bool      m_bCsMsaBaseCurrDec;
        char      m_szCsMsaBaseCurrDec[1+1];
        bool      m_bCurProcThruCent;
        char      m_szCurProcThruCent[2+1];
        bool      m_bPtYr;
        char      m_szPtYr[2+1];
        bool      m_bPtMo;
        char      m_szPtMo[2+1];
        bool      m_bPtDa;
        char      m_szPtDa[2+1];
        bool      m_bCsRegion;
        char      m_szCsRegion[3+1];
        bool      m_bEditedAcctNbr;
        char      m_szEditedAcctNbr[13+1];
        bool      m_bPdBoundRpt[6];
        char      m_szPdBoundRpt[6][4+1];
        bool      m_bNbrOfNotesReturned;
        char      m_szNbrOfNotesReturned[2+1];
        bool      m_bMoreNotesPresent;
        char      m_szMoreNotesPresent[1+1];
        bool      m_bNbrOfCollRecs;
        char      m_szNbrOfCollRecs[2+1];
        bool      m_bMoreCollPresent;
        char      m_szMoreCollPresent[1+1];
        bool      m_bKeyReadNoteMst;
        char      m_szKeyReadNoteMst[1+1];
        bool      m_bFill0;
        char      m_szFill0[30+1];
        bool      m_bFill1;
        char      m_szFill1[30+1];
    
      public:
        long      m_lIndex;

        AsdWVCLACCT ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCustNo = false;
            strcpy(m_szCustNo, "");
            m_bSsTidNo = false;
            strcpy(m_szSsTidNo, "");
            m_bOffPh1Area = false;
            strcpy(m_szOffPh1Area, "");
            m_bOffPh11 = false;
            strcpy(m_szOffPh11, "");
            m_bOffPh12 = false;
            strcpy(m_szOffPh12, "");
            m_bOffPh1Ext = false;
            strcpy(m_szOffPh1Ext, "");
            m_bHmPhArea = false;
            strcpy(m_szHmPhArea, "");
            m_bHmPh1 = false;
            strcpy(m_szHmPh1, "");
            m_bHmPh2 = false;
            strcpy(m_szHmPh2, "");
            m_bHmPhExt = false;
            strcpy(m_szHmPhExt, "");
            m_bNmadr1Type = false;
            strcpy(m_szNmadr1Type, "");
            m_bNmadr1 = false;
            strcpy(m_szNmadr1, "");
            m_bNmadr2Type = false;
            strcpy(m_szNmadr2Type, "");
            m_bNmadr2 = false;
            strcpy(m_szNmadr2, "");
            m_bNmadr3Type = false;
            strcpy(m_szNmadr3Type, "");
            m_bNmadr3 = false;
            strcpy(m_szNmadr3, "");
            m_bNmadr4Type = false;
            strcpy(m_szNmadr4Type, "");
            m_bNmadr4 = false;
            strcpy(m_szNmadr4, "");
            m_bNmadr5Type = false;
            strcpy(m_szNmadr5Type, "");
            m_bNmadr5 = false;
            strcpy(m_szNmadr5, "");
            m_bNmadr6Type = false;
            strcpy(m_szNmadr6Type, "");
            m_bNmadr6 = false;
            strcpy(m_szNmadr6, "");
            m_bClCity = false;
            strcpy(m_szClCity, "");
            m_bState = false;
            strcpy(m_szState, "");
            m_bZipCode = false;
            strcpy(m_szZipCode, "");
            m_bCountry = false;
            strcpy(m_szCountry, "");
            m_bForeignAddressInd = false;
            strcpy(m_szForeignAddressInd, "");
            m_bCsMsaBaseCurrency = false;
            strcpy(m_szCsMsaBaseCurrency, "");
            m_bCsMsaBaseCurrDec = false;
            strcpy(m_szCsMsaBaseCurrDec, "");
            m_bCurProcThruCent = false;
            strcpy(m_szCurProcThruCent, "");
            m_bPtYr = false;
            strcpy(m_szPtYr, "");
            m_bPtMo = false;
            strcpy(m_szPtMo, "");
            m_bPtDa = false;
            strcpy(m_szPtDa, "");
            m_bCsRegion = false;
            strcpy(m_szCsRegion, "");
            m_bEditedAcctNbr = false;
            strcpy(m_szEditedAcctNbr, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                m_bPdBoundRpt[lOccurs] = false;
                strcpy(m_szPdBoundRpt[lOccurs], "+000");
            }
            m_bNbrOfNotesReturned = false;
            strcpy(m_szNbrOfNotesReturned, "00");
            m_bMoreNotesPresent = false;
            strcpy(m_szMoreNotesPresent, "0");
            m_bNbrOfCollRecs = false;
            strcpy(m_szNbrOfCollRecs, "00");
            m_bMoreCollPresent = false;
            strcpy(m_szMoreCollPresent, "");
            m_bKeyReadNoteMst = false;
            strcpy(m_szKeyReadNoteMst, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
        
            for (lOccurs = 0; lOccurs < 20; lOccurs++)
            {
                NoteInformation[lOccurs]  = &CNoteInformation[lOccurs];
                CNoteInformation[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCustNo = false;
            strcpy(m_szCustNo, "");
            m_bSsTidNo = false;
            strcpy(m_szSsTidNo, "");
            m_bOffPh1Area = false;
            strcpy(m_szOffPh1Area, "");
            m_bOffPh11 = false;
            strcpy(m_szOffPh11, "");
            m_bOffPh12 = false;
            strcpy(m_szOffPh12, "");
            m_bOffPh1Ext = false;
            strcpy(m_szOffPh1Ext, "");
            m_bHmPhArea = false;
            strcpy(m_szHmPhArea, "");
            m_bHmPh1 = false;
            strcpy(m_szHmPh1, "");
            m_bHmPh2 = false;
            strcpy(m_szHmPh2, "");
            m_bHmPhExt = false;
            strcpy(m_szHmPhExt, "");
            m_bNmadr1Type = false;
            strcpy(m_szNmadr1Type, "");
            m_bNmadr1 = false;
            strcpy(m_szNmadr1, "");
            m_bNmadr2Type = false;
            strcpy(m_szNmadr2Type, "");
            m_bNmadr2 = false;
            strcpy(m_szNmadr2, "");
            m_bNmadr3Type = false;
            strcpy(m_szNmadr3Type, "");
            m_bNmadr3 = false;
            strcpy(m_szNmadr3, "");
            m_bNmadr4Type = false;
            strcpy(m_szNmadr4Type, "");
            m_bNmadr4 = false;
            strcpy(m_szNmadr4, "");
            m_bNmadr5Type = false;
            strcpy(m_szNmadr5Type, "");
            m_bNmadr5 = false;
            strcpy(m_szNmadr5, "");
            m_bNmadr6Type = false;
            strcpy(m_szNmadr6Type, "");
            m_bNmadr6 = false;
            strcpy(m_szNmadr6, "");
            m_bClCity = false;
            strcpy(m_szClCity, "");
            m_bState = false;
            strcpy(m_szState, "");
            m_bZipCode = false;
            strcpy(m_szZipCode, "");
            m_bCountry = false;
            strcpy(m_szCountry, "");
            m_bForeignAddressInd = false;
            strcpy(m_szForeignAddressInd, "");
            m_bCsMsaBaseCurrency = false;
            strcpy(m_szCsMsaBaseCurrency, "");
            m_bCsMsaBaseCurrDec = false;
            strcpy(m_szCsMsaBaseCurrDec, "");
            m_bCurProcThruCent = false;
            strcpy(m_szCurProcThruCent, "");
            m_bPtYr = false;
            strcpy(m_szPtYr, "");
            m_bPtMo = false;
            strcpy(m_szPtMo, "");
            m_bPtDa = false;
            strcpy(m_szPtDa, "");
            m_bCsRegion = false;
            strcpy(m_szCsRegion, "");
            m_bEditedAcctNbr = false;
            strcpy(m_szEditedAcctNbr, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 6; lOccurs++ )
            {
                m_bPdBoundRpt[lOccurs] = false;
                strcpy(m_szPdBoundRpt[lOccurs], "+000");
            }
            m_bNbrOfNotesReturned = false;
            strcpy(m_szNbrOfNotesReturned, "00");
            m_bMoreNotesPresent = false;
            strcpy(m_szMoreNotesPresent, "0");
            m_bNbrOfCollRecs = false;
            strcpy(m_szNbrOfCollRecs, "00");
            m_bMoreCollPresent = false;
            strcpy(m_szMoreCollPresent, "");
            m_bKeyReadNoteMst = false;
            strcpy(m_szKeyReadNoteMst, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
        
            for (lOccurs = 0; lOccurs < 20; lOccurs++)
            {
                NoteInformation[lOccurs]  = &CNoteInformation[lOccurs];
                CNoteInformation[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    UNIQUE NUMBER IDENTIFYING THE CUSTOMER.
        long lCustNo () { return 10; };
        RWCString CustNo (void)
        {
            return m_szCustNo;
        }
        long CustNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustNo, sizeof(m_szCustNo), &m_bCustNo);
        }
        
        //    CUSTOMER'S TAX IDENTIFICATION OR SOCIAL SECURITY NUMBER.
        long lSsTidNo () { return 11; };
        RWCString SsTidNo (void)
        {
            return m_szSsTidNo;
        }
        long SsTidNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szSsTidNo, sizeof(m_szSsTidNo), &m_bSsTidNo);
        }
        
        //    AREA CODE OF CUSTOMER'S WORK PHONE NUMBER.
        long lOffPh1Area () { return 3; };
        RWCString OffPh1Area (void)
        {
            return m_szOffPh1Area;
        }
        long OffPh1Area (const RWCString& rwc)
        {
            return SetString(rwc, m_szOffPh1Area, sizeof(m_szOffPh1Area), &m_bOffPh1Area);
        }
        
        //    FIRST THREE DIGITS OF CUSTOMER'S WORK PHONE NUMBER.
        long lOffPh11 () { return 3; };
        RWCString OffPh11 (void)
        {
            return m_szOffPh11;
        }
        long OffPh11 (const RWCString& rwc)
        {
            return SetString(rwc, m_szOffPh11, sizeof(m_szOffPh11), &m_bOffPh11);
        }
        
        //    LAST FOUR DIGITS OF CUSTOMER'S WORK PHONE NUMBER.
        long lOffPh12 () { return 4; };
        RWCString OffPh12 (void)
        {
            return m_szOffPh12;
        }
        long OffPh12 (const RWCString& rwc)
        {
            return SetString(rwc, m_szOffPh12, sizeof(m_szOffPh12), &m_bOffPh12);
        }
        
        //    EXTENSION OF CUSTOMER'S WORK PHONE NUMBER.
        long lOffPh1Ext () { return 4; };
        RWCString OffPh1Ext (void)
        {
            return m_szOffPh1Ext;
        }
        long OffPh1Ext (const RWCString& rwc)
        {
            return SetString(rwc, m_szOffPh1Ext, sizeof(m_szOffPh1Ext), &m_bOffPh1Ext);
        }
        
        //    AREA CODE OF CUSTOMER'S HOME PHONE NUMBER.
        long lHmPhArea () { return 3; };
        RWCString HmPhArea (void)
        {
            return m_szHmPhArea;
        }
        long HmPhArea (const RWCString& rwc)
        {
            return SetString(rwc, m_szHmPhArea, sizeof(m_szHmPhArea), &m_bHmPhArea);
        }
        
        //    FIRST THREE DIGITS OF CUSTOMER'S HOME PHONE NUMBER.
        long lHmPh1 () { return 3; };
        RWCString HmPh1 (void)
        {
            return m_szHmPh1;
        }
        long HmPh1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szHmPh1, sizeof(m_szHmPh1), &m_bHmPh1);
        }
        
        //    LAST FOUR DIGITS OF CUSTOMER'S HOME PHONE NUMBER.
        long lHmPh2 () { return 4; };
        RWCString HmPh2 (void)
        {
            return m_szHmPh2;
        }
        long HmPh2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szHmPh2, sizeof(m_szHmPh2), &m_bHmPh2);
        }
        
        //    EXTENSION OF CUSTOMER'S HOME PHONE NUMBER.
        long lHmPhExt () { return 4; };
        RWCString HmPhExt (void)
        {
            return m_szHmPhExt;
        }
        long HmPhExt (const RWCString& rwc)
        {
            return SetString(rwc, m_szHmPhExt, sizeof(m_szHmPhExt), &m_bHmPhExt);
        }
        
        //    INDICATES WHETHER FIRST NAME/ADDR LN HAS NAME OR ADDR INFO.
        long lNmadr1Type () { return 1; };
        RWCString Nmadr1Type (void)
        {
            return m_szNmadr1Type;
        }
        long Nmadr1Type (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr1Type, sizeof(m_szNmadr1Type), &m_bNmadr1Type);
        }
        
        //    FIRST LINE OF NAME/ADDRESS INFORMATION.
        long lNmadr1 () { return 40; };
        RWCString Nmadr1 (void)
        {
            return m_szNmadr1;
        }
        long Nmadr1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr1, sizeof(m_szNmadr1), &m_bNmadr1);
        }
        
        //    INDICATES WHETHER SECOND NAME/ADDR LN HAS NAME OR ADDR INFO.
        long lNmadr2Type () { return 1; };
        RWCString Nmadr2Type (void)
        {
            return m_szNmadr2Type;
        }
        long Nmadr2Type (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr2Type, sizeof(m_szNmadr2Type), &m_bNmadr2Type);
        }
        
        //    SECOND LINE OF NAME/ADDRESS INFORMATION.
        long lNmadr2 () { return 40; };
        RWCString Nmadr2 (void)
        {
            return m_szNmadr2;
        }
        long Nmadr2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr2, sizeof(m_szNmadr2), &m_bNmadr2);
        }
        
        //    INDICATES WHETHER THIRD NAME/ADDR LN HAS NAME OR ADDR INFO.
        long lNmadr3Type () { return 1; };
        RWCString Nmadr3Type (void)
        {
            return m_szNmadr3Type;
        }
        long Nmadr3Type (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr3Type, sizeof(m_szNmadr3Type), &m_bNmadr3Type);
        }
        
        //    THIRD LINE OF NAME/ADDRESS INFORMATION.
        long lNmadr3 () { return 40; };
        RWCString Nmadr3 (void)
        {
            return m_szNmadr3;
        }
        long Nmadr3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr3, sizeof(m_szNmadr3), &m_bNmadr3);
        }
        
        //    INDICATES WHETHER FOURTH NAME/ADDR LN HAS NAME OR ADDR INFO.
        long lNmadr4Type () { return 1; };
        RWCString Nmadr4Type (void)
        {
            return m_szNmadr4Type;
        }
        long Nmadr4Type (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr4Type, sizeof(m_szNmadr4Type), &m_bNmadr4Type);
        }
        
        //    FOURTH LINE OF NAME/ADDRESS INFORMATION.
        long lNmadr4 () { return 40; };
        RWCString Nmadr4 (void)
        {
            return m_szNmadr4;
        }
        long Nmadr4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr4, sizeof(m_szNmadr4), &m_bNmadr4);
        }
        
        //    INDICATES WHETHER FIFTH NAME/ADDR LN HAS NAME OR ADDR INFO.
        long lNmadr5Type () { return 1; };
        RWCString Nmadr5Type (void)
        {
            return m_szNmadr5Type;
        }
        long Nmadr5Type (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr5Type, sizeof(m_szNmadr5Type), &m_bNmadr5Type);
        }
        
        //    FIFTH LINE OF NAME/ADDRESS INFORMATION.
        long lNmadr5 () { return 40; };
        RWCString Nmadr5 (void)
        {
            return m_szNmadr5;
        }
        long Nmadr5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr5, sizeof(m_szNmadr5), &m_bNmadr5);
        }
        
        //    INDICATES WHETHER SIXTH NAME/ADDR LN HAS NAME OR ADDR INFO.
        long lNmadr6Type () { return 1; };
        RWCString Nmadr6Type (void)
        {
            return m_szNmadr6Type;
        }
        long Nmadr6Type (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr6Type, sizeof(m_szNmadr6Type), &m_bNmadr6Type);
        }
        
        //    SIXTH LINE OF NAME/ADDRESS INFORMATION.
        long lNmadr6 () { return 40; };
        RWCString Nmadr6 (void)
        {
            return m_szNmadr6;
        }
        long Nmadr6 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNmadr6, sizeof(m_szNmadr6), &m_bNmadr6);
        }
        
        //    CITY FOR THE ADDRESS.
        long lClCity () { return 30; };
        RWCString ClCity (void)
        {
            return m_szClCity;
        }
        long ClCity (const RWCString& rwc)
        {
            return SetString(rwc, m_szClCity, sizeof(m_szClCity), &m_bClCity);
        }
        
        //    STATE FOR THE ADDRESS.
        long lState () { return 10; };
        RWCString State (void)
        {
            return m_szState;
        }
        long State (const RWCString& rwc)
        {
            return SetString(rwc, m_szState, sizeof(m_szState), &m_bState);
        }
        
        //    ZIP CODE FOR THE ADDRESS.
        long lZipCode () { return 10; };
        RWCString ZipCode (void)
        {
            return m_szZipCode;
        }
        long ZipCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szZipCode, sizeof(m_szZipCode), &m_bZipCode);
        }
        
        //    COUNTRY FOR THE ADDRESS.
        long lCountry () { return 40; };
        RWCString Country (void)
        {
            return m_szCountry;
        }
        long Country (const RWCString& rwc)
        {
            return SetString(rwc, m_szCountry, sizeof(m_szCountry), &m_bCountry);
        }
        
        //    INDICATES WHETHER THE ADDRESS IS FOREIGN OR DOMESTIC.
        long lForeignAddressInd () { return 1; };
        RWCString ForeignAddressInd (void)
        {
            return m_szForeignAddressInd;
        }
        long ForeignAddressInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szForeignAddressInd, sizeof(m_szForeignAddressInd), &m_bForeignAddressInd);
        }
        
        //    CURRENCY FOR THE ACCOUNT (U.S. DOLLARS, JAPANESE YEN, ETC.).
        long lCsMsaBaseCurrency () { return 3; };
        RWCString CsMsaBaseCurrency (void)
        {
            return m_szCsMsaBaseCurrency;
        }
        long CsMsaBaseCurrency (const RWCString& rwc)
        {
            return SetString(rwc, m_szCsMsaBaseCurrency, sizeof(m_szCsMsaBaseCurrency), &m_bCsMsaBaseCurrency);
        }
        
        //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY.
        long lCsMsaBaseCurrDec () { return 1; };
        RWCString CsMsaBaseCurrDec (void)
        {
            return m_szCsMsaBaseCurrDec;
        }
        long CsMsaBaseCurrDec (const RWCString& rwc)
        {
            return SetString(rwc, m_szCsMsaBaseCurrDec, sizeof(m_szCsMsaBaseCurrDec), &m_bCsMsaBaseCurrDec);
        }
        
        //    CURRENT PROCESS THRU DATE/CENTURY
        long lCurProcThruCent () { return 2; };
        RWCString CurProcThruCent (void)
        {
            return m_szCurProcThruCent;
        }
        long CurProcThruCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szCurProcThruCent, sizeof(m_szCurProcThruCent), &m_bCurProcThruCent);
        }
        
        //    CURRENT PROCESS THRU DATE/YEAR
        long lPtYr () { return 2; };
        RWCString PtYr (void)
        {
            return m_szPtYr;
        }
        long PtYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szPtYr, sizeof(m_szPtYr), &m_bPtYr);
        }
        
        //    CURRENT PROCESS THRU DATE/MONTH
        long lPtMo () { return 2; };
        RWCString PtMo (void)
        {
            return m_szPtMo;
        }
        long PtMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szPtMo, sizeof(m_szPtMo), &m_bPtMo);
        }
        
        //    CURRENT PROCESS THRU DATE/DAY
        long lPtDa () { return 2; };
        RWCString PtDa (void)
        {
            return m_szPtDa;
        }
        long PtDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szPtDa, sizeof(m_szPtDa), &m_bPtDa);
        }
        
        //    USER-ASSIGNED REGION IDENTIFICATION
        long lCsRegion () { return 3; };
        RWCString CsRegion (void)
        {
            return m_szCsRegion;
        }
        long CsRegion (const RWCString& rwc)
        {
            return SetString(rwc, m_szCsRegion, sizeof(m_szCsRegion), &m_bCsRegion);
        }
        
        //    EDITED ACCOUNT NUMBER.
        long lEditedAcctNbr () { return 13; };
        RWCString EditedAcctNbr (void)
        {
            return m_szEditedAcctNbr;
        }
        long EditedAcctNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szEditedAcctNbr, sizeof(m_szEditedAcctNbr), &m_bEditedAcctNbr);
        }
        
        //    USER-DEFINED BOUNDARIES FOR PRODUCING PAST DUE NOTICES.
        long lPdBoundRpt () { return 4; };
        RWCString PdBoundRpt (long i)
        {
            if (i >= 0 && i < 6)
                return AceZeroSupp(m_szPdBoundRpt[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString PdBoundRptRaw (long i)
        {
            if (i >= 0 && i < 6)
                return m_szPdBoundRpt[i];
            else
                return "";
        }
        long PdBoundRpt (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 6)
                return SetString(rwc, m_szPdBoundRpt[i], sizeof(m_szPdBoundRpt[i]), &m_bPdBoundRpt[i]);
            else
                return -1;
        }
        
        //    NUMBER OF NOTE RECORDS IN THE TRANSACTION DATA GROUP.
        long lNbrOfNotesReturned () { return 2; };
        RWCString NbrOfNotesReturned (void)
        {
            return m_szNbrOfNotesReturned;
        }
        long NbrOfNotesReturned (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrOfNotesReturned, sizeof(m_szNbrOfNotesReturned), &m_bNbrOfNotesReturned);
        }
        
        //    INDICATES WHETHER ADDITIONAL NOTE SEGMENTS OR RECORDS EXIST.
        long lMoreNotesPresent () { return 1; };
        RWCString MoreNotesPresent (void)
        {
            return m_szMoreNotesPresent;
        }
        long MoreNotesPresent (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreNotesPresent, sizeof(m_szMoreNotesPresent), &m_bMoreNotesPresent);
        }
        
        //    NUMBER OF COLLATERAL RECORDS IN THE TRANSACTION DATA GROUP.
        long lNbrOfCollRecs () { return 2; };
        RWCString NbrOfCollRecs (void)
        {
            return m_szNbrOfCollRecs;
        }
        long NbrOfCollRecs (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrOfCollRecs, sizeof(m_szNbrOfCollRecs), &m_bNbrOfCollRecs);
        }
        
        //    INDICATES WHETHER ADDITIONAL COLLATERAL RECORDS EXIST.
        long lMoreCollPresent () { return 1; };
        RWCString MoreCollPresent (void)
        {
            return m_szMoreCollPresent;
        }
        long MoreCollPresent (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreCollPresent, sizeof(m_szMoreCollPresent), &m_bMoreCollPresent);
        }
        
        //    INDICATES WHETHER FULL NOTE KEY HAS BEEN SENT TO THE HOST.
        long lKeyReadNoteMst () { return 1; };
        RWCString KeyReadNoteMst (void)
        {
            return m_szKeyReadNoteMst;
        }
        long KeyReadNoteMst (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyReadNoteMst, sizeof(m_szKeyReadNoteMst), &m_bKeyReadNoteMst);
        }
        
        long lFill0 () { return 30; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        long lFill1 () { return 30; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bCustNo) return true;
            if (m_bSsTidNo) return true;
            if (m_bOffPh1Area) return true;
            if (m_bOffPh11) return true;
            if (m_bOffPh12) return true;
            if (m_bOffPh1Ext) return true;
            if (m_bHmPhArea) return true;
            if (m_bHmPh1) return true;
            if (m_bHmPh2) return true;
            if (m_bHmPhExt) return true;
            if (m_bNmadr1Type) return true;
            if (m_bNmadr1) return true;
            if (m_bNmadr2Type) return true;
            if (m_bNmadr2) return true;
            if (m_bNmadr3Type) return true;
            if (m_bNmadr3) return true;
            if (m_bNmadr4Type) return true;
            if (m_bNmadr4) return true;
            if (m_bNmadr5Type) return true;
            if (m_bNmadr5) return true;
            if (m_bNmadr6Type) return true;
            if (m_bNmadr6) return true;
            if (m_bClCity) return true;
            if (m_bState) return true;
            if (m_bZipCode) return true;
            if (m_bCountry) return true;
            if (m_bForeignAddressInd) return true;
            if (m_bCsMsaBaseCurrency) return true;
            if (m_bCsMsaBaseCurrDec) return true;
            if (m_bCurProcThruCent) return true;
            if (m_bPtYr) return true;
            if (m_bPtMo) return true;
            if (m_bPtDa) return true;
            if (m_bCsRegion) return true;
            if (m_bEditedAcctNbr) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
                if (m_bPdBoundRpt[lOccurs]) return true;
            if (m_bNbrOfNotesReturned) return true;
            if (m_bMoreNotesPresent) return true;
            if (m_bNbrOfCollRecs) return true;
            if (m_bMoreCollPresent) return true;
            if (m_bKeyReadNoteMst) return true;
            if (m_bFill0) return true;
            if (m_bFill1) return true;
            for (lOccurs = 0; lOccurs < 20; lOccurs++)
            {
                if(CNoteInformation[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVCLACCT", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "CustNo", m_szCustNo, &m_bCustNo);
                AddXMLField(pSess, "SsTidNo", m_szSsTidNo, &m_bSsTidNo);
                AddXMLField(pSess, "OffPh1Area", m_szOffPh1Area, &m_bOffPh1Area);
                AddXMLField(pSess, "OffPh11", m_szOffPh11, &m_bOffPh11);
                AddXMLField(pSess, "OffPh12", m_szOffPh12, &m_bOffPh12);
                AddXMLField(pSess, "OffPh1Ext", m_szOffPh1Ext, &m_bOffPh1Ext);
                AddXMLField(pSess, "HmPhArea", m_szHmPhArea, &m_bHmPhArea);
                AddXMLField(pSess, "HmPh1", m_szHmPh1, &m_bHmPh1);
                AddXMLField(pSess, "HmPh2", m_szHmPh2, &m_bHmPh2);
                AddXMLField(pSess, "HmPhExt", m_szHmPhExt, &m_bHmPhExt);
                AddXMLField(pSess, "Nmadr1Type", m_szNmadr1Type, &m_bNmadr1Type);
                AddXMLField(pSess, "Nmadr1", m_szNmadr1, &m_bNmadr1);
                AddXMLField(pSess, "Nmadr2Type", m_szNmadr2Type, &m_bNmadr2Type);
                AddXMLField(pSess, "Nmadr2", m_szNmadr2, &m_bNmadr2);
                AddXMLField(pSess, "Nmadr3Type", m_szNmadr3Type, &m_bNmadr3Type);
                AddXMLField(pSess, "Nmadr3", m_szNmadr3, &m_bNmadr3);
                AddXMLField(pSess, "Nmadr4Type", m_szNmadr4Type, &m_bNmadr4Type);
                AddXMLField(pSess, "Nmadr4", m_szNmadr4, &m_bNmadr4);
                AddXMLField(pSess, "Nmadr5Type", m_szNmadr5Type, &m_bNmadr5Type);
                AddXMLField(pSess, "Nmadr5", m_szNmadr5, &m_bNmadr5);
                AddXMLField(pSess, "Nmadr6Type", m_szNmadr6Type, &m_bNmadr6Type);
                AddXMLField(pSess, "Nmadr6", m_szNmadr6, &m_bNmadr6);
                AddXMLField(pSess, "ClCity", m_szClCity, &m_bClCity);
                AddXMLField(pSess, "State", m_szState, &m_bState);
                AddXMLField(pSess, "ZipCode", m_szZipCode, &m_bZipCode);
                AddXMLField(pSess, "Country", m_szCountry, &m_bCountry);
                AddXMLField(pSess, "ForeignAddressInd", m_szForeignAddressInd, &m_bForeignAddressInd);
                AddXMLField(pSess, "CsMsaBaseCurrency", m_szCsMsaBaseCurrency, &m_bCsMsaBaseCurrency);
                AddXMLField(pSess, "CsMsaBaseCurrDec", m_szCsMsaBaseCurrDec, &m_bCsMsaBaseCurrDec);
                AddXMLField(pSess, "CurProcThruCent", m_szCurProcThruCent, &m_bCurProcThruCent);
                AddXMLField(pSess, "PtYr", m_szPtYr, &m_bPtYr);
                AddXMLField(pSess, "PtMo", m_szPtMo, &m_bPtMo);
                AddXMLField(pSess, "PtDa", m_szPtDa, &m_bPtDa);
                AddXMLField(pSess, "CsRegion", m_szCsRegion, &m_bCsRegion);
                AddXMLField(pSess, "EditedAcctNbr", m_szEditedAcctNbr, &m_bEditedAcctNbr);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    AddXMLField(pSess, "PdBoundRpt", m_szPdBoundRpt[lOccurs], &m_bPdBoundRpt[lOccurs], lOccurs);
                AddXMLField(pSess, "NbrOfNotesReturned", m_szNbrOfNotesReturned, &m_bNbrOfNotesReturned);
                AddXMLField(pSess, "MoreNotesPresent", m_szMoreNotesPresent, &m_bMoreNotesPresent);
                AddXMLField(pSess, "NbrOfCollRecs", m_szNbrOfCollRecs, &m_bNbrOfCollRecs);
                AddXMLField(pSess, "MoreCollPresent", m_szMoreCollPresent, &m_bMoreCollPresent);
                AddXMLField(pSess, "KeyReadNoteMst", m_szKeyReadNoteMst, &m_bKeyReadNoteMst);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                for (lOccurs = 0; lOccurs < 20; lOccurs++)
                {
                    CNoteInformation[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "WVCLACCT");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVCLACCT", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "CustNo", m_szCustNo);
                GetXMLField(pSess, "SsTidNo", m_szSsTidNo);
                GetXMLField(pSess, "OffPh1Area", m_szOffPh1Area);
                GetXMLField(pSess, "OffPh11", m_szOffPh11);
                GetXMLField(pSess, "OffPh12", m_szOffPh12);
                GetXMLField(pSess, "OffPh1Ext", m_szOffPh1Ext);
                GetXMLField(pSess, "HmPhArea", m_szHmPhArea);
                GetXMLField(pSess, "HmPh1", m_szHmPh1);
                GetXMLField(pSess, "HmPh2", m_szHmPh2);
                GetXMLField(pSess, "HmPhExt", m_szHmPhExt);
                GetXMLField(pSess, "Nmadr1Type", m_szNmadr1Type);
                GetXMLField(pSess, "Nmadr1", m_szNmadr1);
                GetXMLField(pSess, "Nmadr2Type", m_szNmadr2Type);
                GetXMLField(pSess, "Nmadr2", m_szNmadr2);
                GetXMLField(pSess, "Nmadr3Type", m_szNmadr3Type);
                GetXMLField(pSess, "Nmadr3", m_szNmadr3);
                GetXMLField(pSess, "Nmadr4Type", m_szNmadr4Type);
                GetXMLField(pSess, "Nmadr4", m_szNmadr4);
                GetXMLField(pSess, "Nmadr5Type", m_szNmadr5Type);
                GetXMLField(pSess, "Nmadr5", m_szNmadr5);
                GetXMLField(pSess, "Nmadr6Type", m_szNmadr6Type);
                GetXMLField(pSess, "Nmadr6", m_szNmadr6);
                GetXMLField(pSess, "ClCity", m_szClCity);
                GetXMLField(pSess, "State", m_szState);
                GetXMLField(pSess, "ZipCode", m_szZipCode);
                GetXMLField(pSess, "Country", m_szCountry);
                GetXMLField(pSess, "ForeignAddressInd", m_szForeignAddressInd);
                GetXMLField(pSess, "CsMsaBaseCurrency", m_szCsMsaBaseCurrency);
                GetXMLField(pSess, "CsMsaBaseCurrDec", m_szCsMsaBaseCurrDec);
                GetXMLField(pSess, "CurProcThruCent", m_szCurProcThruCent);
                GetXMLField(pSess, "PtYr", m_szPtYr);
                GetXMLField(pSess, "PtMo", m_szPtMo);
                GetXMLField(pSess, "PtDa", m_szPtDa);
                GetXMLField(pSess, "CsRegion", m_szCsRegion);
                GetXMLField(pSess, "EditedAcctNbr", m_szEditedAcctNbr);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    GetXMLField(pSess, "PdBoundRpt", m_szPdBoundRpt[lOccurs], lOccurs);
                GetXMLField(pSess, "NbrOfNotesReturned", m_szNbrOfNotesReturned);
                GetXMLField(pSess, "MoreNotesPresent", m_szMoreNotesPresent);
                GetXMLField(pSess, "NbrOfCollRecs", m_szNbrOfCollRecs);
                GetXMLField(pSess, "MoreCollPresent", m_szMoreCollPresent);
                GetXMLField(pSess, "KeyReadNoteMst", m_szKeyReadNoteMst);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "Fill1", m_szFill1);
                for (lOccurs = 0; lOccurs < 20; lOccurs++)
                {
                    CNoteInformation[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "WVCLACCT");
            };
        }
        
        //**************** Start AsdNoteInformation Definition ****************
        //                 NOTE INFORMATION
        
        class AsdNoteInformation
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bBankNo;
            char      m_szBankNo[2+1];
            bool      m_bControl2;
            char      m_szControl2[3+1];
            bool      m_bControl3;
            char      m_szControl3[3+1];
            bool      m_bRefCust;
            char      m_szRefCust[10+1];
            bool      m_bRefNote;
            char      m_szRefNote[8+1];
            bool      m_bRefSeq;
            char      m_szRefSeq[3+1];
            bool      m_bPartNbr;
            char      m_szPartNbr[2+1];
            bool      m_bNoteDate;
            char      m_szNoteDate[8+1];
            bool      m_bNoteType;
            char      m_szNoteType[3+1];
            bool      m_bPrimOff;
            char      m_szPrimOff[5+1];
            bool      m_bStatus;
            char      m_szStatus[1+1];
            bool      m_bOrigProc;
            char      m_szOrigProc[17+1];
            bool      m_bPrinBal;
            char      m_szPrinBal[17+1];
            bool      m_bIntBal;
            char      m_szIntBal[17+1];
            bool      m_bFeeBal;
            char      m_szFeeBal[17+1];
            bool      m_bCurBal;
            char      m_szCurBal[17+1];
            bool      m_bCurPayoff;
            char      m_szCurPayoff[17+1];
            bool      m_bOrigNoteAmt;
            char      m_szOrigNoteAmt[17+1];
            bool      m_bLtChgDue;
            char      m_szLtChgDue[17+1];
            bool      m_bHoldAmt;
            char      m_szHoldAmt[17+1];
            bool      m_bOrigIntRate;
            char      m_szOrigIntRate[11+1];
            bool      m_bCurIntRate;
            char      m_szCurIntRate[11+1];
            bool      m_bDlyIntAmt;
            char      m_szDlyIntAmt[21+1];
            bool      m_bAccrMethod;
            char      m_szAccrMethod[2+1];
            bool      m_bPrimeUse;
            char      m_szPrimeUse[1+1];
            bool      m_bCommOrig;
            char      m_szCommOrig[17+1];
            bool      m_bCommAvail;
            char      m_szCommAvail[17+1];
            bool      m_bChgoffCode;
            char      m_szChgoffCode[1+1];
            bool      m_bStaccrCode;
            char      m_szStaccrCode[1+1];
            bool      m_bOrigMaturityDate;
            char      m_szOrigMaturityDate[8+1];
            bool      m_bCurrMaturityDate;
            char      m_szCurrMaturityDate[8+1];
            bool      m_bMthsToMatOrig;
            char      m_szMthsToMatOrig[4+1];
            bool      m_bMthsToMatRem;
            char      m_szMthsToMatRem[4+1];
            bool      m_bAffAcctUse;
            char      m_szAffAcctUse[1+1];
            bool      m_bAffAcctSystem;
            char      m_szAffAcctSystem[1+1];
            bool      m_bAffAcctNo;
            char      m_szAffAcctNo[25+1];
            bool      m_bYtdIntErnd;
            char      m_szYtdIntErnd[17+1];
            bool      m_bYtdIntColl;
            char      m_szYtdIntColl[17+1];
            bool      m_bNxtDueDate;
            char      m_szNxtDueDate[8+1];
            bool      m_bNxtDueAmt;
            char      m_szNxtDueAmt[17+1];
            bool      m_bCustStmt;
            char      m_szCustStmt[1+1];
            bool      m_bPymtDueNotice;
            char      m_szPymtDueNotice[1+1];
            bool      m_bTranDetail;
            char      m_szTranDetail[1+1];
            bool      m_bPastDueDate;
            char      m_szPastDueDate[8+1];
            bool      m_bPastDueNo[5];
            char      m_szPastDueNo[5][4+1];
            bool      m_bLastPymtDate;
            char      m_szLastPymtDate[8+1];
            bool      m_bEditedNoteNbr;
            char      m_szEditedNoteNbr[11+1];
            bool      m_bLastPaymentAmt;
            char      m_szLastPaymentAmt[17+1];
            bool      m_bPastDueAmt;
            char      m_szPastDueAmt[17+1];
            bool      m_bClMcaBaseCurrency;
            char      m_szClMcaBaseCurrency[3+1];
            bool      m_bClMcaBaseCurrDec;
            char      m_szClMcaBaseCurrDec[1+1];
            bool      m_bUserCharField1;
            char      m_szUserCharField1[15+1];
            bool      m_bUserCharField2;
            char      m_szUserCharField2[15+1];
            bool      m_bUserCharField3;
            char      m_szUserCharField3[15+1];
            bool      m_bUserNumField1;
            char      m_szUserNumField1[17+1];
            bool      m_bUserNumField2;
            char      m_szUserNumField2[17+1];
            bool      m_bUserNumField3;
            char      m_szUserNumField3[17+1];
        
          public:
            long      m_lIndex;

            AsdNoteInformation ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bBankNo = false;
                strcpy(m_szBankNo, "");
                m_bControl2 = false;
                strcpy(m_szControl2, "");
                m_bControl3 = false;
                strcpy(m_szControl3, "");
                m_bRefCust = false;
                strcpy(m_szRefCust, "");
                m_bRefNote = false;
                strcpy(m_szRefNote, "");
                m_bRefSeq = false;
                strcpy(m_szRefSeq, "");
                m_bPartNbr = false;
                strcpy(m_szPartNbr, "00");
                m_bNoteDate = false;
                strcpy(m_szNoteDate, "");
                m_bNoteType = false;
                strcpy(m_szNoteType, "000");
                m_bPrimOff = false;
                strcpy(m_szPrimOff, "");
                m_bStatus = false;
                strcpy(m_szStatus, "");
                m_bOrigProc = false;
                strcpy(m_szOrigProc, "+0000000000000.00");
                m_bPrinBal = false;
                strcpy(m_szPrinBal, "+0000000000000.00");
                m_bIntBal = false;
                strcpy(m_szIntBal, "+0000000000000.00");
                m_bFeeBal = false;
                strcpy(m_szFeeBal, "+0000000000000.00");
                m_bCurBal = false;
                strcpy(m_szCurBal, "+0000000000000.00");
                m_bCurPayoff = false;
                strcpy(m_szCurPayoff, "+0000000000000.00");
                m_bOrigNoteAmt = false;
                strcpy(m_szOrigNoteAmt, "+0000000000000.00");
                m_bLtChgDue = false;
                strcpy(m_szLtChgDue, "+0000000000000.00");
                m_bHoldAmt = false;
                strcpy(m_szHoldAmt, "+0000000000000.00");
                m_bOrigIntRate = false;
                strcpy(m_szOrigIntRate, "+0.00000000");
                m_bCurIntRate = false;
                strcpy(m_szCurIntRate, "+0.00000000");
                m_bDlyIntAmt = false;
                strcpy(m_szDlyIntAmt, "+0000000000000.000000");
                m_bAccrMethod = false;
                strcpy(m_szAccrMethod, "00");
                m_bPrimeUse = false;
                strcpy(m_szPrimeUse, "");
                m_bCommOrig = false;
                strcpy(m_szCommOrig, "+0000000000000.00");
                m_bCommAvail = false;
                strcpy(m_szCommAvail, "+0000000000000.00");
                m_bChgoffCode = false;
                strcpy(m_szChgoffCode, "");
                m_bStaccrCode = false;
                strcpy(m_szStaccrCode, "");
                m_bOrigMaturityDate = false;
                strcpy(m_szOrigMaturityDate, "");
                m_bCurrMaturityDate = false;
                strcpy(m_szCurrMaturityDate, "");
                m_bMthsToMatOrig = false;
                strcpy(m_szMthsToMatOrig, "+000");
                m_bMthsToMatRem = false;
                strcpy(m_szMthsToMatRem, "+000");
                m_bAffAcctUse = false;
                strcpy(m_szAffAcctUse, "");
                m_bAffAcctSystem = false;
                strcpy(m_szAffAcctSystem, "");
                m_bAffAcctNo = false;
                strcpy(m_szAffAcctNo, "");
                m_bYtdIntErnd = false;
                strcpy(m_szYtdIntErnd, "+0000000000000.00");
                m_bYtdIntColl = false;
                strcpy(m_szYtdIntColl, "+0000000000000.00");
                m_bNxtDueDate = false;
                strcpy(m_szNxtDueDate, "");
                m_bNxtDueAmt = false;
                strcpy(m_szNxtDueAmt, "+0000000000000.00");
                m_bCustStmt = false;
                strcpy(m_szCustStmt, "");
                m_bPymtDueNotice = false;
                strcpy(m_szPymtDueNotice, "");
                m_bTranDetail = false;
                strcpy(m_szTranDetail, "");
                m_bPastDueDate = false;
                strcpy(m_szPastDueDate, "");
                long lOccurs;
                for (lOccurs = 0; lOccurs < 5; lOccurs++)
                {
                    m_bPastDueNo[lOccurs] = false;
                strcpy(m_szPastDueNo[lOccurs], "+000");
                }
                m_bLastPymtDate = false;
                strcpy(m_szLastPymtDate, "");
                m_bEditedNoteNbr = false;
                strcpy(m_szEditedNoteNbr, "");
                m_bLastPaymentAmt = false;
                strcpy(m_szLastPaymentAmt, "+0000000000000.00");
                m_bPastDueAmt = false;
                strcpy(m_szPastDueAmt, "+0000000000000.00");
                m_bClMcaBaseCurrency = false;
                strcpy(m_szClMcaBaseCurrency, "");
                m_bClMcaBaseCurrDec = false;
                strcpy(m_szClMcaBaseCurrDec, "");
                m_bUserCharField1 = false;
                strcpy(m_szUserCharField1, "");
                m_bUserCharField2 = false;
                strcpy(m_szUserCharField2, "");
                m_bUserCharField3 = false;
                strcpy(m_szUserCharField3, "");
                m_bUserNumField1 = false;
                strcpy(m_szUserNumField1, "+0000000000000.00");
                m_bUserNumField2 = false;
                strcpy(m_szUserNumField2, "+0000000000000.00");
                m_bUserNumField3 = false;
                strcpy(m_szUserNumField3, "+0000000000000.00");
            
            
                for (lOccurs = 0; lOccurs < 5; lOccurs++)
                {
                    CollateralInfo[lOccurs] = &CCollateralInfo[lOccurs];

                    CCollateralInfo[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    INSTITUTION-DEFINED FIRST LEVEL OF CONTROL.
            long lBankNo () { return 2; };
            RWCString BankNo (void)
            {
                return m_szBankNo;
            }
            long BankNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szBankNo, sizeof(m_szBankNo), &m_bBankNo);
            }
            
            //    INSTITUTION-DEFINED SECOND LEVEL OF CONTROL.
            long lControl2 () { return 3; };
            RWCString Control2 (void)
            {
                return m_szControl2;
            }
            long Control2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szControl2, sizeof(m_szControl2), &m_bControl2);
            }
            
            //    INSTITUTION-DEFINED THIRD LEVEL OF CONTROL.
            long lControl3 () { return 3; };
            RWCString Control3 (void)
            {
                return m_szControl3;
            }
            long Control3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szControl3, sizeof(m_szControl3), &m_bControl3);
            }
            
            //    INSTITUTION'S CUSTOMER NUMBER.
            long lRefCust () { return 10; };
            RWCString RefCust (void)
            {
                return m_szRefCust;
            }
            long RefCust (const RWCString& rwc)
            {
                return SetString(rwc, m_szRefCust, sizeof(m_szRefCust), &m_bRefCust);
            }
            
            //    IDENTIFIES AN INDIVIDUAL NOTE FOR A CUSTOMER.
            long lRefNote () { return 8; };
            RWCString RefNote (void)
            {
                return m_szRefNote;
            }
            long RefNote (const RWCString& rwc)
            {
                return SetString(rwc, m_szRefNote, sizeof(m_szRefNote), &m_bRefNote);
            }
            
            //    DRAW SEQ #. IDENTIFIES MULTIPLE DRAWS AGAINST A COMMITMENT.
            long lRefSeq () { return 3; };
            RWCString RefSeq (void)
            {
                return m_szRefSeq;
            }
            long RefSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szRefSeq, sizeof(m_szRefSeq), &m_bRefSeq);
            }
            
            //    IDENTIFIES SOLD PORTION OF NOTE OR ORIGINAL NOTE IF "99".
            long lPartNbr () { return 2; };
            RWCString PartNbr (void)
            {
                return m_szPartNbr;
            }
            long PartNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szPartNbr, sizeof(m_szPartNbr), &m_bPartNbr);
            }
            
            //    ORIGINATION DATE OF THE NOTE.
            long lNoteDate () { return 8; };
            RWCString NoteDate (void)
            {
                return m_szNoteDate;
            }
            long NoteDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szNoteDate, sizeof(m_szNoteDate), &m_bNoteDate);
            }
            
            //    PRIMARY CLASSIFICATION OF THE NOTE.
            long lNoteType () { return 3; };
            RWCString NoteType (void)
            {
                return m_szNoteType;
            }
            long NoteType (const RWCString& rwc)
            {
                return SetString(rwc, m_szNoteType, sizeof(m_szNoteType), &m_bNoteType);
            }
            
            //    PRIMARY OFFICER RESPONSIBLE FOR THE NOTE.
            long lPrimOff () { return 5; };
            RWCString PrimOff (void)
            {
                return m_szPrimOff;
            }
            long PrimOff (const RWCString& rwc)
            {
                return SetString(rwc, m_szPrimOff, sizeof(m_szPrimOff), &m_bPrimOff);
            }
            
            //    CURRENT STATUS OF THE ACCOUNT (ACTIVE, CLOSED, ETC.).
            long lStatus () { return 1; };
            RWCString Status (void)
            {
                return m_szStatus;
            }
            long Status (const RWCString& rwc)
            {
                return SetString(rwc, m_szStatus, sizeof(m_szStatus), &m_bStatus);
            }
            
            //    ORIGINAL PRINCIPAL ADVANCED WHEN THE NOTE WAS ISSUED.
            long lOrigProc () { return 17; };
            RWCString OrigProc (void)
            {
                return AceZeroSupp(m_szOrigProc, &m_szSuppressBuff[0]);
            }
            RWCString OrigProcRaw (void)
            {
                return m_szOrigProc;
            }
            long OrigProc (const RWCString& rwc)
            {
                return SetString(rwc, m_szOrigProc, sizeof(m_szOrigProc), &m_bOrigProc);
            }
            
            //    CURRENT PRINCIPAL BALANCE OF THE NOTE.
            long lPrinBal () { return 17; };
            RWCString PrinBal (void)
            {
                return AceZeroSupp(m_szPrinBal, &m_szSuppressBuff[0]);
            }
            RWCString PrinBalRaw (void)
            {
                return m_szPrinBal;
            }
            long PrinBal (const RWCString& rwc)
            {
                return SetString(rwc, m_szPrinBal, sizeof(m_szPrinBal), &m_bPrinBal);
            }
            
            //    CURRENT INTEREST DUE.
            long lIntBal () { return 17; };
            RWCString IntBal (void)
            {
                return AceZeroSupp(m_szIntBal, &m_szSuppressBuff[0]);
            }
            RWCString IntBalRaw (void)
            {
                return m_szIntBal;
            }
            long IntBal (const RWCString& rwc)
            {
                return SetString(rwc, m_szIntBal, sizeof(m_szIntBal), &m_bIntBal);
            }
            
            //    AMOUNT OF FEES DUE ON THE ACCOUNT.
            long lFeeBal () { return 17; };
            RWCString FeeBal (void)
            {
                return AceZeroSupp(m_szFeeBal, &m_szSuppressBuff[0]);
            }
            RWCString FeeBalRaw (void)
            {
                return m_szFeeBal;
            }
            long FeeBal (const RWCString& rwc)
            {
                return SetString(rwc, m_szFeeBal, sizeof(m_szFeeBal), &m_bFeeBal);
            }
            
            //    TOTAL AMT DUE ON NOTE (PRINC, COMMIT FEES, AND OTHER FEES).
            long lCurBal () { return 17; };
            RWCString CurBal (void)
            {
                return AceZeroSupp(m_szCurBal, &m_szSuppressBuff[0]);
            }
            RWCString CurBalRaw (void)
            {
                return m_szCurBal;
            }
            long CurBal (const RWCString& rwc)
            {
                return SetString(rwc, m_szCurBal, sizeof(m_szCurBal), &m_bCurBal);
            }
            
            //    AMT TO PAYOFF ALL BALANCES, CONSIDERING REBATABLE AMOUNTS.
            long lCurPayoff () { return 17; };
            RWCString CurPayoff (void)
            {
                return AceZeroSupp(m_szCurPayoff, &m_szSuppressBuff[0]);
            }
            RWCString CurPayoffRaw (void)
            {
                return m_szCurPayoff;
            }
            long CurPayoff (const RWCString& rwc)
            {
                return SetString(rwc, m_szCurPayoff, sizeof(m_szCurPayoff), &m_bCurPayoff);
            }
            
            //    ORIGINAL NOTE AMOUNT FOR A DISCOUNTED NOTE.
            long lOrigNoteAmt () { return 17; };
            RWCString OrigNoteAmt (void)
            {
                return AceZeroSupp(m_szOrigNoteAmt, &m_szSuppressBuff[0]);
            }
            RWCString OrigNoteAmtRaw (void)
            {
                return m_szOrigNoteAmt;
            }
            long OrigNoteAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szOrigNoteAmt, sizeof(m_szOrigNoteAmt), &m_bOrigNoteAmt);
            }
            
            //    TOTAL AMOUNT OF LATE CHARGES DUE ON THE NOTE.
            long lLtChgDue () { return 17; };
            RWCString LtChgDue (void)
            {
                return AceZeroSupp(m_szLtChgDue, &m_szSuppressBuff[0]);
            }
            RWCString LtChgDueRaw (void)
            {
                return m_szLtChgDue;
            }
            long LtChgDue (const RWCString& rwc)
            {
                return SetString(rwc, m_szLtChgDue, sizeof(m_szLtChgDue), &m_bLtChgDue);
            }
            
            //    TOTAL AMOUNT OF HOLDS ON THE STOP/HOLD FILE FOR THE NOTE.
            long lHoldAmt () { return 17; };
            RWCString HoldAmt (void)
            {
                return AceZeroSupp(m_szHoldAmt, &m_szSuppressBuff[0]);
            }
            RWCString HoldAmtRaw (void)
            {
                return m_szHoldAmt;
            }
            long HoldAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szHoldAmt, sizeof(m_szHoldAmt), &m_bHoldAmt);
            }
            
            //    ORIGINAL INTEREST RATE USED TO ACCRUE INTEREST.
            long lOrigIntRate () { return 11; };
            RWCString OrigIntRate (void)
            {
                return AceZeroSupp(m_szOrigIntRate, &m_szSuppressBuff[0]);
            }
            RWCString OrigIntRateRaw (void)
            {
                return m_szOrigIntRate;
            }
            long OrigIntRate (const RWCString& rwc)
            {
                return SetString(rwc, m_szOrigIntRate, sizeof(m_szOrigIntRate), &m_bOrigIntRate);
            }
            
            //    CURRENT INTEREST RATE ON THE NOTE.
            long lCurIntRate () { return 11; };
            RWCString CurIntRate (void)
            {
                return AceZeroSupp(m_szCurIntRate, &m_szSuppressBuff[0]);
            }
            RWCString CurIntRateRaw (void)
            {
                return m_szCurIntRate;
            }
            long CurIntRate (const RWCString& rwc)
            {
                return SetString(rwc, m_szCurIntRate, sizeof(m_szCurIntRate), &m_bCurIntRate);
            }
            
            //    DAILY INTEREST AMOUNT.
            long lDlyIntAmt () { return 21; };
            RWCString DlyIntAmt (void)
            {
                return AceZeroSupp(m_szDlyIntAmt, &m_szSuppressBuff[0]);
            }
            RWCString DlyIntAmtRaw (void)
            {
                return m_szDlyIntAmt;
            }
            long DlyIntAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szDlyIntAmt, sizeof(m_szDlyIntAmt), &m_bDlyIntAmt);
            }
            
            //    ACCRUAL METHOD USED TO EARN INTEREST ON THE NOTE.
            long lAccrMethod () { return 2; };
            RWCString AccrMethod (void)
            {
                return m_szAccrMethod;
            }
            long AccrMethod (const RWCString& rwc)
            {
                return SetString(rwc, m_szAccrMethod, sizeof(m_szAccrMethod), &m_bAccrMethod);
            }
            
            //    INDICATE ONE OF THREE PRIME RATES TO WHICH THE NOTE IS TIED.
            long lPrimeUse () { return 1; };
            RWCString PrimeUse (void)
            {
                return m_szPrimeUse;
            }
            long PrimeUse (const RWCString& rwc)
            {
                return SetString(rwc, m_szPrimeUse, sizeof(m_szPrimeUse), &m_bPrimeUse);
            }
            
            //    ORIGINAL AMOUNT COMMITED TO THE BORROWER.
            long lCommOrig () { return 17; };
            RWCString CommOrig (void)
            {
                return AceZeroSupp(m_szCommOrig, &m_szSuppressBuff[0]);
            }
            RWCString CommOrigRaw (void)
            {
                return m_szCommOrig;
            }
            long CommOrig (const RWCString& rwc)
            {
                return SetString(rwc, m_szCommOrig, sizeof(m_szCommOrig), &m_bCommOrig);
            }
            
            //    AMOUNT OF THE COMMITMENT THAT IS AVAILABLE TO THE CUSTOMER.
            long lCommAvail () { return 17; };
            RWCString CommAvail (void)
            {
                return AceZeroSupp(m_szCommAvail, &m_szSuppressBuff[0]);
            }
            RWCString CommAvailRaw (void)
            {
                return m_szCommAvail;
            }
            long CommAvail (const RWCString& rwc)
            {
                return SetString(rwc, m_szCommAvail, sizeof(m_szCommAvail), &m_bCommAvail);
            }
            
            //    EXTENT TO WHICH THE PRINCIPAL HAS BEEN CHARGED OFF.
            long lChgoffCode () { return 1; };
            RWCString ChgoffCode (void)
            {
                return m_szChgoffCode;
            }
            long ChgoffCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szChgoffCode, sizeof(m_szChgoffCode), &m_bChgoffCode);
            }
            
            //    INDICATES WHETHER THE NOTE IS IN STOP ACCRUAL STATUS.
            long lStaccrCode () { return 1; };
            RWCString StaccrCode (void)
            {
                return m_szStaccrCode;
            }
            long StaccrCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szStaccrCode, sizeof(m_szStaccrCode), &m_bStaccrCode);
            }
            
            //    DATE THE NOTE MATURES OR THE COMMITMENT EXPIRES.
            long lOrigMaturityDate () { return 8; };
            RWCString OrigMaturityDate (void)
            {
                return m_szOrigMaturityDate;
            }
            long OrigMaturityDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szOrigMaturityDate, sizeof(m_szOrigMaturityDate), &m_bOrigMaturityDate);
            }
            
            //    DATE WHEN THE NOTE IS SCHEDULED TO MATURE.
            long lCurrMaturityDate () { return 8; };
            RWCString CurrMaturityDate (void)
            {
                return m_szCurrMaturityDate;
            }
            long CurrMaturityDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szCurrMaturityDate, sizeof(m_szCurrMaturityDate), &m_bCurrMaturityDate);
            }
            
            //    ORIGINAL NUMBER OF MONTHS UNTIL THE CURRENT MATURITY DATE.
            long lMthsToMatOrig () { return 4; };
            RWCString MthsToMatOrig (void)
            {
                return AceZeroSupp(m_szMthsToMatOrig, &m_szSuppressBuff[0]);
            }
            RWCString MthsToMatOrigRaw (void)
            {
                return m_szMthsToMatOrig;
            }
            long MthsToMatOrig (const RWCString& rwc)
            {
                return SetString(rwc, m_szMthsToMatOrig, sizeof(m_szMthsToMatOrig), &m_bMthsToMatOrig);
            }
            
            //    REMAINING NUMBER OF MONTHS UNTIL THE CURRENT MATURITY DATE.
            long lMthsToMatRem () { return 4; };
            RWCString MthsToMatRem (void)
            {
                return AceZeroSupp(m_szMthsToMatRem, &m_szSuppressBuff[0]);
            }
            RWCString MthsToMatRemRaw (void)
            {
                return m_szMthsToMatRem;
            }
            long MthsToMatRem (const RWCString& rwc)
            {
                return SetString(rwc, m_szMthsToMatRem, sizeof(m_szMthsToMatRem), &m_bMthsToMatRem);
            }
            
            //    HOW THE AFFILIATE ACCT NUM IS USED IN RELATION TO THE NOTE.
            long lAffAcctUse () { return 1; };
            RWCString AffAcctUse (void)
            {
                return m_szAffAcctUse;
            }
            long AffAcctUse (const RWCString& rwc)
            {
                return SetString(rwc, m_szAffAcctUse, sizeof(m_szAffAcctUse), &m_bAffAcctUse);
            }
            
            //    SYSTEM IN WHICH THE AFFILIATED ACCOUNT IS LOCATED.
            long lAffAcctSystem () { return 1; };
            RWCString AffAcctSystem (void)
            {
                return m_szAffAcctSystem;
            }
            long AffAcctSystem (const RWCString& rwc)
            {
                return SetString(rwc, m_szAffAcctSystem, sizeof(m_szAffAcctSystem), &m_bAffAcctSystem);
            }
            
            //    AFFILIATE ACCOUNT NUMBER ASSOCIATED WITH THE NOTE.
            long lAffAcctNo () { return 25; };
            RWCString AffAcctNo (void)
            {
                return m_szAffAcctNo;
            }
            long AffAcctNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szAffAcctNo, sizeof(m_szAffAcctNo), &m_bAffAcctNo);
            }
            
            //    TOTAL YEAR-TO-DATE INTEREST EARNED.
            long lYtdIntErnd () { return 17; };
            RWCString YtdIntErnd (void)
            {
                return AceZeroSupp(m_szYtdIntErnd, &m_szSuppressBuff[0]);
            }
            RWCString YtdIntErndRaw (void)
            {
                return m_szYtdIntErnd;
            }
            long YtdIntErnd (const RWCString& rwc)
            {
                return SetString(rwc, m_szYtdIntErnd, sizeof(m_szYtdIntErnd), &m_bYtdIntErnd);
            }
            
            //    TOTAL YEAR-TO-DATE INTEREST COLLECTED.
            long lYtdIntColl () { return 17; };
            RWCString YtdIntColl (void)
            {
                return AceZeroSupp(m_szYtdIntColl, &m_szSuppressBuff[0]);
            }
            RWCString YtdIntCollRaw (void)
            {
                return m_szYtdIntColl;
            }
            long YtdIntColl (const RWCString& rwc)
            {
                return SetString(rwc, m_szYtdIntColl, sizeof(m_szYtdIntColl), &m_bYtdIntColl);
            }
            
            //    DATE WHEN THE NEXT PAYMENT IS DUE.
            long lNxtDueDate () { return 8; };
            RWCString NxtDueDate (void)
            {
                return m_szNxtDueDate;
            }
            long NxtDueDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szNxtDueDate, sizeof(m_szNxtDueDate), &m_bNxtDueDate);
            }
            
            //    AMOUNT THAT IS DUE ON THE NEXT DUE DATE.
            long lNxtDueAmt () { return 17; };
            RWCString NxtDueAmt (void)
            {
                return AceZeroSupp(m_szNxtDueAmt, &m_szSuppressBuff[0]);
            }
            RWCString NxtDueAmtRaw (void)
            {
                return m_szNxtDueAmt;
            }
            long NxtDueAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szNxtDueAmt, sizeof(m_szNxtDueAmt), &m_bNxtDueAmt);
            }
            
            //    INDICATES WHETHER NOTE IS ON CUST STMT OR INDIVIDUALSTMT.
            long lCustStmt () { return 1; };
            RWCString CustStmt (void)
            {
                return m_szCustStmt;
            }
            long CustStmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szCustStmt, sizeof(m_szCustStmt), &m_bCustStmt);
            }
            
            //    INDICATES WHETHER TO SEND A BILLING NOTICE TO THE BORROWER.
            long lPymtDueNotice () { return 1; };
            RWCString PymtDueNotice (void)
            {
                return m_szPymtDueNotice;
            }
            long PymtDueNotice (const RWCString& rwc)
            {
                return SetString(rwc, m_szPymtDueNotice, sizeof(m_szPymtDueNotice), &m_bPymtDueNotice);
            }
            
            //    INDICATES WHETHER TRAN HISTORY IS REQUIRED ON STATEMENTS.
            long lTranDetail () { return 1; };
            RWCString TranDetail (void)
            {
                return m_szTranDetail;
            }
            long TranDetail (const RWCString& rwc)
            {
                return SetString(rwc, m_szTranDetail, sizeof(m_szTranDetail), &m_bTranDetail);
            }
            
            //    DATE WHEN THE PAYMENT WAS PAST DUE.
            long lPastDueDate () { return 8; };
            RWCString PastDueDate (void)
            {
                return m_szPastDueDate;
            }
            long PastDueDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szPastDueDate, sizeof(m_szPastDueDate), &m_bPastDueDate);
            }
            
            //    NUMBER OF TIMES A NOTE HAS CROSSED PAST DUE BOUNDARIES.
            long lPastDueNo () { return 4; };
            RWCString PastDueNo (long i)
            {
                if (i >= 0 && i < 5)
                    return AceZeroSupp(m_szPastDueNo[i], &m_szSuppressBuff[0]);
                else
                    return "";
            }
            RWCString PastDueNoRaw (long i)
            {
                if (i >= 0 && i < 5)
                    return m_szPastDueNo[i];
                else
                    return "";
            }
            long PastDueNo (const RWCString& rwc, long i)
            {
                if (i >= 0 && i < 5)
                return SetString(rwc, m_szPastDueNo[i], sizeof(m_szPastDueNo[i]), &m_bPastDueNo[i]);
                else
                    return -1;
            }
            
            //    EFFECTIVE DATE OF THE LAST COMBINED PAYMENT TRANSACTION.
            long lLastPymtDate () { return 8; };
            RWCString LastPymtDate (void)
            {
                return m_szLastPymtDate;
            }
            long LastPymtDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szLastPymtDate, sizeof(m_szLastPymtDate), &m_bLastPymtDate);
            }
            
            //    EDITED NOTE NUMBER.
            long lEditedNoteNbr () { return 11; };
            RWCString EditedNoteNbr (void)
            {
                return m_szEditedNoteNbr;
            }
            long EditedNoteNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szEditedNoteNbr, sizeof(m_szEditedNoteNbr), &m_bEditedNoteNbr);
            }
            
            //    AMOUNT OF THE LAST PAYMENT.
            long lLastPaymentAmt () { return 17; };
            RWCString LastPaymentAmt (void)
            {
                return AceZeroSupp(m_szLastPaymentAmt, &m_szSuppressBuff[0]);
            }
            RWCString LastPaymentAmtRaw (void)
            {
                return m_szLastPaymentAmt;
            }
            long LastPaymentAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szLastPaymentAmt, sizeof(m_szLastPaymentAmt), &m_bLastPaymentAmt);
            }
            
            //    PAYMENT AMOUNT THAT IS PAST DUE.
            long lPastDueAmt () { return 17; };
            RWCString PastDueAmt (void)
            {
                return AceZeroSupp(m_szPastDueAmt, &m_szSuppressBuff[0]);
            }
            RWCString PastDueAmtRaw (void)
            {
                return m_szPastDueAmt;
            }
            long PastDueAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPastDueAmt, sizeof(m_szPastDueAmt), &m_bPastDueAmt);
            }
            
            //    CURRENCY FOR THE ACCOUNT (U.S. DOLLARS, JAPANESE YEN, ETC.).
            long lClMcaBaseCurrency () { return 3; };
            RWCString ClMcaBaseCurrency (void)
            {
                return m_szClMcaBaseCurrency;
            }
            long ClMcaBaseCurrency (const RWCString& rwc)
            {
                return SetString(rwc, m_szClMcaBaseCurrency, sizeof(m_szClMcaBaseCurrency), &m_bClMcaBaseCurrency);
            }
            
            //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY.
            long lClMcaBaseCurrDec () { return 1; };
            RWCString ClMcaBaseCurrDec (void)
            {
                return m_szClMcaBaseCurrDec;
            }
            long ClMcaBaseCurrDec (const RWCString& rwc)
            {
                return SetString(rwc, m_szClMcaBaseCurrDec, sizeof(m_szClMcaBaseCurrDec), &m_bClMcaBaseCurrDec);
            }
            
            //    USER CHARACTER FIELD 1.
            long lUserCharField1 () { return 15; };
            RWCString UserCharField1 (void)
            {
                return m_szUserCharField1;
            }
            long UserCharField1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szUserCharField1, sizeof(m_szUserCharField1), &m_bUserCharField1);
            }
            
            //    USER CHARACTER FIELD 2.
            long lUserCharField2 () { return 15; };
            RWCString UserCharField2 (void)
            {
                return m_szUserCharField2;
            }
            long UserCharField2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szUserCharField2, sizeof(m_szUserCharField2), &m_bUserCharField2);
            }
            
            //    USER CHARACTER FIELD 3.
            long lUserCharField3 () { return 15; };
            RWCString UserCharField3 (void)
            {
                return m_szUserCharField3;
            }
            long UserCharField3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szUserCharField3, sizeof(m_szUserCharField3), &m_bUserCharField3);
            }
            
            //    USER NUMERIC FIELD 1.
            long lUserNumField1 () { return 17; };
            RWCString UserNumField1 (void)
            {
                return AceZeroSupp(m_szUserNumField1, &m_szSuppressBuff[0]);
            }
            RWCString UserNumField1Raw (void)
            {
                return m_szUserNumField1;
            }
            long UserNumField1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szUserNumField1, sizeof(m_szUserNumField1), &m_bUserNumField1);
            }
            
            //    USER NUMERIC FIELD 2.
            long lUserNumField2 () { return 17; };
            RWCString UserNumField2 (void)
            {
                return AceZeroSupp(m_szUserNumField2, &m_szSuppressBuff[0]);
            }
            RWCString UserNumField2Raw (void)
            {
                return m_szUserNumField2;
            }
            long UserNumField2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szUserNumField2, sizeof(m_szUserNumField2), &m_bUserNumField2);
            }
            
            //    USER NUMERIC FIELD 3.
            long lUserNumField3 () { return 17; };
            RWCString UserNumField3 (void)
            {
                return AceZeroSupp(m_szUserNumField3, &m_szSuppressBuff[0]);
            }
            RWCString UserNumField3Raw (void)
            {
                return m_szUserNumField3;
            }
            long UserNumField3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szUserNumField3, sizeof(m_szUserNumField3), &m_bUserNumField3);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bBankNo) return true;
                if (m_bControl2) return true;
                if (m_bControl3) return true;
                if (m_bRefCust) return true;
                if (m_bRefNote) return true;
                if (m_bRefSeq) return true;
                if (m_bPartNbr) return true;
                if (m_bNoteDate) return true;
                if (m_bNoteType) return true;
                if (m_bPrimOff) return true;
                if (m_bStatus) return true;
                if (m_bOrigProc) return true;
                if (m_bPrinBal) return true;
                if (m_bIntBal) return true;
                if (m_bFeeBal) return true;
                if (m_bCurBal) return true;
                if (m_bCurPayoff) return true;
                if (m_bOrigNoteAmt) return true;
                if (m_bLtChgDue) return true;
                if (m_bHoldAmt) return true;
                if (m_bOrigIntRate) return true;
                if (m_bCurIntRate) return true;
                if (m_bDlyIntAmt) return true;
                if (m_bAccrMethod) return true;
                if (m_bPrimeUse) return true;
                if (m_bCommOrig) return true;
                if (m_bCommAvail) return true;
                if (m_bChgoffCode) return true;
                if (m_bStaccrCode) return true;
                if (m_bOrigMaturityDate) return true;
                if (m_bCurrMaturityDate) return true;
                if (m_bMthsToMatOrig) return true;
                if (m_bMthsToMatRem) return true;
                if (m_bAffAcctUse) return true;
                if (m_bAffAcctSystem) return true;
                if (m_bAffAcctNo) return true;
                if (m_bYtdIntErnd) return true;
                if (m_bYtdIntColl) return true;
                if (m_bNxtDueDate) return true;
                if (m_bNxtDueAmt) return true;
                if (m_bCustStmt) return true;
                if (m_bPymtDueNotice) return true;
                if (m_bTranDetail) return true;
                if (m_bPastDueDate) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 5; lOccurs++)
                    if (m_bPastDueNo[lOccurs]) return true;
                if (m_bLastPymtDate) return true;
                if (m_bEditedNoteNbr) return true;
                if (m_bLastPaymentAmt) return true;
                if (m_bPastDueAmt) return true;
                if (m_bClMcaBaseCurrency) return true;
                if (m_bClMcaBaseCurrDec) return true;
                if (m_bUserCharField1) return true;
                if (m_bUserCharField2) return true;
                if (m_bUserCharField3) return true;
                if (m_bUserNumField1) return true;
                if (m_bUserNumField2) return true;
                if (m_bUserNumField3) return true;
                for (lOccurs = 0; lOccurs < 5; lOccurs++)
                {
                    if(CCollateralInfo[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "NoteInformation", m_lIndex);
                    AddXMLField(pSess, "BankNo", m_szBankNo, &m_bBankNo);
                    AddXMLField(pSess, "Control2", m_szControl2, &m_bControl2);
                    AddXMLField(pSess, "Control3", m_szControl3, &m_bControl3);
                    AddXMLField(pSess, "RefCust", m_szRefCust, &m_bRefCust);
                    AddXMLField(pSess, "RefNote", m_szRefNote, &m_bRefNote);
                    AddXMLField(pSess, "RefSeq", m_szRefSeq, &m_bRefSeq);
                    AddXMLField(pSess, "PartNbr", m_szPartNbr, &m_bPartNbr);
                    AddXMLField(pSess, "NoteDate", m_szNoteDate, &m_bNoteDate);
                    AddXMLField(pSess, "NoteType", m_szNoteType, &m_bNoteType);
                    AddXMLField(pSess, "PrimOff", m_szPrimOff, &m_bPrimOff);
                    AddXMLField(pSess, "Status", m_szStatus, &m_bStatus);
                    AddXMLField(pSess, "OrigProc", m_szOrigProc, &m_bOrigProc);
                    AddXMLField(pSess, "PrinBal", m_szPrinBal, &m_bPrinBal);
                    AddXMLField(pSess, "IntBal", m_szIntBal, &m_bIntBal);
                    AddXMLField(pSess, "FeeBal", m_szFeeBal, &m_bFeeBal);
                    AddXMLField(pSess, "CurBal", m_szCurBal, &m_bCurBal);
                    AddXMLField(pSess, "CurPayoff", m_szCurPayoff, &m_bCurPayoff);
                    AddXMLField(pSess, "OrigNoteAmt", m_szOrigNoteAmt, &m_bOrigNoteAmt);
                    AddXMLField(pSess, "LtChgDue", m_szLtChgDue, &m_bLtChgDue);
                    AddXMLField(pSess, "HoldAmt", m_szHoldAmt, &m_bHoldAmt);
                    AddXMLField(pSess, "OrigIntRate", m_szOrigIntRate, &m_bOrigIntRate);
                    AddXMLField(pSess, "CurIntRate", m_szCurIntRate, &m_bCurIntRate);
                    AddXMLField(pSess, "DlyIntAmt", m_szDlyIntAmt, &m_bDlyIntAmt);
                    AddXMLField(pSess, "AccrMethod", m_szAccrMethod, &m_bAccrMethod);
                    AddXMLField(pSess, "PrimeUse", m_szPrimeUse, &m_bPrimeUse);
                    AddXMLField(pSess, "CommOrig", m_szCommOrig, &m_bCommOrig);
                    AddXMLField(pSess, "CommAvail", m_szCommAvail, &m_bCommAvail);
                    AddXMLField(pSess, "ChgoffCode", m_szChgoffCode, &m_bChgoffCode);
                    AddXMLField(pSess, "StaccrCode", m_szStaccrCode, &m_bStaccrCode);
                    AddXMLField(pSess, "OrigMaturityDate", m_szOrigMaturityDate, &m_bOrigMaturityDate);
                    AddXMLField(pSess, "CurrMaturityDate", m_szCurrMaturityDate, &m_bCurrMaturityDate);
                    AddXMLField(pSess, "MthsToMatOrig", m_szMthsToMatOrig, &m_bMthsToMatOrig);
                    AddXMLField(pSess, "MthsToMatRem", m_szMthsToMatRem, &m_bMthsToMatRem);
                    AddXMLField(pSess, "AffAcctUse", m_szAffAcctUse, &m_bAffAcctUse);
                    AddXMLField(pSess, "AffAcctSystem", m_szAffAcctSystem, &m_bAffAcctSystem);
                    AddXMLField(pSess, "AffAcctNo", m_szAffAcctNo, &m_bAffAcctNo);
                    AddXMLField(pSess, "YtdIntErnd", m_szYtdIntErnd, &m_bYtdIntErnd);
                    AddXMLField(pSess, "YtdIntColl", m_szYtdIntColl, &m_bYtdIntColl);
                    AddXMLField(pSess, "NxtDueDate", m_szNxtDueDate, &m_bNxtDueDate);
                    AddXMLField(pSess, "NxtDueAmt", m_szNxtDueAmt, &m_bNxtDueAmt);
                    AddXMLField(pSess, "CustStmt", m_szCustStmt, &m_bCustStmt);
                    AddXMLField(pSess, "PymtDueNotice", m_szPymtDueNotice, &m_bPymtDueNotice);
                    AddXMLField(pSess, "TranDetail", m_szTranDetail, &m_bTranDetail);
                    AddXMLField(pSess, "PastDueDate", m_szPastDueDate, &m_bPastDueDate);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 5; lOccurs++)
                    AddXMLField(pSess, "PastDueNo", m_szPastDueNo[lOccurs], &m_bPastDueNo[lOccurs], lOccurs);
                    AddXMLField(pSess, "LastPymtDate", m_szLastPymtDate, &m_bLastPymtDate);
                    AddXMLField(pSess, "EditedNoteNbr", m_szEditedNoteNbr, &m_bEditedNoteNbr);
                    AddXMLField(pSess, "LastPaymentAmt", m_szLastPaymentAmt, &m_bLastPaymentAmt);
                    AddXMLField(pSess, "PastDueAmt", m_szPastDueAmt, &m_bPastDueAmt);
                    AddXMLField(pSess, "ClMcaBaseCurrency", m_szClMcaBaseCurrency, &m_bClMcaBaseCurrency);
                    AddXMLField(pSess, "ClMcaBaseCurrDec", m_szClMcaBaseCurrDec, &m_bClMcaBaseCurrDec);
                    AddXMLField(pSess, "UserCharField1", m_szUserCharField1, &m_bUserCharField1);
                    AddXMLField(pSess, "UserCharField2", m_szUserCharField2, &m_bUserCharField2);
                    AddXMLField(pSess, "UserCharField3", m_szUserCharField3, &m_bUserCharField3);
                    AddXMLField(pSess, "UserNumField1", m_szUserNumField1, &m_bUserNumField1);
                    AddXMLField(pSess, "UserNumField2", m_szUserNumField2, &m_bUserNumField2);
                    AddXMLField(pSess, "UserNumField3", m_szUserNumField3, &m_bUserNumField3);
                    for (lOccurs = 0; lOccurs < 5; lOccurs++)
                    {
                        CCollateralInfo[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "NoteInformation");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "NoteInformation", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "BankNo", m_szBankNo);
                    GetXMLField(pSess, "Control2", m_szControl2);
                    GetXMLField(pSess, "Control3", m_szControl3);
                    GetXMLField(pSess, "RefCust", m_szRefCust);
                    GetXMLField(pSess, "RefNote", m_szRefNote);
                    GetXMLField(pSess, "RefSeq", m_szRefSeq);
                    GetXMLField(pSess, "PartNbr", m_szPartNbr);
                    GetXMLField(pSess, "NoteDate", m_szNoteDate);
                    GetXMLField(pSess, "NoteType", m_szNoteType);
                    GetXMLField(pSess, "PrimOff", m_szPrimOff);
                    GetXMLField(pSess, "Status", m_szStatus);
                    GetXMLField(pSess, "OrigProc", m_szOrigProc);
                    GetXMLField(pSess, "PrinBal", m_szPrinBal);
                    GetXMLField(pSess, "IntBal", m_szIntBal);
                    GetXMLField(pSess, "FeeBal", m_szFeeBal);
                    GetXMLField(pSess, "CurBal", m_szCurBal);
                    GetXMLField(pSess, "CurPayoff", m_szCurPayoff);
                    GetXMLField(pSess, "OrigNoteAmt", m_szOrigNoteAmt);
                    GetXMLField(pSess, "LtChgDue", m_szLtChgDue);
                    GetXMLField(pSess, "HoldAmt", m_szHoldAmt);
                    GetXMLField(pSess, "OrigIntRate", m_szOrigIntRate);
                    GetXMLField(pSess, "CurIntRate", m_szCurIntRate);
                    GetXMLField(pSess, "DlyIntAmt", m_szDlyIntAmt);
                    GetXMLField(pSess, "AccrMethod", m_szAccrMethod);
                    GetXMLField(pSess, "PrimeUse", m_szPrimeUse);
                    GetXMLField(pSess, "CommOrig", m_szCommOrig);
                    GetXMLField(pSess, "CommAvail", m_szCommAvail);
                    GetXMLField(pSess, "ChgoffCode", m_szChgoffCode);
                    GetXMLField(pSess, "StaccrCode", m_szStaccrCode);
                    GetXMLField(pSess, "OrigMaturityDate", m_szOrigMaturityDate);
                    GetXMLField(pSess, "CurrMaturityDate", m_szCurrMaturityDate);
                    GetXMLField(pSess, "MthsToMatOrig", m_szMthsToMatOrig);
                    GetXMLField(pSess, "MthsToMatRem", m_szMthsToMatRem);
                    GetXMLField(pSess, "AffAcctUse", m_szAffAcctUse);
                    GetXMLField(pSess, "AffAcctSystem", m_szAffAcctSystem);
                    GetXMLField(pSess, "AffAcctNo", m_szAffAcctNo);
                    GetXMLField(pSess, "YtdIntErnd", m_szYtdIntErnd);
                    GetXMLField(pSess, "YtdIntColl", m_szYtdIntColl);
                    GetXMLField(pSess, "NxtDueDate", m_szNxtDueDate);
                    GetXMLField(pSess, "NxtDueAmt", m_szNxtDueAmt);
                    GetXMLField(pSess, "CustStmt", m_szCustStmt);
                    GetXMLField(pSess, "PymtDueNotice", m_szPymtDueNotice);
                    GetXMLField(pSess, "TranDetail", m_szTranDetail);
                    GetXMLField(pSess, "PastDueDate", m_szPastDueDate);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 5; lOccurs++)
                    GetXMLField(pSess, "PastDueNo", m_szPastDueNo[lOccurs], lOccurs);
                    GetXMLField(pSess, "LastPymtDate", m_szLastPymtDate);
                    GetXMLField(pSess, "EditedNoteNbr", m_szEditedNoteNbr);
                    GetXMLField(pSess, "LastPaymentAmt", m_szLastPaymentAmt);
                    GetXMLField(pSess, "PastDueAmt", m_szPastDueAmt);
                    GetXMLField(pSess, "ClMcaBaseCurrency", m_szClMcaBaseCurrency);
                    GetXMLField(pSess, "ClMcaBaseCurrDec", m_szClMcaBaseCurrDec);
                    GetXMLField(pSess, "UserCharField1", m_szUserCharField1);
                    GetXMLField(pSess, "UserCharField2", m_szUserCharField2);
                    GetXMLField(pSess, "UserCharField3", m_szUserCharField3);
                    GetXMLField(pSess, "UserNumField1", m_szUserNumField1);
                    GetXMLField(pSess, "UserNumField2", m_szUserNumField2);
                    GetXMLField(pSess, "UserNumField3", m_szUserNumField3);
                    for (lOccurs = 0; lOccurs < 5; lOccurs++)
                    {
                        CCollateralInfo[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "NoteInformation");
                };
            }
            
            //**************** Start AsdCollateralInfo Definition ****************
            //                 COLLATERAL INFORMATION
            
            class AsdCollateralInfo
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bCollType;
                char      m_szCollType[2+1];
                bool      m_bDescription;
                char      m_szDescription[40+1];
            
              public:
                long      m_lIndex;

                AsdCollateralInfo ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bCollType = false;
                    strcpy(m_szCollType, "");
                    m_bDescription = false;
                    strcpy(m_szDescription, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    USER-DEFINED COLLATERAL TYPE.
                long lCollType () { return 2; };
                RWCString CollType (void)
                {
                    return m_szCollType;
                }
                long CollType (const RWCString& rwc)
                {
                    return SetString(rwc, m_szCollType, sizeof(m_szCollType), &m_bCollType);
                }
                
                //    USER-DEFINED DESCRIPTION OF THE COLLATERAL.
                long lDescription () { return 40; };
                RWCString Description (void)
                {
                    return m_szDescription;
                }
                long Description (const RWCString& rwc)
                {
                    return SetString(rwc, m_szDescription, sizeof(m_szDescription), &m_bDescription);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bCollType) return true;
                    if (m_bDescription) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "CollateralInfo", m_lIndex);
                        AddXMLField(pSess, "CollType", m_szCollType, &m_bCollType);
                        AddXMLField(pSess, "Description", m_szDescription, &m_bDescription);
                        AddXMLCloseRecord(pSess, "CollateralInfo");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "CollateralInfo", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "CollType", m_szCollType);
                        GetXMLField(pSess, "Description", m_szDescription);
                        CloseXMLRecord(pSess, "CollateralInfo");
                    };
                }
            };

            AsdCollateralInfo  CCollateralInfo[5];
            AsdCollateralInfo *CollateralInfo[5];
            
            //**************** End AsdCollateralInfo Definition ****************
            
        };

        AsdNoteInformation  CNoteInformation[20];
        AsdNoteInformation *NoteInformation[20];
        
        //**************** End AsdNoteInformation Definition ****************
        
    };

    AsdWVCLACCT CWVCLACCT;
    AsdWVCLACCT *WVCLACCT;
    
    //**************** End AsdWVCLACCT Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdWVPCCLMSData Definition ****************

typedef AsdWVPCCLMSData *LPWVPCCLMS;
typedef AsdWVPCCLMSData::AsdTSHeader *LPWVPCCLMS_TSHeader;
typedef AsdWVPCCLMSData::AsdWVCLTR00 *LPWVPCCLMS_WVCLTR00;
typedef AsdWVPCCLMSData::AsdWVCLACCT *LPWVPCCLMS_WVCLACCT;
typedef AsdWVPCCLMSData::AsdWVCLACCT::AsdNoteInformation *LPWVPCCLMS_WVCLACCT_NoteInformation;
typedef AsdWVPCCLMSData::AsdWVCLACCT::AsdNoteInformation::AsdCollateralInfo *LPWVPCCLMS_WVCLACCT_NoteInformation_CollateralInfo;
typedef AsdWVPCCLMSData::AsdTSMDA *LPWVPCCLMS_TSMDA;
typedef AsdWVPCCLMSData::AsdTSMDA::AsdMdaTrmMsg *LPWVPCCLMS_TSMDA_MdaTrmMsg;
typedef AsdWVPCCLMSData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPWVPCCLMS_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdWVPCCLMSData_H

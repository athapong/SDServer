#ifndef AsdWVPCIMRTData_H
#define AsdWVPCIMRTData_H

#include <stdlib.h>
#ifdef  AsdWVPCIMRT_INTEGRITY_STRING
#undef  AsdWVPCIMRT_INTEGRITY_STRING
#endif
#define AsdWVPCIMRT_INTEGRITY_STRING        ""

#ifdef  AsdWVPCIMRT_CRC_STRING
#undef  AsdWVPCIMRT_CRC_STRING
#endif
#define AsdWVPCIMRT_CRC_STRING "3362109810"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdWVPCIMRTData Definition ****************
//                 IM Product Rate Download

//                 WVPCIMRTData.h generated by AceGen2 ver. 2.5.09

class AsdWVPCIMRTData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdWVPCIMRTData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "WVPCIMRT.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdWVPCIMRT_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        WVIMPRRT = &CWVIMPRRT;
        TSMDA = &CTSMDA;
    }

    ~AsdWVPCIMRTData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CWVIMPRRT.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdWVPCIMRT_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCIMRT_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVIMPRRT.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCIMRT", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVIMPRRT.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCIMRT");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCIMRT_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVIMPRRT.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCIMRT", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVIMPRRT.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCIMRT");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCIMRT_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdWVIMPRRT Definition ****************
    //                 DOWNLOAD OF PRODUCT AND RATE INFORMATION                    
    
    //    WVIMPRRT.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:33
    class AsdWVIMPRRT
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bProcessingOptionFlag;
        char      m_szProcessingOptionFlag[1+1];
    
      public:
        long      m_lIndex;

        AsdWVIMPRRT ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bProcessingOptionFlag = false;
            strcpy(m_szProcessingOptionFlag, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 29; lOccurs++)
            {
                ProdRateData[lOccurs]  = &CProdRateData[lOccurs];
                CProdRateData[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bProcessingOptionFlag = false;
            strcpy(m_szProcessingOptionFlag, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 29; lOccurs++)
            {
                ProdRateData[lOccurs]  = &CProdRateData[lOccurs];
                CProdRateData[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    PROCESSING OPTION FLAG
        long lProcessingOptionFlag () { return 1; };
        RWCString ProcessingOptionFlag (void)
        {
            return m_szProcessingOptionFlag;
        }
        long ProcessingOptionFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szProcessingOptionFlag, sizeof(m_szProcessingOptionFlag), &m_bProcessingOptionFlag);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bProcessingOptionFlag) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 29; lOccurs++)
            {
                if(CProdRateData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVIMPRRT", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "ProcessingOptionFlag", m_szProcessingOptionFlag, &m_bProcessingOptionFlag);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 29; lOccurs++)
                {
                    CProdRateData[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "WVIMPRRT");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVIMPRRT", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "ProcessingOptionFlag", m_szProcessingOptionFlag);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 29; lOccurs++)
                {
                    CProdRateData[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "WVIMPRRT");
            };
        }
        
        //**************** Start AsdProdRateData Definition ****************
        //                 
        
        class AsdProdRateData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bCsProductId;
            char      m_szCsProductId[9+1];
            bool      m_bPfRegion;
            char      m_szPfRegion[10+1];
            bool      m_bCurrCode;
            char      m_szCurrCode[3+1];
            bool      m_bPfCtl1;
            char      m_szPfCtl1[2+1];
            bool      m_bPfCtl2;
            char      m_szPfCtl2[3+1];
            bool      m_bPfCtl3;
            char      m_szPfCtl3[3+1];
            bool      m_bPfType;
            char      m_szPfType[3+1];
            bool      m_bPfStopHoldWaive;
            char      m_szPfStopHoldWaive[1+1];
            bool      m_bPffChkTruncFlag;
            char      m_szPffChkTruncFlag[1+1];
            bool      m_bPffSystemType;
            char      m_szPffSystemType[3+1];
            bool      m_bPffOdLmtCode;
            char      m_szPffOdLmtCode[1+1];
            bool      m_bPffOdLmtAmt;
            char      m_szPffOdLmtAmt[17+1];
            bool      m_bPffOdChgCode;
            char      m_szPffOdChgCode[1+1];
            bool      m_bPffOdChgAmt;
            char      m_szPffOdChgAmt[17+1];
            bool      m_bPffOdChgMaximum;
            char      m_szPffOdChgMaximum[17+1];
            bool      m_bPffOdChgWaive;
            char      m_szPffOdChgWaive[1+1];
            bool      m_bPffNsfChgCode;
            char      m_szPffNsfChgCode[1+1];
            bool      m_bPffNsfChgAmt;
            char      m_szPffNsfChgAmt[17+1];
            bool      m_bPffNsfChgWaive;
            char      m_szPffNsfChgWaive[1+1];
            bool      m_bPffScType;
            char      m_szPffScType[3+1];
            bool      m_bPffScRoutine;
            char      m_szPffScRoutine[1+1];
            bool      m_bPffScWaive;
            char      m_szPffScWaive[1+1];
            bool      m_bPffScWaiveRsn;
            char      m_szPffScWaiveRsn[2+1];
            bool      m_bPffScCycleCode;
            char      m_szPffScCycleCode[1+1];
            bool      m_bPffScCycleFreq;
            char      m_szPffScCycleFreq[1+1];
            bool      m_bPffScCycleMonth;
            char      m_szPffScCycleMonth[1+1];
            bool      m_bPffScCycleDay;
            char      m_szPffScCycleDay[2+1];
            bool      m_bPffScCheckChgCode;
            char      m_szPffScCheckChgCode[1+1];
            bool      m_bPffScCheckChgLmt;
            char      m_szPffScCheckChgLmt[4+1];
            bool      m_bPffScCheckChgAmt;
            char      m_szPffScCheckChgAmt[17+1];
            bool      m_bScMfNochgMinbal;
            char      m_szScMfNochgMinbal[17+1];
            bool      m_bScMaintFee;
            char      m_szScMaintFee[7+1];
            bool      m_bPffStPullCode;
            char      m_szPffStPullCode[1+1];
            bool      m_bPffStSuppCode;
            char      m_szPffStSuppCode[1+1];
            bool      m_bPffStCycle;
            char      m_szPffStCycle[2+1];
            bool      m_bPffIodRatePtr;
            char      m_szPffIodRatePtr[4+1];
            bool      m_bPffIodHifiInd;
            char      m_szPffIodHifiInd[4+1];
            bool      m_bPffIodTinCert;
            char      m_szPffIodTinCert[1+1];
            bool      m_bPffIodAccrualType;
            char      m_szPffIodAccrualType[1+1];
            bool      m_bPffIodMinHifiAmt;
            char      m_szPffIodMinHifiAmt[17+1];
            bool      m_bPffIodRateUse;
            char      m_szPffIodRateUse[1+1];
            bool      m_bPffMmdaIndicator;
            char      m_szPffMmdaIndicator[1+1];
            bool      m_bPffIodMaxHifiTrans;
            char      m_szPffIodMaxHifiTrans[4+1];
            bool      m_bPffIodDistCd;
            char      m_szPffIodDistCd[1+1];
            bool      m_bPflSetUpFlag;
            char      m_szPflSetUpFlag[1+1];
            bool      m_bPflCrLmtPointer;
            char      m_szPflCrLmtPointer[1+1];
            bool      m_bPflCrLmtAmt;
            char      m_szPflCrLmtAmt[17+1];
            bool      m_bLkupName;
            char      m_szLkupName[30+1];
            bool      m_bRmaCtl1;
            char      m_szRmaCtl1[2+1];
            bool      m_bRmaRegion;
            char      m_szRmaRegion[10+1];
            bool      m_bRmaProduct;
            char      m_szRmaProduct[3+1];
            bool      m_bRmaRateType;
            char      m_szRmaRateType[1+1];
            bool      m_bRmaPtr;
            char      m_szRmaPtr[3+1];
            bool      m_bRmaMaxTieredIntR;
            char      m_szRmaMaxTieredIntR[11+1];
            bool      m_bRmaMinTieredIntR;
            char      m_szRmaMinTieredIntR[11+1];
            bool      m_bRmaCurTieredDt;
            char      m_szRmaCurTieredDt[8+1];
            bool      m_bRmaCurTierAnnR1;
            char      m_szRmaCurTierAnnR1[11+1];
            bool      m_bRmaCurTierAnnR2;
            char      m_szRmaCurTierAnnR2[11+1];
            bool      m_bRmaCurTierAnnR3;
            char      m_szRmaCurTierAnnR3[11+1];
            bool      m_bRmaCurTierAnnR4;
            char      m_szRmaCurTierAnnR4[11+1];
            bool      m_bRmaCurTierAnnR5;
            char      m_szRmaCurTierAnnR5[11+1];
            bool      m_bRmaCurTierAnnR6;
            char      m_szRmaCurTierAnnR6[11+1];
            bool      m_bRmaCurTierAnnR7;
            char      m_szRmaCurTierAnnR7[11+1];
            bool      m_bRmaCurTierAnnR8;
            char      m_szRmaCurTierAnnR8[11+1];
            bool      m_bRmaCurTierAnnR9;
            char      m_szRmaCurTierAnnR9[11+1];
            bool      m_bRmaCurTieredLmt1;
            char      m_szRmaCurTieredLmt1[17+1];
            bool      m_bRmaCurTieredLmt2;
            char      m_szRmaCurTieredLmt2[17+1];
            bool      m_bRmaCurTieredLmt3;
            char      m_szRmaCurTieredLmt3[17+1];
            bool      m_bRmaCurTieredLmt4;
            char      m_szRmaCurTieredLmt4[17+1];
            bool      m_bRmaCurTieredLmt5;
            char      m_szRmaCurTieredLmt5[17+1];
            bool      m_bRmaCurTieredLmt6;
            char      m_szRmaCurTieredLmt6[17+1];
            bool      m_bRmaCurTieredLmt7;
            char      m_szRmaCurTieredLmt7[17+1];
            bool      m_bRmaCurTieredLmt8;
            char      m_szRmaCurTieredLmt8[17+1];
            bool      m_bRmaPrevTieredDt;
            char      m_szRmaPrevTieredDt[8+1];
            bool      m_bRmaPrevTierAnnR1;
            char      m_szRmaPrevTierAnnR1[11+1];
            bool      m_bRmaPrevTierAnnR2;
            char      m_szRmaPrevTierAnnR2[11+1];
            bool      m_bRmaPrevTierAnnR3;
            char      m_szRmaPrevTierAnnR3[11+1];
            bool      m_bRmaPrevTierAnnR4;
            char      m_szRmaPrevTierAnnR4[11+1];
            bool      m_bRmaPrevTierAnnR5;
            char      m_szRmaPrevTierAnnR5[11+1];
            bool      m_bRmaPrevTierAnnR6;
            char      m_szRmaPrevTierAnnR6[11+1];
            bool      m_bRmaPrevTierAnnR7;
            char      m_szRmaPrevTierAnnR7[11+1];
            bool      m_bRmaPrevTierAnnR8;
            char      m_szRmaPrevTierAnnR8[11+1];
            bool      m_bRmaPrevTierAnnR9;
            char      m_szRmaPrevTierAnnR9[11+1];
            bool      m_bRmaPrevTieredLmt1;
            char      m_szRmaPrevTieredLmt1[17+1];
            bool      m_bRmaPrevTieredLmt2;
            char      m_szRmaPrevTieredLmt2[17+1];
            bool      m_bRmaPrevTieredLmt3;
            char      m_szRmaPrevTieredLmt3[17+1];
            bool      m_bRmaPrevTieredLmt4;
            char      m_szRmaPrevTieredLmt4[17+1];
            bool      m_bRmaPrevTieredLmt5;
            char      m_szRmaPrevTieredLmt5[17+1];
            bool      m_bRmaPrevTieredLmt6;
            char      m_szRmaPrevTieredLmt6[17+1];
            bool      m_bRmaPrevTieredLmt7;
            char      m_szRmaPrevTieredLmt7[17+1];
            bool      m_bRmaPrevTieredLmt8;
            char      m_szRmaPrevTieredLmt8[17+1];
            bool      m_bRmaMaxIodIntR;
            char      m_szRmaMaxIodIntR[11+1];
            bool      m_bRmaMinIodIntR;
            char      m_szRmaMinIodIntR[11+1];
            bool      m_bRmaCurIloDt;
            char      m_szRmaCurIloDt[8+1];
            bool      m_bRmaCurIloAnnR;
            char      m_szRmaCurIloAnnR[11+1];
            bool      m_bRmaPrevIloDt;
            char      m_szRmaPrevIloDt[8+1];
            bool      m_bRmaPrevIloAnnR;
            char      m_szRmaPrevIloAnnR[11+1];
            bool      m_bRmaMaxSplitIntR;
            char      m_szRmaMaxSplitIntR[11+1];
            bool      m_bRmaMinSplitIntR;
            char      m_szRmaMinSplitIntR[11+1];
            bool      m_bRmaCurSplitDt;
            char      m_szRmaCurSplitDt[8+1];
            bool      m_bRmaCurSplitAnnR1;
            char      m_szRmaCurSplitAnnR1[11+1];
            bool      m_bRmaCurSplitAnnR2;
            char      m_szRmaCurSplitAnnR2[11+1];
            bool      m_bRmaCurSplitAnnR3;
            char      m_szRmaCurSplitAnnR3[11+1];
            bool      m_bRmaCurSplitLmt1;
            char      m_szRmaCurSplitLmt1[17+1];
            bool      m_bRmaCurSplitLmt2;
            char      m_szRmaCurSplitLmt2[17+1];
            bool      m_bRmaPrevSplitDt;
            char      m_szRmaPrevSplitDt[8+1];
            bool      m_bRmaPrevSplitAnnR1;
            char      m_szRmaPrevSplitAnnR1[11+1];
            bool      m_bRmaPrevSplitAnnR2;
            char      m_szRmaPrevSplitAnnR2[11+1];
            bool      m_bRmaPrevSplitAnnR3;
            char      m_szRmaPrevSplitAnnR3[11+1];
            bool      m_bRmaPrevSplitLmt1;
            char      m_szRmaPrevSplitLmt1[17+1];
            bool      m_bRmaPrevSplitLmt2;
            char      m_szRmaPrevSplitLmt2[17+1];
            bool      m_bWorkErrCd;
            char      m_szWorkErrCd[4+1];
            bool      m_bWorkErrText;
            char      m_szWorkErrText[40+1];
        
          public:
            long      m_lIndex;

            AsdProdRateData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCsProductId = false;
                strcpy(m_szCsProductId, "000000000");
                m_bPfRegion = false;
                strcpy(m_szPfRegion, "");
                m_bCurrCode = false;
                strcpy(m_szCurrCode, "");
                m_bPfCtl1 = false;
                strcpy(m_szPfCtl1, "");
                m_bPfCtl2 = false;
                strcpy(m_szPfCtl2, "");
                m_bPfCtl3 = false;
                strcpy(m_szPfCtl3, "");
                m_bPfType = false;
                strcpy(m_szPfType, "");
                m_bPfStopHoldWaive = false;
                strcpy(m_szPfStopHoldWaive, "");
                m_bPffChkTruncFlag = false;
                strcpy(m_szPffChkTruncFlag, "");
                m_bPffSystemType = false;
                strcpy(m_szPffSystemType, "");
                m_bPffOdLmtCode = false;
                strcpy(m_szPffOdLmtCode, "");
                m_bPffOdLmtAmt = false;
                strcpy(m_szPffOdLmtAmt, "+0000000000000.00");
                m_bPffOdChgCode = false;
                strcpy(m_szPffOdChgCode, "");
                m_bPffOdChgAmt = false;
                strcpy(m_szPffOdChgAmt, "+0000000000000.00");
                m_bPffOdChgMaximum = false;
                strcpy(m_szPffOdChgMaximum, "+0000000000000.00");
                m_bPffOdChgWaive = false;
                strcpy(m_szPffOdChgWaive, "");
                m_bPffNsfChgCode = false;
                strcpy(m_szPffNsfChgCode, "");
                m_bPffNsfChgAmt = false;
                strcpy(m_szPffNsfChgAmt, "+0000000000000.00");
                m_bPffNsfChgWaive = false;
                strcpy(m_szPffNsfChgWaive, "");
                m_bPffScType = false;
                strcpy(m_szPffScType, "");
                m_bPffScRoutine = false;
                strcpy(m_szPffScRoutine, "0");
                m_bPffScWaive = false;
                strcpy(m_szPffScWaive, "");
                m_bPffScWaiveRsn = false;
                strcpy(m_szPffScWaiveRsn, "");
                m_bPffScCycleCode = false;
                strcpy(m_szPffScCycleCode, "");
                m_bPffScCycleFreq = false;
                strcpy(m_szPffScCycleFreq, "");
                m_bPffScCycleMonth = false;
                strcpy(m_szPffScCycleMonth, "");
                m_bPffScCycleDay = false;
                strcpy(m_szPffScCycleDay, "");
                m_bPffScCheckChgCode = false;
                strcpy(m_szPffScCheckChgCode, "");
                m_bPffScCheckChgLmt = false;
                strcpy(m_szPffScCheckChgLmt, "+000");
                m_bPffScCheckChgAmt = false;
                strcpy(m_szPffScCheckChgAmt, "+000000000000.000");
                m_bScMfNochgMinbal = false;
                strcpy(m_szScMfNochgMinbal, "+0000000000000.00");
                m_bScMaintFee = false;
                strcpy(m_szScMaintFee, "+000.00");
                m_bPffStPullCode = false;
                strcpy(m_szPffStPullCode, "");
                m_bPffStSuppCode = false;
                strcpy(m_szPffStSuppCode, "");
                m_bPffStCycle = false;
                strcpy(m_szPffStCycle, "");
                m_bPffIodRatePtr = false;
                strcpy(m_szPffIodRatePtr, "+000");
                m_bPffIodHifiInd = false;
                strcpy(m_szPffIodHifiInd, "+000");
                m_bPffIodTinCert = false;
                strcpy(m_szPffIodTinCert, "");
                m_bPffIodAccrualType = false;
                strcpy(m_szPffIodAccrualType, "");
                m_bPffIodMinHifiAmt = false;
                strcpy(m_szPffIodMinHifiAmt, "+0000000000000.00");
                m_bPffIodRateUse = false;
                strcpy(m_szPffIodRateUse, "");
                m_bPffMmdaIndicator = false;
                strcpy(m_szPffMmdaIndicator, "");
                m_bPffIodMaxHifiTrans = false;
                strcpy(m_szPffIodMaxHifiTrans, "+000");
                m_bPffIodDistCd = false;
                strcpy(m_szPffIodDistCd, "");
                m_bPflSetUpFlag = false;
                strcpy(m_szPflSetUpFlag, "");
                m_bPflCrLmtPointer = false;
                strcpy(m_szPflCrLmtPointer, "0");
                m_bPflCrLmtAmt = false;
                strcpy(m_szPflCrLmtAmt, "+0000000000000.00");
                m_bLkupName = false;
                strcpy(m_szLkupName, "");
                m_bRmaCtl1 = false;
                strcpy(m_szRmaCtl1, "");
                m_bRmaRegion = false;
                strcpy(m_szRmaRegion, "");
                m_bRmaProduct = false;
                strcpy(m_szRmaProduct, "");
                m_bRmaRateType = false;
                strcpy(m_szRmaRateType, "");
                m_bRmaPtr = false;
                strcpy(m_szRmaPtr, "000");
                m_bRmaMaxTieredIntR = false;
                strcpy(m_szRmaMaxTieredIntR, "+000.000000");
                m_bRmaMinTieredIntR = false;
                strcpy(m_szRmaMinTieredIntR, "+000.000000");
                m_bRmaCurTieredDt = false;
                strcpy(m_szRmaCurTieredDt, "");
                m_bRmaCurTierAnnR1 = false;
                strcpy(m_szRmaCurTierAnnR1, "+000.000000");
                m_bRmaCurTierAnnR2 = false;
                strcpy(m_szRmaCurTierAnnR2, "+000.000000");
                m_bRmaCurTierAnnR3 = false;
                strcpy(m_szRmaCurTierAnnR3, "+000.000000");
                m_bRmaCurTierAnnR4 = false;
                strcpy(m_szRmaCurTierAnnR4, "+000.000000");
                m_bRmaCurTierAnnR5 = false;
                strcpy(m_szRmaCurTierAnnR5, "+000.000000");
                m_bRmaCurTierAnnR6 = false;
                strcpy(m_szRmaCurTierAnnR6, "+000.000000");
                m_bRmaCurTierAnnR7 = false;
                strcpy(m_szRmaCurTierAnnR7, "+000.000000");
                m_bRmaCurTierAnnR8 = false;
                strcpy(m_szRmaCurTierAnnR8, "+000.000000");
                m_bRmaCurTierAnnR9 = false;
                strcpy(m_szRmaCurTierAnnR9, "+000.000000");
                m_bRmaCurTieredLmt1 = false;
                strcpy(m_szRmaCurTieredLmt1, "+0000000000000.00");
                m_bRmaCurTieredLmt2 = false;
                strcpy(m_szRmaCurTieredLmt2, "+0000000000000.00");
                m_bRmaCurTieredLmt3 = false;
                strcpy(m_szRmaCurTieredLmt3, "+0000000000000.00");
                m_bRmaCurTieredLmt4 = false;
                strcpy(m_szRmaCurTieredLmt4, "+0000000000000.00");
                m_bRmaCurTieredLmt5 = false;
                strcpy(m_szRmaCurTieredLmt5, "+0000000000000.00");
                m_bRmaCurTieredLmt6 = false;
                strcpy(m_szRmaCurTieredLmt6, "+0000000000000.00");
                m_bRmaCurTieredLmt7 = false;
                strcpy(m_szRmaCurTieredLmt7, "+0000000000000.00");
                m_bRmaCurTieredLmt8 = false;
                strcpy(m_szRmaCurTieredLmt8, "+0000000000000.00");
                m_bRmaPrevTieredDt = false;
                strcpy(m_szRmaPrevTieredDt, "");
                m_bRmaPrevTierAnnR1 = false;
                strcpy(m_szRmaPrevTierAnnR1, "+000.000000");
                m_bRmaPrevTierAnnR2 = false;
                strcpy(m_szRmaPrevTierAnnR2, "+000.000000");
                m_bRmaPrevTierAnnR3 = false;
                strcpy(m_szRmaPrevTierAnnR3, "+000.000000");
                m_bRmaPrevTierAnnR4 = false;
                strcpy(m_szRmaPrevTierAnnR4, "+000.000000");
                m_bRmaPrevTierAnnR5 = false;
                strcpy(m_szRmaPrevTierAnnR5, "+000.000000");
                m_bRmaPrevTierAnnR6 = false;
                strcpy(m_szRmaPrevTierAnnR6, "+000.000000");
                m_bRmaPrevTierAnnR7 = false;
                strcpy(m_szRmaPrevTierAnnR7, "+000.000000");
                m_bRmaPrevTierAnnR8 = false;
                strcpy(m_szRmaPrevTierAnnR8, "+000.000000");
                m_bRmaPrevTierAnnR9 = false;
                strcpy(m_szRmaPrevTierAnnR9, "+000.000000");
                m_bRmaPrevTieredLmt1 = false;
                strcpy(m_szRmaPrevTieredLmt1, "+0000000000000.00");
                m_bRmaPrevTieredLmt2 = false;
                strcpy(m_szRmaPrevTieredLmt2, "+0000000000000.00");
                m_bRmaPrevTieredLmt3 = false;
                strcpy(m_szRmaPrevTieredLmt3, "+0000000000000.00");
                m_bRmaPrevTieredLmt4 = false;
                strcpy(m_szRmaPrevTieredLmt4, "+0000000000000.00");
                m_bRmaPrevTieredLmt5 = false;
                strcpy(m_szRmaPrevTieredLmt5, "+0000000000000.00");
                m_bRmaPrevTieredLmt6 = false;
                strcpy(m_szRmaPrevTieredLmt6, "+0000000000000.00");
                m_bRmaPrevTieredLmt7 = false;
                strcpy(m_szRmaPrevTieredLmt7, "+0000000000000.00");
                m_bRmaPrevTieredLmt8 = false;
                strcpy(m_szRmaPrevTieredLmt8, "+0000000000000.00");
                m_bRmaMaxIodIntR = false;
                strcpy(m_szRmaMaxIodIntR, "+000.000000");
                m_bRmaMinIodIntR = false;
                strcpy(m_szRmaMinIodIntR, "+000.000000");
                m_bRmaCurIloDt = false;
                strcpy(m_szRmaCurIloDt, "");
                m_bRmaCurIloAnnR = false;
                strcpy(m_szRmaCurIloAnnR, "+000.000000");
                m_bRmaPrevIloDt = false;
                strcpy(m_szRmaPrevIloDt, "");
                m_bRmaPrevIloAnnR = false;
                strcpy(m_szRmaPrevIloAnnR, "+000.000000");
                m_bRmaMaxSplitIntR = false;
                strcpy(m_szRmaMaxSplitIntR, "+000.000000");
                m_bRmaMinSplitIntR = false;
                strcpy(m_szRmaMinSplitIntR, "+000.000000");
                m_bRmaCurSplitDt = false;
                strcpy(m_szRmaCurSplitDt, "");
                m_bRmaCurSplitAnnR1 = false;
                strcpy(m_szRmaCurSplitAnnR1, "+000.000000");
                m_bRmaCurSplitAnnR2 = false;
                strcpy(m_szRmaCurSplitAnnR2, "+000.000000");
                m_bRmaCurSplitAnnR3 = false;
                strcpy(m_szRmaCurSplitAnnR3, "+000.000000");
                m_bRmaCurSplitLmt1 = false;
                strcpy(m_szRmaCurSplitLmt1, "+0000000000000.00");
                m_bRmaCurSplitLmt2 = false;
                strcpy(m_szRmaCurSplitLmt2, "+0000000000000.00");
                m_bRmaPrevSplitDt = false;
                strcpy(m_szRmaPrevSplitDt, "");
                m_bRmaPrevSplitAnnR1 = false;
                strcpy(m_szRmaPrevSplitAnnR1, "+000.000000");
                m_bRmaPrevSplitAnnR2 = false;
                strcpy(m_szRmaPrevSplitAnnR2, "+000.000000");
                m_bRmaPrevSplitAnnR3 = false;
                strcpy(m_szRmaPrevSplitAnnR3, "+000.000000");
                m_bRmaPrevSplitLmt1 = false;
                strcpy(m_szRmaPrevSplitLmt1, "+0000000000000.00");
                m_bRmaPrevSplitLmt2 = false;
                strcpy(m_szRmaPrevSplitLmt2, "+0000000000000.00");
                m_bWorkErrCd = false;
                strcpy(m_szWorkErrCd, "");
                m_bWorkErrText = false;
                strcpy(m_szWorkErrText, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    CS PRODUCT-ID
            long lCsProductId () { return 9; };
            RWCString CsProductId (void)
            {
                return m_szCsProductId;
            }
            long CsProductId (const RWCString& rwc)
            {
                return SetString(rwc, m_szCsProductId, sizeof(m_szCsProductId), &m_bCsProductId);
            }
            
            //    REGION
            long lPfRegion () { return 10; };
            RWCString PfRegion (void)
            {
                return m_szPfRegion;
            }
            long PfRegion (const RWCString& rwc)
            {
                return SetString(rwc, m_szPfRegion, sizeof(m_szPfRegion), &m_bPfRegion);
            }
            
            //    CURRENCY CODE
            long lCurrCode () { return 3; };
            RWCString CurrCode (void)
            {
                return m_szCurrCode;
            }
            long CurrCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szCurrCode, sizeof(m_szCurrCode), &m_bCurrCode);
            }
            
            //    CONTROL 1
            long lPfCtl1 () { return 2; };
            RWCString PfCtl1 (void)
            {
                return m_szPfCtl1;
            }
            long PfCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szPfCtl1, sizeof(m_szPfCtl1), &m_bPfCtl1);
            }
            
            //    CONTROL 2
            long lPfCtl2 () { return 3; };
            RWCString PfCtl2 (void)
            {
                return m_szPfCtl2;
            }
            long PfCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szPfCtl2, sizeof(m_szPfCtl2), &m_bPfCtl2);
            }
            
            //    CONTROL 3
            long lPfCtl3 () { return 3; };
            RWCString PfCtl3 (void)
            {
                return m_szPfCtl3;
            }
            long PfCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szPfCtl3, sizeof(m_szPfCtl3), &m_bPfCtl3);
            }
            
            //    ACCT TYPE
            long lPfType () { return 3; };
            RWCString PfType (void)
            {
                return m_szPfType;
            }
            long PfType (const RWCString& rwc)
            {
                return SetString(rwc, m_szPfType, sizeof(m_szPfType), &m_bPfType);
            }
            
            //    STOP HOLD WAIVE FLAG
            long lPfStopHoldWaive () { return 1; };
            RWCString PfStopHoldWaive (void)
            {
                return m_szPfStopHoldWaive;
            }
            long PfStopHoldWaive (const RWCString& rwc)
            {
                return SetString(rwc, m_szPfStopHoldWaive, sizeof(m_szPfStopHoldWaive), &m_bPfStopHoldWaive);
            }
            
            //    CHECK TRUNCATION FLAG
            long lPffChkTruncFlag () { return 1; };
            RWCString PffChkTruncFlag (void)
            {
                return m_szPffChkTruncFlag;
            }
            long PffChkTruncFlag (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffChkTruncFlag, sizeof(m_szPffChkTruncFlag), &m_bPffChkTruncFlag);
            }
            
            //    SYSTEM TYPE
            long lPffSystemType () { return 3; };
            RWCString PffSystemType (void)
            {
                return m_szPffSystemType;
            }
            long PffSystemType (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffSystemType, sizeof(m_szPffSystemType), &m_bPffSystemType);
            }
            
            //    OVERDRAFT LIMIT CODE
            long lPffOdLmtCode () { return 1; };
            RWCString PffOdLmtCode (void)
            {
                return m_szPffOdLmtCode;
            }
            long PffOdLmtCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffOdLmtCode, sizeof(m_szPffOdLmtCode), &m_bPffOdLmtCode);
            }
            
            //    OVERDRAFT LIMIT AMOUNT
            long lPffOdLmtAmt () { return 17; };
            RWCString PffOdLmtAmt (void)
            {
                return AceZeroSupp(m_szPffOdLmtAmt, &m_szSuppressBuff[0]);
            }
            RWCString PffOdLmtAmtRaw (void)
            {
                return m_szPffOdLmtAmt;
            }
            long PffOdLmtAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffOdLmtAmt, sizeof(m_szPffOdLmtAmt), &m_bPffOdLmtAmt);
            }
            
            //    OVERDRAFT CHARGE CODE
            long lPffOdChgCode () { return 1; };
            RWCString PffOdChgCode (void)
            {
                return m_szPffOdChgCode;
            }
            long PffOdChgCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffOdChgCode, sizeof(m_szPffOdChgCode), &m_bPffOdChgCode);
            }
            
            //    OVERDRAFT CHARGE AMOUNT
            long lPffOdChgAmt () { return 17; };
            RWCString PffOdChgAmt (void)
            {
                return AceZeroSupp(m_szPffOdChgAmt, &m_szSuppressBuff[0]);
            }
            RWCString PffOdChgAmtRaw (void)
            {
                return m_szPffOdChgAmt;
            }
            long PffOdChgAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffOdChgAmt, sizeof(m_szPffOdChgAmt), &m_bPffOdChgAmt);
            }
            
            //    OVERDRAFT CHARGE MAXIMUM
            long lPffOdChgMaximum () { return 17; };
            RWCString PffOdChgMaximum (void)
            {
                return AceZeroSupp(m_szPffOdChgMaximum, &m_szSuppressBuff[0]);
            }
            RWCString PffOdChgMaximumRaw (void)
            {
                return m_szPffOdChgMaximum;
            }
            long PffOdChgMaximum (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffOdChgMaximum, sizeof(m_szPffOdChgMaximum), &m_bPffOdChgMaximum);
            }
            
            //    OVERDRAFT CHARGE WAIVE
            long lPffOdChgWaive () { return 1; };
            RWCString PffOdChgWaive (void)
            {
                return m_szPffOdChgWaive;
            }
            long PffOdChgWaive (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffOdChgWaive, sizeof(m_szPffOdChgWaive), &m_bPffOdChgWaive);
            }
            
            //    NSF CHARGE CODE
            long lPffNsfChgCode () { return 1; };
            RWCString PffNsfChgCode (void)
            {
                return m_szPffNsfChgCode;
            }
            long PffNsfChgCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffNsfChgCode, sizeof(m_szPffNsfChgCode), &m_bPffNsfChgCode);
            }
            
            //    NSF CHARGE AMOUNT
            long lPffNsfChgAmt () { return 17; };
            RWCString PffNsfChgAmt (void)
            {
                return AceZeroSupp(m_szPffNsfChgAmt, &m_szSuppressBuff[0]);
            }
            RWCString PffNsfChgAmtRaw (void)
            {
                return m_szPffNsfChgAmt;
            }
            long PffNsfChgAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffNsfChgAmt, sizeof(m_szPffNsfChgAmt), &m_bPffNsfChgAmt);
            }
            
            //    NSF CHARGE WAIVE
            long lPffNsfChgWaive () { return 1; };
            RWCString PffNsfChgWaive (void)
            {
                return m_szPffNsfChgWaive;
            }
            long PffNsfChgWaive (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffNsfChgWaive, sizeof(m_szPffNsfChgWaive), &m_bPffNsfChgWaive);
            }
            
            //    SERVICE CHARGE TYPE
            long lPffScType () { return 3; };
            RWCString PffScType (void)
            {
                return m_szPffScType;
            }
            long PffScType (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScType, sizeof(m_szPffScType), &m_bPffScType);
            }
            
            //    SERVICE CHARGE ROUTINE
            long lPffScRoutine () { return 1; };
            RWCString PffScRoutine (void)
            {
                return m_szPffScRoutine;
            }
            long PffScRoutine (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScRoutine, sizeof(m_szPffScRoutine), &m_bPffScRoutine);
            }
            
            //    SERVICE CHARGE WAIVE
            long lPffScWaive () { return 1; };
            RWCString PffScWaive (void)
            {
                return m_szPffScWaive;
            }
            long PffScWaive (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScWaive, sizeof(m_szPffScWaive), &m_bPffScWaive);
            }
            
            //    SERVICE CHARGE WAIVE REASON
            long lPffScWaiveRsn () { return 2; };
            RWCString PffScWaiveRsn (void)
            {
                return m_szPffScWaiveRsn;
            }
            long PffScWaiveRsn (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScWaiveRsn, sizeof(m_szPffScWaiveRsn), &m_bPffScWaiveRsn);
            }
            
            //    SERVICE CHARGE CYCLE CODE
            long lPffScCycleCode () { return 1; };
            RWCString PffScCycleCode (void)
            {
                return m_szPffScCycleCode;
            }
            long PffScCycleCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScCycleCode, sizeof(m_szPffScCycleCode), &m_bPffScCycleCode);
            }
            
            //    SERVICE CHARGE CYCLE FREQUENCY
            long lPffScCycleFreq () { return 1; };
            RWCString PffScCycleFreq (void)
            {
                return m_szPffScCycleFreq;
            }
            long PffScCycleFreq (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScCycleFreq, sizeof(m_szPffScCycleFreq), &m_bPffScCycleFreq);
            }
            
            //    SERVICE CHARGE CYCLE MONTH
            long lPffScCycleMonth () { return 1; };
            RWCString PffScCycleMonth (void)
            {
                return m_szPffScCycleMonth;
            }
            long PffScCycleMonth (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScCycleMonth, sizeof(m_szPffScCycleMonth), &m_bPffScCycleMonth);
            }
            
            //    SERVICE CHARGE CYCLE DAY
            long lPffScCycleDay () { return 2; };
            RWCString PffScCycleDay (void)
            {
                return m_szPffScCycleDay;
            }
            long PffScCycleDay (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScCycleDay, sizeof(m_szPffScCycleDay), &m_bPffScCycleDay);
            }
            
            //    SERVICE CHARGE CHECK CHARGE CODE
            long lPffScCheckChgCode () { return 1; };
            RWCString PffScCheckChgCode (void)
            {
                return m_szPffScCheckChgCode;
            }
            long PffScCheckChgCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScCheckChgCode, sizeof(m_szPffScCheckChgCode), &m_bPffScCheckChgCode);
            }
            
            //    SERVICE CHARGE CHECK CHARGE LIMIT
            long lPffScCheckChgLmt () { return 4; };
            RWCString PffScCheckChgLmt (void)
            {
                return AceZeroSupp(m_szPffScCheckChgLmt, &m_szSuppressBuff[0]);
            }
            RWCString PffScCheckChgLmtRaw (void)
            {
                return m_szPffScCheckChgLmt;
            }
            long PffScCheckChgLmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScCheckChgLmt, sizeof(m_szPffScCheckChgLmt), &m_bPffScCheckChgLmt);
            }
            
            //    SERVICE CHARGE CHECK CHARGE AMOUNT
            long lPffScCheckChgAmt () { return 17; };
            RWCString PffScCheckChgAmt (void)
            {
                return AceZeroSupp(m_szPffScCheckChgAmt, &m_szSuppressBuff[0]);
            }
            RWCString PffScCheckChgAmtRaw (void)
            {
                return m_szPffScCheckChgAmt;
            }
            long PffScCheckChgAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffScCheckChgAmt, sizeof(m_szPffScCheckChgAmt), &m_bPffScCheckChgAmt);
            }
            
            //    NO SERVICE CHARGE MINIMUM BALANCE
            long lScMfNochgMinbal () { return 17; };
            RWCString ScMfNochgMinbal (void)
            {
                return AceZeroSupp(m_szScMfNochgMinbal, &m_szSuppressBuff[0]);
            }
            RWCString ScMfNochgMinbalRaw (void)
            {
                return m_szScMfNochgMinbal;
            }
            long ScMfNochgMinbal (const RWCString& rwc)
            {
                return SetString(rwc, m_szScMfNochgMinbal, sizeof(m_szScMfNochgMinbal), &m_bScMfNochgMinbal);
            }
            
            //    SERVICE CHARGE MAINTENANCE FEE
            long lScMaintFee () { return 7; };
            RWCString ScMaintFee (void)
            {
                return AceZeroSupp(m_szScMaintFee, &m_szSuppressBuff[0]);
            }
            RWCString ScMaintFeeRaw (void)
            {
                return m_szScMaintFee;
            }
            long ScMaintFee (const RWCString& rwc)
            {
                return SetString(rwc, m_szScMaintFee, sizeof(m_szScMaintFee), &m_bScMaintFee);
            }
            
            //    STATEMENT PULL CODE
            long lPffStPullCode () { return 1; };
            RWCString PffStPullCode (void)
            {
                return m_szPffStPullCode;
            }
            long PffStPullCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffStPullCode, sizeof(m_szPffStPullCode), &m_bPffStPullCode);
            }
            
            //    STATEMENT SUPPLEMENT CODE
            long lPffStSuppCode () { return 1; };
            RWCString PffStSuppCode (void)
            {
                return m_szPffStSuppCode;
            }
            long PffStSuppCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffStSuppCode, sizeof(m_szPffStSuppCode), &m_bPffStSuppCode);
            }
            
            //    STATEMENT CYCLE
            long lPffStCycle () { return 2; };
            RWCString PffStCycle (void)
            {
                return m_szPffStCycle;
            }
            long PffStCycle (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffStCycle, sizeof(m_szPffStCycle), &m_bPffStCycle);
            }
            
            //    IOD RATE POINTER
            long lPffIodRatePtr () { return 4; };
            RWCString PffIodRatePtr (void)
            {
                return AceZeroSupp(m_szPffIodRatePtr, &m_szSuppressBuff[0]);
            }
            RWCString PffIodRatePtrRaw (void)
            {
                return m_szPffIodRatePtr;
            }
            long PffIodRatePtr (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffIodRatePtr, sizeof(m_szPffIodRatePtr), &m_bPffIodRatePtr);
            }
            
            //    IOD HIFI INDICATOR
            long lPffIodHifiInd () { return 4; };
            RWCString PffIodHifiInd (void)
            {
                return AceZeroSupp(m_szPffIodHifiInd, &m_szSuppressBuff[0]);
            }
            RWCString PffIodHifiIndRaw (void)
            {
                return m_szPffIodHifiInd;
            }
            long PffIodHifiInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffIodHifiInd, sizeof(m_szPffIodHifiInd), &m_bPffIodHifiInd);
            }
            
            //    IOD TIN CERTIFICATION
            long lPffIodTinCert () { return 1; };
            RWCString PffIodTinCert (void)
            {
                return m_szPffIodTinCert;
            }
            long PffIodTinCert (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffIodTinCert, sizeof(m_szPffIodTinCert), &m_bPffIodTinCert);
            }
            
            //    IOD ACCRUAL TYPE
            long lPffIodAccrualType () { return 1; };
            RWCString PffIodAccrualType (void)
            {
                return m_szPffIodAccrualType;
            }
            long PffIodAccrualType (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffIodAccrualType, sizeof(m_szPffIodAccrualType), &m_bPffIodAccrualType);
            }
            
            //    IOD MINIMUM HIFI AMOUNT
            long lPffIodMinHifiAmt () { return 17; };
            RWCString PffIodMinHifiAmt (void)
            {
                return AceZeroSupp(m_szPffIodMinHifiAmt, &m_szSuppressBuff[0]);
            }
            RWCString PffIodMinHifiAmtRaw (void)
            {
                return m_szPffIodMinHifiAmt;
            }
            long PffIodMinHifiAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffIodMinHifiAmt, sizeof(m_szPffIodMinHifiAmt), &m_bPffIodMinHifiAmt);
            }
            
            //    IOD RATE USE
            long lPffIodRateUse () { return 1; };
            RWCString PffIodRateUse (void)
            {
                return m_szPffIodRateUse;
            }
            long PffIodRateUse (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffIodRateUse, sizeof(m_szPffIodRateUse), &m_bPffIodRateUse);
            }
            
            //    MONEY MARKET DDA INDICATOR
            long lPffMmdaIndicator () { return 1; };
            RWCString PffMmdaIndicator (void)
            {
                return m_szPffMmdaIndicator;
            }
            long PffMmdaIndicator (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffMmdaIndicator, sizeof(m_szPffMmdaIndicator), &m_bPffMmdaIndicator);
            }
            
            //    IOD MAXIMUM HIFI TRANSACTION
            long lPffIodMaxHifiTrans () { return 4; };
            RWCString PffIodMaxHifiTrans (void)
            {
                return AceZeroSupp(m_szPffIodMaxHifiTrans, &m_szSuppressBuff[0]);
            }
            RWCString PffIodMaxHifiTransRaw (void)
            {
                return m_szPffIodMaxHifiTrans;
            }
            long PffIodMaxHifiTrans (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffIodMaxHifiTrans, sizeof(m_szPffIodMaxHifiTrans), &m_bPffIodMaxHifiTrans);
            }
            
            //    IOD DISTRUBITION CODE
            long lPffIodDistCd () { return 1; };
            RWCString PffIodDistCd (void)
            {
                return m_szPffIodDistCd;
            }
            long PffIodDistCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szPffIodDistCd, sizeof(m_szPffIodDistCd), &m_bPffIodDistCd);
            }
            
            //    SET UP FLAG
            long lPflSetUpFlag () { return 1; };
            RWCString PflSetUpFlag (void)
            {
                return m_szPflSetUpFlag;
            }
            long PflSetUpFlag (const RWCString& rwc)
            {
                return SetString(rwc, m_szPflSetUpFlag, sizeof(m_szPflSetUpFlag), &m_bPflSetUpFlag);
            }
            
            //    CREDIT LIMIT POINTER
            long lPflCrLmtPointer () { return 1; };
            RWCString PflCrLmtPointer (void)
            {
                return m_szPflCrLmtPointer;
            }
            long PflCrLmtPointer (const RWCString& rwc)
            {
                return SetString(rwc, m_szPflCrLmtPointer, sizeof(m_szPflCrLmtPointer), &m_bPflCrLmtPointer);
            }
            
            //    CREDIT LIMIT AMOUNT
            long lPflCrLmtAmt () { return 17; };
            RWCString PflCrLmtAmt (void)
            {
                return AceZeroSupp(m_szPflCrLmtAmt, &m_szSuppressBuff[0]);
            }
            RWCString PflCrLmtAmtRaw (void)
            {
                return m_szPflCrLmtAmt;
            }
            long PflCrLmtAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPflCrLmtAmt, sizeof(m_szPflCrLmtAmt), &m_bPflCrLmtAmt);
            }
            
            //    PRODUCT LOOKUP NAME
            long lLkupName () { return 30; };
            RWCString LkupName (void)
            {
                return m_szLkupName;
            }
            long LkupName (const RWCString& rwc)
            {
                return SetString(rwc, m_szLkupName, sizeof(m_szLkupName), &m_bLkupName);
            }
            
            //    CONTROL 1
            long lRmaCtl1 () { return 2; };
            RWCString RmaCtl1 (void)
            {
                return m_szRmaCtl1;
            }
            long RmaCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCtl1, sizeof(m_szRmaCtl1), &m_bRmaCtl1);
            }
            
            //    REGION
            long lRmaRegion () { return 10; };
            RWCString RmaRegion (void)
            {
                return m_szRmaRegion;
            }
            long RmaRegion (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaRegion, sizeof(m_szRmaRegion), &m_bRmaRegion);
            }
            
            //    PRODUCT CODE
            long lRmaProduct () { return 3; };
            RWCString RmaProduct (void)
            {
                return m_szRmaProduct;
            }
            long RmaProduct (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaProduct, sizeof(m_szRmaProduct), &m_bRmaProduct);
            }
            
            //    RATE TYPE
            long lRmaRateType () { return 1; };
            RWCString RmaRateType (void)
            {
                return m_szRmaRateType;
            }
            long RmaRateType (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaRateType, sizeof(m_szRmaRateType), &m_bRmaRateType);
            }
            
            //    RATE POINTER
            long lRmaPtr () { return 3; };
            RWCString RmaPtr (void)
            {
                return m_szRmaPtr;
            }
            long RmaPtr (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPtr, sizeof(m_szRmaPtr), &m_bRmaPtr);
            }
            
            //    MAXIMUM TIERED INTEREST RATE
            long lRmaMaxTieredIntR () { return 11; };
            RWCString RmaMaxTieredIntR (void)
            {
                return AceZeroSupp(m_szRmaMaxTieredIntR, &m_szSuppressBuff[0]);
            }
            RWCString RmaMaxTieredIntRRaw (void)
            {
                return m_szRmaMaxTieredIntR;
            }
            long RmaMaxTieredIntR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaMaxTieredIntR, sizeof(m_szRmaMaxTieredIntR), &m_bRmaMaxTieredIntR);
            }
            
            //    MINIMUM TIERED INTEREST RATE
            long lRmaMinTieredIntR () { return 11; };
            RWCString RmaMinTieredIntR (void)
            {
                return AceZeroSupp(m_szRmaMinTieredIntR, &m_szSuppressBuff[0]);
            }
            RWCString RmaMinTieredIntRRaw (void)
            {
                return m_szRmaMinTieredIntR;
            }
            long RmaMinTieredIntR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaMinTieredIntR, sizeof(m_szRmaMinTieredIntR), &m_bRmaMinTieredIntR);
            }
            
            //    CURRENT TIERED DATE
            long lRmaCurTieredDt () { return 8; };
            RWCString RmaCurTieredDt (void)
            {
                return m_szRmaCurTieredDt;
            }
            long RmaCurTieredDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredDt, sizeof(m_szRmaCurTieredDt), &m_bRmaCurTieredDt);
            }
            
            //    CURRENT TIERED ANNUAL RATE
            long lRmaCurTierAnnR1 () { return 11; };
            RWCString RmaCurTierAnnR1 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR1, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR1Raw (void)
            {
                return m_szRmaCurTierAnnR1;
            }
            long RmaCurTierAnnR1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR1, sizeof(m_szRmaCurTierAnnR1), &m_bRmaCurTierAnnR1);
            }
            
            //    CURRENT TIERED RATE 2
            long lRmaCurTierAnnR2 () { return 11; };
            RWCString RmaCurTierAnnR2 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR2, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR2Raw (void)
            {
                return m_szRmaCurTierAnnR2;
            }
            long RmaCurTierAnnR2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR2, sizeof(m_szRmaCurTierAnnR2), &m_bRmaCurTierAnnR2);
            }
            
            //    CURRENT TIERED RATE3
            long lRmaCurTierAnnR3 () { return 11; };
            RWCString RmaCurTierAnnR3 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR3, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR3Raw (void)
            {
                return m_szRmaCurTierAnnR3;
            }
            long RmaCurTierAnnR3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR3, sizeof(m_szRmaCurTierAnnR3), &m_bRmaCurTierAnnR3);
            }
            
            //    CURRENT TIERED RATE4
            long lRmaCurTierAnnR4 () { return 11; };
            RWCString RmaCurTierAnnR4 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR4, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR4Raw (void)
            {
                return m_szRmaCurTierAnnR4;
            }
            long RmaCurTierAnnR4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR4, sizeof(m_szRmaCurTierAnnR4), &m_bRmaCurTierAnnR4);
            }
            
            //    CURRENT TIER RATE5
            long lRmaCurTierAnnR5 () { return 11; };
            RWCString RmaCurTierAnnR5 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR5, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR5Raw (void)
            {
                return m_szRmaCurTierAnnR5;
            }
            long RmaCurTierAnnR5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR5, sizeof(m_szRmaCurTierAnnR5), &m_bRmaCurTierAnnR5);
            }
            
            //    CURRENT TIERED RATE6
            long lRmaCurTierAnnR6 () { return 11; };
            RWCString RmaCurTierAnnR6 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR6, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR6Raw (void)
            {
                return m_szRmaCurTierAnnR6;
            }
            long RmaCurTierAnnR6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR6, sizeof(m_szRmaCurTierAnnR6), &m_bRmaCurTierAnnR6);
            }
            
            //    CURRENT TIERED RATE7
            long lRmaCurTierAnnR7 () { return 11; };
            RWCString RmaCurTierAnnR7 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR7, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR7Raw (void)
            {
                return m_szRmaCurTierAnnR7;
            }
            long RmaCurTierAnnR7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR7, sizeof(m_szRmaCurTierAnnR7), &m_bRmaCurTierAnnR7);
            }
            
            //    CURRENT TIERED RATE8
            long lRmaCurTierAnnR8 () { return 11; };
            RWCString RmaCurTierAnnR8 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR8, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR8Raw (void)
            {
                return m_szRmaCurTierAnnR8;
            }
            long RmaCurTierAnnR8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR8, sizeof(m_szRmaCurTierAnnR8), &m_bRmaCurTierAnnR8);
            }
            
            //    CURRENT TIERED RATE9
            long lRmaCurTierAnnR9 () { return 11; };
            RWCString RmaCurTierAnnR9 (void)
            {
                return AceZeroSupp(m_szRmaCurTierAnnR9, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTierAnnR9Raw (void)
            {
                return m_szRmaCurTierAnnR9;
            }
            long RmaCurTierAnnR9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTierAnnR9, sizeof(m_szRmaCurTierAnnR9), &m_bRmaCurTierAnnR9);
            }
            
            //    CURRENT TIERED LIMIT1
            long lRmaCurTieredLmt1 () { return 17; };
            RWCString RmaCurTieredLmt1 (void)
            {
                return AceZeroSupp(m_szRmaCurTieredLmt1, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTieredLmt1Raw (void)
            {
                return m_szRmaCurTieredLmt1;
            }
            long RmaCurTieredLmt1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredLmt1, sizeof(m_szRmaCurTieredLmt1), &m_bRmaCurTieredLmt1);
            }
            
            //    CURRENT TIERED LIMIT2
            long lRmaCurTieredLmt2 () { return 17; };
            RWCString RmaCurTieredLmt2 (void)
            {
                return AceZeroSupp(m_szRmaCurTieredLmt2, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTieredLmt2Raw (void)
            {
                return m_szRmaCurTieredLmt2;
            }
            long RmaCurTieredLmt2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredLmt2, sizeof(m_szRmaCurTieredLmt2), &m_bRmaCurTieredLmt2);
            }
            
            //    CURRENT TIERED LIMIT3
            long lRmaCurTieredLmt3 () { return 17; };
            RWCString RmaCurTieredLmt3 (void)
            {
                return AceZeroSupp(m_szRmaCurTieredLmt3, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTieredLmt3Raw (void)
            {
                return m_szRmaCurTieredLmt3;
            }
            long RmaCurTieredLmt3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredLmt3, sizeof(m_szRmaCurTieredLmt3), &m_bRmaCurTieredLmt3);
            }
            
            //    CURRENT TIERED LIMIT4
            long lRmaCurTieredLmt4 () { return 17; };
            RWCString RmaCurTieredLmt4 (void)
            {
                return AceZeroSupp(m_szRmaCurTieredLmt4, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTieredLmt4Raw (void)
            {
                return m_szRmaCurTieredLmt4;
            }
            long RmaCurTieredLmt4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredLmt4, sizeof(m_szRmaCurTieredLmt4), &m_bRmaCurTieredLmt4);
            }
            
            //    CURRENT TIERED LIMIT5
            long lRmaCurTieredLmt5 () { return 17; };
            RWCString RmaCurTieredLmt5 (void)
            {
                return AceZeroSupp(m_szRmaCurTieredLmt5, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTieredLmt5Raw (void)
            {
                return m_szRmaCurTieredLmt5;
            }
            long RmaCurTieredLmt5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredLmt5, sizeof(m_szRmaCurTieredLmt5), &m_bRmaCurTieredLmt5);
            }
            
            //    CURRENT TIERED LIMIT6
            long lRmaCurTieredLmt6 () { return 17; };
            RWCString RmaCurTieredLmt6 (void)
            {
                return AceZeroSupp(m_szRmaCurTieredLmt6, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTieredLmt6Raw (void)
            {
                return m_szRmaCurTieredLmt6;
            }
            long RmaCurTieredLmt6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredLmt6, sizeof(m_szRmaCurTieredLmt6), &m_bRmaCurTieredLmt6);
            }
            
            //    CURRENT TIERED LIMIT7
            long lRmaCurTieredLmt7 () { return 17; };
            RWCString RmaCurTieredLmt7 (void)
            {
                return AceZeroSupp(m_szRmaCurTieredLmt7, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTieredLmt7Raw (void)
            {
                return m_szRmaCurTieredLmt7;
            }
            long RmaCurTieredLmt7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredLmt7, sizeof(m_szRmaCurTieredLmt7), &m_bRmaCurTieredLmt7);
            }
            
            //    CURRENT TIERED LIMIT8
            long lRmaCurTieredLmt8 () { return 17; };
            RWCString RmaCurTieredLmt8 (void)
            {
                return AceZeroSupp(m_szRmaCurTieredLmt8, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurTieredLmt8Raw (void)
            {
                return m_szRmaCurTieredLmt8;
            }
            long RmaCurTieredLmt8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurTieredLmt8, sizeof(m_szRmaCurTieredLmt8), &m_bRmaCurTieredLmt8);
            }
            
            //    PREVIOUS TIERED DATE
            long lRmaPrevTieredDt () { return 8; };
            RWCString RmaPrevTieredDt (void)
            {
                return m_szRmaPrevTieredDt;
            }
            long RmaPrevTieredDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredDt, sizeof(m_szRmaPrevTieredDt), &m_bRmaPrevTieredDt);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE1
            long lRmaPrevTierAnnR1 () { return 11; };
            RWCString RmaPrevTierAnnR1 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR1, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR1Raw (void)
            {
                return m_szRmaPrevTierAnnR1;
            }
            long RmaPrevTierAnnR1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR1, sizeof(m_szRmaPrevTierAnnR1), &m_bRmaPrevTierAnnR1);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE2
            long lRmaPrevTierAnnR2 () { return 11; };
            RWCString RmaPrevTierAnnR2 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR2, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR2Raw (void)
            {
                return m_szRmaPrevTierAnnR2;
            }
            long RmaPrevTierAnnR2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR2, sizeof(m_szRmaPrevTierAnnR2), &m_bRmaPrevTierAnnR2);
            }
            
            //    PREVIOUS TIERED RATE3
            long lRmaPrevTierAnnR3 () { return 11; };
            RWCString RmaPrevTierAnnR3 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR3, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR3Raw (void)
            {
                return m_szRmaPrevTierAnnR3;
            }
            long RmaPrevTierAnnR3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR3, sizeof(m_szRmaPrevTierAnnR3), &m_bRmaPrevTierAnnR3);
            }
            
            //    PREVIOUS TIERED RATE4
            long lRmaPrevTierAnnR4 () { return 11; };
            RWCString RmaPrevTierAnnR4 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR4, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR4Raw (void)
            {
                return m_szRmaPrevTierAnnR4;
            }
            long RmaPrevTierAnnR4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR4, sizeof(m_szRmaPrevTierAnnR4), &m_bRmaPrevTierAnnR4);
            }
            
            //    PREVIOUS TIERED RATE5
            long lRmaPrevTierAnnR5 () { return 11; };
            RWCString RmaPrevTierAnnR5 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR5, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR5Raw (void)
            {
                return m_szRmaPrevTierAnnR5;
            }
            long RmaPrevTierAnnR5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR5, sizeof(m_szRmaPrevTierAnnR5), &m_bRmaPrevTierAnnR5);
            }
            
            //    PREVIOUS TIERED RATE6
            long lRmaPrevTierAnnR6 () { return 11; };
            RWCString RmaPrevTierAnnR6 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR6, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR6Raw (void)
            {
                return m_szRmaPrevTierAnnR6;
            }
            long RmaPrevTierAnnR6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR6, sizeof(m_szRmaPrevTierAnnR6), &m_bRmaPrevTierAnnR6);
            }
            
            //    PREVIOUS TIERED RATE7
            long lRmaPrevTierAnnR7 () { return 11; };
            RWCString RmaPrevTierAnnR7 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR7, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR7Raw (void)
            {
                return m_szRmaPrevTierAnnR7;
            }
            long RmaPrevTierAnnR7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR7, sizeof(m_szRmaPrevTierAnnR7), &m_bRmaPrevTierAnnR7);
            }
            
            //    PREVIOUS TIERED RATE8
            long lRmaPrevTierAnnR8 () { return 11; };
            RWCString RmaPrevTierAnnR8 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR8, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR8Raw (void)
            {
                return m_szRmaPrevTierAnnR8;
            }
            long RmaPrevTierAnnR8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR8, sizeof(m_szRmaPrevTierAnnR8), &m_bRmaPrevTierAnnR8);
            }
            
            //    PREVIOUS TIERED RATE9
            long lRmaPrevTierAnnR9 () { return 11; };
            RWCString RmaPrevTierAnnR9 (void)
            {
                return AceZeroSupp(m_szRmaPrevTierAnnR9, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTierAnnR9Raw (void)
            {
                return m_szRmaPrevTierAnnR9;
            }
            long RmaPrevTierAnnR9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTierAnnR9, sizeof(m_szRmaPrevTierAnnR9), &m_bRmaPrevTierAnnR9);
            }
            
            //    PREVIOUS TIERED LIMIT1
            long lRmaPrevTieredLmt1 () { return 17; };
            RWCString RmaPrevTieredLmt1 (void)
            {
                return AceZeroSupp(m_szRmaPrevTieredLmt1, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTieredLmt1Raw (void)
            {
                return m_szRmaPrevTieredLmt1;
            }
            long RmaPrevTieredLmt1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredLmt1, sizeof(m_szRmaPrevTieredLmt1), &m_bRmaPrevTieredLmt1);
            }
            
            //    PREVIOUS TIERED LIMIT2
            long lRmaPrevTieredLmt2 () { return 17; };
            RWCString RmaPrevTieredLmt2 (void)
            {
                return AceZeroSupp(m_szRmaPrevTieredLmt2, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTieredLmt2Raw (void)
            {
                return m_szRmaPrevTieredLmt2;
            }
            long RmaPrevTieredLmt2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredLmt2, sizeof(m_szRmaPrevTieredLmt2), &m_bRmaPrevTieredLmt2);
            }
            
            //    PREVIOUS TIERED LIMIT3
            long lRmaPrevTieredLmt3 () { return 17; };
            RWCString RmaPrevTieredLmt3 (void)
            {
                return AceZeroSupp(m_szRmaPrevTieredLmt3, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTieredLmt3Raw (void)
            {
                return m_szRmaPrevTieredLmt3;
            }
            long RmaPrevTieredLmt3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredLmt3, sizeof(m_szRmaPrevTieredLmt3), &m_bRmaPrevTieredLmt3);
            }
            
            //    PREVIOUS TIERED LIMIT4
            long lRmaPrevTieredLmt4 () { return 17; };
            RWCString RmaPrevTieredLmt4 (void)
            {
                return AceZeroSupp(m_szRmaPrevTieredLmt4, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTieredLmt4Raw (void)
            {
                return m_szRmaPrevTieredLmt4;
            }
            long RmaPrevTieredLmt4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredLmt4, sizeof(m_szRmaPrevTieredLmt4), &m_bRmaPrevTieredLmt4);
            }
            
            //    PREVIOUS TIERED LIMIT5
            long lRmaPrevTieredLmt5 () { return 17; };
            RWCString RmaPrevTieredLmt5 (void)
            {
                return AceZeroSupp(m_szRmaPrevTieredLmt5, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTieredLmt5Raw (void)
            {
                return m_szRmaPrevTieredLmt5;
            }
            long RmaPrevTieredLmt5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredLmt5, sizeof(m_szRmaPrevTieredLmt5), &m_bRmaPrevTieredLmt5);
            }
            
            //    PREVIOUS TIERED LIMIT6
            long lRmaPrevTieredLmt6 () { return 17; };
            RWCString RmaPrevTieredLmt6 (void)
            {
                return AceZeroSupp(m_szRmaPrevTieredLmt6, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTieredLmt6Raw (void)
            {
                return m_szRmaPrevTieredLmt6;
            }
            long RmaPrevTieredLmt6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredLmt6, sizeof(m_szRmaPrevTieredLmt6), &m_bRmaPrevTieredLmt6);
            }
            
            //    PREVIOUS TIERED LIMIT7
            long lRmaPrevTieredLmt7 () { return 17; };
            RWCString RmaPrevTieredLmt7 (void)
            {
                return AceZeroSupp(m_szRmaPrevTieredLmt7, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTieredLmt7Raw (void)
            {
                return m_szRmaPrevTieredLmt7;
            }
            long RmaPrevTieredLmt7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredLmt7, sizeof(m_szRmaPrevTieredLmt7), &m_bRmaPrevTieredLmt7);
            }
            
            //    PREVIOUS TIERED LIMIT8
            long lRmaPrevTieredLmt8 () { return 17; };
            RWCString RmaPrevTieredLmt8 (void)
            {
                return AceZeroSupp(m_szRmaPrevTieredLmt8, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevTieredLmt8Raw (void)
            {
                return m_szRmaPrevTieredLmt8;
            }
            long RmaPrevTieredLmt8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevTieredLmt8, sizeof(m_szRmaPrevTieredLmt8), &m_bRmaPrevTieredLmt8);
            }
            
            //    MAXIMUM IOD INTEREST RATE
            long lRmaMaxIodIntR () { return 11; };
            RWCString RmaMaxIodIntR (void)
            {
                return AceZeroSupp(m_szRmaMaxIodIntR, &m_szSuppressBuff[0]);
            }
            RWCString RmaMaxIodIntRRaw (void)
            {
                return m_szRmaMaxIodIntR;
            }
            long RmaMaxIodIntR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaMaxIodIntR, sizeof(m_szRmaMaxIodIntR), &m_bRmaMaxIodIntR);
            }
            
            //    MINIMUM IOD INTEREST RATE
            long lRmaMinIodIntR () { return 11; };
            RWCString RmaMinIodIntR (void)
            {
                return AceZeroSupp(m_szRmaMinIodIntR, &m_szSuppressBuff[0]);
            }
            RWCString RmaMinIodIntRRaw (void)
            {
                return m_szRmaMinIodIntR;
            }
            long RmaMinIodIntR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaMinIodIntR, sizeof(m_szRmaMinIodIntR), &m_bRmaMinIodIntR);
            }
            
            //    CURRENT ILO DATE
            long lRmaCurIloDt () { return 8; };
            RWCString RmaCurIloDt (void)
            {
                return m_szRmaCurIloDt;
            }
            long RmaCurIloDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurIloDt, sizeof(m_szRmaCurIloDt), &m_bRmaCurIloDt);
            }
            
            //    CURRENT ILO ANNUAL RATE
            long lRmaCurIloAnnR () { return 11; };
            RWCString RmaCurIloAnnR (void)
            {
                return AceZeroSupp(m_szRmaCurIloAnnR, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurIloAnnRRaw (void)
            {
                return m_szRmaCurIloAnnR;
            }
            long RmaCurIloAnnR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurIloAnnR, sizeof(m_szRmaCurIloAnnR), &m_bRmaCurIloAnnR);
            }
            
            //    PREVIOUS ILO DATE
            long lRmaPrevIloDt () { return 8; };
            RWCString RmaPrevIloDt (void)
            {
                return m_szRmaPrevIloDt;
            }
            long RmaPrevIloDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevIloDt, sizeof(m_szRmaPrevIloDt), &m_bRmaPrevIloDt);
            }
            
            //    PREV ILO ANNUAL RATE
            long lRmaPrevIloAnnR () { return 11; };
            RWCString RmaPrevIloAnnR (void)
            {
                return AceZeroSupp(m_szRmaPrevIloAnnR, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevIloAnnRRaw (void)
            {
                return m_szRmaPrevIloAnnR;
            }
            long RmaPrevIloAnnR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevIloAnnR, sizeof(m_szRmaPrevIloAnnR), &m_bRmaPrevIloAnnR);
            }
            
            //    MAXIMUM SPLIT INTEREST RATE
            long lRmaMaxSplitIntR () { return 11; };
            RWCString RmaMaxSplitIntR (void)
            {
                return AceZeroSupp(m_szRmaMaxSplitIntR, &m_szSuppressBuff[0]);
            }
            RWCString RmaMaxSplitIntRRaw (void)
            {
                return m_szRmaMaxSplitIntR;
            }
            long RmaMaxSplitIntR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaMaxSplitIntR, sizeof(m_szRmaMaxSplitIntR), &m_bRmaMaxSplitIntR);
            }
            
            //    MIMIMUM SPLIT INTEREST RATE
            long lRmaMinSplitIntR () { return 11; };
            RWCString RmaMinSplitIntR (void)
            {
                return AceZeroSupp(m_szRmaMinSplitIntR, &m_szSuppressBuff[0]);
            }
            RWCString RmaMinSplitIntRRaw (void)
            {
                return m_szRmaMinSplitIntR;
            }
            long RmaMinSplitIntR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaMinSplitIntR, sizeof(m_szRmaMinSplitIntR), &m_bRmaMinSplitIntR);
            }
            
            //    CURR SPLIT DATE
            long lRmaCurSplitDt () { return 8; };
            RWCString RmaCurSplitDt (void)
            {
                return m_szRmaCurSplitDt;
            }
            long RmaCurSplitDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurSplitDt, sizeof(m_szRmaCurSplitDt), &m_bRmaCurSplitDt);
            }
            
            //    CURRENT SPLIT ANNUAL RATE1
            long lRmaCurSplitAnnR1 () { return 11; };
            RWCString RmaCurSplitAnnR1 (void)
            {
                return AceZeroSupp(m_szRmaCurSplitAnnR1, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurSplitAnnR1Raw (void)
            {
                return m_szRmaCurSplitAnnR1;
            }
            long RmaCurSplitAnnR1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurSplitAnnR1, sizeof(m_szRmaCurSplitAnnR1), &m_bRmaCurSplitAnnR1);
            }
            
            //    CURRENT SPLIT ANNUAL RATE2
            long lRmaCurSplitAnnR2 () { return 11; };
            RWCString RmaCurSplitAnnR2 (void)
            {
                return AceZeroSupp(m_szRmaCurSplitAnnR2, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurSplitAnnR2Raw (void)
            {
                return m_szRmaCurSplitAnnR2;
            }
            long RmaCurSplitAnnR2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurSplitAnnR2, sizeof(m_szRmaCurSplitAnnR2), &m_bRmaCurSplitAnnR2);
            }
            
            //    CURRENT SPLIT RATE ANN RATE3
            long lRmaCurSplitAnnR3 () { return 11; };
            RWCString RmaCurSplitAnnR3 (void)
            {
                return AceZeroSupp(m_szRmaCurSplitAnnR3, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurSplitAnnR3Raw (void)
            {
                return m_szRmaCurSplitAnnR3;
            }
            long RmaCurSplitAnnR3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurSplitAnnR3, sizeof(m_szRmaCurSplitAnnR3), &m_bRmaCurSplitAnnR3);
            }
            
            //    CURRENT SPLIT LIMIT1
            long lRmaCurSplitLmt1 () { return 17; };
            RWCString RmaCurSplitLmt1 (void)
            {
                return AceZeroSupp(m_szRmaCurSplitLmt1, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurSplitLmt1Raw (void)
            {
                return m_szRmaCurSplitLmt1;
            }
            long RmaCurSplitLmt1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurSplitLmt1, sizeof(m_szRmaCurSplitLmt1), &m_bRmaCurSplitLmt1);
            }
            
            //    CURRENT SPLIT LIMIT2
            long lRmaCurSplitLmt2 () { return 17; };
            RWCString RmaCurSplitLmt2 (void)
            {
                return AceZeroSupp(m_szRmaCurSplitLmt2, &m_szSuppressBuff[0]);
            }
            RWCString RmaCurSplitLmt2Raw (void)
            {
                return m_szRmaCurSplitLmt2;
            }
            long RmaCurSplitLmt2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaCurSplitLmt2, sizeof(m_szRmaCurSplitLmt2), &m_bRmaCurSplitLmt2);
            }
            
            //    PREVIOUS SPLIT DATE
            long lRmaPrevSplitDt () { return 8; };
            RWCString RmaPrevSplitDt (void)
            {
                return m_szRmaPrevSplitDt;
            }
            long RmaPrevSplitDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevSplitDt, sizeof(m_szRmaPrevSplitDt), &m_bRmaPrevSplitDt);
            }
            
            //    PREVIOUS SPLIT ANNUAL RATE1
            long lRmaPrevSplitAnnR1 () { return 11; };
            RWCString RmaPrevSplitAnnR1 (void)
            {
                return AceZeroSupp(m_szRmaPrevSplitAnnR1, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevSplitAnnR1Raw (void)
            {
                return m_szRmaPrevSplitAnnR1;
            }
            long RmaPrevSplitAnnR1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevSplitAnnR1, sizeof(m_szRmaPrevSplitAnnR1), &m_bRmaPrevSplitAnnR1);
            }
            
            //    PREVIOUS SPLIT ANNUAL RATE2
            long lRmaPrevSplitAnnR2 () { return 11; };
            RWCString RmaPrevSplitAnnR2 (void)
            {
                return AceZeroSupp(m_szRmaPrevSplitAnnR2, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevSplitAnnR2Raw (void)
            {
                return m_szRmaPrevSplitAnnR2;
            }
            long RmaPrevSplitAnnR2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevSplitAnnR2, sizeof(m_szRmaPrevSplitAnnR2), &m_bRmaPrevSplitAnnR2);
            }
            
            //    PREVIOUS SPLIT ANNUAL RATE3
            long lRmaPrevSplitAnnR3 () { return 11; };
            RWCString RmaPrevSplitAnnR3 (void)
            {
                return AceZeroSupp(m_szRmaPrevSplitAnnR3, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevSplitAnnR3Raw (void)
            {
                return m_szRmaPrevSplitAnnR3;
            }
            long RmaPrevSplitAnnR3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevSplitAnnR3, sizeof(m_szRmaPrevSplitAnnR3), &m_bRmaPrevSplitAnnR3);
            }
            
            //    PREVIOUS SPLIT LIMIT1
            long lRmaPrevSplitLmt1 () { return 17; };
            RWCString RmaPrevSplitLmt1 (void)
            {
                return AceZeroSupp(m_szRmaPrevSplitLmt1, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevSplitLmt1Raw (void)
            {
                return m_szRmaPrevSplitLmt1;
            }
            long RmaPrevSplitLmt1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevSplitLmt1, sizeof(m_szRmaPrevSplitLmt1), &m_bRmaPrevSplitLmt1);
            }
            
            //    PREVIOUS SPLIT LIMIT2
            long lRmaPrevSplitLmt2 () { return 17; };
            RWCString RmaPrevSplitLmt2 (void)
            {
                return AceZeroSupp(m_szRmaPrevSplitLmt2, &m_szSuppressBuff[0]);
            }
            RWCString RmaPrevSplitLmt2Raw (void)
            {
                return m_szRmaPrevSplitLmt2;
            }
            long RmaPrevSplitLmt2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmaPrevSplitLmt2, sizeof(m_szRmaPrevSplitLmt2), &m_bRmaPrevSplitLmt2);
            }
            
            //    WORK ERROR CODE
            long lWorkErrCd () { return 4; };
            RWCString WorkErrCd (void)
            {
                return m_szWorkErrCd;
            }
            long WorkErrCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szWorkErrCd, sizeof(m_szWorkErrCd), &m_bWorkErrCd);
            }
            
            //    WORK ERROR TEXT
            long lWorkErrText () { return 40; };
            RWCString WorkErrText (void)
            {
                return m_szWorkErrText;
            }
            long WorkErrText (const RWCString& rwc)
            {
                return SetString(rwc, m_szWorkErrText, sizeof(m_szWorkErrText), &m_bWorkErrText);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bCsProductId) return true;
                if (m_bPfRegion) return true;
                if (m_bCurrCode) return true;
                if (m_bPfCtl1) return true;
                if (m_bPfCtl2) return true;
                if (m_bPfCtl3) return true;
                if (m_bPfType) return true;
                if (m_bPfStopHoldWaive) return true;
                if (m_bPffChkTruncFlag) return true;
                if (m_bPffSystemType) return true;
                if (m_bPffOdLmtCode) return true;
                if (m_bPffOdLmtAmt) return true;
                if (m_bPffOdChgCode) return true;
                if (m_bPffOdChgAmt) return true;
                if (m_bPffOdChgMaximum) return true;
                if (m_bPffOdChgWaive) return true;
                if (m_bPffNsfChgCode) return true;
                if (m_bPffNsfChgAmt) return true;
                if (m_bPffNsfChgWaive) return true;
                if (m_bPffScType) return true;
                if (m_bPffScRoutine) return true;
                if (m_bPffScWaive) return true;
                if (m_bPffScWaiveRsn) return true;
                if (m_bPffScCycleCode) return true;
                if (m_bPffScCycleFreq) return true;
                if (m_bPffScCycleMonth) return true;
                if (m_bPffScCycleDay) return true;
                if (m_bPffScCheckChgCode) return true;
                if (m_bPffScCheckChgLmt) return true;
                if (m_bPffScCheckChgAmt) return true;
                if (m_bScMfNochgMinbal) return true;
                if (m_bScMaintFee) return true;
                if (m_bPffStPullCode) return true;
                if (m_bPffStSuppCode) return true;
                if (m_bPffStCycle) return true;
                if (m_bPffIodRatePtr) return true;
                if (m_bPffIodHifiInd) return true;
                if (m_bPffIodTinCert) return true;
                if (m_bPffIodAccrualType) return true;
                if (m_bPffIodMinHifiAmt) return true;
                if (m_bPffIodRateUse) return true;
                if (m_bPffMmdaIndicator) return true;
                if (m_bPffIodMaxHifiTrans) return true;
                if (m_bPffIodDistCd) return true;
                if (m_bPflSetUpFlag) return true;
                if (m_bPflCrLmtPointer) return true;
                if (m_bPflCrLmtAmt) return true;
                if (m_bLkupName) return true;
                if (m_bRmaCtl1) return true;
                if (m_bRmaRegion) return true;
                if (m_bRmaProduct) return true;
                if (m_bRmaRateType) return true;
                if (m_bRmaPtr) return true;
                if (m_bRmaMaxTieredIntR) return true;
                if (m_bRmaMinTieredIntR) return true;
                if (m_bRmaCurTieredDt) return true;
                if (m_bRmaCurTierAnnR1) return true;
                if (m_bRmaCurTierAnnR2) return true;
                if (m_bRmaCurTierAnnR3) return true;
                if (m_bRmaCurTierAnnR4) return true;
                if (m_bRmaCurTierAnnR5) return true;
                if (m_bRmaCurTierAnnR6) return true;
                if (m_bRmaCurTierAnnR7) return true;
                if (m_bRmaCurTierAnnR8) return true;
                if (m_bRmaCurTierAnnR9) return true;
                if (m_bRmaCurTieredLmt1) return true;
                if (m_bRmaCurTieredLmt2) return true;
                if (m_bRmaCurTieredLmt3) return true;
                if (m_bRmaCurTieredLmt4) return true;
                if (m_bRmaCurTieredLmt5) return true;
                if (m_bRmaCurTieredLmt6) return true;
                if (m_bRmaCurTieredLmt7) return true;
                if (m_bRmaCurTieredLmt8) return true;
                if (m_bRmaPrevTieredDt) return true;
                if (m_bRmaPrevTierAnnR1) return true;
                if (m_bRmaPrevTierAnnR2) return true;
                if (m_bRmaPrevTierAnnR3) return true;
                if (m_bRmaPrevTierAnnR4) return true;
                if (m_bRmaPrevTierAnnR5) return true;
                if (m_bRmaPrevTierAnnR6) return true;
                if (m_bRmaPrevTierAnnR7) return true;
                if (m_bRmaPrevTierAnnR8) return true;
                if (m_bRmaPrevTierAnnR9) return true;
                if (m_bRmaPrevTieredLmt1) return true;
                if (m_bRmaPrevTieredLmt2) return true;
                if (m_bRmaPrevTieredLmt3) return true;
                if (m_bRmaPrevTieredLmt4) return true;
                if (m_bRmaPrevTieredLmt5) return true;
                if (m_bRmaPrevTieredLmt6) return true;
                if (m_bRmaPrevTieredLmt7) return true;
                if (m_bRmaPrevTieredLmt8) return true;
                if (m_bRmaMaxIodIntR) return true;
                if (m_bRmaMinIodIntR) return true;
                if (m_bRmaCurIloDt) return true;
                if (m_bRmaCurIloAnnR) return true;
                if (m_bRmaPrevIloDt) return true;
                if (m_bRmaPrevIloAnnR) return true;
                if (m_bRmaMaxSplitIntR) return true;
                if (m_bRmaMinSplitIntR) return true;
                if (m_bRmaCurSplitDt) return true;
                if (m_bRmaCurSplitAnnR1) return true;
                if (m_bRmaCurSplitAnnR2) return true;
                if (m_bRmaCurSplitAnnR3) return true;
                if (m_bRmaCurSplitLmt1) return true;
                if (m_bRmaCurSplitLmt2) return true;
                if (m_bRmaPrevSplitDt) return true;
                if (m_bRmaPrevSplitAnnR1) return true;
                if (m_bRmaPrevSplitAnnR2) return true;
                if (m_bRmaPrevSplitAnnR3) return true;
                if (m_bRmaPrevSplitLmt1) return true;
                if (m_bRmaPrevSplitLmt2) return true;
                if (m_bWorkErrCd) return true;
                if (m_bWorkErrText) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "ProdRateData", m_lIndex);
                    AddXMLField(pSess, "CsProductId", m_szCsProductId, &m_bCsProductId);
                    AddXMLField(pSess, "PfRegion", m_szPfRegion, &m_bPfRegion);
                    AddXMLField(pSess, "CurrCode", m_szCurrCode, &m_bCurrCode);
                    AddXMLField(pSess, "PfCtl1", m_szPfCtl1, &m_bPfCtl1);
                    AddXMLField(pSess, "PfCtl2", m_szPfCtl2, &m_bPfCtl2);
                    AddXMLField(pSess, "PfCtl3", m_szPfCtl3, &m_bPfCtl3);
                    AddXMLField(pSess, "PfType", m_szPfType, &m_bPfType);
                    AddXMLField(pSess, "PfStopHoldWaive", m_szPfStopHoldWaive, &m_bPfStopHoldWaive);
                    AddXMLField(pSess, "PffChkTruncFlag", m_szPffChkTruncFlag, &m_bPffChkTruncFlag);
                    AddXMLField(pSess, "PffSystemType", m_szPffSystemType, &m_bPffSystemType);
                    AddXMLField(pSess, "PffOdLmtCode", m_szPffOdLmtCode, &m_bPffOdLmtCode);
                    AddXMLField(pSess, "PffOdLmtAmt", m_szPffOdLmtAmt, &m_bPffOdLmtAmt);
                    AddXMLField(pSess, "PffOdChgCode", m_szPffOdChgCode, &m_bPffOdChgCode);
                    AddXMLField(pSess, "PffOdChgAmt", m_szPffOdChgAmt, &m_bPffOdChgAmt);
                    AddXMLField(pSess, "PffOdChgMaximum", m_szPffOdChgMaximum, &m_bPffOdChgMaximum);
                    AddXMLField(pSess, "PffOdChgWaive", m_szPffOdChgWaive, &m_bPffOdChgWaive);
                    AddXMLField(pSess, "PffNsfChgCode", m_szPffNsfChgCode, &m_bPffNsfChgCode);
                    AddXMLField(pSess, "PffNsfChgAmt", m_szPffNsfChgAmt, &m_bPffNsfChgAmt);
                    AddXMLField(pSess, "PffNsfChgWaive", m_szPffNsfChgWaive, &m_bPffNsfChgWaive);
                    AddXMLField(pSess, "PffScType", m_szPffScType, &m_bPffScType);
                    AddXMLField(pSess, "PffScRoutine", m_szPffScRoutine, &m_bPffScRoutine);
                    AddXMLField(pSess, "PffScWaive", m_szPffScWaive, &m_bPffScWaive);
                    AddXMLField(pSess, "PffScWaiveRsn", m_szPffScWaiveRsn, &m_bPffScWaiveRsn);
                    AddXMLField(pSess, "PffScCycleCode", m_szPffScCycleCode, &m_bPffScCycleCode);
                    AddXMLField(pSess, "PffScCycleFreq", m_szPffScCycleFreq, &m_bPffScCycleFreq);
                    AddXMLField(pSess, "PffScCycleMonth", m_szPffScCycleMonth, &m_bPffScCycleMonth);
                    AddXMLField(pSess, "PffScCycleDay", m_szPffScCycleDay, &m_bPffScCycleDay);
                    AddXMLField(pSess, "PffScCheckChgCode", m_szPffScCheckChgCode, &m_bPffScCheckChgCode);
                    AddXMLField(pSess, "PffScCheckChgLmt", m_szPffScCheckChgLmt, &m_bPffScCheckChgLmt);
                    AddXMLField(pSess, "PffScCheckChgAmt", m_szPffScCheckChgAmt, &m_bPffScCheckChgAmt);
                    AddXMLField(pSess, "ScMfNochgMinbal", m_szScMfNochgMinbal, &m_bScMfNochgMinbal);
                    AddXMLField(pSess, "ScMaintFee", m_szScMaintFee, &m_bScMaintFee);
                    AddXMLField(pSess, "PffStPullCode", m_szPffStPullCode, &m_bPffStPullCode);
                    AddXMLField(pSess, "PffStSuppCode", m_szPffStSuppCode, &m_bPffStSuppCode);
                    AddXMLField(pSess, "PffStCycle", m_szPffStCycle, &m_bPffStCycle);
                    AddXMLField(pSess, "PffIodRatePtr", m_szPffIodRatePtr, &m_bPffIodRatePtr);
                    AddXMLField(pSess, "PffIodHifiInd", m_szPffIodHifiInd, &m_bPffIodHifiInd);
                    AddXMLField(pSess, "PffIodTinCert", m_szPffIodTinCert, &m_bPffIodTinCert);
                    AddXMLField(pSess, "PffIodAccrualType", m_szPffIodAccrualType, &m_bPffIodAccrualType);
                    AddXMLField(pSess, "PffIodMinHifiAmt", m_szPffIodMinHifiAmt, &m_bPffIodMinHifiAmt);
                    AddXMLField(pSess, "PffIodRateUse", m_szPffIodRateUse, &m_bPffIodRateUse);
                    AddXMLField(pSess, "PffMmdaIndicator", m_szPffMmdaIndicator, &m_bPffMmdaIndicator);
                    AddXMLField(pSess, "PffIodMaxHifiTrans", m_szPffIodMaxHifiTrans, &m_bPffIodMaxHifiTrans);
                    AddXMLField(pSess, "PffIodDistCd", m_szPffIodDistCd, &m_bPffIodDistCd);
                    AddXMLField(pSess, "PflSetUpFlag", m_szPflSetUpFlag, &m_bPflSetUpFlag);
                    AddXMLField(pSess, "PflCrLmtPointer", m_szPflCrLmtPointer, &m_bPflCrLmtPointer);
                    AddXMLField(pSess, "PflCrLmtAmt", m_szPflCrLmtAmt, &m_bPflCrLmtAmt);
                    AddXMLField(pSess, "LkupName", m_szLkupName, &m_bLkupName);
                    AddXMLField(pSess, "RmaCtl1", m_szRmaCtl1, &m_bRmaCtl1);
                    AddXMLField(pSess, "RmaRegion", m_szRmaRegion, &m_bRmaRegion);
                    AddXMLField(pSess, "RmaProduct", m_szRmaProduct, &m_bRmaProduct);
                    AddXMLField(pSess, "RmaRateType", m_szRmaRateType, &m_bRmaRateType);
                    AddXMLField(pSess, "RmaPtr", m_szRmaPtr, &m_bRmaPtr);
                    AddXMLField(pSess, "RmaMaxTieredIntR", m_szRmaMaxTieredIntR, &m_bRmaMaxTieredIntR);
                    AddXMLField(pSess, "RmaMinTieredIntR", m_szRmaMinTieredIntR, &m_bRmaMinTieredIntR);
                    AddXMLField(pSess, "RmaCurTieredDt", m_szRmaCurTieredDt, &m_bRmaCurTieredDt);
                    AddXMLField(pSess, "RmaCurTierAnnR1", m_szRmaCurTierAnnR1, &m_bRmaCurTierAnnR1);
                    AddXMLField(pSess, "RmaCurTierAnnR2", m_szRmaCurTierAnnR2, &m_bRmaCurTierAnnR2);
                    AddXMLField(pSess, "RmaCurTierAnnR3", m_szRmaCurTierAnnR3, &m_bRmaCurTierAnnR3);
                    AddXMLField(pSess, "RmaCurTierAnnR4", m_szRmaCurTierAnnR4, &m_bRmaCurTierAnnR4);
                    AddXMLField(pSess, "RmaCurTierAnnR5", m_szRmaCurTierAnnR5, &m_bRmaCurTierAnnR5);
                    AddXMLField(pSess, "RmaCurTierAnnR6", m_szRmaCurTierAnnR6, &m_bRmaCurTierAnnR6);
                    AddXMLField(pSess, "RmaCurTierAnnR7", m_szRmaCurTierAnnR7, &m_bRmaCurTierAnnR7);
                    AddXMLField(pSess, "RmaCurTierAnnR8", m_szRmaCurTierAnnR8, &m_bRmaCurTierAnnR8);
                    AddXMLField(pSess, "RmaCurTierAnnR9", m_szRmaCurTierAnnR9, &m_bRmaCurTierAnnR9);
                    AddXMLField(pSess, "RmaCurTieredLmt1", m_szRmaCurTieredLmt1, &m_bRmaCurTieredLmt1);
                    AddXMLField(pSess, "RmaCurTieredLmt2", m_szRmaCurTieredLmt2, &m_bRmaCurTieredLmt2);
                    AddXMLField(pSess, "RmaCurTieredLmt3", m_szRmaCurTieredLmt3, &m_bRmaCurTieredLmt3);
                    AddXMLField(pSess, "RmaCurTieredLmt4", m_szRmaCurTieredLmt4, &m_bRmaCurTieredLmt4);
                    AddXMLField(pSess, "RmaCurTieredLmt5", m_szRmaCurTieredLmt5, &m_bRmaCurTieredLmt5);
                    AddXMLField(pSess, "RmaCurTieredLmt6", m_szRmaCurTieredLmt6, &m_bRmaCurTieredLmt6);
                    AddXMLField(pSess, "RmaCurTieredLmt7", m_szRmaCurTieredLmt7, &m_bRmaCurTieredLmt7);
                    AddXMLField(pSess, "RmaCurTieredLmt8", m_szRmaCurTieredLmt8, &m_bRmaCurTieredLmt8);
                    AddXMLField(pSess, "RmaPrevTieredDt", m_szRmaPrevTieredDt, &m_bRmaPrevTieredDt);
                    AddXMLField(pSess, "RmaPrevTierAnnR1", m_szRmaPrevTierAnnR1, &m_bRmaPrevTierAnnR1);
                    AddXMLField(pSess, "RmaPrevTierAnnR2", m_szRmaPrevTierAnnR2, &m_bRmaPrevTierAnnR2);
                    AddXMLField(pSess, "RmaPrevTierAnnR3", m_szRmaPrevTierAnnR3, &m_bRmaPrevTierAnnR3);
                    AddXMLField(pSess, "RmaPrevTierAnnR4", m_szRmaPrevTierAnnR4, &m_bRmaPrevTierAnnR4);
                    AddXMLField(pSess, "RmaPrevTierAnnR5", m_szRmaPrevTierAnnR5, &m_bRmaPrevTierAnnR5);
                    AddXMLField(pSess, "RmaPrevTierAnnR6", m_szRmaPrevTierAnnR6, &m_bRmaPrevTierAnnR6);
                    AddXMLField(pSess, "RmaPrevTierAnnR7", m_szRmaPrevTierAnnR7, &m_bRmaPrevTierAnnR7);
                    AddXMLField(pSess, "RmaPrevTierAnnR8", m_szRmaPrevTierAnnR8, &m_bRmaPrevTierAnnR8);
                    AddXMLField(pSess, "RmaPrevTierAnnR9", m_szRmaPrevTierAnnR9, &m_bRmaPrevTierAnnR9);
                    AddXMLField(pSess, "RmaPrevTieredLmt1", m_szRmaPrevTieredLmt1, &m_bRmaPrevTieredLmt1);
                    AddXMLField(pSess, "RmaPrevTieredLmt2", m_szRmaPrevTieredLmt2, &m_bRmaPrevTieredLmt2);
                    AddXMLField(pSess, "RmaPrevTieredLmt3", m_szRmaPrevTieredLmt3, &m_bRmaPrevTieredLmt3);
                    AddXMLField(pSess, "RmaPrevTieredLmt4", m_szRmaPrevTieredLmt4, &m_bRmaPrevTieredLmt4);
                    AddXMLField(pSess, "RmaPrevTieredLmt5", m_szRmaPrevTieredLmt5, &m_bRmaPrevTieredLmt5);
                    AddXMLField(pSess, "RmaPrevTieredLmt6", m_szRmaPrevTieredLmt6, &m_bRmaPrevTieredLmt6);
                    AddXMLField(pSess, "RmaPrevTieredLmt7", m_szRmaPrevTieredLmt7, &m_bRmaPrevTieredLmt7);
                    AddXMLField(pSess, "RmaPrevTieredLmt8", m_szRmaPrevTieredLmt8, &m_bRmaPrevTieredLmt8);
                    AddXMLField(pSess, "RmaMaxIodIntR", m_szRmaMaxIodIntR, &m_bRmaMaxIodIntR);
                    AddXMLField(pSess, "RmaMinIodIntR", m_szRmaMinIodIntR, &m_bRmaMinIodIntR);
                    AddXMLField(pSess, "RmaCurIloDt", m_szRmaCurIloDt, &m_bRmaCurIloDt);
                    AddXMLField(pSess, "RmaCurIloAnnR", m_szRmaCurIloAnnR, &m_bRmaCurIloAnnR);
                    AddXMLField(pSess, "RmaPrevIloDt", m_szRmaPrevIloDt, &m_bRmaPrevIloDt);
                    AddXMLField(pSess, "RmaPrevIloAnnR", m_szRmaPrevIloAnnR, &m_bRmaPrevIloAnnR);
                    AddXMLField(pSess, "RmaMaxSplitIntR", m_szRmaMaxSplitIntR, &m_bRmaMaxSplitIntR);
                    AddXMLField(pSess, "RmaMinSplitIntR", m_szRmaMinSplitIntR, &m_bRmaMinSplitIntR);
                    AddXMLField(pSess, "RmaCurSplitDt", m_szRmaCurSplitDt, &m_bRmaCurSplitDt);
                    AddXMLField(pSess, "RmaCurSplitAnnR1", m_szRmaCurSplitAnnR1, &m_bRmaCurSplitAnnR1);
                    AddXMLField(pSess, "RmaCurSplitAnnR2", m_szRmaCurSplitAnnR2, &m_bRmaCurSplitAnnR2);
                    AddXMLField(pSess, "RmaCurSplitAnnR3", m_szRmaCurSplitAnnR3, &m_bRmaCurSplitAnnR3);
                    AddXMLField(pSess, "RmaCurSplitLmt1", m_szRmaCurSplitLmt1, &m_bRmaCurSplitLmt1);
                    AddXMLField(pSess, "RmaCurSplitLmt2", m_szRmaCurSplitLmt2, &m_bRmaCurSplitLmt2);
                    AddXMLField(pSess, "RmaPrevSplitDt", m_szRmaPrevSplitDt, &m_bRmaPrevSplitDt);
                    AddXMLField(pSess, "RmaPrevSplitAnnR1", m_szRmaPrevSplitAnnR1, &m_bRmaPrevSplitAnnR1);
                    AddXMLField(pSess, "RmaPrevSplitAnnR2", m_szRmaPrevSplitAnnR2, &m_bRmaPrevSplitAnnR2);
                    AddXMLField(pSess, "RmaPrevSplitAnnR3", m_szRmaPrevSplitAnnR3, &m_bRmaPrevSplitAnnR3);
                    AddXMLField(pSess, "RmaPrevSplitLmt1", m_szRmaPrevSplitLmt1, &m_bRmaPrevSplitLmt1);
                    AddXMLField(pSess, "RmaPrevSplitLmt2", m_szRmaPrevSplitLmt2, &m_bRmaPrevSplitLmt2);
                    AddXMLField(pSess, "WorkErrCd", m_szWorkErrCd, &m_bWorkErrCd);
                    AddXMLField(pSess, "WorkErrText", m_szWorkErrText, &m_bWorkErrText);
                    AddXMLCloseRecord(pSess, "ProdRateData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "ProdRateData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "CsProductId", m_szCsProductId);
                    GetXMLField(pSess, "PfRegion", m_szPfRegion);
                    GetXMLField(pSess, "CurrCode", m_szCurrCode);
                    GetXMLField(pSess, "PfCtl1", m_szPfCtl1);
                    GetXMLField(pSess, "PfCtl2", m_szPfCtl2);
                    GetXMLField(pSess, "PfCtl3", m_szPfCtl3);
                    GetXMLField(pSess, "PfType", m_szPfType);
                    GetXMLField(pSess, "PfStopHoldWaive", m_szPfStopHoldWaive);
                    GetXMLField(pSess, "PffChkTruncFlag", m_szPffChkTruncFlag);
                    GetXMLField(pSess, "PffSystemType", m_szPffSystemType);
                    GetXMLField(pSess, "PffOdLmtCode", m_szPffOdLmtCode);
                    GetXMLField(pSess, "PffOdLmtAmt", m_szPffOdLmtAmt);
                    GetXMLField(pSess, "PffOdChgCode", m_szPffOdChgCode);
                    GetXMLField(pSess, "PffOdChgAmt", m_szPffOdChgAmt);
                    GetXMLField(pSess, "PffOdChgMaximum", m_szPffOdChgMaximum);
                    GetXMLField(pSess, "PffOdChgWaive", m_szPffOdChgWaive);
                    GetXMLField(pSess, "PffNsfChgCode", m_szPffNsfChgCode);
                    GetXMLField(pSess, "PffNsfChgAmt", m_szPffNsfChgAmt);
                    GetXMLField(pSess, "PffNsfChgWaive", m_szPffNsfChgWaive);
                    GetXMLField(pSess, "PffScType", m_szPffScType);
                    GetXMLField(pSess, "PffScRoutine", m_szPffScRoutine);
                    GetXMLField(pSess, "PffScWaive", m_szPffScWaive);
                    GetXMLField(pSess, "PffScWaiveRsn", m_szPffScWaiveRsn);
                    GetXMLField(pSess, "PffScCycleCode", m_szPffScCycleCode);
                    GetXMLField(pSess, "PffScCycleFreq", m_szPffScCycleFreq);
                    GetXMLField(pSess, "PffScCycleMonth", m_szPffScCycleMonth);
                    GetXMLField(pSess, "PffScCycleDay", m_szPffScCycleDay);
                    GetXMLField(pSess, "PffScCheckChgCode", m_szPffScCheckChgCode);
                    GetXMLField(pSess, "PffScCheckChgLmt", m_szPffScCheckChgLmt);
                    GetXMLField(pSess, "PffScCheckChgAmt", m_szPffScCheckChgAmt);
                    GetXMLField(pSess, "ScMfNochgMinbal", m_szScMfNochgMinbal);
                    GetXMLField(pSess, "ScMaintFee", m_szScMaintFee);
                    GetXMLField(pSess, "PffStPullCode", m_szPffStPullCode);
                    GetXMLField(pSess, "PffStSuppCode", m_szPffStSuppCode);
                    GetXMLField(pSess, "PffStCycle", m_szPffStCycle);
                    GetXMLField(pSess, "PffIodRatePtr", m_szPffIodRatePtr);
                    GetXMLField(pSess, "PffIodHifiInd", m_szPffIodHifiInd);
                    GetXMLField(pSess, "PffIodTinCert", m_szPffIodTinCert);
                    GetXMLField(pSess, "PffIodAccrualType", m_szPffIodAccrualType);
                    GetXMLField(pSess, "PffIodMinHifiAmt", m_szPffIodMinHifiAmt);
                    GetXMLField(pSess, "PffIodRateUse", m_szPffIodRateUse);
                    GetXMLField(pSess, "PffMmdaIndicator", m_szPffMmdaIndicator);
                    GetXMLField(pSess, "PffIodMaxHifiTrans", m_szPffIodMaxHifiTrans);
                    GetXMLField(pSess, "PffIodDistCd", m_szPffIodDistCd);
                    GetXMLField(pSess, "PflSetUpFlag", m_szPflSetUpFlag);
                    GetXMLField(pSess, "PflCrLmtPointer", m_szPflCrLmtPointer);
                    GetXMLField(pSess, "PflCrLmtAmt", m_szPflCrLmtAmt);
                    GetXMLField(pSess, "LkupName", m_szLkupName);
                    GetXMLField(pSess, "RmaCtl1", m_szRmaCtl1);
                    GetXMLField(pSess, "RmaRegion", m_szRmaRegion);
                    GetXMLField(pSess, "RmaProduct", m_szRmaProduct);
                    GetXMLField(pSess, "RmaRateType", m_szRmaRateType);
                    GetXMLField(pSess, "RmaPtr", m_szRmaPtr);
                    GetXMLField(pSess, "RmaMaxTieredIntR", m_szRmaMaxTieredIntR);
                    GetXMLField(pSess, "RmaMinTieredIntR", m_szRmaMinTieredIntR);
                    GetXMLField(pSess, "RmaCurTieredDt", m_szRmaCurTieredDt);
                    GetXMLField(pSess, "RmaCurTierAnnR1", m_szRmaCurTierAnnR1);
                    GetXMLField(pSess, "RmaCurTierAnnR2", m_szRmaCurTierAnnR2);
                    GetXMLField(pSess, "RmaCurTierAnnR3", m_szRmaCurTierAnnR3);
                    GetXMLField(pSess, "RmaCurTierAnnR4", m_szRmaCurTierAnnR4);
                    GetXMLField(pSess, "RmaCurTierAnnR5", m_szRmaCurTierAnnR5);
                    GetXMLField(pSess, "RmaCurTierAnnR6", m_szRmaCurTierAnnR6);
                    GetXMLField(pSess, "RmaCurTierAnnR7", m_szRmaCurTierAnnR7);
                    GetXMLField(pSess, "RmaCurTierAnnR8", m_szRmaCurTierAnnR8);
                    GetXMLField(pSess, "RmaCurTierAnnR9", m_szRmaCurTierAnnR9);
                    GetXMLField(pSess, "RmaCurTieredLmt1", m_szRmaCurTieredLmt1);
                    GetXMLField(pSess, "RmaCurTieredLmt2", m_szRmaCurTieredLmt2);
                    GetXMLField(pSess, "RmaCurTieredLmt3", m_szRmaCurTieredLmt3);
                    GetXMLField(pSess, "RmaCurTieredLmt4", m_szRmaCurTieredLmt4);
                    GetXMLField(pSess, "RmaCurTieredLmt5", m_szRmaCurTieredLmt5);
                    GetXMLField(pSess, "RmaCurTieredLmt6", m_szRmaCurTieredLmt6);
                    GetXMLField(pSess, "RmaCurTieredLmt7", m_szRmaCurTieredLmt7);
                    GetXMLField(pSess, "RmaCurTieredLmt8", m_szRmaCurTieredLmt8);
                    GetXMLField(pSess, "RmaPrevTieredDt", m_szRmaPrevTieredDt);
                    GetXMLField(pSess, "RmaPrevTierAnnR1", m_szRmaPrevTierAnnR1);
                    GetXMLField(pSess, "RmaPrevTierAnnR2", m_szRmaPrevTierAnnR2);
                    GetXMLField(pSess, "RmaPrevTierAnnR3", m_szRmaPrevTierAnnR3);
                    GetXMLField(pSess, "RmaPrevTierAnnR4", m_szRmaPrevTierAnnR4);
                    GetXMLField(pSess, "RmaPrevTierAnnR5", m_szRmaPrevTierAnnR5);
                    GetXMLField(pSess, "RmaPrevTierAnnR6", m_szRmaPrevTierAnnR6);
                    GetXMLField(pSess, "RmaPrevTierAnnR7", m_szRmaPrevTierAnnR7);
                    GetXMLField(pSess, "RmaPrevTierAnnR8", m_szRmaPrevTierAnnR8);
                    GetXMLField(pSess, "RmaPrevTierAnnR9", m_szRmaPrevTierAnnR9);
                    GetXMLField(pSess, "RmaPrevTieredLmt1", m_szRmaPrevTieredLmt1);
                    GetXMLField(pSess, "RmaPrevTieredLmt2", m_szRmaPrevTieredLmt2);
                    GetXMLField(pSess, "RmaPrevTieredLmt3", m_szRmaPrevTieredLmt3);
                    GetXMLField(pSess, "RmaPrevTieredLmt4", m_szRmaPrevTieredLmt4);
                    GetXMLField(pSess, "RmaPrevTieredLmt5", m_szRmaPrevTieredLmt5);
                    GetXMLField(pSess, "RmaPrevTieredLmt6", m_szRmaPrevTieredLmt6);
                    GetXMLField(pSess, "RmaPrevTieredLmt7", m_szRmaPrevTieredLmt7);
                    GetXMLField(pSess, "RmaPrevTieredLmt8", m_szRmaPrevTieredLmt8);
                    GetXMLField(pSess, "RmaMaxIodIntR", m_szRmaMaxIodIntR);
                    GetXMLField(pSess, "RmaMinIodIntR", m_szRmaMinIodIntR);
                    GetXMLField(pSess, "RmaCurIloDt", m_szRmaCurIloDt);
                    GetXMLField(pSess, "RmaCurIloAnnR", m_szRmaCurIloAnnR);
                    GetXMLField(pSess, "RmaPrevIloDt", m_szRmaPrevIloDt);
                    GetXMLField(pSess, "RmaPrevIloAnnR", m_szRmaPrevIloAnnR);
                    GetXMLField(pSess, "RmaMaxSplitIntR", m_szRmaMaxSplitIntR);
                    GetXMLField(pSess, "RmaMinSplitIntR", m_szRmaMinSplitIntR);
                    GetXMLField(pSess, "RmaCurSplitDt", m_szRmaCurSplitDt);
                    GetXMLField(pSess, "RmaCurSplitAnnR1", m_szRmaCurSplitAnnR1);
                    GetXMLField(pSess, "RmaCurSplitAnnR2", m_szRmaCurSplitAnnR2);
                    GetXMLField(pSess, "RmaCurSplitAnnR3", m_szRmaCurSplitAnnR3);
                    GetXMLField(pSess, "RmaCurSplitLmt1", m_szRmaCurSplitLmt1);
                    GetXMLField(pSess, "RmaCurSplitLmt2", m_szRmaCurSplitLmt2);
                    GetXMLField(pSess, "RmaPrevSplitDt", m_szRmaPrevSplitDt);
                    GetXMLField(pSess, "RmaPrevSplitAnnR1", m_szRmaPrevSplitAnnR1);
                    GetXMLField(pSess, "RmaPrevSplitAnnR2", m_szRmaPrevSplitAnnR2);
                    GetXMLField(pSess, "RmaPrevSplitAnnR3", m_szRmaPrevSplitAnnR3);
                    GetXMLField(pSess, "RmaPrevSplitLmt1", m_szRmaPrevSplitLmt1);
                    GetXMLField(pSess, "RmaPrevSplitLmt2", m_szRmaPrevSplitLmt2);
                    GetXMLField(pSess, "WorkErrCd", m_szWorkErrCd);
                    GetXMLField(pSess, "WorkErrText", m_szWorkErrText);
                    CloseXMLRecord(pSess, "ProdRateData");
                };
            }
        };

        AsdProdRateData  CProdRateData[29];
        AsdProdRateData *ProdRateData[29];
        
        //**************** End AsdProdRateData Definition ****************
        
    };

    AsdWVIMPRRT CWVIMPRRT;
    AsdWVIMPRRT *WVIMPRRT;
    
    //**************** End AsdWVIMPRRT Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdWVPCIMRTData Definition ****************

typedef AsdWVPCIMRTData *LPWVPCIMRT;
typedef AsdWVPCIMRTData::AsdTSHeader *LPWVPCIMRT_TSHeader;
typedef AsdWVPCIMRTData::AsdWVIMPRRT *LPWVPCIMRT_WVIMPRRT;
typedef AsdWVPCIMRTData::AsdWVIMPRRT::AsdProdRateData *LPWVPCIMRT_WVIMPRRT_ProdRateData;
typedef AsdWVPCIMRTData::AsdTSMDA *LPWVPCIMRT_TSMDA;
typedef AsdWVPCIMRTData::AsdTSMDA::AsdMdaTrmMsg *LPWVPCIMRT_TSMDA_MdaTrmMsg;
typedef AsdWVPCIMRTData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPWVPCIMRT_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdWVPCIMRTData_H

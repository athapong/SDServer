#ifndef AsdWVPCSTRTData_H
#define AsdWVPCSTRTData_H

#include <stdlib.h>
#ifdef  AsdWVPCSTRT_INTEGRITY_STRING
#undef  AsdWVPCSTRT_INTEGRITY_STRING
#endif
#define AsdWVPCSTRT_INTEGRITY_STRING        ""

#ifdef  AsdWVPCSTRT_CRC_STRING
#undef  AsdWVPCSTRT_CRC_STRING
#endif
#define AsdWVPCSTRT_CRC_STRING "3510486441"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdWVPCSTRTData Definition ****************
//                 ST Product Rate Download

//                 WVPCSTRTData.h generated by AceGen2 ver. 2.5.09

class AsdWVPCSTRTData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdWVPCSTRTData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "WVPCSTRT.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdWVPCSTRT_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        WVSTPRRT = &CWVSTPRRT;
        TSMDA = &CTSMDA;
    }

    ~AsdWVPCSTRTData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CWVSTPRRT.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdWVPCSTRT_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCSTRT_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVSTPRRT.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCSTRT", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVSTPRRT.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCSTRT");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCSTRT_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVSTPRRT.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCSTRT", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVSTPRRT.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCSTRT");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCSTRT_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdWVSTPRRT Definition ****************
    //                 RATE DOWNLOAD FILE FOR ST                                   
    
    //    WVSTPRRT.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:33
    class AsdWVSTPRRT
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bProcessOptionFlag;
        char      m_szProcessOptionFlag[1+1];
    
      public:
        long      m_lIndex;

        AsdWVSTPRRT ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bProcessOptionFlag = false;
            strcpy(m_szProcessOptionFlag, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 32; lOccurs++)
            {
                ProdRateData[lOccurs]  = &CProdRateData[lOccurs];
                CProdRateData[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bProcessOptionFlag = false;
            strcpy(m_szProcessOptionFlag, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 32; lOccurs++)
            {
                ProdRateData[lOccurs]  = &CProdRateData[lOccurs];
                CProdRateData[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    PROCESSING OPTION FLAG
        long lProcessOptionFlag () { return 1; };
        RWCString ProcessOptionFlag (void)
        {
            return m_szProcessOptionFlag;
        }
        long ProcessOptionFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szProcessOptionFlag, sizeof(m_szProcessOptionFlag), &m_bProcessOptionFlag);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bProcessOptionFlag) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 32; lOccurs++)
            {
                if(CProdRateData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVSTPRRT", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "ProcessOptionFlag", m_szProcessOptionFlag, &m_bProcessOptionFlag);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 32; lOccurs++)
                {
                    CProdRateData[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "WVSTPRRT");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVSTPRRT", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "ProcessOptionFlag", m_szProcessOptionFlag);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 32; lOccurs++)
                {
                    CProdRateData[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "WVSTPRRT");
            };
        }
        
        //**************** Start AsdProdRateData Definition ****************
        //                 
        
        class AsdProdRateData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bCsProductId;
            char      m_szCsProductId[9+1];
            bool      m_bTyRegion;
            char      m_szTyRegion[6+1];
            bool      m_bTyCurrCode;
            char      m_szTyCurrCode[3+1];
            bool      m_bTyCtl1;
            char      m_szTyCtl1[2+1];
            bool      m_bTyCtl2;
            char      m_szTyCtl2[3+1];
            bool      m_bTyCtl3;
            char      m_szTyCtl3[3+1];
            bool      m_bTyRecId;
            char      m_szTyRecId[1+1];
            bool      m_bTyType;
            char      m_szTyType[3+1];
            bool      m_bTyAcctCat;
            char      m_szTyAcctCat[1+1];
            bool      m_bTyIntTypePntr;
            char      m_szTyIntTypePntr[4+1];
            bool      m_bTyNegotiableFlag;
            char      m_szTyNegotiableFlag[1+1];
            bool      m_bTyRisingRateCd;
            char      m_szTyRisingRateCd[1+1];
            bool      m_bTySystemType;
            char      m_szTySystemType[3+1];
            bool      m_bTyAnalAcct;
            char      m_szTyAnalAcct[1+1];
            bool      m_bTyMinPntr;
            char      m_szTyMinPntr[4+1];
            bool      m_bTyMinBal;
            char      m_szTyMinBal[17+1];
            bool      m_bTyMaxPntr;
            char      m_szTyMaxPntr[4+1];
            bool      m_bTyMaxBal;
            char      m_szTyMaxBal[17+1];
            bool      m_bTyChrgTran1;
            char      m_szTyChrgTran1[1+1];
            bool      m_bTyMatAutoRenew;
            char      m_szTyMatAutoRenew[1+1];
            bool      m_bTyMatPrinDistr;
            char      m_szTyMatPrinDistr[1+1];
            bool      m_bTyMatTerm;
            char      m_szTyMatTerm[1+1];
            bool      m_bTyMatTermIncr;
            char      m_szTyMatTermIncr[4+1];
            bool      m_bTyIntChng;
            char      m_szTyIntChng[1+1];
            bool      m_bTyIntDistr;
            char      m_szTyIntDistr[1+1];
            bool      m_bTyIntSched;
            char      m_szTyIntSched[1+1];
            bool      m_bTyIntCyclFreq;
            char      m_szTyIntCyclFreq[2+1];
            bool      m_bTyIntIncr;
            char      m_szTyIntIncr[4+1];
            bool      m_bTyIntDay;
            char      m_szTyIntDay[2+1];
            bool      m_bTyIraType;
            char      m_szTyIraType[2+1];
            bool      m_bTyIraMaxContr;
            char      m_szTyIraMaxContr[4+1];
            bool      m_bTyStmtPull;
            char      m_szTyStmtPull[1+1];
            bool      m_bTyStmtCycle;
            char      m_szTyStmtCycle[2+1];
            bool      m_bTyStmtMonthly;
            char      m_szTyStmtMonthly[1+1];
            bool      m_bTySvcChgSched;
            char      m_szTySvcChgSched[1+1];
            bool      m_bTySvcChgDayMo;
            char      m_szTySvcChgDayMo[2+1];
            bool      m_bTySvcChgFreq;
            char      m_szTySvcChgFreq[2+1];
            bool      m_bTyTranAcc;
            char      m_szTyTranAcc[1+1];
            bool      m_bTyAuthAtmAch;
            char      m_szTyAuthAtmAch[1+1];
            bool      m_bTyRateChngTerm;
            char      m_szTyRateChngTerm[1+1];
            bool      m_bTyRateChngIncr;
            char      m_szTyRateChngIncr[4+1];
            bool      m_bTyPenaltyType;
            char      m_szTyPenaltyType[1+1];
            bool      m_bTyPenaltyDays;
            char      m_szTyPenaltyDays[4+1];
            bool      m_bTyApAccrType;
            char      m_szTyApAccrType[1+1];
            bool      m_bTyApYearBase;
            char      m_szTyApYearBase[1+1];
            bool      m_bTyApMonthBase;
            char      m_szTyApMonthBase[1+1];
            bool      m_bTyApTierRate;
            char      m_szTyApTierRate[1+1];
            bool      m_bTyApMinRatePct;
            char      m_szTyApMinRatePct[11+1];
            bool      m_bTyApMaxRatePct;
            char      m_szTyApMaxRatePct[11+1];
            bool      m_bTyBrCode;
            char      m_szTyBrCode[1+1];
            bool      m_bTyBrRatePct;
            char      m_szTyBrRatePct[11+1];
            bool      m_bTyBrTerm;
            char      m_szTyBrTerm[1+1];
            bool      m_bTyBrIncr;
            char      m_szTyBrIncr[4+1];
            bool      m_bTyCombineCheck;
            char      m_szTyCombineCheck[1+1];
            bool      m_bTyIraAccountFlag;
            char      m_szTyIraAccountFlag[1+1];
            bool      m_bTyGraceDays;
            char      m_szTyGraceDays[4+1];
            bool      m_bTyTypeOfferedFlag;
            char      m_szTyTypeOfferedFlag[1+1];
            bool      m_bTyMatAnnivDa;
            char      m_szTyMatAnnivDa[2+1];
            bool      m_bTyTierTypePtr;
            char      m_szTyTierTypePtr[4+1];
            bool      m_bTyMinIntPct;
            char      m_szTyMinIntPct[11+1];
            bool      m_bTyMaxIntPct;
            char      m_szTyMaxIntPct[11+1];
            bool      m_bTyMinTermDays;
            char      m_szTyMinTermDays[4+1];
            bool      m_bTyMinTermMo;
            char      m_szTyMinTermMo[4+1];
            bool      m_bTyMaxTermDays;
            char      m_szTyMaxTermDays[4+1];
            bool      m_bTyMaxTermMo;
            char      m_szTyMaxTermMo[4+1];
            bool      m_bStwsLuDesc30;
            char      m_szStwsLuDesc30[30+1];
            bool      m_bTyValAccr1;
            char      m_szTyValAccr1[1+1];
            bool      m_bTyValAccr2;
            char      m_szTyValAccr2[1+1];
            bool      m_bTyValAccr3;
            char      m_szTyValAccr3[1+1];
            bool      m_bTyValAccr4;
            char      m_szTyValAccr4[1+1];
            bool      m_bTyValAccr5;
            char      m_szTyValAccr5[1+1];
            bool      m_bTyValAccr6;
            char      m_szTyValAccr6[1+1];
            bool      m_bTyValAccr7;
            char      m_szTyValAccr7[1+1];
            bool      m_bTyValAccr8;
            char      m_szTyValAccr8[1+1];
            bool      m_bTyValAccr9;
            char      m_szTyValAccr9[1+1];
            bool      m_bTyValidYr1;
            char      m_szTyValidYr1[1+1];
            bool      m_bTyValidYr2;
            char      m_szTyValidYr2[1+1];
            bool      m_bTyValidYr3;
            char      m_szTyValidYr3[1+1];
            bool      m_bTyValidYr4;
            char      m_szTyValidYr4[1+1];
            bool      m_bTyValidMth1;
            char      m_szTyValidMth1[1+1];
            bool      m_bTyValidMth2;
            char      m_szTyValidMth2[1+1];
            bool      m_bTyValidMth3;
            char      m_szTyValidMth3[1+1];
            bool      m_bTyValidMth4;
            char      m_szTyValidMth4[1+1];
            bool      m_bTyValidPenal1;
            char      m_szTyValidPenal1[1+1];
            bool      m_bTyValidPenal2;
            char      m_szTyValidPenal2[1+1];
            bool      m_bTyValidPenal3;
            char      m_szTyValidPenal3[1+1];
            bool      m_bTyValidPenal4;
            char      m_szTyValidPenal4[1+1];
            bool      m_bTyValidPenal5;
            char      m_szTyValidPenal5[1+1];
            bool      m_bTyValidPenal6;
            char      m_szTyValidPenal6[1+1];
            bool      m_bTyValidPenal7;
            char      m_szTyValidPenal7[1+1];
            bool      m_bTyValidPenal8;
            char      m_szTyValidPenal8[1+1];
            bool      m_bTyValidPenal9;
            char      m_szTyValidPenal9[1+1];
            bool      m_bTyValidPenal10;
            char      m_szTyValidPenal10[1+1];
            bool      m_bTyValidPenal11;
            char      m_szTyValidPenal11[1+1];
            bool      m_bTyValidPenal12;
            char      m_szTyValidPenal12[1+1];
            bool      m_bTyValidPenal13;
            char      m_szTyValidPenal13[1+1];
            bool      m_bTyValidPenal14;
            char      m_szTyValidPenal14[1+1];
            bool      m_bTyValidPenal15;
            char      m_szTyValidPenal15[1+1];
            bool      m_bTyValidPenal16;
            char      m_szTyValidPenal16[1+1];
            bool      m_bTyValIra1;
            char      m_szTyValIra1[1+1];
            bool      m_bTyValIra2;
            char      m_szTyValIra2[1+1];
            bool      m_bTyValIra3;
            char      m_szTyValIra3[1+1];
            bool      m_bTyValIra4;
            char      m_szTyValIra4[1+1];
            bool      m_bTyValIra5;
            char      m_szTyValIra5[1+1];
            bool      m_bTyValIra6;
            char      m_szTyValIra6[1+1];
            bool      m_bTyValIra7;
            char      m_szTyValIra7[1+1];
            bool      m_bTyValIra8;
            char      m_szTyValIra8[1+1];
            bool      m_bTyValIra9;
            char      m_szTyValIra9[1+1];
            bool      m_bTyValIra10;
            char      m_szTyValIra10[1+1];
            bool      m_bRdaCtl1;
            char      m_szRdaCtl1[2+1];
            bool      m_bRdaCurrCode;
            char      m_szRdaCurrCode[3+1];
            bool      m_bRdaRegion;
            char      m_szRdaRegion[6+1];
            bool      m_bRdaFiller2;
            char      m_szRdaFiller2[3+1];
            bool      m_bRdaRateType;
            char      m_szRdaRateType[1+1];
            bool      m_bRdaPointer;
            char      m_szRdaPointer[3+1];
            bool      m_bRdaRateDesc;
            char      m_szRdaRateDesc[30+1];
            bool      m_bRdaCurTierDate;
            char      m_szRdaCurTierDate[8+1];
            bool      m_bRdaCurTierAdjCd1;
            char      m_szRdaCurTierAdjCd1[1+1];
            bool      m_bRdaCurTierAnnR1;
            char      m_szRdaCurTierAnnR1[11+1];
            bool      m_bRdaCurTierLmt1;
            char      m_szRdaCurTierLmt1[17+1];
            bool      m_bRdaCurTierAdjCd2;
            char      m_szRdaCurTierAdjCd2[1+1];
            bool      m_bRdaCurTierAnnR2;
            char      m_szRdaCurTierAnnR2[11+1];
            bool      m_bRdaCurTierLmt2;
            char      m_szRdaCurTierLmt2[17+1];
            bool      m_bRdaCurTierAdjCd3;
            char      m_szRdaCurTierAdjCd3[1+1];
            bool      m_bRdaCurTierAnnR3;
            char      m_szRdaCurTierAnnR3[11+1];
            bool      m_bRdaCurTierLmt3;
            char      m_szRdaCurTierLmt3[17+1];
            bool      m_bRdaCurTierAdjCd4;
            char      m_szRdaCurTierAdjCd4[1+1];
            bool      m_bRdaCurTierAnnR4;
            char      m_szRdaCurTierAnnR4[11+1];
            bool      m_bRdaCurTierLmt4;
            char      m_szRdaCurTierLmt4[17+1];
            bool      m_bRdaCurTierAdjCd5;
            char      m_szRdaCurTierAdjCd5[1+1];
            bool      m_bRdaCurTierAnnR5;
            char      m_szRdaCurTierAnnR5[11+1];
            bool      m_bRdaCurTierLmt5;
            char      m_szRdaCurTierLmt5[17+1];
            bool      m_bRdaCurTierAdjCd6;
            char      m_szRdaCurTierAdjCd6[1+1];
            bool      m_bRdaCurTierAnnR6;
            char      m_szRdaCurTierAnnR6[11+1];
            bool      m_bRdaCurTierLmt6;
            char      m_szRdaCurTierLmt6[17+1];
            bool      m_bRdaCurTierAdjCd7;
            char      m_szRdaCurTierAdjCd7[1+1];
            bool      m_bRdaCurTierAnnR7;
            char      m_szRdaCurTierAnnR7[11+1];
            bool      m_bRdaCurTierLmt7;
            char      m_szRdaCurTierLmt7[17+1];
            bool      m_bRdaCurTierAdjCd8;
            char      m_szRdaCurTierAdjCd8[1+1];
            bool      m_bRdaCurTierAnnR8;
            char      m_szRdaCurTierAnnR8[11+1];
            bool      m_bRdaCurTierLmt8;
            char      m_szRdaCurTierLmt8[17+1];
            bool      m_bRdaCurTierAdjCd9;
            char      m_szRdaCurTierAdjCd9[1+1];
            bool      m_bRdaCurTierAnnR9;
            char      m_szRdaCurTierAnnR9[11+1];
            bool      m_bRdaCurTierLmt9;
            char      m_szRdaCurTierLmt9[17+1];
            bool      m_bRdaCurTierTerm;
            char      m_szRdaCurTierTerm[1+1];
            bool      m_bRdaCurTierIncr;
            char      m_szRdaCurTierIncr[4+1];
            bool      m_bRdaPrvTierDate;
            char      m_szRdaPrvTierDate[8+1];
            bool      m_bRdaPrvTierAdjCd1;
            char      m_szRdaPrvTierAdjCd1[1+1];
            bool      m_bRdaPrvTierAnnR1;
            char      m_szRdaPrvTierAnnR1[11+1];
            bool      m_bRdaPrvTierLmt1;
            char      m_szRdaPrvTierLmt1[17+1];
            bool      m_bRdaPrvTierAdjCd2;
            char      m_szRdaPrvTierAdjCd2[1+1];
            bool      m_bRdaPrvTierAnnR2;
            char      m_szRdaPrvTierAnnR2[11+1];
            bool      m_bRdaPrvTierLmt2;
            char      m_szRdaPrvTierLmt2[17+1];
            bool      m_bRdaPrvTierAdjCd3;
            char      m_szRdaPrvTierAdjCd3[1+1];
            bool      m_bRdaPrvTierAnnR3;
            char      m_szRdaPrvTierAnnR3[11+1];
            bool      m_bRdaPrvTierLmt3;
            char      m_szRdaPrvTierLmt3[17+1];
            bool      m_bRdaPrvTierAdjCd4;
            char      m_szRdaPrvTierAdjCd4[1+1];
            bool      m_bRdaPrvTierAnnR4;
            char      m_szRdaPrvTierAnnR4[11+1];
            bool      m_bRdaPrvTierLmt4;
            char      m_szRdaPrvTierLmt4[17+1];
            bool      m_bRdaPrvTierAdjCd5;
            char      m_szRdaPrvTierAdjCd5[1+1];
            bool      m_bRdaPrvTierAnnR5;
            char      m_szRdaPrvTierAnnR5[11+1];
            bool      m_bRdaPrvTierLmt5;
            char      m_szRdaPrvTierLmt5[17+1];
            bool      m_bRdaPrvTierAdjCd6;
            char      m_szRdaPrvTierAdjCd6[1+1];
            bool      m_bRdaPrvTierAnnR6;
            char      m_szRdaPrvTierAnnR6[11+1];
            bool      m_bRdaPrvTierLmt6;
            char      m_szRdaPrvTierLmt6[17+1];
            bool      m_bRdaPrvTierAdjCd7;
            char      m_szRdaPrvTierAdjCd7[1+1];
            bool      m_bRdaPrvTierAnnR7;
            char      m_szRdaPrvTierAnnR7[11+1];
            bool      m_bRdaPrvTierLmt7;
            char      m_szRdaPrvTierLmt7[17+1];
            bool      m_bRdaPrvTierAdjCd8;
            char      m_szRdaPrvTierAdjCd8[1+1];
            bool      m_bRdaPrvTierAnnR8;
            char      m_szRdaPrvTierAnnR8[11+1];
            bool      m_bRdaPrvTierLmt8;
            char      m_szRdaPrvTierLmt8[17+1];
            bool      m_bRdaPrvTierAdjCd9;
            char      m_szRdaPrvTierAdjCd9[1+1];
            bool      m_bRdaPrvTierAnnR9;
            char      m_szRdaPrvTierAnnR9[11+1];
            bool      m_bRdaPrvTierLmt9;
            char      m_szRdaPrvTierLmt9[17+1];
            bool      m_bRdaPrvTierTerm;
            char      m_szRdaPrvTierTerm[1+1];
            bool      m_bRdaPrvTierIncr;
            char      m_szRdaPrvTierIncr[4+1];
            bool      m_bRdaCurBaseDate;
            char      m_szRdaCurBaseDate[8+1];
            bool      m_bRdaCurBaseAnnR;
            char      m_szRdaCurBaseAnnR[11+1];
            bool      m_bRdaPrvBaseDate;
            char      m_szRdaPrvBaseDate[8+1];
            bool      m_bRdaPrvBaseAnnR;
            char      m_szRdaPrvBaseAnnR[11+1];
            bool      m_bWorkErrCd;
            char      m_szWorkErrCd[4+1];
            bool      m_bWorkErrText;
            char      m_szWorkErrText[40+1];
        
          public:
            long      m_lIndex;

            AsdProdRateData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCsProductId = false;
                strcpy(m_szCsProductId, "000000000");
                m_bTyRegion = false;
                strcpy(m_szTyRegion, "");
                m_bTyCurrCode = false;
                strcpy(m_szTyCurrCode, "");
                m_bTyCtl1 = false;
                strcpy(m_szTyCtl1, "");
                m_bTyCtl2 = false;
                strcpy(m_szTyCtl2, "");
                m_bTyCtl3 = false;
                strcpy(m_szTyCtl3, "");
                m_bTyRecId = false;
                strcpy(m_szTyRecId, "");
                m_bTyType = false;
                strcpy(m_szTyType, "");
                m_bTyAcctCat = false;
                strcpy(m_szTyAcctCat, "");
                m_bTyIntTypePntr = false;
                strcpy(m_szTyIntTypePntr, "0000");
                m_bTyNegotiableFlag = false;
                strcpy(m_szTyNegotiableFlag, "");
                m_bTyRisingRateCd = false;
                strcpy(m_szTyRisingRateCd, "");
                m_bTySystemType = false;
                strcpy(m_szTySystemType, "");
                m_bTyAnalAcct = false;
                strcpy(m_szTyAnalAcct, "");
                m_bTyMinPntr = false;
                strcpy(m_szTyMinPntr, "0000");
                m_bTyMinBal = false;
                strcpy(m_szTyMinBal, "+0000000000000.00");
                m_bTyMaxPntr = false;
                strcpy(m_szTyMaxPntr, "0000");
                m_bTyMaxBal = false;
                strcpy(m_szTyMaxBal, "+0000000000000.00");
                m_bTyChrgTran1 = false;
                strcpy(m_szTyChrgTran1, "");
                m_bTyMatAutoRenew = false;
                strcpy(m_szTyMatAutoRenew, "");
                m_bTyMatPrinDistr = false;
                strcpy(m_szTyMatPrinDistr, "");
                m_bTyMatTerm = false;
                strcpy(m_szTyMatTerm, "");
                m_bTyMatTermIncr = false;
                strcpy(m_szTyMatTermIncr, "+000");
                m_bTyIntChng = false;
                strcpy(m_szTyIntChng, "");
                m_bTyIntDistr = false;
                strcpy(m_szTyIntDistr, "");
                m_bTyIntSched = false;
                strcpy(m_szTyIntSched, "");
                m_bTyIntCyclFreq = false;
                strcpy(m_szTyIntCyclFreq, "");
                m_bTyIntIncr = false;
                strcpy(m_szTyIntIncr, "+000");
                m_bTyIntDay = false;
                strcpy(m_szTyIntDay, "");
                m_bTyIraType = false;
                strcpy(m_szTyIraType, "");
                m_bTyIraMaxContr = false;
                strcpy(m_szTyIraMaxContr, "0000");
                m_bTyStmtPull = false;
                strcpy(m_szTyStmtPull, "");
                m_bTyStmtCycle = false;
                strcpy(m_szTyStmtCycle, "");
                m_bTyStmtMonthly = false;
                strcpy(m_szTyStmtMonthly, "");
                m_bTySvcChgSched = false;
                strcpy(m_szTySvcChgSched, "");
                m_bTySvcChgDayMo = false;
                strcpy(m_szTySvcChgDayMo, "");
                m_bTySvcChgFreq = false;
                strcpy(m_szTySvcChgFreq, "");
                m_bTyTranAcc = false;
                strcpy(m_szTyTranAcc, "");
                m_bTyAuthAtmAch = false;
                strcpy(m_szTyAuthAtmAch, "");
                m_bTyRateChngTerm = false;
                strcpy(m_szTyRateChngTerm, "");
                m_bTyRateChngIncr = false;
                strcpy(m_szTyRateChngIncr, "+000");
                m_bTyPenaltyType = false;
                strcpy(m_szTyPenaltyType, "");
                m_bTyPenaltyDays = false;
                strcpy(m_szTyPenaltyDays, "+000");
                m_bTyApAccrType = false;
                strcpy(m_szTyApAccrType, "");
                m_bTyApYearBase = false;
                strcpy(m_szTyApYearBase, "");
                m_bTyApMonthBase = false;
                strcpy(m_szTyApMonthBase, "");
                m_bTyApTierRate = false;
                strcpy(m_szTyApTierRate, "");
                m_bTyApMinRatePct = false;
                strcpy(m_szTyApMinRatePct, "+000.000000");
                m_bTyApMaxRatePct = false;
                strcpy(m_szTyApMaxRatePct, "+000.000000");
                m_bTyBrCode = false;
                strcpy(m_szTyBrCode, "");
                m_bTyBrRatePct = false;
                strcpy(m_szTyBrRatePct, "+000.000000");
                m_bTyBrTerm = false;
                strcpy(m_szTyBrTerm, "");
                m_bTyBrIncr = false;
                strcpy(m_szTyBrIncr, "+000");
                m_bTyCombineCheck = false;
                strcpy(m_szTyCombineCheck, "");
                m_bTyIraAccountFlag = false;
                strcpy(m_szTyIraAccountFlag, "");
                m_bTyGraceDays = false;
                strcpy(m_szTyGraceDays, "+000");
                m_bTyTypeOfferedFlag = false;
                strcpy(m_szTyTypeOfferedFlag, "");
                m_bTyMatAnnivDa = false;
                strcpy(m_szTyMatAnnivDa, "");
                m_bTyTierTypePtr = false;
                strcpy(m_szTyTierTypePtr, "0000");
                m_bTyMinIntPct = false;
                strcpy(m_szTyMinIntPct, "+000.000000");
                m_bTyMaxIntPct = false;
                strcpy(m_szTyMaxIntPct, "+000.000000");
                m_bTyMinTermDays = false;
                strcpy(m_szTyMinTermDays, "+000");
                m_bTyMinTermMo = false;
                strcpy(m_szTyMinTermMo, "+000");
                m_bTyMaxTermDays = false;
                strcpy(m_szTyMaxTermDays, "+000");
                m_bTyMaxTermMo = false;
                strcpy(m_szTyMaxTermMo, "+000");
                m_bStwsLuDesc30 = false;
                strcpy(m_szStwsLuDesc30, "");
                m_bTyValAccr1 = false;
                strcpy(m_szTyValAccr1, "");
                m_bTyValAccr2 = false;
                strcpy(m_szTyValAccr2, "");
                m_bTyValAccr3 = false;
                strcpy(m_szTyValAccr3, "");
                m_bTyValAccr4 = false;
                strcpy(m_szTyValAccr4, "");
                m_bTyValAccr5 = false;
                strcpy(m_szTyValAccr5, "");
                m_bTyValAccr6 = false;
                strcpy(m_szTyValAccr6, "");
                m_bTyValAccr7 = false;
                strcpy(m_szTyValAccr7, "");
                m_bTyValAccr8 = false;
                strcpy(m_szTyValAccr8, "");
                m_bTyValAccr9 = false;
                strcpy(m_szTyValAccr9, "");
                m_bTyValidYr1 = false;
                strcpy(m_szTyValidYr1, "");
                m_bTyValidYr2 = false;
                strcpy(m_szTyValidYr2, "");
                m_bTyValidYr3 = false;
                strcpy(m_szTyValidYr3, "");
                m_bTyValidYr4 = false;
                strcpy(m_szTyValidYr4, "");
                m_bTyValidMth1 = false;
                strcpy(m_szTyValidMth1, "");
                m_bTyValidMth2 = false;
                strcpy(m_szTyValidMth2, "");
                m_bTyValidMth3 = false;
                strcpy(m_szTyValidMth3, "");
                m_bTyValidMth4 = false;
                strcpy(m_szTyValidMth4, "");
                m_bTyValidPenal1 = false;
                strcpy(m_szTyValidPenal1, "");
                m_bTyValidPenal2 = false;
                strcpy(m_szTyValidPenal2, "");
                m_bTyValidPenal3 = false;
                strcpy(m_szTyValidPenal3, "");
                m_bTyValidPenal4 = false;
                strcpy(m_szTyValidPenal4, "");
                m_bTyValidPenal5 = false;
                strcpy(m_szTyValidPenal5, "");
                m_bTyValidPenal6 = false;
                strcpy(m_szTyValidPenal6, "");
                m_bTyValidPenal7 = false;
                strcpy(m_szTyValidPenal7, "");
                m_bTyValidPenal8 = false;
                strcpy(m_szTyValidPenal8, "");
                m_bTyValidPenal9 = false;
                strcpy(m_szTyValidPenal9, "");
                m_bTyValidPenal10 = false;
                strcpy(m_szTyValidPenal10, "");
                m_bTyValidPenal11 = false;
                strcpy(m_szTyValidPenal11, "");
                m_bTyValidPenal12 = false;
                strcpy(m_szTyValidPenal12, "");
                m_bTyValidPenal13 = false;
                strcpy(m_szTyValidPenal13, "");
                m_bTyValidPenal14 = false;
                strcpy(m_szTyValidPenal14, "");
                m_bTyValidPenal15 = false;
                strcpy(m_szTyValidPenal15, "");
                m_bTyValidPenal16 = false;
                strcpy(m_szTyValidPenal16, "");
                m_bTyValIra1 = false;
                strcpy(m_szTyValIra1, "");
                m_bTyValIra2 = false;
                strcpy(m_szTyValIra2, "");
                m_bTyValIra3 = false;
                strcpy(m_szTyValIra3, "");
                m_bTyValIra4 = false;
                strcpy(m_szTyValIra4, "");
                m_bTyValIra5 = false;
                strcpy(m_szTyValIra5, "");
                m_bTyValIra6 = false;
                strcpy(m_szTyValIra6, "");
                m_bTyValIra7 = false;
                strcpy(m_szTyValIra7, "");
                m_bTyValIra8 = false;
                strcpy(m_szTyValIra8, "");
                m_bTyValIra9 = false;
                strcpy(m_szTyValIra9, "");
                m_bTyValIra10 = false;
                strcpy(m_szTyValIra10, "");
                m_bRdaCtl1 = false;
                strcpy(m_szRdaCtl1, "");
                m_bRdaCurrCode = false;
                strcpy(m_szRdaCurrCode, "");
                m_bRdaRegion = false;
                strcpy(m_szRdaRegion, "");
                m_bRdaFiller2 = false;
                strcpy(m_szRdaFiller2, "");
                m_bRdaRateType = false;
                strcpy(m_szRdaRateType, "");
                m_bRdaPointer = false;
                strcpy(m_szRdaPointer, "");
                m_bRdaRateDesc = false;
                strcpy(m_szRdaRateDesc, "");
                m_bRdaCurTierDate = false;
                strcpy(m_szRdaCurTierDate, "");
                m_bRdaCurTierAdjCd1 = false;
                strcpy(m_szRdaCurTierAdjCd1, "");
                m_bRdaCurTierAnnR1 = false;
                strcpy(m_szRdaCurTierAnnR1, "+000.000000");
                m_bRdaCurTierLmt1 = false;
                strcpy(m_szRdaCurTierLmt1, "+0000000000000.00");
                m_bRdaCurTierAdjCd2 = false;
                strcpy(m_szRdaCurTierAdjCd2, "");
                m_bRdaCurTierAnnR2 = false;
                strcpy(m_szRdaCurTierAnnR2, "+000.000000");
                m_bRdaCurTierLmt2 = false;
                strcpy(m_szRdaCurTierLmt2, "+0000000000000.00");
                m_bRdaCurTierAdjCd3 = false;
                strcpy(m_szRdaCurTierAdjCd3, "");
                m_bRdaCurTierAnnR3 = false;
                strcpy(m_szRdaCurTierAnnR3, "+000.000000");
                m_bRdaCurTierLmt3 = false;
                strcpy(m_szRdaCurTierLmt3, "+0000000000000.00");
                m_bRdaCurTierAdjCd4 = false;
                strcpy(m_szRdaCurTierAdjCd4, "");
                m_bRdaCurTierAnnR4 = false;
                strcpy(m_szRdaCurTierAnnR4, "+000.000000");
                m_bRdaCurTierLmt4 = false;
                strcpy(m_szRdaCurTierLmt4, "+0000000000000.00");
                m_bRdaCurTierAdjCd5 = false;
                strcpy(m_szRdaCurTierAdjCd5, "");
                m_bRdaCurTierAnnR5 = false;
                strcpy(m_szRdaCurTierAnnR5, "+000.000000");
                m_bRdaCurTierLmt5 = false;
                strcpy(m_szRdaCurTierLmt5, "+0000000000000.00");
                m_bRdaCurTierAdjCd6 = false;
                strcpy(m_szRdaCurTierAdjCd6, "");
                m_bRdaCurTierAnnR6 = false;
                strcpy(m_szRdaCurTierAnnR6, "+000.000000");
                m_bRdaCurTierLmt6 = false;
                strcpy(m_szRdaCurTierLmt6, "+0000000000000.00");
                m_bRdaCurTierAdjCd7 = false;
                strcpy(m_szRdaCurTierAdjCd7, "");
                m_bRdaCurTierAnnR7 = false;
                strcpy(m_szRdaCurTierAnnR7, "+000.000000");
                m_bRdaCurTierLmt7 = false;
                strcpy(m_szRdaCurTierLmt7, "+0000000000000.00");
                m_bRdaCurTierAdjCd8 = false;
                strcpy(m_szRdaCurTierAdjCd8, "");
                m_bRdaCurTierAnnR8 = false;
                strcpy(m_szRdaCurTierAnnR8, "+000.000000");
                m_bRdaCurTierLmt8 = false;
                strcpy(m_szRdaCurTierLmt8, "+0000000000000.00");
                m_bRdaCurTierAdjCd9 = false;
                strcpy(m_szRdaCurTierAdjCd9, "");
                m_bRdaCurTierAnnR9 = false;
                strcpy(m_szRdaCurTierAnnR9, "+000.000000");
                m_bRdaCurTierLmt9 = false;
                strcpy(m_szRdaCurTierLmt9, "+0000000000000.00");
                m_bRdaCurTierTerm = false;
                strcpy(m_szRdaCurTierTerm, "");
                m_bRdaCurTierIncr = false;
                strcpy(m_szRdaCurTierIncr, "+000");
                m_bRdaPrvTierDate = false;
                strcpy(m_szRdaPrvTierDate, "");
                m_bRdaPrvTierAdjCd1 = false;
                strcpy(m_szRdaPrvTierAdjCd1, "");
                m_bRdaPrvTierAnnR1 = false;
                strcpy(m_szRdaPrvTierAnnR1, "+000.000000");
                m_bRdaPrvTierLmt1 = false;
                strcpy(m_szRdaPrvTierLmt1, "+0000000000000.00");
                m_bRdaPrvTierAdjCd2 = false;
                strcpy(m_szRdaPrvTierAdjCd2, "");
                m_bRdaPrvTierAnnR2 = false;
                strcpy(m_szRdaPrvTierAnnR2, "+000.000000");
                m_bRdaPrvTierLmt2 = false;
                strcpy(m_szRdaPrvTierLmt2, "+0000000000000.00");
                m_bRdaPrvTierAdjCd3 = false;
                strcpy(m_szRdaPrvTierAdjCd3, "");
                m_bRdaPrvTierAnnR3 = false;
                strcpy(m_szRdaPrvTierAnnR3, "+000.000000");
                m_bRdaPrvTierLmt3 = false;
                strcpy(m_szRdaPrvTierLmt3, "+0000000000000.00");
                m_bRdaPrvTierAdjCd4 = false;
                strcpy(m_szRdaPrvTierAdjCd4, "0");
                m_bRdaPrvTierAnnR4 = false;
                strcpy(m_szRdaPrvTierAnnR4, "+000.000000");
                m_bRdaPrvTierLmt4 = false;
                strcpy(m_szRdaPrvTierLmt4, "+0000000000000.00");
                m_bRdaPrvTierAdjCd5 = false;
                strcpy(m_szRdaPrvTierAdjCd5, "");
                m_bRdaPrvTierAnnR5 = false;
                strcpy(m_szRdaPrvTierAnnR5, "+000.000000");
                m_bRdaPrvTierLmt5 = false;
                strcpy(m_szRdaPrvTierLmt5, "+0000000000000.00");
                m_bRdaPrvTierAdjCd6 = false;
                strcpy(m_szRdaPrvTierAdjCd6, "");
                m_bRdaPrvTierAnnR6 = false;
                strcpy(m_szRdaPrvTierAnnR6, "+000.000000");
                m_bRdaPrvTierLmt6 = false;
                strcpy(m_szRdaPrvTierLmt6, "+0000000000000.00");
                m_bRdaPrvTierAdjCd7 = false;
                strcpy(m_szRdaPrvTierAdjCd7, "");
                m_bRdaPrvTierAnnR7 = false;
                strcpy(m_szRdaPrvTierAnnR7, "+000.000000");
                m_bRdaPrvTierLmt7 = false;
                strcpy(m_szRdaPrvTierLmt7, "+0000000000000.00");
                m_bRdaPrvTierAdjCd8 = false;
                strcpy(m_szRdaPrvTierAdjCd8, "");
                m_bRdaPrvTierAnnR8 = false;
                strcpy(m_szRdaPrvTierAnnR8, "+000.000000");
                m_bRdaPrvTierLmt8 = false;
                strcpy(m_szRdaPrvTierLmt8, "+0000000000000.00");
                m_bRdaPrvTierAdjCd9 = false;
                strcpy(m_szRdaPrvTierAdjCd9, "");
                m_bRdaPrvTierAnnR9 = false;
                strcpy(m_szRdaPrvTierAnnR9, "+000.000000");
                m_bRdaPrvTierLmt9 = false;
                strcpy(m_szRdaPrvTierLmt9, "+0000000000000.00");
                m_bRdaPrvTierTerm = false;
                strcpy(m_szRdaPrvTierTerm, "");
                m_bRdaPrvTierIncr = false;
                strcpy(m_szRdaPrvTierIncr, "+000");
                m_bRdaCurBaseDate = false;
                strcpy(m_szRdaCurBaseDate, "");
                m_bRdaCurBaseAnnR = false;
                strcpy(m_szRdaCurBaseAnnR, "+000.000000");
                m_bRdaPrvBaseDate = false;
                strcpy(m_szRdaPrvBaseDate, "");
                m_bRdaPrvBaseAnnR = false;
                strcpy(m_szRdaPrvBaseAnnR, "+000.000000");
                m_bWorkErrCd = false;
                strcpy(m_szWorkErrCd, "0000");
                m_bWorkErrText = false;
                strcpy(m_szWorkErrText, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    CS PRODUCT ID
            long lCsProductId () { return 9; };
            RWCString CsProductId (void)
            {
                return m_szCsProductId;
            }
            long CsProductId (const RWCString& rwc)
            {
                return SetString(rwc, m_szCsProductId, sizeof(m_szCsProductId), &m_bCsProductId);
            }
            
            //    REGION
            long lTyRegion () { return 6; };
            RWCString TyRegion (void)
            {
                return m_szTyRegion;
            }
            long TyRegion (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyRegion, sizeof(m_szTyRegion), &m_bTyRegion);
            }
            
            //    CURRENCY CODE
            long lTyCurrCode () { return 3; };
            RWCString TyCurrCode (void)
            {
                return m_szTyCurrCode;
            }
            long TyCurrCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyCurrCode, sizeof(m_szTyCurrCode), &m_bTyCurrCode);
            }
            
            //    CONTROL1
            long lTyCtl1 () { return 2; };
            RWCString TyCtl1 (void)
            {
                return m_szTyCtl1;
            }
            long TyCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyCtl1, sizeof(m_szTyCtl1), &m_bTyCtl1);
            }
            
            //    CONTROL2
            long lTyCtl2 () { return 3; };
            RWCString TyCtl2 (void)
            {
                return m_szTyCtl2;
            }
            long TyCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyCtl2, sizeof(m_szTyCtl2), &m_bTyCtl2);
            }
            
            //    CONTROL3
            long lTyCtl3 () { return 3; };
            RWCString TyCtl3 (void)
            {
                return m_szTyCtl3;
            }
            long TyCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyCtl3, sizeof(m_szTyCtl3), &m_bTyCtl3);
            }
            
            //    RECORD ID
            long lTyRecId () { return 1; };
            RWCString TyRecId (void)
            {
                return m_szTyRecId;
            }
            long TyRecId (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyRecId, sizeof(m_szTyRecId), &m_bTyRecId);
            }
            
            //    TYPE
            long lTyType () { return 3; };
            RWCString TyType (void)
            {
                return m_szTyType;
            }
            long TyType (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyType, sizeof(m_szTyType), &m_bTyType);
            }
            
            //    ACCOUNT CATAGORY
            long lTyAcctCat () { return 1; };
            RWCString TyAcctCat (void)
            {
                return m_szTyAcctCat;
            }
            long TyAcctCat (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyAcctCat, sizeof(m_szTyAcctCat), &m_bTyAcctCat);
            }
            
            //    INTEREST TYPE POINTER
            long lTyIntTypePntr () { return 4; };
            RWCString TyIntTypePntr (void)
            {
                return m_szTyIntTypePntr;
            }
            long TyIntTypePntr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIntTypePntr, sizeof(m_szTyIntTypePntr), &m_bTyIntTypePntr);
            }
            
            //    NEGOTIABLE FLAG
            long lTyNegotiableFlag () { return 1; };
            RWCString TyNegotiableFlag (void)
            {
                return m_szTyNegotiableFlag;
            }
            long TyNegotiableFlag (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyNegotiableFlag, sizeof(m_szTyNegotiableFlag), &m_bTyNegotiableFlag);
            }
            
            //    RISING RATE CODE
            long lTyRisingRateCd () { return 1; };
            RWCString TyRisingRateCd (void)
            {
                return m_szTyRisingRateCd;
            }
            long TyRisingRateCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyRisingRateCd, sizeof(m_szTyRisingRateCd), &m_bTyRisingRateCd);
            }
            
            //    SYSTEM TYPE
            long lTySystemType () { return 3; };
            RWCString TySystemType (void)
            {
                return m_szTySystemType;
            }
            long TySystemType (const RWCString& rwc)
            {
                return SetString(rwc, m_szTySystemType, sizeof(m_szTySystemType), &m_bTySystemType);
            }
            
            //    ANALYSIS ACCOUNT
            long lTyAnalAcct () { return 1; };
            RWCString TyAnalAcct (void)
            {
                return m_szTyAnalAcct;
            }
            long TyAnalAcct (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyAnalAcct, sizeof(m_szTyAnalAcct), &m_bTyAnalAcct);
            }
            
            //    MINIMUM POINTER
            long lTyMinPntr () { return 4; };
            RWCString TyMinPntr (void)
            {
                return m_szTyMinPntr;
            }
            long TyMinPntr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMinPntr, sizeof(m_szTyMinPntr), &m_bTyMinPntr);
            }
            
            //    MINIMUM BALANCE
            long lTyMinBal () { return 17; };
            RWCString TyMinBal (void)
            {
                return AceZeroSupp(m_szTyMinBal, &m_szSuppressBuff[0]);
            }
            RWCString TyMinBalRaw (void)
            {
                return m_szTyMinBal;
            }
            long TyMinBal (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMinBal, sizeof(m_szTyMinBal), &m_bTyMinBal);
            }
            
            //    MAXIMUM POINTER
            long lTyMaxPntr () { return 4; };
            RWCString TyMaxPntr (void)
            {
                return m_szTyMaxPntr;
            }
            long TyMaxPntr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMaxPntr, sizeof(m_szTyMaxPntr), &m_bTyMaxPntr);
            }
            
            //    MAXIMUM BALANCE
            long lTyMaxBal () { return 17; };
            RWCString TyMaxBal (void)
            {
                return AceZeroSupp(m_szTyMaxBal, &m_szSuppressBuff[0]);
            }
            RWCString TyMaxBalRaw (void)
            {
                return m_szTyMaxBal;
            }
            long TyMaxBal (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMaxBal, sizeof(m_szTyMaxBal), &m_bTyMaxBal);
            }
            
            //    CHARGE TRAN1
            long lTyChrgTran1 () { return 1; };
            RWCString TyChrgTran1 (void)
            {
                return m_szTyChrgTran1;
            }
            long TyChrgTran1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyChrgTran1, sizeof(m_szTyChrgTran1), &m_bTyChrgTran1);
            }
            
            //    MATURITY AUTOMATIC RENEW
            long lTyMatAutoRenew () { return 1; };
            RWCString TyMatAutoRenew (void)
            {
                return m_szTyMatAutoRenew;
            }
            long TyMatAutoRenew (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMatAutoRenew, sizeof(m_szTyMatAutoRenew), &m_bTyMatAutoRenew);
            }
            
            //    MATURITY PRINCIPAL DISTRIBUTION
            long lTyMatPrinDistr () { return 1; };
            RWCString TyMatPrinDistr (void)
            {
                return m_szTyMatPrinDistr;
            }
            long TyMatPrinDistr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMatPrinDistr, sizeof(m_szTyMatPrinDistr), &m_bTyMatPrinDistr);
            }
            
            //    MATURITY TERM
            long lTyMatTerm () { return 1; };
            RWCString TyMatTerm (void)
            {
                return m_szTyMatTerm;
            }
            long TyMatTerm (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMatTerm, sizeof(m_szTyMatTerm), &m_bTyMatTerm);
            }
            
            //    MATURITY TERM INCREMENT
            long lTyMatTermIncr () { return 4; };
            RWCString TyMatTermIncr (void)
            {
                return AceZeroSupp(m_szTyMatTermIncr, &m_szSuppressBuff[0]);
            }
            RWCString TyMatTermIncrRaw (void)
            {
                return m_szTyMatTermIncr;
            }
            long TyMatTermIncr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMatTermIncr, sizeof(m_szTyMatTermIncr), &m_bTyMatTermIncr);
            }
            
            //    INTEREST CHANGE
            long lTyIntChng () { return 1; };
            RWCString TyIntChng (void)
            {
                return m_szTyIntChng;
            }
            long TyIntChng (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIntChng, sizeof(m_szTyIntChng), &m_bTyIntChng);
            }
            
            //    INTEREST DISTRIBUTION
            long lTyIntDistr () { return 1; };
            RWCString TyIntDistr (void)
            {
                return m_szTyIntDistr;
            }
            long TyIntDistr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIntDistr, sizeof(m_szTyIntDistr), &m_bTyIntDistr);
            }
            
            //    INTEREST SCHEDULE
            long lTyIntSched () { return 1; };
            RWCString TyIntSched (void)
            {
                return m_szTyIntSched;
            }
            long TyIntSched (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIntSched, sizeof(m_szTyIntSched), &m_bTyIntSched);
            }
            
            //    INTEREST CYCLE FREQUENCY
            long lTyIntCyclFreq () { return 2; };
            RWCString TyIntCyclFreq (void)
            {
                return m_szTyIntCyclFreq;
            }
            long TyIntCyclFreq (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIntCyclFreq, sizeof(m_szTyIntCyclFreq), &m_bTyIntCyclFreq);
            }
            
            //    INTEREST INCREMENT
            long lTyIntIncr () { return 4; };
            RWCString TyIntIncr (void)
            {
                return AceZeroSupp(m_szTyIntIncr, &m_szSuppressBuff[0]);
            }
            RWCString TyIntIncrRaw (void)
            {
                return m_szTyIntIncr;
            }
            long TyIntIncr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIntIncr, sizeof(m_szTyIntIncr), &m_bTyIntIncr);
            }
            
            //    INTEREST DAY
            long lTyIntDay () { return 2; };
            RWCString TyIntDay (void)
            {
                return m_szTyIntDay;
            }
            long TyIntDay (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIntDay, sizeof(m_szTyIntDay), &m_bTyIntDay);
            }
            
            //    IRA TYPE
            long lTyIraType () { return 2; };
            RWCString TyIraType (void)
            {
                return m_szTyIraType;
            }
            long TyIraType (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIraType, sizeof(m_szTyIraType), &m_bTyIraType);
            }
            
            //    IRA MAXIMUM CONTRIBUTION
            long lTyIraMaxContr () { return 4; };
            RWCString TyIraMaxContr (void)
            {
                return m_szTyIraMaxContr;
            }
            long TyIraMaxContr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIraMaxContr, sizeof(m_szTyIraMaxContr), &m_bTyIraMaxContr);
            }
            
            //    STATEMENT PULL
            long lTyStmtPull () { return 1; };
            RWCString TyStmtPull (void)
            {
                return m_szTyStmtPull;
            }
            long TyStmtPull (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyStmtPull, sizeof(m_szTyStmtPull), &m_bTyStmtPull);
            }
            
            //    STATEMENT CYCLE
            long lTyStmtCycle () { return 2; };
            RWCString TyStmtCycle (void)
            {
                return m_szTyStmtCycle;
            }
            long TyStmtCycle (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyStmtCycle, sizeof(m_szTyStmtCycle), &m_bTyStmtCycle);
            }
            
            //    STATEMENT MONTHLY
            long lTyStmtMonthly () { return 1; };
            RWCString TyStmtMonthly (void)
            {
                return m_szTyStmtMonthly;
            }
            long TyStmtMonthly (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyStmtMonthly, sizeof(m_szTyStmtMonthly), &m_bTyStmtMonthly);
            }
            
            //    SERVICE CHARGE SCHEDULE
            long lTySvcChgSched () { return 1; };
            RWCString TySvcChgSched (void)
            {
                return m_szTySvcChgSched;
            }
            long TySvcChgSched (const RWCString& rwc)
            {
                return SetString(rwc, m_szTySvcChgSched, sizeof(m_szTySvcChgSched), &m_bTySvcChgSched);
            }
            
            //    SERVICE CHARGE DAY MONTH
            long lTySvcChgDayMo () { return 2; };
            RWCString TySvcChgDayMo (void)
            {
                return m_szTySvcChgDayMo;
            }
            long TySvcChgDayMo (const RWCString& rwc)
            {
                return SetString(rwc, m_szTySvcChgDayMo, sizeof(m_szTySvcChgDayMo), &m_bTySvcChgDayMo);
            }
            
            //    SERVICE CHARGE FREQUENCY
            long lTySvcChgFreq () { return 2; };
            RWCString TySvcChgFreq (void)
            {
                return m_szTySvcChgFreq;
            }
            long TySvcChgFreq (const RWCString& rwc)
            {
                return SetString(rwc, m_szTySvcChgFreq, sizeof(m_szTySvcChgFreq), &m_bTySvcChgFreq);
            }
            
            //    TRANSACTION ACCOUNT
            long lTyTranAcc () { return 1; };
            RWCString TyTranAcc (void)
            {
                return m_szTyTranAcc;
            }
            long TyTranAcc (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyTranAcc, sizeof(m_szTyTranAcc), &m_bTyTranAcc);
            }
            
            //    AUTORIZATION ATM ACH
            long lTyAuthAtmAch () { return 1; };
            RWCString TyAuthAtmAch (void)
            {
                return m_szTyAuthAtmAch;
            }
            long TyAuthAtmAch (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyAuthAtmAch, sizeof(m_szTyAuthAtmAch), &m_bTyAuthAtmAch);
            }
            
            //    RATE CHANGE TERM
            long lTyRateChngTerm () { return 1; };
            RWCString TyRateChngTerm (void)
            {
                return m_szTyRateChngTerm;
            }
            long TyRateChngTerm (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyRateChngTerm, sizeof(m_szTyRateChngTerm), &m_bTyRateChngTerm);
            }
            
            //    RATE CHANGE INCREMENT
            long lTyRateChngIncr () { return 4; };
            RWCString TyRateChngIncr (void)
            {
                return AceZeroSupp(m_szTyRateChngIncr, &m_szSuppressBuff[0]);
            }
            RWCString TyRateChngIncrRaw (void)
            {
                return m_szTyRateChngIncr;
            }
            long TyRateChngIncr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyRateChngIncr, sizeof(m_szTyRateChngIncr), &m_bTyRateChngIncr);
            }
            
            //    PENALTY TYPE
            long lTyPenaltyType () { return 1; };
            RWCString TyPenaltyType (void)
            {
                return m_szTyPenaltyType;
            }
            long TyPenaltyType (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyPenaltyType, sizeof(m_szTyPenaltyType), &m_bTyPenaltyType);
            }
            
            //    PENALTY DAYS
            long lTyPenaltyDays () { return 4; };
            RWCString TyPenaltyDays (void)
            {
                return AceZeroSupp(m_szTyPenaltyDays, &m_szSuppressBuff[0]);
            }
            RWCString TyPenaltyDaysRaw (void)
            {
                return m_szTyPenaltyDays;
            }
            long TyPenaltyDays (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyPenaltyDays, sizeof(m_szTyPenaltyDays), &m_bTyPenaltyDays);
            }
            
            //    AP ACCRUAL TYPE
            long lTyApAccrType () { return 1; };
            RWCString TyApAccrType (void)
            {
                return m_szTyApAccrType;
            }
            long TyApAccrType (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyApAccrType, sizeof(m_szTyApAccrType), &m_bTyApAccrType);
            }
            
            //    AP YEAR BASE
            long lTyApYearBase () { return 1; };
            RWCString TyApYearBase (void)
            {
                return m_szTyApYearBase;
            }
            long TyApYearBase (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyApYearBase, sizeof(m_szTyApYearBase), &m_bTyApYearBase);
            }
            
            //    AP MONTH BASE
            long lTyApMonthBase () { return 1; };
            RWCString TyApMonthBase (void)
            {
                return m_szTyApMonthBase;
            }
            long TyApMonthBase (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyApMonthBase, sizeof(m_szTyApMonthBase), &m_bTyApMonthBase);
            }
            
            //    AP TIER RATE
            long lTyApTierRate () { return 1; };
            RWCString TyApTierRate (void)
            {
                return m_szTyApTierRate;
            }
            long TyApTierRate (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyApTierRate, sizeof(m_szTyApTierRate), &m_bTyApTierRate);
            }
            
            //    AP MINIMUM RATE PERCENT
            long lTyApMinRatePct () { return 11; };
            RWCString TyApMinRatePct (void)
            {
                return AceZeroSupp(m_szTyApMinRatePct, &m_szSuppressBuff[0]);
            }
            RWCString TyApMinRatePctRaw (void)
            {
                return m_szTyApMinRatePct;
            }
            long TyApMinRatePct (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyApMinRatePct, sizeof(m_szTyApMinRatePct), &m_bTyApMinRatePct);
            }
            
            //    AP MAXIMUM RATE PERCENT
            long lTyApMaxRatePct () { return 11; };
            RWCString TyApMaxRatePct (void)
            {
                return AceZeroSupp(m_szTyApMaxRatePct, &m_szSuppressBuff[0]);
            }
            RWCString TyApMaxRatePctRaw (void)
            {
                return m_szTyApMaxRatePct;
            }
            long TyApMaxRatePct (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyApMaxRatePct, sizeof(m_szTyApMaxRatePct), &m_bTyApMaxRatePct);
            }
            
            //    BRANCH CODE
            long lTyBrCode () { return 1; };
            RWCString TyBrCode (void)
            {
                return m_szTyBrCode;
            }
            long TyBrCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyBrCode, sizeof(m_szTyBrCode), &m_bTyBrCode);
            }
            
            //    BRANCH RATE PERCENT
            long lTyBrRatePct () { return 11; };
            RWCString TyBrRatePct (void)
            {
                return AceZeroSupp(m_szTyBrRatePct, &m_szSuppressBuff[0]);
            }
            RWCString TyBrRatePctRaw (void)
            {
                return m_szTyBrRatePct;
            }
            long TyBrRatePct (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyBrRatePct, sizeof(m_szTyBrRatePct), &m_bTyBrRatePct);
            }
            
            //    BRANCH TERM
            long lTyBrTerm () { return 1; };
            RWCString TyBrTerm (void)
            {
                return m_szTyBrTerm;
            }
            long TyBrTerm (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyBrTerm, sizeof(m_szTyBrTerm), &m_bTyBrTerm);
            }
            
            //    BRANCH INCREMENT
            long lTyBrIncr () { return 4; };
            RWCString TyBrIncr (void)
            {
                return AceZeroSupp(m_szTyBrIncr, &m_szSuppressBuff[0]);
            }
            RWCString TyBrIncrRaw (void)
            {
                return m_szTyBrIncr;
            }
            long TyBrIncr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyBrIncr, sizeof(m_szTyBrIncr), &m_bTyBrIncr);
            }
            
            //    COMBINE CHECK
            long lTyCombineCheck () { return 1; };
            RWCString TyCombineCheck (void)
            {
                return m_szTyCombineCheck;
            }
            long TyCombineCheck (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyCombineCheck, sizeof(m_szTyCombineCheck), &m_bTyCombineCheck);
            }
            
            //    IRA ACCOUNT FLAG
            long lTyIraAccountFlag () { return 1; };
            RWCString TyIraAccountFlag (void)
            {
                return m_szTyIraAccountFlag;
            }
            long TyIraAccountFlag (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyIraAccountFlag, sizeof(m_szTyIraAccountFlag), &m_bTyIraAccountFlag);
            }
            
            //    GRACE DAYS
            long lTyGraceDays () { return 4; };
            RWCString TyGraceDays (void)
            {
                return AceZeroSupp(m_szTyGraceDays, &m_szSuppressBuff[0]);
            }
            RWCString TyGraceDaysRaw (void)
            {
                return m_szTyGraceDays;
            }
            long TyGraceDays (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyGraceDays, sizeof(m_szTyGraceDays), &m_bTyGraceDays);
            }
            
            //    TYPE OFFERED FLAG
            long lTyTypeOfferedFlag () { return 1; };
            RWCString TyTypeOfferedFlag (void)
            {
                return m_szTyTypeOfferedFlag;
            }
            long TyTypeOfferedFlag (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyTypeOfferedFlag, sizeof(m_szTyTypeOfferedFlag), &m_bTyTypeOfferedFlag);
            }
            
            //    MATURITY ANNIVERSARY DAY
            long lTyMatAnnivDa () { return 2; };
            RWCString TyMatAnnivDa (void)
            {
                return m_szTyMatAnnivDa;
            }
            long TyMatAnnivDa (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMatAnnivDa, sizeof(m_szTyMatAnnivDa), &m_bTyMatAnnivDa);
            }
            
            //    TIER TYPE POINTER
            long lTyTierTypePtr () { return 4; };
            RWCString TyTierTypePtr (void)
            {
                return m_szTyTierTypePtr;
            }
            long TyTierTypePtr (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyTierTypePtr, sizeof(m_szTyTierTypePtr), &m_bTyTierTypePtr);
            }
            
            //    MINIMUM INTEREST PERCENT
            long lTyMinIntPct () { return 11; };
            RWCString TyMinIntPct (void)
            {
                return AceZeroSupp(m_szTyMinIntPct, &m_szSuppressBuff[0]);
            }
            RWCString TyMinIntPctRaw (void)
            {
                return m_szTyMinIntPct;
            }
            long TyMinIntPct (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMinIntPct, sizeof(m_szTyMinIntPct), &m_bTyMinIntPct);
            }
            
            //    MAXIMUM INTEREST PERCENT
            long lTyMaxIntPct () { return 11; };
            RWCString TyMaxIntPct (void)
            {
                return AceZeroSupp(m_szTyMaxIntPct, &m_szSuppressBuff[0]);
            }
            RWCString TyMaxIntPctRaw (void)
            {
                return m_szTyMaxIntPct;
            }
            long TyMaxIntPct (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMaxIntPct, sizeof(m_szTyMaxIntPct), &m_bTyMaxIntPct);
            }
            
            //    MINIMUM TERM DAYS
            long lTyMinTermDays () { return 4; };
            RWCString TyMinTermDays (void)
            {
                return AceZeroSupp(m_szTyMinTermDays, &m_szSuppressBuff[0]);
            }
            RWCString TyMinTermDaysRaw (void)
            {
                return m_szTyMinTermDays;
            }
            long TyMinTermDays (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMinTermDays, sizeof(m_szTyMinTermDays), &m_bTyMinTermDays);
            }
            
            //    MINIMUM TERM MONTH
            long lTyMinTermMo () { return 4; };
            RWCString TyMinTermMo (void)
            {
                return AceZeroSupp(m_szTyMinTermMo, &m_szSuppressBuff[0]);
            }
            RWCString TyMinTermMoRaw (void)
            {
                return m_szTyMinTermMo;
            }
            long TyMinTermMo (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMinTermMo, sizeof(m_szTyMinTermMo), &m_bTyMinTermMo);
            }
            
            //    MAXIMUM TERM DAYS
            long lTyMaxTermDays () { return 4; };
            RWCString TyMaxTermDays (void)
            {
                return AceZeroSupp(m_szTyMaxTermDays, &m_szSuppressBuff[0]);
            }
            RWCString TyMaxTermDaysRaw (void)
            {
                return m_szTyMaxTermDays;
            }
            long TyMaxTermDays (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMaxTermDays, sizeof(m_szTyMaxTermDays), &m_bTyMaxTermDays);
            }
            
            //    MAXIMUM TERM MONTH
            long lTyMaxTermMo () { return 4; };
            RWCString TyMaxTermMo (void)
            {
                return AceZeroSupp(m_szTyMaxTermMo, &m_szSuppressBuff[0]);
            }
            RWCString TyMaxTermMoRaw (void)
            {
                return m_szTyMaxTermMo;
            }
            long TyMaxTermMo (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyMaxTermMo, sizeof(m_szTyMaxTermMo), &m_bTyMaxTermMo);
            }
            
            //    PRODUCT LOOKUP DESCRIPTION
            long lStwsLuDesc30 () { return 30; };
            RWCString StwsLuDesc30 (void)
            {
                return m_szStwsLuDesc30;
            }
            long StwsLuDesc30 (const RWCString& rwc)
            {
                return SetString(rwc, m_szStwsLuDesc30, sizeof(m_szStwsLuDesc30), &m_bStwsLuDesc30);
            }
            
            //    VALID ACCRUAL1
            long lTyValAccr1 () { return 1; };
            RWCString TyValAccr1 (void)
            {
                return m_szTyValAccr1;
            }
            long TyValAccr1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr1, sizeof(m_szTyValAccr1), &m_bTyValAccr1);
            }
            
            //    VALID ACCRUAL2
            long lTyValAccr2 () { return 1; };
            RWCString TyValAccr2 (void)
            {
                return m_szTyValAccr2;
            }
            long TyValAccr2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr2, sizeof(m_szTyValAccr2), &m_bTyValAccr2);
            }
            
            //    VALID ACCRUAL3
            long lTyValAccr3 () { return 1; };
            RWCString TyValAccr3 (void)
            {
                return m_szTyValAccr3;
            }
            long TyValAccr3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr3, sizeof(m_szTyValAccr3), &m_bTyValAccr3);
            }
            
            //    VALID ACCRUAL4
            long lTyValAccr4 () { return 1; };
            RWCString TyValAccr4 (void)
            {
                return m_szTyValAccr4;
            }
            long TyValAccr4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr4, sizeof(m_szTyValAccr4), &m_bTyValAccr4);
            }
            
            //    VALID ACCRUAL5
            long lTyValAccr5 () { return 1; };
            RWCString TyValAccr5 (void)
            {
                return m_szTyValAccr5;
            }
            long TyValAccr5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr5, sizeof(m_szTyValAccr5), &m_bTyValAccr5);
            }
            
            //    VALID ACCRUAL6
            long lTyValAccr6 () { return 1; };
            RWCString TyValAccr6 (void)
            {
                return m_szTyValAccr6;
            }
            long TyValAccr6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr6, sizeof(m_szTyValAccr6), &m_bTyValAccr6);
            }
            
            //    VALID ACCRUAL7
            long lTyValAccr7 () { return 1; };
            RWCString TyValAccr7 (void)
            {
                return m_szTyValAccr7;
            }
            long TyValAccr7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr7, sizeof(m_szTyValAccr7), &m_bTyValAccr7);
            }
            
            //    VALID ACCRUAL8
            long lTyValAccr8 () { return 1; };
            RWCString TyValAccr8 (void)
            {
                return m_szTyValAccr8;
            }
            long TyValAccr8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr8, sizeof(m_szTyValAccr8), &m_bTyValAccr8);
            }
            
            //    VALID ACCRUAL9
            long lTyValAccr9 () { return 1; };
            RWCString TyValAccr9 (void)
            {
                return m_szTyValAccr9;
            }
            long TyValAccr9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValAccr9, sizeof(m_szTyValAccr9), &m_bTyValAccr9);
            }
            
            //    VALID YEAR1
            long lTyValidYr1 () { return 1; };
            RWCString TyValidYr1 (void)
            {
                return m_szTyValidYr1;
            }
            long TyValidYr1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidYr1, sizeof(m_szTyValidYr1), &m_bTyValidYr1);
            }
            
            //    VALID YEAR2
            long lTyValidYr2 () { return 1; };
            RWCString TyValidYr2 (void)
            {
                return m_szTyValidYr2;
            }
            long TyValidYr2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidYr2, sizeof(m_szTyValidYr2), &m_bTyValidYr2);
            }
            
            //    VALID YEAR3
            long lTyValidYr3 () { return 1; };
            RWCString TyValidYr3 (void)
            {
                return m_szTyValidYr3;
            }
            long TyValidYr3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidYr3, sizeof(m_szTyValidYr3), &m_bTyValidYr3);
            }
            
            //    VALID YEAR4
            long lTyValidYr4 () { return 1; };
            RWCString TyValidYr4 (void)
            {
                return m_szTyValidYr4;
            }
            long TyValidYr4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidYr4, sizeof(m_szTyValidYr4), &m_bTyValidYr4);
            }
            
            //    VALID MONTH1
            long lTyValidMth1 () { return 1; };
            RWCString TyValidMth1 (void)
            {
                return m_szTyValidMth1;
            }
            long TyValidMth1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidMth1, sizeof(m_szTyValidMth1), &m_bTyValidMth1);
            }
            
            //    VALID MONTH2
            long lTyValidMth2 () { return 1; };
            RWCString TyValidMth2 (void)
            {
                return m_szTyValidMth2;
            }
            long TyValidMth2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidMth2, sizeof(m_szTyValidMth2), &m_bTyValidMth2);
            }
            
            //    VALID MONTH3
            long lTyValidMth3 () { return 1; };
            RWCString TyValidMth3 (void)
            {
                return m_szTyValidMth3;
            }
            long TyValidMth3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidMth3, sizeof(m_szTyValidMth3), &m_bTyValidMth3);
            }
            
            //    VALID MONTH4
            long lTyValidMth4 () { return 1; };
            RWCString TyValidMth4 (void)
            {
                return m_szTyValidMth4;
            }
            long TyValidMth4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidMth4, sizeof(m_szTyValidMth4), &m_bTyValidMth4);
            }
            
            //    VALID PENALTY1
            long lTyValidPenal1 () { return 1; };
            RWCString TyValidPenal1 (void)
            {
                return m_szTyValidPenal1;
            }
            long TyValidPenal1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal1, sizeof(m_szTyValidPenal1), &m_bTyValidPenal1);
            }
            
            //    VALID PENALTY2
            long lTyValidPenal2 () { return 1; };
            RWCString TyValidPenal2 (void)
            {
                return m_szTyValidPenal2;
            }
            long TyValidPenal2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal2, sizeof(m_szTyValidPenal2), &m_bTyValidPenal2);
            }
            
            //    VALID PENALTY3
            long lTyValidPenal3 () { return 1; };
            RWCString TyValidPenal3 (void)
            {
                return m_szTyValidPenal3;
            }
            long TyValidPenal3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal3, sizeof(m_szTyValidPenal3), &m_bTyValidPenal3);
            }
            
            //    VALID PENALTY4
            long lTyValidPenal4 () { return 1; };
            RWCString TyValidPenal4 (void)
            {
                return m_szTyValidPenal4;
            }
            long TyValidPenal4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal4, sizeof(m_szTyValidPenal4), &m_bTyValidPenal4);
            }
            
            //    VALID PENALTY5
            long lTyValidPenal5 () { return 1; };
            RWCString TyValidPenal5 (void)
            {
                return m_szTyValidPenal5;
            }
            long TyValidPenal5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal5, sizeof(m_szTyValidPenal5), &m_bTyValidPenal5);
            }
            
            //    VALID PENALTY6
            long lTyValidPenal6 () { return 1; };
            RWCString TyValidPenal6 (void)
            {
                return m_szTyValidPenal6;
            }
            long TyValidPenal6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal6, sizeof(m_szTyValidPenal6), &m_bTyValidPenal6);
            }
            
            //    VALID PENALTY7
            long lTyValidPenal7 () { return 1; };
            RWCString TyValidPenal7 (void)
            {
                return m_szTyValidPenal7;
            }
            long TyValidPenal7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal7, sizeof(m_szTyValidPenal7), &m_bTyValidPenal7);
            }
            
            //    VALID PENALTY8
            long lTyValidPenal8 () { return 1; };
            RWCString TyValidPenal8 (void)
            {
                return m_szTyValidPenal8;
            }
            long TyValidPenal8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal8, sizeof(m_szTyValidPenal8), &m_bTyValidPenal8);
            }
            
            //    VALID PENALTY9
            long lTyValidPenal9 () { return 1; };
            RWCString TyValidPenal9 (void)
            {
                return m_szTyValidPenal9;
            }
            long TyValidPenal9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal9, sizeof(m_szTyValidPenal9), &m_bTyValidPenal9);
            }
            
            //    VALID PENALTY10
            long lTyValidPenal10 () { return 1; };
            RWCString TyValidPenal10 (void)
            {
                return m_szTyValidPenal10;
            }
            long TyValidPenal10 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal10, sizeof(m_szTyValidPenal10), &m_bTyValidPenal10);
            }
            
            //    VALID PENALTY11
            long lTyValidPenal11 () { return 1; };
            RWCString TyValidPenal11 (void)
            {
                return m_szTyValidPenal11;
            }
            long TyValidPenal11 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal11, sizeof(m_szTyValidPenal11), &m_bTyValidPenal11);
            }
            
            //    VALID PENALTY12
            long lTyValidPenal12 () { return 1; };
            RWCString TyValidPenal12 (void)
            {
                return m_szTyValidPenal12;
            }
            long TyValidPenal12 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal12, sizeof(m_szTyValidPenal12), &m_bTyValidPenal12);
            }
            
            //    VALID PENALTY13
            long lTyValidPenal13 () { return 1; };
            RWCString TyValidPenal13 (void)
            {
                return m_szTyValidPenal13;
            }
            long TyValidPenal13 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal13, sizeof(m_szTyValidPenal13), &m_bTyValidPenal13);
            }
            
            //    VALID PENALTY14
            long lTyValidPenal14 () { return 1; };
            RWCString TyValidPenal14 (void)
            {
                return m_szTyValidPenal14;
            }
            long TyValidPenal14 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal14, sizeof(m_szTyValidPenal14), &m_bTyValidPenal14);
            }
            
            //    VALID PENALTY15
            long lTyValidPenal15 () { return 1; };
            RWCString TyValidPenal15 (void)
            {
                return m_szTyValidPenal15;
            }
            long TyValidPenal15 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal15, sizeof(m_szTyValidPenal15), &m_bTyValidPenal15);
            }
            
            //    VALID PENALTY16
            long lTyValidPenal16 () { return 1; };
            RWCString TyValidPenal16 (void)
            {
                return m_szTyValidPenal16;
            }
            long TyValidPenal16 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValidPenal16, sizeof(m_szTyValidPenal16), &m_bTyValidPenal16);
            }
            
            //    VALID IRA1
            long lTyValIra1 () { return 1; };
            RWCString TyValIra1 (void)
            {
                return m_szTyValIra1;
            }
            long TyValIra1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra1, sizeof(m_szTyValIra1), &m_bTyValIra1);
            }
            
            //    VALID IRA2
            long lTyValIra2 () { return 1; };
            RWCString TyValIra2 (void)
            {
                return m_szTyValIra2;
            }
            long TyValIra2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra2, sizeof(m_szTyValIra2), &m_bTyValIra2);
            }
            
            //    VALID IRA3
            long lTyValIra3 () { return 1; };
            RWCString TyValIra3 (void)
            {
                return m_szTyValIra3;
            }
            long TyValIra3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra3, sizeof(m_szTyValIra3), &m_bTyValIra3);
            }
            
            //    VALID IRA4
            long lTyValIra4 () { return 1; };
            RWCString TyValIra4 (void)
            {
                return m_szTyValIra4;
            }
            long TyValIra4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra4, sizeof(m_szTyValIra4), &m_bTyValIra4);
            }
            
            //    VALID IRA5
            long lTyValIra5 () { return 1; };
            RWCString TyValIra5 (void)
            {
                return m_szTyValIra5;
            }
            long TyValIra5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra5, sizeof(m_szTyValIra5), &m_bTyValIra5);
            }
            
            //    VALID IRA6
            long lTyValIra6 () { return 1; };
            RWCString TyValIra6 (void)
            {
                return m_szTyValIra6;
            }
            long TyValIra6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra6, sizeof(m_szTyValIra6), &m_bTyValIra6);
            }
            
            //    VALID IRA7
            long lTyValIra7 () { return 1; };
            RWCString TyValIra7 (void)
            {
                return m_szTyValIra7;
            }
            long TyValIra7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra7, sizeof(m_szTyValIra7), &m_bTyValIra7);
            }
            
            //    VALID IRA8
            long lTyValIra8 () { return 1; };
            RWCString TyValIra8 (void)
            {
                return m_szTyValIra8;
            }
            long TyValIra8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra8, sizeof(m_szTyValIra8), &m_bTyValIra8);
            }
            
            //    VALID IRA9
            long lTyValIra9 () { return 1; };
            RWCString TyValIra9 (void)
            {
                return m_szTyValIra9;
            }
            long TyValIra9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra9, sizeof(m_szTyValIra9), &m_bTyValIra9);
            }
            
            //    VALID IRA10
            long lTyValIra10 () { return 1; };
            RWCString TyValIra10 (void)
            {
                return m_szTyValIra10;
            }
            long TyValIra10 (const RWCString& rwc)
            {
                return SetString(rwc, m_szTyValIra10, sizeof(m_szTyValIra10), &m_bTyValIra10);
            }
            
            //    RATE CONTROL1
            long lRdaCtl1 () { return 2; };
            RWCString RdaCtl1 (void)
            {
                return m_szRdaCtl1;
            }
            long RdaCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCtl1, sizeof(m_szRdaCtl1), &m_bRdaCtl1);
            }
            
            //    RATE CURRENCY CODE
            long lRdaCurrCode () { return 3; };
            RWCString RdaCurrCode (void)
            {
                return m_szRdaCurrCode;
            }
            long RdaCurrCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurrCode, sizeof(m_szRdaCurrCode), &m_bRdaCurrCode);
            }
            
            //    RATE REGION
            long lRdaRegion () { return 6; };
            RWCString RdaRegion (void)
            {
                return m_szRdaRegion;
            }
            long RdaRegion (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaRegion, sizeof(m_szRdaRegion), &m_bRdaRegion);
            }
            
            //    FILLER
            long lRdaFiller2 () { return 3; };
            RWCString RdaFiller2 (void)
            {
                return m_szRdaFiller2;
            }
            long RdaFiller2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaFiller2, sizeof(m_szRdaFiller2), &m_bRdaFiller2);
            }
            
            //    RATE TYPE
            long lRdaRateType () { return 1; };
            RWCString RdaRateType (void)
            {
                return m_szRdaRateType;
            }
            long RdaRateType (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaRateType, sizeof(m_szRdaRateType), &m_bRdaRateType);
            }
            
            //    RATE POINTER
            long lRdaPointer () { return 3; };
            RWCString RdaPointer (void)
            {
                return m_szRdaPointer;
            }
            long RdaPointer (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPointer, sizeof(m_szRdaPointer), &m_bRdaPointer);
            }
            
            //    RATE DESCRIPTION
            long lRdaRateDesc () { return 30; };
            RWCString RdaRateDesc (void)
            {
                return m_szRdaRateDesc;
            }
            long RdaRateDesc (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaRateDesc, sizeof(m_szRdaRateDesc), &m_bRdaRateDesc);
            }
            
            //    CURRENT TIER DATE
            long lRdaCurTierDate () { return 8; };
            RWCString RdaCurTierDate (void)
            {
                return m_szRdaCurTierDate;
            }
            long RdaCurTierDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierDate, sizeof(m_szRdaCurTierDate), &m_bRdaCurTierDate);
            }
            
            //    CURRENT TIER ADJUSTMENT CODE1
            long lRdaCurTierAdjCd1 () { return 1; };
            RWCString RdaCurTierAdjCd1 (void)
            {
                return m_szRdaCurTierAdjCd1;
            }
            long RdaCurTierAdjCd1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd1, sizeof(m_szRdaCurTierAdjCd1), &m_bRdaCurTierAdjCd1);
            }
            
            //    CURRENT TIER ANNUAL RATE1
            long lRdaCurTierAnnR1 () { return 11; };
            RWCString RdaCurTierAnnR1 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR1, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR1Raw (void)
            {
                return m_szRdaCurTierAnnR1;
            }
            long RdaCurTierAnnR1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR1, sizeof(m_szRdaCurTierAnnR1), &m_bRdaCurTierAnnR1);
            }
            
            //    CURRENT TIER LIMIT1
            long lRdaCurTierLmt1 () { return 17; };
            RWCString RdaCurTierLmt1 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt1, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt1Raw (void)
            {
                return m_szRdaCurTierLmt1;
            }
            long RdaCurTierLmt1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt1, sizeof(m_szRdaCurTierLmt1), &m_bRdaCurTierLmt1);
            }
            
            //    CURRENT TIER ADJUSTMENT CODE2
            long lRdaCurTierAdjCd2 () { return 1; };
            RWCString RdaCurTierAdjCd2 (void)
            {
                return m_szRdaCurTierAdjCd2;
            }
            long RdaCurTierAdjCd2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd2, sizeof(m_szRdaCurTierAdjCd2), &m_bRdaCurTierAdjCd2);
            }
            
            //    CURRENT TIER ANNUAL RATE2
            long lRdaCurTierAnnR2 () { return 11; };
            RWCString RdaCurTierAnnR2 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR2, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR2Raw (void)
            {
                return m_szRdaCurTierAnnR2;
            }
            long RdaCurTierAnnR2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR2, sizeof(m_szRdaCurTierAnnR2), &m_bRdaCurTierAnnR2);
            }
            
            //    CURRENT TIER LIMIT2
            long lRdaCurTierLmt2 () { return 17; };
            RWCString RdaCurTierLmt2 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt2, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt2Raw (void)
            {
                return m_szRdaCurTierLmt2;
            }
            long RdaCurTierLmt2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt2, sizeof(m_szRdaCurTierLmt2), &m_bRdaCurTierLmt2);
            }
            
            //    CURRENT TIERED ADJUSTMENT CODE3
            long lRdaCurTierAdjCd3 () { return 1; };
            RWCString RdaCurTierAdjCd3 (void)
            {
                return m_szRdaCurTierAdjCd3;
            }
            long RdaCurTierAdjCd3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd3, sizeof(m_szRdaCurTierAdjCd3), &m_bRdaCurTierAdjCd3);
            }
            
            //    CURRENT TIERED ANNUAL RATE3
            long lRdaCurTierAnnR3 () { return 11; };
            RWCString RdaCurTierAnnR3 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR3, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR3Raw (void)
            {
                return m_szRdaCurTierAnnR3;
            }
            long RdaCurTierAnnR3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR3, sizeof(m_szRdaCurTierAnnR3), &m_bRdaCurTierAnnR3);
            }
            
            //    CURRENT TIER LIMIT3
            long lRdaCurTierLmt3 () { return 17; };
            RWCString RdaCurTierLmt3 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt3, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt3Raw (void)
            {
                return m_szRdaCurTierLmt3;
            }
            long RdaCurTierLmt3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt3, sizeof(m_szRdaCurTierLmt3), &m_bRdaCurTierLmt3);
            }
            
            //    CURRENT TIERED ADJUSTMENT CODE4
            long lRdaCurTierAdjCd4 () { return 1; };
            RWCString RdaCurTierAdjCd4 (void)
            {
                return m_szRdaCurTierAdjCd4;
            }
            long RdaCurTierAdjCd4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd4, sizeof(m_szRdaCurTierAdjCd4), &m_bRdaCurTierAdjCd4);
            }
            
            //    CURRENT TIERED ANNUAL RATE4
            long lRdaCurTierAnnR4 () { return 11; };
            RWCString RdaCurTierAnnR4 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR4, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR4Raw (void)
            {
                return m_szRdaCurTierAnnR4;
            }
            long RdaCurTierAnnR4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR4, sizeof(m_szRdaCurTierAnnR4), &m_bRdaCurTierAnnR4);
            }
            
            //    CURRENT TIERED LIMIT4
            long lRdaCurTierLmt4 () { return 17; };
            RWCString RdaCurTierLmt4 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt4, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt4Raw (void)
            {
                return m_szRdaCurTierLmt4;
            }
            long RdaCurTierLmt4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt4, sizeof(m_szRdaCurTierLmt4), &m_bRdaCurTierLmt4);
            }
            
            //    CURRENT TIERED ADJUSTMENT CODE5
            long lRdaCurTierAdjCd5 () { return 1; };
            RWCString RdaCurTierAdjCd5 (void)
            {
                return m_szRdaCurTierAdjCd5;
            }
            long RdaCurTierAdjCd5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd5, sizeof(m_szRdaCurTierAdjCd5), &m_bRdaCurTierAdjCd5);
            }
            
            //    CURRENT TIERED ANNUAL RATE5
            long lRdaCurTierAnnR5 () { return 11; };
            RWCString RdaCurTierAnnR5 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR5, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR5Raw (void)
            {
                return m_szRdaCurTierAnnR5;
            }
            long RdaCurTierAnnR5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR5, sizeof(m_szRdaCurTierAnnR5), &m_bRdaCurTierAnnR5);
            }
            
            //    CURRENT TIERED LIMIT5
            long lRdaCurTierLmt5 () { return 17; };
            RWCString RdaCurTierLmt5 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt5, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt5Raw (void)
            {
                return m_szRdaCurTierLmt5;
            }
            long RdaCurTierLmt5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt5, sizeof(m_szRdaCurTierLmt5), &m_bRdaCurTierLmt5);
            }
            
            //    CURRENT TIERED ADJUSTMENT CODE6
            long lRdaCurTierAdjCd6 () { return 1; };
            RWCString RdaCurTierAdjCd6 (void)
            {
                return m_szRdaCurTierAdjCd6;
            }
            long RdaCurTierAdjCd6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd6, sizeof(m_szRdaCurTierAdjCd6), &m_bRdaCurTierAdjCd6);
            }
            
            //    CURRENT TIERED ANNUAL RATE6
            long lRdaCurTierAnnR6 () { return 11; };
            RWCString RdaCurTierAnnR6 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR6, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR6Raw (void)
            {
                return m_szRdaCurTierAnnR6;
            }
            long RdaCurTierAnnR6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR6, sizeof(m_szRdaCurTierAnnR6), &m_bRdaCurTierAnnR6);
            }
            
            //    CURRENT TIERED LIMIT6
            long lRdaCurTierLmt6 () { return 17; };
            RWCString RdaCurTierLmt6 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt6, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt6Raw (void)
            {
                return m_szRdaCurTierLmt6;
            }
            long RdaCurTierLmt6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt6, sizeof(m_szRdaCurTierLmt6), &m_bRdaCurTierLmt6);
            }
            
            //    CURRENT TIERED ADJUSTMENT CODE7
            long lRdaCurTierAdjCd7 () { return 1; };
            RWCString RdaCurTierAdjCd7 (void)
            {
                return m_szRdaCurTierAdjCd7;
            }
            long RdaCurTierAdjCd7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd7, sizeof(m_szRdaCurTierAdjCd7), &m_bRdaCurTierAdjCd7);
            }
            
            //    CURRENT TIERED ANNUAL RATE7
            long lRdaCurTierAnnR7 () { return 11; };
            RWCString RdaCurTierAnnR7 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR7, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR7Raw (void)
            {
                return m_szRdaCurTierAnnR7;
            }
            long RdaCurTierAnnR7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR7, sizeof(m_szRdaCurTierAnnR7), &m_bRdaCurTierAnnR7);
            }
            
            //    CURRENT TIERED LIMIT7
            long lRdaCurTierLmt7 () { return 17; };
            RWCString RdaCurTierLmt7 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt7, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt7Raw (void)
            {
                return m_szRdaCurTierLmt7;
            }
            long RdaCurTierLmt7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt7, sizeof(m_szRdaCurTierLmt7), &m_bRdaCurTierLmt7);
            }
            
            //    CURRENT TIERED ADJUSTMENT CODE8
            long lRdaCurTierAdjCd8 () { return 1; };
            RWCString RdaCurTierAdjCd8 (void)
            {
                return m_szRdaCurTierAdjCd8;
            }
            long RdaCurTierAdjCd8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd8, sizeof(m_szRdaCurTierAdjCd8), &m_bRdaCurTierAdjCd8);
            }
            
            //    CURRENT TIERED ANNUAL RATE8
            long lRdaCurTierAnnR8 () { return 11; };
            RWCString RdaCurTierAnnR8 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR8, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR8Raw (void)
            {
                return m_szRdaCurTierAnnR8;
            }
            long RdaCurTierAnnR8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR8, sizeof(m_szRdaCurTierAnnR8), &m_bRdaCurTierAnnR8);
            }
            
            //    CURRENT TIERED LIMIT8
            long lRdaCurTierLmt8 () { return 17; };
            RWCString RdaCurTierLmt8 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt8, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt8Raw (void)
            {
                return m_szRdaCurTierLmt8;
            }
            long RdaCurTierLmt8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt8, sizeof(m_szRdaCurTierLmt8), &m_bRdaCurTierLmt8);
            }
            
            //    CURRENT TIERED ADJUSTMENT CODE9
            long lRdaCurTierAdjCd9 () { return 1; };
            RWCString RdaCurTierAdjCd9 (void)
            {
                return m_szRdaCurTierAdjCd9;
            }
            long RdaCurTierAdjCd9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAdjCd9, sizeof(m_szRdaCurTierAdjCd9), &m_bRdaCurTierAdjCd9);
            }
            
            //    CURRENT TIERED ANNUAL RATE9
            long lRdaCurTierAnnR9 () { return 11; };
            RWCString RdaCurTierAnnR9 (void)
            {
                return AceZeroSupp(m_szRdaCurTierAnnR9, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierAnnR9Raw (void)
            {
                return m_szRdaCurTierAnnR9;
            }
            long RdaCurTierAnnR9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierAnnR9, sizeof(m_szRdaCurTierAnnR9), &m_bRdaCurTierAnnR9);
            }
            
            //    CURRENT TIERED LIMIT9
            long lRdaCurTierLmt9 () { return 17; };
            RWCString RdaCurTierLmt9 (void)
            {
                return AceZeroSupp(m_szRdaCurTierLmt9, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierLmt9Raw (void)
            {
                return m_szRdaCurTierLmt9;
            }
            long RdaCurTierLmt9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierLmt9, sizeof(m_szRdaCurTierLmt9), &m_bRdaCurTierLmt9);
            }
            
            //    CURRENT TIERTERM
            long lRdaCurTierTerm () { return 1; };
            RWCString RdaCurTierTerm (void)
            {
                return m_szRdaCurTierTerm;
            }
            long RdaCurTierTerm (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierTerm, sizeof(m_szRdaCurTierTerm), &m_bRdaCurTierTerm);
            }
            
            //    CURRENT TIER INCREMENT
            long lRdaCurTierIncr () { return 4; };
            RWCString RdaCurTierIncr (void)
            {
                return AceZeroSupp(m_szRdaCurTierIncr, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurTierIncrRaw (void)
            {
                return m_szRdaCurTierIncr;
            }
            long RdaCurTierIncr (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurTierIncr, sizeof(m_szRdaCurTierIncr), &m_bRdaCurTierIncr);
            }
            
            //    PREVIOUS TIER DATE
            long lRdaPrvTierDate () { return 8; };
            RWCString RdaPrvTierDate (void)
            {
                return m_szRdaPrvTierDate;
            }
            long RdaPrvTierDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierDate, sizeof(m_szRdaPrvTierDate), &m_bRdaPrvTierDate);
            }
            
            //    PREVIOUS TIER ADJUSTMENT CODE1
            long lRdaPrvTierAdjCd1 () { return 1; };
            RWCString RdaPrvTierAdjCd1 (void)
            {
                return m_szRdaPrvTierAdjCd1;
            }
            long RdaPrvTierAdjCd1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd1, sizeof(m_szRdaPrvTierAdjCd1), &m_bRdaPrvTierAdjCd1);
            }
            
            //    PREVIOUS TIER ANNUAL RATE1
            long lRdaPrvTierAnnR1 () { return 11; };
            RWCString RdaPrvTierAnnR1 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR1, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR1Raw (void)
            {
                return m_szRdaPrvTierAnnR1;
            }
            long RdaPrvTierAnnR1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR1, sizeof(m_szRdaPrvTierAnnR1), &m_bRdaPrvTierAnnR1);
            }
            
            //    PREVIOUS TIER LIMIT1
            long lRdaPrvTierLmt1 () { return 17; };
            RWCString RdaPrvTierLmt1 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt1, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt1Raw (void)
            {
                return m_szRdaPrvTierLmt1;
            }
            long RdaPrvTierLmt1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt1, sizeof(m_szRdaPrvTierLmt1), &m_bRdaPrvTierLmt1);
            }
            
            //    PREVIOUS TIER ADJUSTMENT CODE2
            long lRdaPrvTierAdjCd2 () { return 1; };
            RWCString RdaPrvTierAdjCd2 (void)
            {
                return m_szRdaPrvTierAdjCd2;
            }
            long RdaPrvTierAdjCd2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd2, sizeof(m_szRdaPrvTierAdjCd2), &m_bRdaPrvTierAdjCd2);
            }
            
            //    PREVIOUS TIER ANNUAL RATE2
            long lRdaPrvTierAnnR2 () { return 11; };
            RWCString RdaPrvTierAnnR2 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR2, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR2Raw (void)
            {
                return m_szRdaPrvTierAnnR2;
            }
            long RdaPrvTierAnnR2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR2, sizeof(m_szRdaPrvTierAnnR2), &m_bRdaPrvTierAnnR2);
            }
            
            //    PREVIOUS TIER LIMIT2
            long lRdaPrvTierLmt2 () { return 17; };
            RWCString RdaPrvTierLmt2 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt2, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt2Raw (void)
            {
                return m_szRdaPrvTierLmt2;
            }
            long RdaPrvTierLmt2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt2, sizeof(m_szRdaPrvTierLmt2), &m_bRdaPrvTierLmt2);
            }
            
            //    PREVIOUS TIERED ADJUSTMENT CODE3
            long lRdaPrvTierAdjCd3 () { return 1; };
            RWCString RdaPrvTierAdjCd3 (void)
            {
                return m_szRdaPrvTierAdjCd3;
            }
            long RdaPrvTierAdjCd3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd3, sizeof(m_szRdaPrvTierAdjCd3), &m_bRdaPrvTierAdjCd3);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE3
            long lRdaPrvTierAnnR3 () { return 11; };
            RWCString RdaPrvTierAnnR3 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR3, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR3Raw (void)
            {
                return m_szRdaPrvTierAnnR3;
            }
            long RdaPrvTierAnnR3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR3, sizeof(m_szRdaPrvTierAnnR3), &m_bRdaPrvTierAnnR3);
            }
            
            //    PREVIOUS TIERED LIMIT3
            long lRdaPrvTierLmt3 () { return 17; };
            RWCString RdaPrvTierLmt3 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt3, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt3Raw (void)
            {
                return m_szRdaPrvTierLmt3;
            }
            long RdaPrvTierLmt3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt3, sizeof(m_szRdaPrvTierLmt3), &m_bRdaPrvTierLmt3);
            }
            
            //    PREVIOUS TIERED ADJUSTMENT CODE4
            long lRdaPrvTierAdjCd4 () { return 1; };
            RWCString RdaPrvTierAdjCd4 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAdjCd4, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAdjCd4Raw (void)
            {
                return m_szRdaPrvTierAdjCd4;
            }
            long RdaPrvTierAdjCd4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd4, sizeof(m_szRdaPrvTierAdjCd4), &m_bRdaPrvTierAdjCd4);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE4
            long lRdaPrvTierAnnR4 () { return 11; };
            RWCString RdaPrvTierAnnR4 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR4, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR4Raw (void)
            {
                return m_szRdaPrvTierAnnR4;
            }
            long RdaPrvTierAnnR4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR4, sizeof(m_szRdaPrvTierAnnR4), &m_bRdaPrvTierAnnR4);
            }
            
            //    PREVIOUS TIERED LIMIT4
            long lRdaPrvTierLmt4 () { return 17; };
            RWCString RdaPrvTierLmt4 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt4, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt4Raw (void)
            {
                return m_szRdaPrvTierLmt4;
            }
            long RdaPrvTierLmt4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt4, sizeof(m_szRdaPrvTierLmt4), &m_bRdaPrvTierLmt4);
            }
            
            //    PREVIOUS TIERED ADJUSTMENT CODE5
            long lRdaPrvTierAdjCd5 () { return 1; };
            RWCString RdaPrvTierAdjCd5 (void)
            {
                return m_szRdaPrvTierAdjCd5;
            }
            long RdaPrvTierAdjCd5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd5, sizeof(m_szRdaPrvTierAdjCd5), &m_bRdaPrvTierAdjCd5);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE5
            long lRdaPrvTierAnnR5 () { return 11; };
            RWCString RdaPrvTierAnnR5 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR5, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR5Raw (void)
            {
                return m_szRdaPrvTierAnnR5;
            }
            long RdaPrvTierAnnR5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR5, sizeof(m_szRdaPrvTierAnnR5), &m_bRdaPrvTierAnnR5);
            }
            
            //    PREVIOUS TIERED LIMIT5
            long lRdaPrvTierLmt5 () { return 17; };
            RWCString RdaPrvTierLmt5 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt5, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt5Raw (void)
            {
                return m_szRdaPrvTierLmt5;
            }
            long RdaPrvTierLmt5 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt5, sizeof(m_szRdaPrvTierLmt5), &m_bRdaPrvTierLmt5);
            }
            
            //    PREVIOUS TIERED ADJUSTMENT CODE6
            long lRdaPrvTierAdjCd6 () { return 1; };
            RWCString RdaPrvTierAdjCd6 (void)
            {
                return m_szRdaPrvTierAdjCd6;
            }
            long RdaPrvTierAdjCd6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd6, sizeof(m_szRdaPrvTierAdjCd6), &m_bRdaPrvTierAdjCd6);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE6
            long lRdaPrvTierAnnR6 () { return 11; };
            RWCString RdaPrvTierAnnR6 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR6, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR6Raw (void)
            {
                return m_szRdaPrvTierAnnR6;
            }
            long RdaPrvTierAnnR6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR6, sizeof(m_szRdaPrvTierAnnR6), &m_bRdaPrvTierAnnR6);
            }
            
            //    PREVIOUS TIERED LIMIT6
            long lRdaPrvTierLmt6 () { return 17; };
            RWCString RdaPrvTierLmt6 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt6, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt6Raw (void)
            {
                return m_szRdaPrvTierLmt6;
            }
            long RdaPrvTierLmt6 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt6, sizeof(m_szRdaPrvTierLmt6), &m_bRdaPrvTierLmt6);
            }
            
            //    PREVIOUS TIERED ADJUSTMENT CODE7
            long lRdaPrvTierAdjCd7 () { return 1; };
            RWCString RdaPrvTierAdjCd7 (void)
            {
                return m_szRdaPrvTierAdjCd7;
            }
            long RdaPrvTierAdjCd7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd7, sizeof(m_szRdaPrvTierAdjCd7), &m_bRdaPrvTierAdjCd7);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE7
            long lRdaPrvTierAnnR7 () { return 11; };
            RWCString RdaPrvTierAnnR7 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR7, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR7Raw (void)
            {
                return m_szRdaPrvTierAnnR7;
            }
            long RdaPrvTierAnnR7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR7, sizeof(m_szRdaPrvTierAnnR7), &m_bRdaPrvTierAnnR7);
            }
            
            //    PREVIOUS TIERED LIMIT7
            long lRdaPrvTierLmt7 () { return 17; };
            RWCString RdaPrvTierLmt7 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt7, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt7Raw (void)
            {
                return m_szRdaPrvTierLmt7;
            }
            long RdaPrvTierLmt7 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt7, sizeof(m_szRdaPrvTierLmt7), &m_bRdaPrvTierLmt7);
            }
            
            //    PREVIOUS TIERED ADJUSTMENT CODE8
            long lRdaPrvTierAdjCd8 () { return 1; };
            RWCString RdaPrvTierAdjCd8 (void)
            {
                return m_szRdaPrvTierAdjCd8;
            }
            long RdaPrvTierAdjCd8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd8, sizeof(m_szRdaPrvTierAdjCd8), &m_bRdaPrvTierAdjCd8);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE8
            long lRdaPrvTierAnnR8 () { return 11; };
            RWCString RdaPrvTierAnnR8 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR8, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR8Raw (void)
            {
                return m_szRdaPrvTierAnnR8;
            }
            long RdaPrvTierAnnR8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR8, sizeof(m_szRdaPrvTierAnnR8), &m_bRdaPrvTierAnnR8);
            }
            
            //    PREVIOUS TIERED LIMIT8
            long lRdaPrvTierLmt8 () { return 17; };
            RWCString RdaPrvTierLmt8 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt8, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt8Raw (void)
            {
                return m_szRdaPrvTierLmt8;
            }
            long RdaPrvTierLmt8 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt8, sizeof(m_szRdaPrvTierLmt8), &m_bRdaPrvTierLmt8);
            }
            
            //    PREVIOUS TIERED ADJUSTMENT CODE9
            long lRdaPrvTierAdjCd9 () { return 1; };
            RWCString RdaPrvTierAdjCd9 (void)
            {
                return m_szRdaPrvTierAdjCd9;
            }
            long RdaPrvTierAdjCd9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAdjCd9, sizeof(m_szRdaPrvTierAdjCd9), &m_bRdaPrvTierAdjCd9);
            }
            
            //    PREVIOUS TIERED ANNUAL RATE9
            long lRdaPrvTierAnnR9 () { return 11; };
            RWCString RdaPrvTierAnnR9 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierAnnR9, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierAnnR9Raw (void)
            {
                return m_szRdaPrvTierAnnR9;
            }
            long RdaPrvTierAnnR9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierAnnR9, sizeof(m_szRdaPrvTierAnnR9), &m_bRdaPrvTierAnnR9);
            }
            
            //    PREVIOUS TIERED LIMIT9
            long lRdaPrvTierLmt9 () { return 17; };
            RWCString RdaPrvTierLmt9 (void)
            {
                return AceZeroSupp(m_szRdaPrvTierLmt9, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierLmt9Raw (void)
            {
                return m_szRdaPrvTierLmt9;
            }
            long RdaPrvTierLmt9 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierLmt9, sizeof(m_szRdaPrvTierLmt9), &m_bRdaPrvTierLmt9);
            }
            
            //    PREVIOUS TIER TERM
            long lRdaPrvTierTerm () { return 1; };
            RWCString RdaPrvTierTerm (void)
            {
                return m_szRdaPrvTierTerm;
            }
            long RdaPrvTierTerm (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierTerm, sizeof(m_szRdaPrvTierTerm), &m_bRdaPrvTierTerm);
            }
            
            //    PREVIOUS TIER INCREMENT
            long lRdaPrvTierIncr () { return 4; };
            RWCString RdaPrvTierIncr (void)
            {
                return AceZeroSupp(m_szRdaPrvTierIncr, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvTierIncrRaw (void)
            {
                return m_szRdaPrvTierIncr;
            }
            long RdaPrvTierIncr (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvTierIncr, sizeof(m_szRdaPrvTierIncr), &m_bRdaPrvTierIncr);
            }
            
            //    CURRENT BASE DATE
            long lRdaCurBaseDate () { return 8; };
            RWCString RdaCurBaseDate (void)
            {
                return m_szRdaCurBaseDate;
            }
            long RdaCurBaseDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurBaseDate, sizeof(m_szRdaCurBaseDate), &m_bRdaCurBaseDate);
            }
            
            //    CURRENT BASE ANNUAL RATE
            long lRdaCurBaseAnnR () { return 11; };
            RWCString RdaCurBaseAnnR (void)
            {
                return AceZeroSupp(m_szRdaCurBaseAnnR, &m_szSuppressBuff[0]);
            }
            RWCString RdaCurBaseAnnRRaw (void)
            {
                return m_szRdaCurBaseAnnR;
            }
            long RdaCurBaseAnnR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaCurBaseAnnR, sizeof(m_szRdaCurBaseAnnR), &m_bRdaCurBaseAnnR);
            }
            
            //    PREVIOUS BASE DATE
            long lRdaPrvBaseDate () { return 8; };
            RWCString RdaPrvBaseDate (void)
            {
                return m_szRdaPrvBaseDate;
            }
            long RdaPrvBaseDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvBaseDate, sizeof(m_szRdaPrvBaseDate), &m_bRdaPrvBaseDate);
            }
            
            //    PREVIOUS BASE ANNUAL RATE
            long lRdaPrvBaseAnnR () { return 11; };
            RWCString RdaPrvBaseAnnR (void)
            {
                return AceZeroSupp(m_szRdaPrvBaseAnnR, &m_szSuppressBuff[0]);
            }
            RWCString RdaPrvBaseAnnRRaw (void)
            {
                return m_szRdaPrvBaseAnnR;
            }
            long RdaPrvBaseAnnR (const RWCString& rwc)
            {
                return SetString(rwc, m_szRdaPrvBaseAnnR, sizeof(m_szRdaPrvBaseAnnR), &m_bRdaPrvBaseAnnR);
            }
            
            //    WORK ERROR CODE
            long lWorkErrCd () { return 4; };
            RWCString WorkErrCd (void)
            {
                return m_szWorkErrCd;
            }
            long WorkErrCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szWorkErrCd, sizeof(m_szWorkErrCd), &m_bWorkErrCd);
            }
            
            //    WORK ERROR TEXT
            long lWorkErrText () { return 40; };
            RWCString WorkErrText (void)
            {
                return m_szWorkErrText;
            }
            long WorkErrText (const RWCString& rwc)
            {
                return SetString(rwc, m_szWorkErrText, sizeof(m_szWorkErrText), &m_bWorkErrText);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bCsProductId) return true;
                if (m_bTyRegion) return true;
                if (m_bTyCurrCode) return true;
                if (m_bTyCtl1) return true;
                if (m_bTyCtl2) return true;
                if (m_bTyCtl3) return true;
                if (m_bTyRecId) return true;
                if (m_bTyType) return true;
                if (m_bTyAcctCat) return true;
                if (m_bTyIntTypePntr) return true;
                if (m_bTyNegotiableFlag) return true;
                if (m_bTyRisingRateCd) return true;
                if (m_bTySystemType) return true;
                if (m_bTyAnalAcct) return true;
                if (m_bTyMinPntr) return true;
                if (m_bTyMinBal) return true;
                if (m_bTyMaxPntr) return true;
                if (m_bTyMaxBal) return true;
                if (m_bTyChrgTran1) return true;
                if (m_bTyMatAutoRenew) return true;
                if (m_bTyMatPrinDistr) return true;
                if (m_bTyMatTerm) return true;
                if (m_bTyMatTermIncr) return true;
                if (m_bTyIntChng) return true;
                if (m_bTyIntDistr) return true;
                if (m_bTyIntSched) return true;
                if (m_bTyIntCyclFreq) return true;
                if (m_bTyIntIncr) return true;
                if (m_bTyIntDay) return true;
                if (m_bTyIraType) return true;
                if (m_bTyIraMaxContr) return true;
                if (m_bTyStmtPull) return true;
                if (m_bTyStmtCycle) return true;
                if (m_bTyStmtMonthly) return true;
                if (m_bTySvcChgSched) return true;
                if (m_bTySvcChgDayMo) return true;
                if (m_bTySvcChgFreq) return true;
                if (m_bTyTranAcc) return true;
                if (m_bTyAuthAtmAch) return true;
                if (m_bTyRateChngTerm) return true;
                if (m_bTyRateChngIncr) return true;
                if (m_bTyPenaltyType) return true;
                if (m_bTyPenaltyDays) return true;
                if (m_bTyApAccrType) return true;
                if (m_bTyApYearBase) return true;
                if (m_bTyApMonthBase) return true;
                if (m_bTyApTierRate) return true;
                if (m_bTyApMinRatePct) return true;
                if (m_bTyApMaxRatePct) return true;
                if (m_bTyBrCode) return true;
                if (m_bTyBrRatePct) return true;
                if (m_bTyBrTerm) return true;
                if (m_bTyBrIncr) return true;
                if (m_bTyCombineCheck) return true;
                if (m_bTyIraAccountFlag) return true;
                if (m_bTyGraceDays) return true;
                if (m_bTyTypeOfferedFlag) return true;
                if (m_bTyMatAnnivDa) return true;
                if (m_bTyTierTypePtr) return true;
                if (m_bTyMinIntPct) return true;
                if (m_bTyMaxIntPct) return true;
                if (m_bTyMinTermDays) return true;
                if (m_bTyMinTermMo) return true;
                if (m_bTyMaxTermDays) return true;
                if (m_bTyMaxTermMo) return true;
                if (m_bStwsLuDesc30) return true;
                if (m_bTyValAccr1) return true;
                if (m_bTyValAccr2) return true;
                if (m_bTyValAccr3) return true;
                if (m_bTyValAccr4) return true;
                if (m_bTyValAccr5) return true;
                if (m_bTyValAccr6) return true;
                if (m_bTyValAccr7) return true;
                if (m_bTyValAccr8) return true;
                if (m_bTyValAccr9) return true;
                if (m_bTyValidYr1) return true;
                if (m_bTyValidYr2) return true;
                if (m_bTyValidYr3) return true;
                if (m_bTyValidYr4) return true;
                if (m_bTyValidMth1) return true;
                if (m_bTyValidMth2) return true;
                if (m_bTyValidMth3) return true;
                if (m_bTyValidMth4) return true;
                if (m_bTyValidPenal1) return true;
                if (m_bTyValidPenal2) return true;
                if (m_bTyValidPenal3) return true;
                if (m_bTyValidPenal4) return true;
                if (m_bTyValidPenal5) return true;
                if (m_bTyValidPenal6) return true;
                if (m_bTyValidPenal7) return true;
                if (m_bTyValidPenal8) return true;
                if (m_bTyValidPenal9) return true;
                if (m_bTyValidPenal10) return true;
                if (m_bTyValidPenal11) return true;
                if (m_bTyValidPenal12) return true;
                if (m_bTyValidPenal13) return true;
                if (m_bTyValidPenal14) return true;
                if (m_bTyValidPenal15) return true;
                if (m_bTyValidPenal16) return true;
                if (m_bTyValIra1) return true;
                if (m_bTyValIra2) return true;
                if (m_bTyValIra3) return true;
                if (m_bTyValIra4) return true;
                if (m_bTyValIra5) return true;
                if (m_bTyValIra6) return true;
                if (m_bTyValIra7) return true;
                if (m_bTyValIra8) return true;
                if (m_bTyValIra9) return true;
                if (m_bTyValIra10) return true;
                if (m_bRdaCtl1) return true;
                if (m_bRdaCurrCode) return true;
                if (m_bRdaRegion) return true;
                if (m_bRdaFiller2) return true;
                if (m_bRdaRateType) return true;
                if (m_bRdaPointer) return true;
                if (m_bRdaRateDesc) return true;
                if (m_bRdaCurTierDate) return true;
                if (m_bRdaCurTierAdjCd1) return true;
                if (m_bRdaCurTierAnnR1) return true;
                if (m_bRdaCurTierLmt1) return true;
                if (m_bRdaCurTierAdjCd2) return true;
                if (m_bRdaCurTierAnnR2) return true;
                if (m_bRdaCurTierLmt2) return true;
                if (m_bRdaCurTierAdjCd3) return true;
                if (m_bRdaCurTierAnnR3) return true;
                if (m_bRdaCurTierLmt3) return true;
                if (m_bRdaCurTierAdjCd4) return true;
                if (m_bRdaCurTierAnnR4) return true;
                if (m_bRdaCurTierLmt4) return true;
                if (m_bRdaCurTierAdjCd5) return true;
                if (m_bRdaCurTierAnnR5) return true;
                if (m_bRdaCurTierLmt5) return true;
                if (m_bRdaCurTierAdjCd6) return true;
                if (m_bRdaCurTierAnnR6) return true;
                if (m_bRdaCurTierLmt6) return true;
                if (m_bRdaCurTierAdjCd7) return true;
                if (m_bRdaCurTierAnnR7) return true;
                if (m_bRdaCurTierLmt7) return true;
                if (m_bRdaCurTierAdjCd8) return true;
                if (m_bRdaCurTierAnnR8) return true;
                if (m_bRdaCurTierLmt8) return true;
                if (m_bRdaCurTierAdjCd9) return true;
                if (m_bRdaCurTierAnnR9) return true;
                if (m_bRdaCurTierLmt9) return true;
                if (m_bRdaCurTierTerm) return true;
                if (m_bRdaCurTierIncr) return true;
                if (m_bRdaPrvTierDate) return true;
                if (m_bRdaPrvTierAdjCd1) return true;
                if (m_bRdaPrvTierAnnR1) return true;
                if (m_bRdaPrvTierLmt1) return true;
                if (m_bRdaPrvTierAdjCd2) return true;
                if (m_bRdaPrvTierAnnR2) return true;
                if (m_bRdaPrvTierLmt2) return true;
                if (m_bRdaPrvTierAdjCd3) return true;
                if (m_bRdaPrvTierAnnR3) return true;
                if (m_bRdaPrvTierLmt3) return true;
                if (m_bRdaPrvTierAdjCd4) return true;
                if (m_bRdaPrvTierAnnR4) return true;
                if (m_bRdaPrvTierLmt4) return true;
                if (m_bRdaPrvTierAdjCd5) return true;
                if (m_bRdaPrvTierAnnR5) return true;
                if (m_bRdaPrvTierLmt5) return true;
                if (m_bRdaPrvTierAdjCd6) return true;
                if (m_bRdaPrvTierAnnR6) return true;
                if (m_bRdaPrvTierLmt6) return true;
                if (m_bRdaPrvTierAdjCd7) return true;
                if (m_bRdaPrvTierAnnR7) return true;
                if (m_bRdaPrvTierLmt7) return true;
                if (m_bRdaPrvTierAdjCd8) return true;
                if (m_bRdaPrvTierAnnR8) return true;
                if (m_bRdaPrvTierLmt8) return true;
                if (m_bRdaPrvTierAdjCd9) return true;
                if (m_bRdaPrvTierAnnR9) return true;
                if (m_bRdaPrvTierLmt9) return true;
                if (m_bRdaPrvTierTerm) return true;
                if (m_bRdaPrvTierIncr) return true;
                if (m_bRdaCurBaseDate) return true;
                if (m_bRdaCurBaseAnnR) return true;
                if (m_bRdaPrvBaseDate) return true;
                if (m_bRdaPrvBaseAnnR) return true;
                if (m_bWorkErrCd) return true;
                if (m_bWorkErrText) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "ProdRateData", m_lIndex);
                    AddXMLField(pSess, "CsProductId", m_szCsProductId, &m_bCsProductId);
                    AddXMLField(pSess, "TyRegion", m_szTyRegion, &m_bTyRegion);
                    AddXMLField(pSess, "TyCurrCode", m_szTyCurrCode, &m_bTyCurrCode);
                    AddXMLField(pSess, "TyCtl1", m_szTyCtl1, &m_bTyCtl1);
                    AddXMLField(pSess, "TyCtl2", m_szTyCtl2, &m_bTyCtl2);
                    AddXMLField(pSess, "TyCtl3", m_szTyCtl3, &m_bTyCtl3);
                    AddXMLField(pSess, "TyRecId", m_szTyRecId, &m_bTyRecId);
                    AddXMLField(pSess, "TyType", m_szTyType, &m_bTyType);
                    AddXMLField(pSess, "TyAcctCat", m_szTyAcctCat, &m_bTyAcctCat);
                    AddXMLField(pSess, "TyIntTypePntr", m_szTyIntTypePntr, &m_bTyIntTypePntr);
                    AddXMLField(pSess, "TyNegotiableFlag", m_szTyNegotiableFlag, &m_bTyNegotiableFlag);
                    AddXMLField(pSess, "TyRisingRateCd", m_szTyRisingRateCd, &m_bTyRisingRateCd);
                    AddXMLField(pSess, "TySystemType", m_szTySystemType, &m_bTySystemType);
                    AddXMLField(pSess, "TyAnalAcct", m_szTyAnalAcct, &m_bTyAnalAcct);
                    AddXMLField(pSess, "TyMinPntr", m_szTyMinPntr, &m_bTyMinPntr);
                    AddXMLField(pSess, "TyMinBal", m_szTyMinBal, &m_bTyMinBal);
                    AddXMLField(pSess, "TyMaxPntr", m_szTyMaxPntr, &m_bTyMaxPntr);
                    AddXMLField(pSess, "TyMaxBal", m_szTyMaxBal, &m_bTyMaxBal);
                    AddXMLField(pSess, "TyChrgTran1", m_szTyChrgTran1, &m_bTyChrgTran1);
                    AddXMLField(pSess, "TyMatAutoRenew", m_szTyMatAutoRenew, &m_bTyMatAutoRenew);
                    AddXMLField(pSess, "TyMatPrinDistr", m_szTyMatPrinDistr, &m_bTyMatPrinDistr);
                    AddXMLField(pSess, "TyMatTerm", m_szTyMatTerm, &m_bTyMatTerm);
                    AddXMLField(pSess, "TyMatTermIncr", m_szTyMatTermIncr, &m_bTyMatTermIncr);
                    AddXMLField(pSess, "TyIntChng", m_szTyIntChng, &m_bTyIntChng);
                    AddXMLField(pSess, "TyIntDistr", m_szTyIntDistr, &m_bTyIntDistr);
                    AddXMLField(pSess, "TyIntSched", m_szTyIntSched, &m_bTyIntSched);
                    AddXMLField(pSess, "TyIntCyclFreq", m_szTyIntCyclFreq, &m_bTyIntCyclFreq);
                    AddXMLField(pSess, "TyIntIncr", m_szTyIntIncr, &m_bTyIntIncr);
                    AddXMLField(pSess, "TyIntDay", m_szTyIntDay, &m_bTyIntDay);
                    AddXMLField(pSess, "TyIraType", m_szTyIraType, &m_bTyIraType);
                    AddXMLField(pSess, "TyIraMaxContr", m_szTyIraMaxContr, &m_bTyIraMaxContr);
                    AddXMLField(pSess, "TyStmtPull", m_szTyStmtPull, &m_bTyStmtPull);
                    AddXMLField(pSess, "TyStmtCycle", m_szTyStmtCycle, &m_bTyStmtCycle);
                    AddXMLField(pSess, "TyStmtMonthly", m_szTyStmtMonthly, &m_bTyStmtMonthly);
                    AddXMLField(pSess, "TySvcChgSched", m_szTySvcChgSched, &m_bTySvcChgSched);
                    AddXMLField(pSess, "TySvcChgDayMo", m_szTySvcChgDayMo, &m_bTySvcChgDayMo);
                    AddXMLField(pSess, "TySvcChgFreq", m_szTySvcChgFreq, &m_bTySvcChgFreq);
                    AddXMLField(pSess, "TyTranAcc", m_szTyTranAcc, &m_bTyTranAcc);
                    AddXMLField(pSess, "TyAuthAtmAch", m_szTyAuthAtmAch, &m_bTyAuthAtmAch);
                    AddXMLField(pSess, "TyRateChngTerm", m_szTyRateChngTerm, &m_bTyRateChngTerm);
                    AddXMLField(pSess, "TyRateChngIncr", m_szTyRateChngIncr, &m_bTyRateChngIncr);
                    AddXMLField(pSess, "TyPenaltyType", m_szTyPenaltyType, &m_bTyPenaltyType);
                    AddXMLField(pSess, "TyPenaltyDays", m_szTyPenaltyDays, &m_bTyPenaltyDays);
                    AddXMLField(pSess, "TyApAccrType", m_szTyApAccrType, &m_bTyApAccrType);
                    AddXMLField(pSess, "TyApYearBase", m_szTyApYearBase, &m_bTyApYearBase);
                    AddXMLField(pSess, "TyApMonthBase", m_szTyApMonthBase, &m_bTyApMonthBase);
                    AddXMLField(pSess, "TyApTierRate", m_szTyApTierRate, &m_bTyApTierRate);
                    AddXMLField(pSess, "TyApMinRatePct", m_szTyApMinRatePct, &m_bTyApMinRatePct);
                    AddXMLField(pSess, "TyApMaxRatePct", m_szTyApMaxRatePct, &m_bTyApMaxRatePct);
                    AddXMLField(pSess, "TyBrCode", m_szTyBrCode, &m_bTyBrCode);
                    AddXMLField(pSess, "TyBrRatePct", m_szTyBrRatePct, &m_bTyBrRatePct);
                    AddXMLField(pSess, "TyBrTerm", m_szTyBrTerm, &m_bTyBrTerm);
                    AddXMLField(pSess, "TyBrIncr", m_szTyBrIncr, &m_bTyBrIncr);
                    AddXMLField(pSess, "TyCombineCheck", m_szTyCombineCheck, &m_bTyCombineCheck);
                    AddXMLField(pSess, "TyIraAccountFlag", m_szTyIraAccountFlag, &m_bTyIraAccountFlag);
                    AddXMLField(pSess, "TyGraceDays", m_szTyGraceDays, &m_bTyGraceDays);
                    AddXMLField(pSess, "TyTypeOfferedFlag", m_szTyTypeOfferedFlag, &m_bTyTypeOfferedFlag);
                    AddXMLField(pSess, "TyMatAnnivDa", m_szTyMatAnnivDa, &m_bTyMatAnnivDa);
                    AddXMLField(pSess, "TyTierTypePtr", m_szTyTierTypePtr, &m_bTyTierTypePtr);
                    AddXMLField(pSess, "TyMinIntPct", m_szTyMinIntPct, &m_bTyMinIntPct);
                    AddXMLField(pSess, "TyMaxIntPct", m_szTyMaxIntPct, &m_bTyMaxIntPct);
                    AddXMLField(pSess, "TyMinTermDays", m_szTyMinTermDays, &m_bTyMinTermDays);
                    AddXMLField(pSess, "TyMinTermMo", m_szTyMinTermMo, &m_bTyMinTermMo);
                    AddXMLField(pSess, "TyMaxTermDays", m_szTyMaxTermDays, &m_bTyMaxTermDays);
                    AddXMLField(pSess, "TyMaxTermMo", m_szTyMaxTermMo, &m_bTyMaxTermMo);
                    AddXMLField(pSess, "StwsLuDesc30", m_szStwsLuDesc30, &m_bStwsLuDesc30);
                    AddXMLField(pSess, "TyValAccr1", m_szTyValAccr1, &m_bTyValAccr1);
                    AddXMLField(pSess, "TyValAccr2", m_szTyValAccr2, &m_bTyValAccr2);
                    AddXMLField(pSess, "TyValAccr3", m_szTyValAccr3, &m_bTyValAccr3);
                    AddXMLField(pSess, "TyValAccr4", m_szTyValAccr4, &m_bTyValAccr4);
                    AddXMLField(pSess, "TyValAccr5", m_szTyValAccr5, &m_bTyValAccr5);
                    AddXMLField(pSess, "TyValAccr6", m_szTyValAccr6, &m_bTyValAccr6);
                    AddXMLField(pSess, "TyValAccr7", m_szTyValAccr7, &m_bTyValAccr7);
                    AddXMLField(pSess, "TyValAccr8", m_szTyValAccr8, &m_bTyValAccr8);
                    AddXMLField(pSess, "TyValAccr9", m_szTyValAccr9, &m_bTyValAccr9);
                    AddXMLField(pSess, "TyValidYr1", m_szTyValidYr1, &m_bTyValidYr1);
                    AddXMLField(pSess, "TyValidYr2", m_szTyValidYr2, &m_bTyValidYr2);
                    AddXMLField(pSess, "TyValidYr3", m_szTyValidYr3, &m_bTyValidYr3);
                    AddXMLField(pSess, "TyValidYr4", m_szTyValidYr4, &m_bTyValidYr4);
                    AddXMLField(pSess, "TyValidMth1", m_szTyValidMth1, &m_bTyValidMth1);
                    AddXMLField(pSess, "TyValidMth2", m_szTyValidMth2, &m_bTyValidMth2);
                    AddXMLField(pSess, "TyValidMth3", m_szTyValidMth3, &m_bTyValidMth3);
                    AddXMLField(pSess, "TyValidMth4", m_szTyValidMth4, &m_bTyValidMth4);
                    AddXMLField(pSess, "TyValidPenal1", m_szTyValidPenal1, &m_bTyValidPenal1);
                    AddXMLField(pSess, "TyValidPenal2", m_szTyValidPenal2, &m_bTyValidPenal2);
                    AddXMLField(pSess, "TyValidPenal3", m_szTyValidPenal3, &m_bTyValidPenal3);
                    AddXMLField(pSess, "TyValidPenal4", m_szTyValidPenal4, &m_bTyValidPenal4);
                    AddXMLField(pSess, "TyValidPenal5", m_szTyValidPenal5, &m_bTyValidPenal5);
                    AddXMLField(pSess, "TyValidPenal6", m_szTyValidPenal6, &m_bTyValidPenal6);
                    AddXMLField(pSess, "TyValidPenal7", m_szTyValidPenal7, &m_bTyValidPenal7);
                    AddXMLField(pSess, "TyValidPenal8", m_szTyValidPenal8, &m_bTyValidPenal8);
                    AddXMLField(pSess, "TyValidPenal9", m_szTyValidPenal9, &m_bTyValidPenal9);
                    AddXMLField(pSess, "TyValidPenal10", m_szTyValidPenal10, &m_bTyValidPenal10);
                    AddXMLField(pSess, "TyValidPenal11", m_szTyValidPenal11, &m_bTyValidPenal11);
                    AddXMLField(pSess, "TyValidPenal12", m_szTyValidPenal12, &m_bTyValidPenal12);
                    AddXMLField(pSess, "TyValidPenal13", m_szTyValidPenal13, &m_bTyValidPenal13);
                    AddXMLField(pSess, "TyValidPenal14", m_szTyValidPenal14, &m_bTyValidPenal14);
                    AddXMLField(pSess, "TyValidPenal15", m_szTyValidPenal15, &m_bTyValidPenal15);
                    AddXMLField(pSess, "TyValidPenal16", m_szTyValidPenal16, &m_bTyValidPenal16);
                    AddXMLField(pSess, "TyValIra1", m_szTyValIra1, &m_bTyValIra1);
                    AddXMLField(pSess, "TyValIra2", m_szTyValIra2, &m_bTyValIra2);
                    AddXMLField(pSess, "TyValIra3", m_szTyValIra3, &m_bTyValIra3);
                    AddXMLField(pSess, "TyValIra4", m_szTyValIra4, &m_bTyValIra4);
                    AddXMLField(pSess, "TyValIra5", m_szTyValIra5, &m_bTyValIra5);
                    AddXMLField(pSess, "TyValIra6", m_szTyValIra6, &m_bTyValIra6);
                    AddXMLField(pSess, "TyValIra7", m_szTyValIra7, &m_bTyValIra7);
                    AddXMLField(pSess, "TyValIra8", m_szTyValIra8, &m_bTyValIra8);
                    AddXMLField(pSess, "TyValIra9", m_szTyValIra9, &m_bTyValIra9);
                    AddXMLField(pSess, "TyValIra10", m_szTyValIra10, &m_bTyValIra10);
                    AddXMLField(pSess, "RdaCtl1", m_szRdaCtl1, &m_bRdaCtl1);
                    AddXMLField(pSess, "RdaCurrCode", m_szRdaCurrCode, &m_bRdaCurrCode);
                    AddXMLField(pSess, "RdaRegion", m_szRdaRegion, &m_bRdaRegion);
                    AddXMLField(pSess, "RdaFiller2", m_szRdaFiller2, &m_bRdaFiller2);
                    AddXMLField(pSess, "RdaRateType", m_szRdaRateType, &m_bRdaRateType);
                    AddXMLField(pSess, "RdaPointer", m_szRdaPointer, &m_bRdaPointer);
                    AddXMLField(pSess, "RdaRateDesc", m_szRdaRateDesc, &m_bRdaRateDesc);
                    AddXMLField(pSess, "RdaCurTierDate", m_szRdaCurTierDate, &m_bRdaCurTierDate);
                    AddXMLField(pSess, "RdaCurTierAdjCd1", m_szRdaCurTierAdjCd1, &m_bRdaCurTierAdjCd1);
                    AddXMLField(pSess, "RdaCurTierAnnR1", m_szRdaCurTierAnnR1, &m_bRdaCurTierAnnR1);
                    AddXMLField(pSess, "RdaCurTierLmt1", m_szRdaCurTierLmt1, &m_bRdaCurTierLmt1);
                    AddXMLField(pSess, "RdaCurTierAdjCd2", m_szRdaCurTierAdjCd2, &m_bRdaCurTierAdjCd2);
                    AddXMLField(pSess, "RdaCurTierAnnR2", m_szRdaCurTierAnnR2, &m_bRdaCurTierAnnR2);
                    AddXMLField(pSess, "RdaCurTierLmt2", m_szRdaCurTierLmt2, &m_bRdaCurTierLmt2);
                    AddXMLField(pSess, "RdaCurTierAdjCd3", m_szRdaCurTierAdjCd3, &m_bRdaCurTierAdjCd3);
                    AddXMLField(pSess, "RdaCurTierAnnR3", m_szRdaCurTierAnnR3, &m_bRdaCurTierAnnR3);
                    AddXMLField(pSess, "RdaCurTierLmt3", m_szRdaCurTierLmt3, &m_bRdaCurTierLmt3);
                    AddXMLField(pSess, "RdaCurTierAdjCd4", m_szRdaCurTierAdjCd4, &m_bRdaCurTierAdjCd4);
                    AddXMLField(pSess, "RdaCurTierAnnR4", m_szRdaCurTierAnnR4, &m_bRdaCurTierAnnR4);
                    AddXMLField(pSess, "RdaCurTierLmt4", m_szRdaCurTierLmt4, &m_bRdaCurTierLmt4);
                    AddXMLField(pSess, "RdaCurTierAdjCd5", m_szRdaCurTierAdjCd5, &m_bRdaCurTierAdjCd5);
                    AddXMLField(pSess, "RdaCurTierAnnR5", m_szRdaCurTierAnnR5, &m_bRdaCurTierAnnR5);
                    AddXMLField(pSess, "RdaCurTierLmt5", m_szRdaCurTierLmt5, &m_bRdaCurTierLmt5);
                    AddXMLField(pSess, "RdaCurTierAdjCd6", m_szRdaCurTierAdjCd6, &m_bRdaCurTierAdjCd6);
                    AddXMLField(pSess, "RdaCurTierAnnR6", m_szRdaCurTierAnnR6, &m_bRdaCurTierAnnR6);
                    AddXMLField(pSess, "RdaCurTierLmt6", m_szRdaCurTierLmt6, &m_bRdaCurTierLmt6);
                    AddXMLField(pSess, "RdaCurTierAdjCd7", m_szRdaCurTierAdjCd7, &m_bRdaCurTierAdjCd7);
                    AddXMLField(pSess, "RdaCurTierAnnR7", m_szRdaCurTierAnnR7, &m_bRdaCurTierAnnR7);
                    AddXMLField(pSess, "RdaCurTierLmt7", m_szRdaCurTierLmt7, &m_bRdaCurTierLmt7);
                    AddXMLField(pSess, "RdaCurTierAdjCd8", m_szRdaCurTierAdjCd8, &m_bRdaCurTierAdjCd8);
                    AddXMLField(pSess, "RdaCurTierAnnR8", m_szRdaCurTierAnnR8, &m_bRdaCurTierAnnR8);
                    AddXMLField(pSess, "RdaCurTierLmt8", m_szRdaCurTierLmt8, &m_bRdaCurTierLmt8);
                    AddXMLField(pSess, "RdaCurTierAdjCd9", m_szRdaCurTierAdjCd9, &m_bRdaCurTierAdjCd9);
                    AddXMLField(pSess, "RdaCurTierAnnR9", m_szRdaCurTierAnnR9, &m_bRdaCurTierAnnR9);
                    AddXMLField(pSess, "RdaCurTierLmt9", m_szRdaCurTierLmt9, &m_bRdaCurTierLmt9);
                    AddXMLField(pSess, "RdaCurTierTerm", m_szRdaCurTierTerm, &m_bRdaCurTierTerm);
                    AddXMLField(pSess, "RdaCurTierIncr", m_szRdaCurTierIncr, &m_bRdaCurTierIncr);
                    AddXMLField(pSess, "RdaPrvTierDate", m_szRdaPrvTierDate, &m_bRdaPrvTierDate);
                    AddXMLField(pSess, "RdaPrvTierAdjCd1", m_szRdaPrvTierAdjCd1, &m_bRdaPrvTierAdjCd1);
                    AddXMLField(pSess, "RdaPrvTierAnnR1", m_szRdaPrvTierAnnR1, &m_bRdaPrvTierAnnR1);
                    AddXMLField(pSess, "RdaPrvTierLmt1", m_szRdaPrvTierLmt1, &m_bRdaPrvTierLmt1);
                    AddXMLField(pSess, "RdaPrvTierAdjCd2", m_szRdaPrvTierAdjCd2, &m_bRdaPrvTierAdjCd2);
                    AddXMLField(pSess, "RdaPrvTierAnnR2", m_szRdaPrvTierAnnR2, &m_bRdaPrvTierAnnR2);
                    AddXMLField(pSess, "RdaPrvTierLmt2", m_szRdaPrvTierLmt2, &m_bRdaPrvTierLmt2);
                    AddXMLField(pSess, "RdaPrvTierAdjCd3", m_szRdaPrvTierAdjCd3, &m_bRdaPrvTierAdjCd3);
                    AddXMLField(pSess, "RdaPrvTierAnnR3", m_szRdaPrvTierAnnR3, &m_bRdaPrvTierAnnR3);
                    AddXMLField(pSess, "RdaPrvTierLmt3", m_szRdaPrvTierLmt3, &m_bRdaPrvTierLmt3);
                    AddXMLField(pSess, "RdaPrvTierAdjCd4", m_szRdaPrvTierAdjCd4, &m_bRdaPrvTierAdjCd4);
                    AddXMLField(pSess, "RdaPrvTierAnnR4", m_szRdaPrvTierAnnR4, &m_bRdaPrvTierAnnR4);
                    AddXMLField(pSess, "RdaPrvTierLmt4", m_szRdaPrvTierLmt4, &m_bRdaPrvTierLmt4);
                    AddXMLField(pSess, "RdaPrvTierAdjCd5", m_szRdaPrvTierAdjCd5, &m_bRdaPrvTierAdjCd5);
                    AddXMLField(pSess, "RdaPrvTierAnnR5", m_szRdaPrvTierAnnR5, &m_bRdaPrvTierAnnR5);
                    AddXMLField(pSess, "RdaPrvTierLmt5", m_szRdaPrvTierLmt5, &m_bRdaPrvTierLmt5);
                    AddXMLField(pSess, "RdaPrvTierAdjCd6", m_szRdaPrvTierAdjCd6, &m_bRdaPrvTierAdjCd6);
                    AddXMLField(pSess, "RdaPrvTierAnnR6", m_szRdaPrvTierAnnR6, &m_bRdaPrvTierAnnR6);
                    AddXMLField(pSess, "RdaPrvTierLmt6", m_szRdaPrvTierLmt6, &m_bRdaPrvTierLmt6);
                    AddXMLField(pSess, "RdaPrvTierAdjCd7", m_szRdaPrvTierAdjCd7, &m_bRdaPrvTierAdjCd7);
                    AddXMLField(pSess, "RdaPrvTierAnnR7", m_szRdaPrvTierAnnR7, &m_bRdaPrvTierAnnR7);
                    AddXMLField(pSess, "RdaPrvTierLmt7", m_szRdaPrvTierLmt7, &m_bRdaPrvTierLmt7);
                    AddXMLField(pSess, "RdaPrvTierAdjCd8", m_szRdaPrvTierAdjCd8, &m_bRdaPrvTierAdjCd8);
                    AddXMLField(pSess, "RdaPrvTierAnnR8", m_szRdaPrvTierAnnR8, &m_bRdaPrvTierAnnR8);
                    AddXMLField(pSess, "RdaPrvTierLmt8", m_szRdaPrvTierLmt8, &m_bRdaPrvTierLmt8);
                    AddXMLField(pSess, "RdaPrvTierAdjCd9", m_szRdaPrvTierAdjCd9, &m_bRdaPrvTierAdjCd9);
                    AddXMLField(pSess, "RdaPrvTierAnnR9", m_szRdaPrvTierAnnR9, &m_bRdaPrvTierAnnR9);
                    AddXMLField(pSess, "RdaPrvTierLmt9", m_szRdaPrvTierLmt9, &m_bRdaPrvTierLmt9);
                    AddXMLField(pSess, "RdaPrvTierTerm", m_szRdaPrvTierTerm, &m_bRdaPrvTierTerm);
                    AddXMLField(pSess, "RdaPrvTierIncr", m_szRdaPrvTierIncr, &m_bRdaPrvTierIncr);
                    AddXMLField(pSess, "RdaCurBaseDate", m_szRdaCurBaseDate, &m_bRdaCurBaseDate);
                    AddXMLField(pSess, "RdaCurBaseAnnR", m_szRdaCurBaseAnnR, &m_bRdaCurBaseAnnR);
                    AddXMLField(pSess, "RdaPrvBaseDate", m_szRdaPrvBaseDate, &m_bRdaPrvBaseDate);
                    AddXMLField(pSess, "RdaPrvBaseAnnR", m_szRdaPrvBaseAnnR, &m_bRdaPrvBaseAnnR);
                    AddXMLField(pSess, "WorkErrCd", m_szWorkErrCd, &m_bWorkErrCd);
                    AddXMLField(pSess, "WorkErrText", m_szWorkErrText, &m_bWorkErrText);
                    AddXMLCloseRecord(pSess, "ProdRateData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "ProdRateData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "CsProductId", m_szCsProductId);
                    GetXMLField(pSess, "TyRegion", m_szTyRegion);
                    GetXMLField(pSess, "TyCurrCode", m_szTyCurrCode);
                    GetXMLField(pSess, "TyCtl1", m_szTyCtl1);
                    GetXMLField(pSess, "TyCtl2", m_szTyCtl2);
                    GetXMLField(pSess, "TyCtl3", m_szTyCtl3);
                    GetXMLField(pSess, "TyRecId", m_szTyRecId);
                    GetXMLField(pSess, "TyType", m_szTyType);
                    GetXMLField(pSess, "TyAcctCat", m_szTyAcctCat);
                    GetXMLField(pSess, "TyIntTypePntr", m_szTyIntTypePntr);
                    GetXMLField(pSess, "TyNegotiableFlag", m_szTyNegotiableFlag);
                    GetXMLField(pSess, "TyRisingRateCd", m_szTyRisingRateCd);
                    GetXMLField(pSess, "TySystemType", m_szTySystemType);
                    GetXMLField(pSess, "TyAnalAcct", m_szTyAnalAcct);
                    GetXMLField(pSess, "TyMinPntr", m_szTyMinPntr);
                    GetXMLField(pSess, "TyMinBal", m_szTyMinBal);
                    GetXMLField(pSess, "TyMaxPntr", m_szTyMaxPntr);
                    GetXMLField(pSess, "TyMaxBal", m_szTyMaxBal);
                    GetXMLField(pSess, "TyChrgTran1", m_szTyChrgTran1);
                    GetXMLField(pSess, "TyMatAutoRenew", m_szTyMatAutoRenew);
                    GetXMLField(pSess, "TyMatPrinDistr", m_szTyMatPrinDistr);
                    GetXMLField(pSess, "TyMatTerm", m_szTyMatTerm);
                    GetXMLField(pSess, "TyMatTermIncr", m_szTyMatTermIncr);
                    GetXMLField(pSess, "TyIntChng", m_szTyIntChng);
                    GetXMLField(pSess, "TyIntDistr", m_szTyIntDistr);
                    GetXMLField(pSess, "TyIntSched", m_szTyIntSched);
                    GetXMLField(pSess, "TyIntCyclFreq", m_szTyIntCyclFreq);
                    GetXMLField(pSess, "TyIntIncr", m_szTyIntIncr);
                    GetXMLField(pSess, "TyIntDay", m_szTyIntDay);
                    GetXMLField(pSess, "TyIraType", m_szTyIraType);
                    GetXMLField(pSess, "TyIraMaxContr", m_szTyIraMaxContr);
                    GetXMLField(pSess, "TyStmtPull", m_szTyStmtPull);
                    GetXMLField(pSess, "TyStmtCycle", m_szTyStmtCycle);
                    GetXMLField(pSess, "TyStmtMonthly", m_szTyStmtMonthly);
                    GetXMLField(pSess, "TySvcChgSched", m_szTySvcChgSched);
                    GetXMLField(pSess, "TySvcChgDayMo", m_szTySvcChgDayMo);
                    GetXMLField(pSess, "TySvcChgFreq", m_szTySvcChgFreq);
                    GetXMLField(pSess, "TyTranAcc", m_szTyTranAcc);
                    GetXMLField(pSess, "TyAuthAtmAch", m_szTyAuthAtmAch);
                    GetXMLField(pSess, "TyRateChngTerm", m_szTyRateChngTerm);
                    GetXMLField(pSess, "TyRateChngIncr", m_szTyRateChngIncr);
                    GetXMLField(pSess, "TyPenaltyType", m_szTyPenaltyType);
                    GetXMLField(pSess, "TyPenaltyDays", m_szTyPenaltyDays);
                    GetXMLField(pSess, "TyApAccrType", m_szTyApAccrType);
                    GetXMLField(pSess, "TyApYearBase", m_szTyApYearBase);
                    GetXMLField(pSess, "TyApMonthBase", m_szTyApMonthBase);
                    GetXMLField(pSess, "TyApTierRate", m_szTyApTierRate);
                    GetXMLField(pSess, "TyApMinRatePct", m_szTyApMinRatePct);
                    GetXMLField(pSess, "TyApMaxRatePct", m_szTyApMaxRatePct);
                    GetXMLField(pSess, "TyBrCode", m_szTyBrCode);
                    GetXMLField(pSess, "TyBrRatePct", m_szTyBrRatePct);
                    GetXMLField(pSess, "TyBrTerm", m_szTyBrTerm);
                    GetXMLField(pSess, "TyBrIncr", m_szTyBrIncr);
                    GetXMLField(pSess, "TyCombineCheck", m_szTyCombineCheck);
                    GetXMLField(pSess, "TyIraAccountFlag", m_szTyIraAccountFlag);
                    GetXMLField(pSess, "TyGraceDays", m_szTyGraceDays);
                    GetXMLField(pSess, "TyTypeOfferedFlag", m_szTyTypeOfferedFlag);
                    GetXMLField(pSess, "TyMatAnnivDa", m_szTyMatAnnivDa);
                    GetXMLField(pSess, "TyTierTypePtr", m_szTyTierTypePtr);
                    GetXMLField(pSess, "TyMinIntPct", m_szTyMinIntPct);
                    GetXMLField(pSess, "TyMaxIntPct", m_szTyMaxIntPct);
                    GetXMLField(pSess, "TyMinTermDays", m_szTyMinTermDays);
                    GetXMLField(pSess, "TyMinTermMo", m_szTyMinTermMo);
                    GetXMLField(pSess, "TyMaxTermDays", m_szTyMaxTermDays);
                    GetXMLField(pSess, "TyMaxTermMo", m_szTyMaxTermMo);
                    GetXMLField(pSess, "StwsLuDesc30", m_szStwsLuDesc30);
                    GetXMLField(pSess, "TyValAccr1", m_szTyValAccr1);
                    GetXMLField(pSess, "TyValAccr2", m_szTyValAccr2);
                    GetXMLField(pSess, "TyValAccr3", m_szTyValAccr3);
                    GetXMLField(pSess, "TyValAccr4", m_szTyValAccr4);
                    GetXMLField(pSess, "TyValAccr5", m_szTyValAccr5);
                    GetXMLField(pSess, "TyValAccr6", m_szTyValAccr6);
                    GetXMLField(pSess, "TyValAccr7", m_szTyValAccr7);
                    GetXMLField(pSess, "TyValAccr8", m_szTyValAccr8);
                    GetXMLField(pSess, "TyValAccr9", m_szTyValAccr9);
                    GetXMLField(pSess, "TyValidYr1", m_szTyValidYr1);
                    GetXMLField(pSess, "TyValidYr2", m_szTyValidYr2);
                    GetXMLField(pSess, "TyValidYr3", m_szTyValidYr3);
                    GetXMLField(pSess, "TyValidYr4", m_szTyValidYr4);
                    GetXMLField(pSess, "TyValidMth1", m_szTyValidMth1);
                    GetXMLField(pSess, "TyValidMth2", m_szTyValidMth2);
                    GetXMLField(pSess, "TyValidMth3", m_szTyValidMth3);
                    GetXMLField(pSess, "TyValidMth4", m_szTyValidMth4);
                    GetXMLField(pSess, "TyValidPenal1", m_szTyValidPenal1);
                    GetXMLField(pSess, "TyValidPenal2", m_szTyValidPenal2);
                    GetXMLField(pSess, "TyValidPenal3", m_szTyValidPenal3);
                    GetXMLField(pSess, "TyValidPenal4", m_szTyValidPenal4);
                    GetXMLField(pSess, "TyValidPenal5", m_szTyValidPenal5);
                    GetXMLField(pSess, "TyValidPenal6", m_szTyValidPenal6);
                    GetXMLField(pSess, "TyValidPenal7", m_szTyValidPenal7);
                    GetXMLField(pSess, "TyValidPenal8", m_szTyValidPenal8);
                    GetXMLField(pSess, "TyValidPenal9", m_szTyValidPenal9);
                    GetXMLField(pSess, "TyValidPenal10", m_szTyValidPenal10);
                    GetXMLField(pSess, "TyValidPenal11", m_szTyValidPenal11);
                    GetXMLField(pSess, "TyValidPenal12", m_szTyValidPenal12);
                    GetXMLField(pSess, "TyValidPenal13", m_szTyValidPenal13);
                    GetXMLField(pSess, "TyValidPenal14", m_szTyValidPenal14);
                    GetXMLField(pSess, "TyValidPenal15", m_szTyValidPenal15);
                    GetXMLField(pSess, "TyValidPenal16", m_szTyValidPenal16);
                    GetXMLField(pSess, "TyValIra1", m_szTyValIra1);
                    GetXMLField(pSess, "TyValIra2", m_szTyValIra2);
                    GetXMLField(pSess, "TyValIra3", m_szTyValIra3);
                    GetXMLField(pSess, "TyValIra4", m_szTyValIra4);
                    GetXMLField(pSess, "TyValIra5", m_szTyValIra5);
                    GetXMLField(pSess, "TyValIra6", m_szTyValIra6);
                    GetXMLField(pSess, "TyValIra7", m_szTyValIra7);
                    GetXMLField(pSess, "TyValIra8", m_szTyValIra8);
                    GetXMLField(pSess, "TyValIra9", m_szTyValIra9);
                    GetXMLField(pSess, "TyValIra10", m_szTyValIra10);
                    GetXMLField(pSess, "RdaCtl1", m_szRdaCtl1);
                    GetXMLField(pSess, "RdaCurrCode", m_szRdaCurrCode);
                    GetXMLField(pSess, "RdaRegion", m_szRdaRegion);
                    GetXMLField(pSess, "RdaFiller2", m_szRdaFiller2);
                    GetXMLField(pSess, "RdaRateType", m_szRdaRateType);
                    GetXMLField(pSess, "RdaPointer", m_szRdaPointer);
                    GetXMLField(pSess, "RdaRateDesc", m_szRdaRateDesc);
                    GetXMLField(pSess, "RdaCurTierDate", m_szRdaCurTierDate);
                    GetXMLField(pSess, "RdaCurTierAdjCd1", m_szRdaCurTierAdjCd1);
                    GetXMLField(pSess, "RdaCurTierAnnR1", m_szRdaCurTierAnnR1);
                    GetXMLField(pSess, "RdaCurTierLmt1", m_szRdaCurTierLmt1);
                    GetXMLField(pSess, "RdaCurTierAdjCd2", m_szRdaCurTierAdjCd2);
                    GetXMLField(pSess, "RdaCurTierAnnR2", m_szRdaCurTierAnnR2);
                    GetXMLField(pSess, "RdaCurTierLmt2", m_szRdaCurTierLmt2);
                    GetXMLField(pSess, "RdaCurTierAdjCd3", m_szRdaCurTierAdjCd3);
                    GetXMLField(pSess, "RdaCurTierAnnR3", m_szRdaCurTierAnnR3);
                    GetXMLField(pSess, "RdaCurTierLmt3", m_szRdaCurTierLmt3);
                    GetXMLField(pSess, "RdaCurTierAdjCd4", m_szRdaCurTierAdjCd4);
                    GetXMLField(pSess, "RdaCurTierAnnR4", m_szRdaCurTierAnnR4);
                    GetXMLField(pSess, "RdaCurTierLmt4", m_szRdaCurTierLmt4);
                    GetXMLField(pSess, "RdaCurTierAdjCd5", m_szRdaCurTierAdjCd5);
                    GetXMLField(pSess, "RdaCurTierAnnR5", m_szRdaCurTierAnnR5);
                    GetXMLField(pSess, "RdaCurTierLmt5", m_szRdaCurTierLmt5);
                    GetXMLField(pSess, "RdaCurTierAdjCd6", m_szRdaCurTierAdjCd6);
                    GetXMLField(pSess, "RdaCurTierAnnR6", m_szRdaCurTierAnnR6);
                    GetXMLField(pSess, "RdaCurTierLmt6", m_szRdaCurTierLmt6);
                    GetXMLField(pSess, "RdaCurTierAdjCd7", m_szRdaCurTierAdjCd7);
                    GetXMLField(pSess, "RdaCurTierAnnR7", m_szRdaCurTierAnnR7);
                    GetXMLField(pSess, "RdaCurTierLmt7", m_szRdaCurTierLmt7);
                    GetXMLField(pSess, "RdaCurTierAdjCd8", m_szRdaCurTierAdjCd8);
                    GetXMLField(pSess, "RdaCurTierAnnR8", m_szRdaCurTierAnnR8);
                    GetXMLField(pSess, "RdaCurTierLmt8", m_szRdaCurTierLmt8);
                    GetXMLField(pSess, "RdaCurTierAdjCd9", m_szRdaCurTierAdjCd9);
                    GetXMLField(pSess, "RdaCurTierAnnR9", m_szRdaCurTierAnnR9);
                    GetXMLField(pSess, "RdaCurTierLmt9", m_szRdaCurTierLmt9);
                    GetXMLField(pSess, "RdaCurTierTerm", m_szRdaCurTierTerm);
                    GetXMLField(pSess, "RdaCurTierIncr", m_szRdaCurTierIncr);
                    GetXMLField(pSess, "RdaPrvTierDate", m_szRdaPrvTierDate);
                    GetXMLField(pSess, "RdaPrvTierAdjCd1", m_szRdaPrvTierAdjCd1);
                    GetXMLField(pSess, "RdaPrvTierAnnR1", m_szRdaPrvTierAnnR1);
                    GetXMLField(pSess, "RdaPrvTierLmt1", m_szRdaPrvTierLmt1);
                    GetXMLField(pSess, "RdaPrvTierAdjCd2", m_szRdaPrvTierAdjCd2);
                    GetXMLField(pSess, "RdaPrvTierAnnR2", m_szRdaPrvTierAnnR2);
                    GetXMLField(pSess, "RdaPrvTierLmt2", m_szRdaPrvTierLmt2);
                    GetXMLField(pSess, "RdaPrvTierAdjCd3", m_szRdaPrvTierAdjCd3);
                    GetXMLField(pSess, "RdaPrvTierAnnR3", m_szRdaPrvTierAnnR3);
                    GetXMLField(pSess, "RdaPrvTierLmt3", m_szRdaPrvTierLmt3);
                    GetXMLField(pSess, "RdaPrvTierAdjCd4", m_szRdaPrvTierAdjCd4);
                    GetXMLField(pSess, "RdaPrvTierAnnR4", m_szRdaPrvTierAnnR4);
                    GetXMLField(pSess, "RdaPrvTierLmt4", m_szRdaPrvTierLmt4);
                    GetXMLField(pSess, "RdaPrvTierAdjCd5", m_szRdaPrvTierAdjCd5);
                    GetXMLField(pSess, "RdaPrvTierAnnR5", m_szRdaPrvTierAnnR5);
                    GetXMLField(pSess, "RdaPrvTierLmt5", m_szRdaPrvTierLmt5);
                    GetXMLField(pSess, "RdaPrvTierAdjCd6", m_szRdaPrvTierAdjCd6);
                    GetXMLField(pSess, "RdaPrvTierAnnR6", m_szRdaPrvTierAnnR6);
                    GetXMLField(pSess, "RdaPrvTierLmt6", m_szRdaPrvTierLmt6);
                    GetXMLField(pSess, "RdaPrvTierAdjCd7", m_szRdaPrvTierAdjCd7);
                    GetXMLField(pSess, "RdaPrvTierAnnR7", m_szRdaPrvTierAnnR7);
                    GetXMLField(pSess, "RdaPrvTierLmt7", m_szRdaPrvTierLmt7);
                    GetXMLField(pSess, "RdaPrvTierAdjCd8", m_szRdaPrvTierAdjCd8);
                    GetXMLField(pSess, "RdaPrvTierAnnR8", m_szRdaPrvTierAnnR8);
                    GetXMLField(pSess, "RdaPrvTierLmt8", m_szRdaPrvTierLmt8);
                    GetXMLField(pSess, "RdaPrvTierAdjCd9", m_szRdaPrvTierAdjCd9);
                    GetXMLField(pSess, "RdaPrvTierAnnR9", m_szRdaPrvTierAnnR9);
                    GetXMLField(pSess, "RdaPrvTierLmt9", m_szRdaPrvTierLmt9);
                    GetXMLField(pSess, "RdaPrvTierTerm", m_szRdaPrvTierTerm);
                    GetXMLField(pSess, "RdaPrvTierIncr", m_szRdaPrvTierIncr);
                    GetXMLField(pSess, "RdaCurBaseDate", m_szRdaCurBaseDate);
                    GetXMLField(pSess, "RdaCurBaseAnnR", m_szRdaCurBaseAnnR);
                    GetXMLField(pSess, "RdaPrvBaseDate", m_szRdaPrvBaseDate);
                    GetXMLField(pSess, "RdaPrvBaseAnnR", m_szRdaPrvBaseAnnR);
                    GetXMLField(pSess, "WorkErrCd", m_szWorkErrCd);
                    GetXMLField(pSess, "WorkErrText", m_szWorkErrText);
                    CloseXMLRecord(pSess, "ProdRateData");
                };
            }
        };

        AsdProdRateData  CProdRateData[32];
        AsdProdRateData *ProdRateData[32];
        
        //**************** End AsdProdRateData Definition ****************
        
    };

    AsdWVSTPRRT CWVSTPRRT;
    AsdWVSTPRRT *WVSTPRRT;
    
    //**************** End AsdWVSTPRRT Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdWVPCSTRTData Definition ****************

typedef AsdWVPCSTRTData *LPWVPCSTRT;
typedef AsdWVPCSTRTData::AsdTSHeader *LPWVPCSTRT_TSHeader;
typedef AsdWVPCSTRTData::AsdWVSTPRRT *LPWVPCSTRT_WVSTPRRT;
typedef AsdWVPCSTRTData::AsdWVSTPRRT::AsdProdRateData *LPWVPCSTRT_WVSTPRRT_ProdRateData;
typedef AsdWVPCSTRTData::AsdTSMDA *LPWVPCSTRT_TSMDA;
typedef AsdWVPCSTRTData::AsdTSMDA::AsdMdaTrmMsg *LPWVPCSTRT_TSMDA_MdaTrmMsg;
typedef AsdWVPCSTRTData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPWVPCSTRT_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdWVPCSTRTData_H

#ifndef AsdSDPCAIHSData_H
#define AsdSDPCAIHSData_H

#include <stdlib.h>
#ifdef  AsdSDPCAIHS_INTEGRITY_STRING
#undef  AsdSDPCAIHS_INTEGRITY_STRING
#endif
#define AsdSDPCAIHS_INTEGRITY_STRING        ""

#ifdef  AsdSDPCAIHS_CRC_STRING
#undef  AsdSDPCAIHS_CRC_STRING
#endif
#define AsdSDPCAIHS_CRC_STRING "213408461"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCAIHSData Definition ****************
//                 ALS Tran History

//                 SDPCAIHSData.h generated by AceGen2 ver. 2.5.09

class AsdSDPCAIHSData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCAIHSData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCAIHS.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCAIHS_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDAMTRII = &CSDAMTRII;
        SDAMHSIO = &CSDAMHSIO;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCAIHSData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDAMTRII.Reinit();
            CSDAMHSIO.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCAIHS_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAIHS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDAMTRII.Save(&m_Sess);
        CSDAMHSIO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCAIHS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDAMTRII.Load(&m_Sess);
                        CSDAMHSIO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCAIHS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAIHS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDAMTRII.Save(&m_Sess);
        CSDAMHSIO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCAIHS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDAMTRII.Load(&m_Sess);
                        CSDAMHSIO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCAIHS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAIHS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDAMTRII Definition ****************
    //                 SD  INPUT INTERFACE WITH ALS                                
    
    //    SDAMTRII.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:19
    class AsdSDAMTRII
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRtCtl1;
        char      m_szRtCtl1[2+1];
        bool      m_bRtCtl2;
        char      m_szRtCtl2[3+1];
        bool      m_bRtCtl3;
        char      m_szRtCtl3[3+1];
        bool      m_bRtCtl4;
        char      m_szRtCtl4[4+1];
        bool      m_bRtAcctNum;
        char      m_szRtAcctNum[14+1];
        bool      m_bTrEffDate;
        char      m_szTrEffDate[8+1];
        bool      m_bTrExtSeq;
        char      m_szTrExtSeq[4+1];
        bool      m_bTrIntSeq;
        char      m_szTrIntSeq[4+1];
        bool      m_bTrRevCd;
        char      m_szTrRevCd[1+1];
        bool      m_bKeyedReadFlag;
        char      m_szKeyedReadFlag[1+1];
        bool      m_bSdInterfaceInd;
        char      m_szSdInterfaceInd[3+1];
        bool      m_bSdAmtLow;
        char      m_szSdAmtLow[17+1];
        bool      m_bSdAmtHigh;
        char      m_szSdAmtHigh[17+1];
        bool      m_bSdDateLow;
        char      m_szSdDateLow[10+1];
        bool      m_bSdDateHigh;
        char      m_szSdDateHigh[10+1];
        bool      m_bSelectFlag;
        char      m_szSelectFlag[1+1];
        bool      m_bSdProcessDate;
        char      m_szSdProcessDate[8+1];
        bool      m_bFill0;
        char      m_szFill0[30+1];
    
      public:
        long      m_lIndex;

        AsdSDAMTRII ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRtCtl1 = false;
            strcpy(m_szRtCtl1, "");
            m_bRtCtl2 = false;
            strcpy(m_szRtCtl2, "");
            m_bRtCtl3 = false;
            strcpy(m_szRtCtl3, "");
            m_bRtCtl4 = false;
            strcpy(m_szRtCtl4, "");
            m_bRtAcctNum = false;
            strcpy(m_szRtAcctNum, "");
            m_bTrEffDate = false;
            strcpy(m_szTrEffDate, "00000000");
            m_bTrExtSeq = false;
            strcpy(m_szTrExtSeq, "0000");
            m_bTrIntSeq = false;
            strcpy(m_szTrIntSeq, "0000");
            m_bTrRevCd = false;
            strcpy(m_szTrRevCd, "");
            m_bKeyedReadFlag = false;
            strcpy(m_szKeyedReadFlag, "");
            m_bSdInterfaceInd = false;
            strcpy(m_szSdInterfaceInd, "");
            m_bSdAmtLow = false;
            strcpy(m_szSdAmtLow, "+0000000000000.00");
            m_bSdAmtHigh = false;
            strcpy(m_szSdAmtHigh, "+0000000000000.00");
            m_bSdDateLow = false;
            strcpy(m_szSdDateLow, "+000000000");
            m_bSdDateHigh = false;
            strcpy(m_szSdDateHigh, "+000000000");
            m_bSelectFlag = false;
            strcpy(m_szSelectFlag, "");
            m_bSdProcessDate = false;
            strcpy(m_szSdProcessDate, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRtCtl1 = false;
            strcpy(m_szRtCtl1, "");
            m_bRtCtl2 = false;
            strcpy(m_szRtCtl2, "");
            m_bRtCtl3 = false;
            strcpy(m_szRtCtl3, "");
            m_bRtCtl4 = false;
            strcpy(m_szRtCtl4, "");
            m_bRtAcctNum = false;
            strcpy(m_szRtAcctNum, "");
            m_bTrEffDate = false;
            strcpy(m_szTrEffDate, "00000000");
            m_bTrExtSeq = false;
            strcpy(m_szTrExtSeq, "0000");
            m_bTrIntSeq = false;
            strcpy(m_szTrIntSeq, "0000");
            m_bTrRevCd = false;
            strcpy(m_szTrRevCd, "");
            m_bKeyedReadFlag = false;
            strcpy(m_szKeyedReadFlag, "");
            m_bSdInterfaceInd = false;
            strcpy(m_szSdInterfaceInd, "");
            m_bSdAmtLow = false;
            strcpy(m_szSdAmtLow, "+0000000000000.00");
            m_bSdAmtHigh = false;
            strcpy(m_szSdAmtHigh, "+0000000000000.00");
            m_bSdDateLow = false;
            strcpy(m_szSdDateLow, "+000000000");
            m_bSdDateHigh = false;
            strcpy(m_szSdDateHigh, "+000000000");
            m_bSelectFlag = false;
            strcpy(m_szSelectFlag, "");
            m_bSdProcessDate = false;
            strcpy(m_szSdProcessDate, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
        }

        
        //    INSTITUTION-DEFINED FIRST LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl1 () { return 2; };
        RWCString RtCtl1 (void)
        {
            return m_szRtCtl1;
        }
        long RtCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl1, sizeof(m_szRtCtl1), &m_bRtCtl1);
        }
        
        //    INSTITUTION-DEFINED SECOND LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl2 () { return 3; };
        RWCString RtCtl2 (void)
        {
            return m_szRtCtl2;
        }
        long RtCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl2, sizeof(m_szRtCtl2), &m_bRtCtl2);
        }
        
        //    INSTITUTION-DEFINED THIRD LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl3 () { return 3; };
        RWCString RtCtl3 (void)
        {
            return m_szRtCtl3;
        }
        long RtCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl3, sizeof(m_szRtCtl3), &m_bRtCtl3);
        }
        
        //    INSTITUTION-DEFINED FOURTH LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl4 () { return 4; };
        RWCString RtCtl4 (void)
        {
            return m_szRtCtl4;
        }
        long RtCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl4, sizeof(m_szRtCtl4), &m_bRtCtl4);
        }
        
        //    NUMBER THAT UNIQUELY IDENTIFIES AN ACCOUNT.
        long lRtAcctNum () { return 14; };
        RWCString RtAcctNum (void)
        {
            return m_szRtAcctNum;
        }
        long RtAcctNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAcctNum, sizeof(m_szRtAcctNum), &m_bRtAcctNum);
        }
        
        //    EFFECTIVE DATE OF THE TRANSACTION.
        long lTrEffDate () { return 8; };
        RWCString TrEffDate (void)
        {
            return m_szTrEffDate;
        }
        long TrEffDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrEffDate, sizeof(m_szTrEffDate), &m_bTrEffDate);
        }
        
        //    EXTERNAL POSTING SEQUENCE OF THIS TRANSACTION.
        long lTrExtSeq () { return 4; };
        RWCString TrExtSeq (void)
        {
            return m_szTrExtSeq;
        }
        long TrExtSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrExtSeq, sizeof(m_szTrExtSeq), &m_bTrExtSeq);
        }
        
        //    INTERNAL POSTING SEQUENCE OF THIS TRANSACTION.
        long lTrIntSeq () { return 4; };
        RWCString TrIntSeq (void)
        {
            return m_szTrIntSeq;
        }
        long TrIntSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrIntSeq, sizeof(m_szTrIntSeq), &m_bTrIntSeq);
        }
        
        //    TRANSACTION POSTING REVERSAL CODE
        long lTrRevCd () { return 1; };
        RWCString TrRevCd (void)
        {
            return m_szTrRevCd;
        }
        long TrRevCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrRevCd, sizeof(m_szTrRevCd), &m_bTrRevCd);
        }
        
        //    INDICTES WE ARE DOING A KEYED READ
        long lKeyedReadFlag () { return 1; };
        RWCString KeyedReadFlag (void)
        {
            return m_szKeyedReadFlag;
        }
        long KeyedReadFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyedReadFlag, sizeof(m_szKeyedReadFlag), &m_bKeyedReadFlag);
        }
        
        //    INDICATES WHETHER THE APPLICATION INTERFACES TO SD .
        long lSdInterfaceInd () { return 3; };
        RWCString SdInterfaceInd (void)
        {
            return m_szSdInterfaceInd;
        }
        long SdInterfaceInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdInterfaceInd, sizeof(m_szSdInterfaceInd), &m_bSdInterfaceInd);
        }
        
        //    LOW DOLLAR AMOUNT IN TRANSACTION SEARCH RANGE.
        long lSdAmtLow () { return 17; };
        RWCString SdAmtLow (void)
        {
            return AceZeroSupp(m_szSdAmtLow, &m_szSuppressBuff[0]);
        }
        RWCString SdAmtLowRaw (void)
        {
            return m_szSdAmtLow;
        }
        long SdAmtLow (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdAmtLow, sizeof(m_szSdAmtLow), &m_bSdAmtLow);
        }
        
        //    HIGH DOLLAR AMOUNT IN TRANSACTION SEARCH RANGE.
        long lSdAmtHigh () { return 17; };
        RWCString SdAmtHigh (void)
        {
            return AceZeroSupp(m_szSdAmtHigh, &m_szSuppressBuff[0]);
        }
        RWCString SdAmtHighRaw (void)
        {
            return m_szSdAmtHigh;
        }
        long SdAmtHigh (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdAmtHigh, sizeof(m_szSdAmtHigh), &m_bSdAmtHigh);
        }
        
        //    LOW POST DATE IN TRANSACTION SEARCH RANGE.
        long lSdDateLow () { return 10; };
        RWCString SdDateLow (void)
        {
            return AceZeroSupp(m_szSdDateLow, &m_szSuppressBuff[0]);
        }
        RWCString SdDateLowRaw (void)
        {
            return m_szSdDateLow;
        }
        long SdDateLow (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdDateLow, sizeof(m_szSdDateLow), &m_bSdDateLow);
        }
        
        //    HIGH POST DATE IN TRANSACTION SEARCH RANGE.
        long lSdDateHigh () { return 10; };
        RWCString SdDateHigh (void)
        {
            return AceZeroSupp(m_szSdDateHigh, &m_szSuppressBuff[0]);
        }
        RWCString SdDateHighRaw (void)
        {
            return m_szSdDateHigh;
        }
        long SdDateHigh (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdDateHigh, sizeof(m_szSdDateHigh), &m_bSdDateHigh);
        }
        
        //    IDENTIFIES THE TYPE OF TRAN REQUESTED.
        long lSelectFlag () { return 1; };
        RWCString SelectFlag (void)
        {
            return m_szSelectFlag;
        }
        long SelectFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szSelectFlag, sizeof(m_szSelectFlag), &m_bSelectFlag);
        }
        
        //    CURRENT PROCESSING DATE.
        long lSdProcessDate () { return 8; };
        RWCString SdProcessDate (void)
        {
            return m_szSdProcessDate;
        }
        long SdProcessDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdProcessDate, sizeof(m_szSdProcessDate), &m_bSdProcessDate);
        }
        
        long lFill0 () { return 30; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRtCtl1) return true;
            if (m_bRtCtl2) return true;
            if (m_bRtCtl3) return true;
            if (m_bRtCtl4) return true;
            if (m_bRtAcctNum) return true;
            if (m_bTrEffDate) return true;
            if (m_bTrExtSeq) return true;
            if (m_bTrIntSeq) return true;
            if (m_bTrRevCd) return true;
            if (m_bKeyedReadFlag) return true;
            if (m_bSdInterfaceInd) return true;
            if (m_bSdAmtLow) return true;
            if (m_bSdAmtHigh) return true;
            if (m_bSdDateLow) return true;
            if (m_bSdDateHigh) return true;
            if (m_bSelectFlag) return true;
            if (m_bSdProcessDate) return true;
            if (m_bFill0) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDAMTRII", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RtCtl1", m_szRtCtl1, &m_bRtCtl1);
                AddXMLField(pSess, "RtCtl2", m_szRtCtl2, &m_bRtCtl2);
                AddXMLField(pSess, "RtCtl3", m_szRtCtl3, &m_bRtCtl3);
                AddXMLField(pSess, "RtCtl4", m_szRtCtl4, &m_bRtCtl4);
                AddXMLField(pSess, "RtAcctNum", m_szRtAcctNum, &m_bRtAcctNum);
                AddXMLField(pSess, "TrEffDate", m_szTrEffDate, &m_bTrEffDate);
                AddXMLField(pSess, "TrExtSeq", m_szTrExtSeq, &m_bTrExtSeq);
                AddXMLField(pSess, "TrIntSeq", m_szTrIntSeq, &m_bTrIntSeq);
                AddXMLField(pSess, "TrRevCd", m_szTrRevCd, &m_bTrRevCd);
                AddXMLField(pSess, "KeyedReadFlag", m_szKeyedReadFlag, &m_bKeyedReadFlag);
                AddXMLField(pSess, "SdInterfaceInd", m_szSdInterfaceInd, &m_bSdInterfaceInd);
                AddXMLField(pSess, "SdAmtLow", m_szSdAmtLow, &m_bSdAmtLow);
                AddXMLField(pSess, "SdAmtHigh", m_szSdAmtHigh, &m_bSdAmtHigh);
                AddXMLField(pSess, "SdDateLow", m_szSdDateLow, &m_bSdDateLow);
                AddXMLField(pSess, "SdDateHigh", m_szSdDateHigh, &m_bSdDateHigh);
                AddXMLField(pSess, "SelectFlag", m_szSelectFlag, &m_bSelectFlag);
                AddXMLField(pSess, "SdProcessDate", m_szSdProcessDate, &m_bSdProcessDate);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLCloseRecord(pSess, "SDAMTRII");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDAMTRII", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RtCtl1", m_szRtCtl1);
                GetXMLField(pSess, "RtCtl2", m_szRtCtl2);
                GetXMLField(pSess, "RtCtl3", m_szRtCtl3);
                GetXMLField(pSess, "RtCtl4", m_szRtCtl4);
                GetXMLField(pSess, "RtAcctNum", m_szRtAcctNum);
                GetXMLField(pSess, "TrEffDate", m_szTrEffDate);
                GetXMLField(pSess, "TrExtSeq", m_szTrExtSeq);
                GetXMLField(pSess, "TrIntSeq", m_szTrIntSeq);
                GetXMLField(pSess, "TrRevCd", m_szTrRevCd);
                GetXMLField(pSess, "KeyedReadFlag", m_szKeyedReadFlag);
                GetXMLField(pSess, "SdInterfaceInd", m_szSdInterfaceInd);
                GetXMLField(pSess, "SdAmtLow", m_szSdAmtLow);
                GetXMLField(pSess, "SdAmtHigh", m_szSdAmtHigh);
                GetXMLField(pSess, "SdDateLow", m_szSdDateLow);
                GetXMLField(pSess, "SdDateHigh", m_szSdDateHigh);
                GetXMLField(pSess, "SelectFlag", m_szSelectFlag);
                GetXMLField(pSess, "SdProcessDate", m_szSdProcessDate);
                GetXMLField(pSess, "Fill0", m_szFill0);
                CloseXMLRecord(pSess, "SDAMTRII");
            };
        }
    };

    AsdSDAMTRII CSDAMTRII;
    AsdSDAMTRII *SDAMTRII;
    
    //**************** End AsdSDAMTRII Definition ****************

    
    //**************** Start AsdSDAMHSIO Definition ****************
    //                 SD  INTERFACE WITH ALS - HISTORY                            
    
    //    SDAMHSIO.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:19
    class AsdSDAMHSIO
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRtCtlKey;
        char      m_szRtCtlKey[13+1];
        bool      m_bTrAcctNum;
        char      m_szTrAcctNum[15+1];
        bool      m_bTrRecCnt;
        char      m_szTrRecCnt[4+1];
        bool      m_bMoreRecordsPresent;
        char      m_szMoreRecordsPresent[1+1];
        bool      m_bMoreAllocPayoffData;
        char      m_szMoreAllocPayoffData[1+1];
    
      public:
        long      m_lIndex;

        AsdSDAMHSIO ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRtCtlKey = false;
            strcpy(m_szRtCtlKey, "0000000000000");
            m_bTrAcctNum = false;
            strcpy(m_szTrAcctNum, "000000000000000");
            m_bTrRecCnt = false;
            strcpy(m_szTrRecCnt, "+000");
            m_bMoreRecordsPresent = false;
            strcpy(m_szMoreRecordsPresent, "");
            m_bMoreAllocPayoffData = false;
            strcpy(m_szMoreAllocPayoffData, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 25; lOccurs++)
            {
                TrComData[lOccurs]  = &CTrComData[lOccurs];
                CTrComData[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRtCtlKey = false;
            strcpy(m_szRtCtlKey, "0000000000000");
            m_bTrAcctNum = false;
            strcpy(m_szTrAcctNum, "000000000000000");
            m_bTrRecCnt = false;
            strcpy(m_szTrRecCnt, "+000");
            m_bMoreRecordsPresent = false;
            strcpy(m_szMoreRecordsPresent, "");
            m_bMoreAllocPayoffData = false;
            strcpy(m_szMoreAllocPayoffData, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 25; lOccurs++)
            {
                TrComData[lOccurs]  = &CTrComData[lOccurs];
                CTrComData[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    INSTITUTION DEFINED CONTROLS (1-4) FOR THE ACCOUNT.
        long lRtCtlKey () { return 13; };
        RWCString RtCtlKey (void)
        {
            return AceZeroSupp(m_szRtCtlKey, &m_szSuppressBuff[0]);
        }
        RWCString RtCtlKeyRaw (void)
        {
            return m_szRtCtlKey;
        }
        long RtCtlKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtlKey, sizeof(m_szRtCtlKey), &m_bRtCtlKey);
        }
        
        //    NUMBER THAT UNIQUELY IDENTIFIES AN ACCOUNT.
        long lTrAcctNum () { return 15; };
        RWCString TrAcctNum (void)
        {
            return AceZeroSupp(m_szTrAcctNum, &m_szSuppressBuff[0]);
        }
        RWCString TrAcctNumRaw (void)
        {
            return m_szTrAcctNum;
        }
        long TrAcctNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrAcctNum, sizeof(m_szTrAcctNum), &m_bTrAcctNum);
        }
        
        //    NUMBER OF TRANSACTION HISTORY RECORDS IN THE DAG.
        long lTrRecCnt () { return 4; };
        RWCString TrRecCnt (void)
        {
            return AceZeroSupp(m_szTrRecCnt, &m_szSuppressBuff[0]);
        }
        RWCString TrRecCntRaw (void)
        {
            return m_szTrRecCnt;
        }
        long TrRecCnt (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrRecCnt, sizeof(m_szTrRecCnt), &m_bTrRecCnt);
        }
        
        //    INDICATES WHETHER ADDITIONAL HISTORY RECORDS EXIST.
        long lMoreRecordsPresent () { return 1; };
        RWCString MoreRecordsPresent (void)
        {
            return m_szMoreRecordsPresent;
        }
        long MoreRecordsPresent (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreRecordsPresent, sizeof(m_szMoreRecordsPresent), &m_bMoreRecordsPresent);
        }
        
        //    INDICATES WHETHER ADDITIONAL ALLOC PAYOFF DATA EXISTS.
        long lMoreAllocPayoffData () { return 1; };
        RWCString MoreAllocPayoffData (void)
        {
            return m_szMoreAllocPayoffData;
        }
        long MoreAllocPayoffData (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreAllocPayoffData, sizeof(m_szMoreAllocPayoffData), &m_bMoreAllocPayoffData);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRtCtlKey) return true;
            if (m_bTrAcctNum) return true;
            if (m_bTrRecCnt) return true;
            if (m_bMoreRecordsPresent) return true;
            if (m_bMoreAllocPayoffData) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 25; lOccurs++)
            {
                if(CTrComData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDAMHSIO", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RtCtlKey", m_szRtCtlKey, &m_bRtCtlKey);
                AddXMLField(pSess, "TrAcctNum", m_szTrAcctNum, &m_bTrAcctNum);
                AddXMLField(pSess, "TrRecCnt", m_szTrRecCnt, &m_bTrRecCnt);
                AddXMLField(pSess, "MoreRecordsPresent", m_szMoreRecordsPresent, &m_bMoreRecordsPresent);
                AddXMLField(pSess, "MoreAllocPayoffData", m_szMoreAllocPayoffData, &m_bMoreAllocPayoffData);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 25; lOccurs++)
                {
                    CTrComData[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDAMHSIO");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDAMHSIO", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RtCtlKey", m_szRtCtlKey);
                GetXMLField(pSess, "TrAcctNum", m_szTrAcctNum);
                GetXMLField(pSess, "TrRecCnt", m_szTrRecCnt);
                GetXMLField(pSess, "MoreRecordsPresent", m_szMoreRecordsPresent);
                GetXMLField(pSess, "MoreAllocPayoffData", m_szMoreAllocPayoffData);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 25; lOccurs++)
                {
                    CTrComData[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDAMHSIO");
            };
        }
        
        //**************** Start AsdTrComData Definition ****************
        //                 COMMON DATA WHICH WAS NOT CAPTURED.
        
        class AsdTrComData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bTrEffDate;
            char      m_szTrEffDate[8+1];
            bool      m_bTrExtSeq;
            char      m_szTrExtSeq[4+1];
            bool      m_bTrIntSeq;
            char      m_szTrIntSeq[4+1];
            bool      m_bTrRevCd;
            char      m_szTrRevCd[1+1];
            bool      m_bTrOrigProcDate;
            char      m_szTrOrigProcDate[9+1];
            bool      m_bTrTranCd;
            char      m_szTrTranCd[4+1];
            bool      m_bTrTranType;
            char      m_szTrTranType[1+1];
            bool      m_bTrTranAmt;
            char      m_szTrTranAmt[17+1];
            bool      m_bTrPbalAftPost;
            char      m_szTrPbalAftPost[17+1];
            bool      m_bTrTranDesc;
            char      m_szTrTranDesc[56+1];
            bool      m_bTrProcDate;
            char      m_szTrProcDate[9+1];
            bool      m_bTrChkNum;
            char      m_szTrChkNum[10+1];
            bool      m_bTrOper;
            char      m_szTrOper[8+1];
            bool      m_bTrBatch;
            char      m_szTrBatch[6+1];
            bool      m_bTrSeq;
            char      m_szTrSeq[6+1];
            bool      m_bFill0;
            char      m_szFill0[14+1];
            bool      m_bTranFormatType;
            char      m_szTranFormatType[3+1];
            bool      m_bNumberOfDetails;
            char      m_szNumberOfDetails[4+1];
            bool      m_bDtAmt2;
            char      m_szDtAmt2[17+1];
            bool      m_bDtAmt3;
            char      m_szDtAmt3[17+1];
            bool      m_bDtAmt4;
            char      m_szDtAmt4[17+1];
        
          public:
            long      m_lIndex;

            AsdTrComData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bTrEffDate = false;
                strcpy(m_szTrEffDate, "00000000");
                m_bTrExtSeq = false;
                strcpy(m_szTrExtSeq, "0000");
                m_bTrIntSeq = false;
                strcpy(m_szTrIntSeq, "0000");
                m_bTrRevCd = false;
                strcpy(m_szTrRevCd, "");
                m_bTrOrigProcDate = false;
                strcpy(m_szTrOrigProcDate, "000000000");
                m_bTrTranCd = false;
                strcpy(m_szTrTranCd, "");
                m_bTrTranType = false;
                strcpy(m_szTrTranType, "");
                m_bTrTranAmt = false;
                strcpy(m_szTrTranAmt, "+0000000000000.00");
                m_bTrPbalAftPost = false;
                strcpy(m_szTrPbalAftPost, "+0000000000000.00");
                m_bTrTranDesc = false;
                strcpy(m_szTrTranDesc, "");
                m_bTrProcDate = false;
                strcpy(m_szTrProcDate, "000000000");
                m_bTrChkNum = false;
                strcpy(m_szTrChkNum, "");
                m_bTrOper = false;
                strcpy(m_szTrOper, "");
                m_bTrBatch = false;
                strcpy(m_szTrBatch, "+00000");
                m_bTrSeq = false;
                strcpy(m_szTrSeq, "+00000");
                m_bFill0 = false;
                strcpy(m_szFill0, "");
                m_bTranFormatType = false;
                strcpy(m_szTranFormatType, "");
                m_bNumberOfDetails = false;
                strcpy(m_szNumberOfDetails, "+000");
                m_bDtAmt2 = false;
                strcpy(m_szDtAmt2, "+0000000000000.00");
                m_bDtAmt3 = false;
                strcpy(m_szDtAmt3, "+0000000000000.00");
                m_bDtAmt4 = false;
                strcpy(m_szDtAmt4, "+0000000000000.00");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 24; lOccurs++)
                {
                    TranDetailInfo[lOccurs] = &CTranDetailInfo[lOccurs];

                    CTranDetailInfo[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    EFFECTIVE DATE OF THE TRANSACTION.
            long lTrEffDate () { return 8; };
            RWCString TrEffDate (void)
            {
                return m_szTrEffDate;
            }
            long TrEffDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrEffDate, sizeof(m_szTrEffDate), &m_bTrEffDate);
            }
            
            //    EXTERNAL POSTING SEQUENCE OF THIS TRANSACTION.
            long lTrExtSeq () { return 4; };
            RWCString TrExtSeq (void)
            {
                return m_szTrExtSeq;
            }
            long TrExtSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrExtSeq, sizeof(m_szTrExtSeq), &m_bTrExtSeq);
            }
            
            //    INTERNAL POSTING SEQUENCE OF THIS TRANSACTION.
            long lTrIntSeq () { return 4; };
            RWCString TrIntSeq (void)
            {
                return m_szTrIntSeq;
            }
            long TrIntSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrIntSeq, sizeof(m_szTrIntSeq), &m_bTrIntSeq);
            }
            
            //    TRANSACTION POSTING REVERSAL CODE
            long lTrRevCd () { return 1; };
            RWCString TrRevCd (void)
            {
                return m_szTrRevCd;
            }
            long TrRevCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrRevCd, sizeof(m_szTrRevCd), &m_bTrRevCd);
            }
            
            //    DATE WHEN THE TRANSACTION WAS PROCESSED.
            long lTrOrigProcDate () { return 9; };
            RWCString TrOrigProcDate (void)
            {
                return AceZeroSupp(m_szTrOrigProcDate, &m_szSuppressBuff[0]);
            }
            RWCString TrOrigProcDateRaw (void)
            {
                return m_szTrOrigProcDate;
            }
            long TrOrigProcDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrOrigProcDate, sizeof(m_szTrOrigProcDate), &m_bTrOrigProcDate);
            }
            
            //    UNIQUELY IDENTIFIES THE TRANSACTION.
            long lTrTranCd () { return 4; };
            RWCString TrTranCd (void)
            {
                return m_szTrTranCd;
            }
            long TrTranCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrTranCd, sizeof(m_szTrTranCd), &m_bTrTranCd);
            }
            
            //    IDENTIFIES THE TYPE OF TRANSACTION.
            long lTrTranType () { return 1; };
            RWCString TrTranType (void)
            {
                return m_szTrTranType;
            }
            long TrTranType (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrTranType, sizeof(m_szTrTranType), &m_bTrTranType);
            }
            
            //    TOTAL AMOUNT POSTED FOR THIS TRANSACTION.
            long lTrTranAmt () { return 17; };
            RWCString TrTranAmt (void)
            {
                return AceZeroSupp(m_szTrTranAmt, &m_szSuppressBuff[0]);
            }
            RWCString TrTranAmtRaw (void)
            {
                return m_szTrTranAmt;
            }
            long TrTranAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrTranAmt, sizeof(m_szTrTranAmt), &m_bTrTranAmt);
            }
            
            //    PRINCIPAL AMOUNT AFTER POSTING.
            long lTrPbalAftPost () { return 17; };
            RWCString TrPbalAftPost (void)
            {
                return AceZeroSupp(m_szTrPbalAftPost, &m_szSuppressBuff[0]);
            }
            RWCString TrPbalAftPostRaw (void)
            {
                return m_szTrPbalAftPost;
            }
            long TrPbalAftPost (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrPbalAftPost, sizeof(m_szTrPbalAftPost), &m_bTrPbalAftPost);
            }
            
            //    TRANSACTION DESCRIPTION.
            long lTrTranDesc () { return 56; };
            RWCString TrTranDesc (void)
            {
                return m_szTrTranDesc;
            }
            long TrTranDesc (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrTranDesc, sizeof(m_szTrTranDesc), &m_bTrTranDesc);
            }
            
            //    THE SYSTEM DATE WHEN THIS ITEM WAS PROCESSED
            long lTrProcDate () { return 9; };
            RWCString TrProcDate (void)
            {
                return AceZeroSupp(m_szTrProcDate, &m_szSuppressBuff[0]);
            }
            RWCString TrProcDateRaw (void)
            {
                return m_szTrProcDate;
            }
            long TrProcDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrProcDate, sizeof(m_szTrProcDate), &m_bTrProcDate);
            }
            
            //    THE CHECK NUMBER CAPTURED.
            long lTrChkNum () { return 10; };
            RWCString TrChkNum (void)
            {
                return m_szTrChkNum;
            }
            long TrChkNum (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrChkNum, sizeof(m_szTrChkNum), &m_bTrChkNum);
            }
            
            //    THE OPERATOR LOGGED ON WHEN THIS TRANSACTION WAS ENTERED.
            long lTrOper () { return 8; };
            RWCString TrOper (void)
            {
                return m_szTrOper;
            }
            long TrOper (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrOper, sizeof(m_szTrOper), &m_bTrOper);
            }
            
            //    THE BATCH OF ORIGIN.
            long lTrBatch () { return 6; };
            RWCString TrBatch (void)
            {
                return AceZeroSupp(m_szTrBatch, &m_szSuppressBuff[0]);
            }
            RWCString TrBatchRaw (void)
            {
                return m_szTrBatch;
            }
            long TrBatch (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrBatch, sizeof(m_szTrBatch), &m_bTrBatch);
            }
            
            //    THE SEQUENCE NUMBER WITHIN THE BATCH.
            long lTrSeq () { return 6; };
            RWCString TrSeq (void)
            {
                return AceZeroSupp(m_szTrSeq, &m_szSuppressBuff[0]);
            }
            RWCString TrSeqRaw (void)
            {
                return m_szTrSeq;
            }
            long TrSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrSeq, sizeof(m_szTrSeq), &m_bTrSeq);
            }
            
            long lFill0 () { return 14; };
            RWCString Fill0 (void)
            {
                return m_szFill0;
            }
            long Fill0 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
            }
            
            //    IDENTIFIES THE SPECIFIC HISTORY AREA FORMAT
            long lTranFormatType () { return 3; };
            RWCString TranFormatType (void)
            {
                return m_szTranFormatType;
            }
            long TranFormatType (const RWCString& rwc)
            {
                return SetString(rwc, m_szTranFormatType, sizeof(m_szTranFormatType), &m_bTranFormatType);
            }
            
            //    NUMBER OF DETAILS SENT
            long lNumberOfDetails () { return 4; };
            RWCString NumberOfDetails (void)
            {
                return AceZeroSupp(m_szNumberOfDetails, &m_szSuppressBuff[0]);
            }
            RWCString NumberOfDetailsRaw (void)
            {
                return m_szNumberOfDetails;
            }
            long NumberOfDetails (const RWCString& rwc)
            {
                return SetString(rwc, m_szNumberOfDetails, sizeof(m_szNumberOfDetails), &m_bNumberOfDetails);
            }
            
            //    TRANSACTION DETAIL AMT 2
            long lDtAmt2 () { return 17; };
            RWCString DtAmt2 (void)
            {
                return AceZeroSupp(m_szDtAmt2, &m_szSuppressBuff[0]);
            }
            RWCString DtAmt2Raw (void)
            {
                return m_szDtAmt2;
            }
            long DtAmt2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szDtAmt2, sizeof(m_szDtAmt2), &m_bDtAmt2);
            }
            
            //    TRANSACTION DETAIL AMT 3
            long lDtAmt3 () { return 17; };
            RWCString DtAmt3 (void)
            {
                return AceZeroSupp(m_szDtAmt3, &m_szSuppressBuff[0]);
            }
            RWCString DtAmt3Raw (void)
            {
                return m_szDtAmt3;
            }
            long DtAmt3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szDtAmt3, sizeof(m_szDtAmt3), &m_bDtAmt3);
            }
            
            //    TRANSACTION DETAIL AMT 4
            long lDtAmt4 () { return 17; };
            RWCString DtAmt4 (void)
            {
                return AceZeroSupp(m_szDtAmt4, &m_szSuppressBuff[0]);
            }
            RWCString DtAmt4Raw (void)
            {
                return m_szDtAmt4;
            }
            long DtAmt4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szDtAmt4, sizeof(m_szDtAmt4), &m_bDtAmt4);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bTrEffDate) return true;
                if (m_bTrExtSeq) return true;
                if (m_bTrIntSeq) return true;
                if (m_bTrRevCd) return true;
                if (m_bTrOrigProcDate) return true;
                if (m_bTrTranCd) return true;
                if (m_bTrTranType) return true;
                if (m_bTrTranAmt) return true;
                if (m_bTrPbalAftPost) return true;
                if (m_bTrTranDesc) return true;
                if (m_bTrProcDate) return true;
                if (m_bTrChkNum) return true;
                if (m_bTrOper) return true;
                if (m_bTrBatch) return true;
                if (m_bTrSeq) return true;
                if (m_bFill0) return true;
                if (m_bTranFormatType) return true;
                if (m_bNumberOfDetails) return true;
                if (m_bDtAmt2) return true;
                if (m_bDtAmt3) return true;
                if (m_bDtAmt4) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 24; lOccurs++)
                {
                    if(CTranDetailInfo[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "TrComData", m_lIndex);
                    AddXMLField(pSess, "TrEffDate", m_szTrEffDate, &m_bTrEffDate);
                    AddXMLField(pSess, "TrExtSeq", m_szTrExtSeq, &m_bTrExtSeq);
                    AddXMLField(pSess, "TrIntSeq", m_szTrIntSeq, &m_bTrIntSeq);
                    AddXMLField(pSess, "TrRevCd", m_szTrRevCd, &m_bTrRevCd);
                    AddXMLField(pSess, "TrOrigProcDate", m_szTrOrigProcDate, &m_bTrOrigProcDate);
                    AddXMLField(pSess, "TrTranCd", m_szTrTranCd, &m_bTrTranCd);
                    AddXMLField(pSess, "TrTranType", m_szTrTranType, &m_bTrTranType);
                    AddXMLField(pSess, "TrTranAmt", m_szTrTranAmt, &m_bTrTranAmt);
                    AddXMLField(pSess, "TrPbalAftPost", m_szTrPbalAftPost, &m_bTrPbalAftPost);
                    AddXMLField(pSess, "TrTranDesc", m_szTrTranDesc, &m_bTrTranDesc);
                    AddXMLField(pSess, "TrProcDate", m_szTrProcDate, &m_bTrProcDate);
                    AddXMLField(pSess, "TrChkNum", m_szTrChkNum, &m_bTrChkNum);
                    AddXMLField(pSess, "TrOper", m_szTrOper, &m_bTrOper);
                    AddXMLField(pSess, "TrBatch", m_szTrBatch, &m_bTrBatch);
                    AddXMLField(pSess, "TrSeq", m_szTrSeq, &m_bTrSeq);
                    AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                    AddXMLField(pSess, "TranFormatType", m_szTranFormatType, &m_bTranFormatType);
                    AddXMLField(pSess, "NumberOfDetails", m_szNumberOfDetails, &m_bNumberOfDetails);
                    AddXMLField(pSess, "DtAmt2", m_szDtAmt2, &m_bDtAmt2);
                    AddXMLField(pSess, "DtAmt3", m_szDtAmt3, &m_bDtAmt3);
                    AddXMLField(pSess, "DtAmt4", m_szDtAmt4, &m_bDtAmt4);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 24; lOccurs++)
                    {
                        CTranDetailInfo[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "TrComData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "TrComData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "TrEffDate", m_szTrEffDate);
                    GetXMLField(pSess, "TrExtSeq", m_szTrExtSeq);
                    GetXMLField(pSess, "TrIntSeq", m_szTrIntSeq);
                    GetXMLField(pSess, "TrRevCd", m_szTrRevCd);
                    GetXMLField(pSess, "TrOrigProcDate", m_szTrOrigProcDate);
                    GetXMLField(pSess, "TrTranCd", m_szTrTranCd);
                    GetXMLField(pSess, "TrTranType", m_szTrTranType);
                    GetXMLField(pSess, "TrTranAmt", m_szTrTranAmt);
                    GetXMLField(pSess, "TrPbalAftPost", m_szTrPbalAftPost);
                    GetXMLField(pSess, "TrTranDesc", m_szTrTranDesc);
                    GetXMLField(pSess, "TrProcDate", m_szTrProcDate);
                    GetXMLField(pSess, "TrChkNum", m_szTrChkNum);
                    GetXMLField(pSess, "TrOper", m_szTrOper);
                    GetXMLField(pSess, "TrBatch", m_szTrBatch);
                    GetXMLField(pSess, "TrSeq", m_szTrSeq);
                    GetXMLField(pSess, "Fill0", m_szFill0);
                    GetXMLField(pSess, "TranFormatType", m_szTranFormatType);
                    GetXMLField(pSess, "NumberOfDetails", m_szNumberOfDetails);
                    GetXMLField(pSess, "DtAmt2", m_szDtAmt2);
                    GetXMLField(pSess, "DtAmt3", m_szDtAmt3);
                    GetXMLField(pSess, "DtAmt4", m_szDtAmt4);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 24; lOccurs++)
                    {
                        CTranDetailInfo[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "TrComData");
                };
            }
            
            //**************** Start AsdTranDetailInfo Definition ****************
            //                 TRAN DETAIL INFORMATION
            
            class AsdTranDetailInfo
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bTrType;
                char      m_szTrType[3+1];
                bool      m_bTrCode;
                char      m_szTrCode[2+1];
                bool      m_bDtAmt;
                char      m_szDtAmt[17+1];
                bool      m_bDtAssess;
                char      m_szDtAssess[1+1];
            
              public:
                long      m_lIndex;

                AsdTranDetailInfo ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bTrType = false;
                    strcpy(m_szTrType, "");
                    m_bTrCode = false;
                    strcpy(m_szTrCode, "");
                    m_bDtAmt = false;
                    strcpy(m_szDtAmt, "+0000000000000.00");
                    m_bDtAssess = false;
                    strcpy(m_szDtAssess, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    TRANSACTION TYPE
                long lTrType () { return 3; };
                RWCString TrType (void)
                {
                    return m_szTrType;
                }
                long TrType (const RWCString& rwc)
                {
                    return SetString(rwc, m_szTrType, sizeof(m_szTrType), &m_bTrType);
                }
                
                //    TRANSACTION CODE
                long lTrCode () { return 2; };
                RWCString TrCode (void)
                {
                    return m_szTrCode;
                }
                long TrCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szTrCode, sizeof(m_szTrCode), &m_bTrCode);
                }
                
                //    TRANSACTION DETAIL AMT 1
                long lDtAmt () { return 17; };
                RWCString DtAmt (void)
                {
                    return AceZeroSupp(m_szDtAmt, &m_szSuppressBuff[0]);
                }
                RWCString DtAmtRaw (void)
                {
                    return m_szDtAmt;
                }
                long DtAmt (const RWCString& rwc)
                {
                    return SetString(rwc, m_szDtAmt, sizeof(m_szDtAmt), &m_bDtAmt);
                }
                
                //    DETAIL ADVANCE ASSESS FEE IND.
                long lDtAssess () { return 1; };
                RWCString DtAssess (void)
                {
                    return m_szDtAssess;
                }
                long DtAssess (const RWCString& rwc)
                {
                    return SetString(rwc, m_szDtAssess, sizeof(m_szDtAssess), &m_bDtAssess);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bTrType) return true;
                    if (m_bTrCode) return true;
                    if (m_bDtAmt) return true;
                    if (m_bDtAssess) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "TranDetailInfo", m_lIndex);
                        AddXMLField(pSess, "TrType", m_szTrType, &m_bTrType);
                        AddXMLField(pSess, "TrCode", m_szTrCode, &m_bTrCode);
                        AddXMLField(pSess, "DtAmt", m_szDtAmt, &m_bDtAmt);
                        AddXMLField(pSess, "DtAssess", m_szDtAssess, &m_bDtAssess);
                        AddXMLCloseRecord(pSess, "TranDetailInfo");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "TranDetailInfo", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "TrType", m_szTrType);
                        GetXMLField(pSess, "TrCode", m_szTrCode);
                        GetXMLField(pSess, "DtAmt", m_szDtAmt);
                        GetXMLField(pSess, "DtAssess", m_szDtAssess);
                        CloseXMLRecord(pSess, "TranDetailInfo");
                    };
                }
            };

            AsdTranDetailInfo  CTranDetailInfo[24];
            AsdTranDetailInfo *TranDetailInfo[24];
            
            //**************** End AsdTranDetailInfo Definition ****************
            
        };

        AsdTrComData  CTrComData[25];
        AsdTrComData *TrComData[25];
        
        //**************** End AsdTrComData Definition ****************
        
    };

    AsdSDAMHSIO CSDAMHSIO;
    AsdSDAMHSIO *SDAMHSIO;
    
    //**************** End AsdSDAMHSIO Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCAIHSData Definition ****************

typedef AsdSDPCAIHSData *LPSDPCAIHS;
typedef AsdSDPCAIHSData::AsdTSHeader *LPSDPCAIHS_TSHeader;
typedef AsdSDPCAIHSData::AsdSDAMTRII *LPSDPCAIHS_SDAMTRII;
typedef AsdSDPCAIHSData::AsdSDAMHSIO *LPSDPCAIHS_SDAMHSIO;
typedef AsdSDPCAIHSData::AsdSDAMHSIO::AsdTrComData *LPSDPCAIHS_SDAMHSIO_TrComData;
typedef AsdSDPCAIHSData::AsdSDAMHSIO::AsdTrComData::AsdTranDetailInfo *LPSDPCAIHS_SDAMHSIO_TrComData_TranDetailInfo;
typedef AsdSDPCAIHSData::AsdTSMDA *LPSDPCAIHS_TSMDA;
typedef AsdSDPCAIHSData::AsdTSMDA::AsdMdaTrmMsg *LPSDPCAIHS_TSMDA_MdaTrmMsg;
typedef AsdSDPCAIHSData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCAIHS_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCAIHSData_H

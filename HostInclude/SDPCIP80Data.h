#ifndef AsdSDPCIP80Data_H
#define AsdSDPCIP80Data_H

#include <stdlib.h>
#ifdef  AsdSDPCIP80_INTEGRITY_STRING
#undef  AsdSDPCIP80_INTEGRITY_STRING
#endif
#define AsdSDPCIP80_INTEGRITY_STRING        ""

#ifdef  AsdSDPCIP80_CRC_STRING
#undef  AsdSDPCIP80_CRC_STRING
#endif
#define AsdSDPCIP80_CRC_STRING "3426483602"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCIP80Data Definition ****************
//                 IM Monetary

//                 SDPCIP80Data.h generated by AceGen2 ver. 2.5.09

class AsdSDPCIP80Data
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCIP80Data ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCIP80.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCIP80_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDIMCMMI = &CSDIMCMMI;
        SDIMMYMI = &CSDIMMYMI;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCIP80Data ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDIMCMMI.Reinit();
            CSDIMMYMI.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCIP80_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIP80_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDIMCMMI.Save(&m_Sess);
        CSDIMMYMI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIP80", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDIMCMMI.Load(&m_Sess);
                        CSDIMMYMI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIP80");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIP80_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDIMCMMI.Save(&m_Sess);
        CSDIMMYMI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIP80", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDIMCMMI.Load(&m_Sess);
                        CSDIMMYMI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIP80");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIP80_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDIMCMMI Definition ****************
    //                 SD STANDARD COMMMUNICATION DAG FOR IM                       
    
    //    SDIMCMMI.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/18/02 09:05:20
    class AsdSDIMCMMI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bCtl1;
        char      m_szCtl1[2+1];
        bool      m_bCtl2;
        char      m_szCtl2[3+1];
        bool      m_bCtl3;
        char      m_szCtl3[3+1];
        bool      m_bCtl4;
        char      m_szCtl4[4+1];
        bool      m_bAcctNbr;
        char      m_szAcctNbr[10+1];
        bool      m_bTotalAmt;
        char      m_szTotalAmt[19+1];
        bool      m_bDept;
        char      m_szDept[5+1];
        bool      m_bBatch;
        char      m_szBatch[5+1];
        bool      m_bUserTranCd;
        char      m_szUserTranCd[4+1];
        bool      m_bTranCd;
        char      m_szTranCd[2+1];
        bool      m_bIcrSelData;
        char      m_szIcrSelData[4+1];
        bool      m_bProcessFlag;
        char      m_szProcessFlag[1+1];
        bool      m_bSecProcOpt;
        char      m_szSecProcOpt[1+1];
        bool      m_bSaveAccCcyyddd;
        char      m_szSaveAccCcyyddd[8+1];
        bool      m_bSaveSeq;
        char      m_szSaveSeq[8+1];
        bool      m_bClosingTransFlag;
        char      m_szClosingTransFlag[1+1];
        bool      m_bBankPaysClosingInt;
        char      m_szBankPaysClosingInt[1+1];
        bool      m_bOutstandingCksFlag;
        char      m_szOutstandingCksFlag[1+1];
        bool      m_bSavUserTranCd;
        char      m_szSavUserTranCd[4+1];
        bool      m_bLoanUserTranCd;
        char      m_szLoanUserTranCd[4+1];
        bool      m_bOutstandingChkAmt;
        char      m_szOutstandingChkAmt[19+1];
        bool      m_bInterestTypeFlag;
        char      m_szInterestTypeFlag[1+1];
    
      public:
        long      m_lIndex;

        AsdSDIMCMMI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCtl1 = false;
            strcpy(m_szCtl1, "");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "");
            m_bAcctNbr = false;
            strcpy(m_szAcctNbr, "");
            m_bTotalAmt = false;
            strcpy(m_szTotalAmt, "000000000000000.000");
            m_bDept = false;
            strcpy(m_szDept, "");
            m_bBatch = false;
            strcpy(m_szBatch, "");
            m_bUserTranCd = false;
            strcpy(m_szUserTranCd, "");
            m_bTranCd = false;
            strcpy(m_szTranCd, "");
            m_bIcrSelData = false;
            strcpy(m_szIcrSelData, "");
            m_bProcessFlag = false;
            strcpy(m_szProcessFlag, "");
            m_bSecProcOpt = false;
            strcpy(m_szSecProcOpt, "");
            m_bSaveAccCcyyddd = false;
            strcpy(m_szSaveAccCcyyddd, "+0000000");
            m_bSaveSeq = false;
            strcpy(m_szSaveSeq, "+0000000");
            m_bClosingTransFlag = false;
            strcpy(m_szClosingTransFlag, "");
            m_bBankPaysClosingInt = false;
            strcpy(m_szBankPaysClosingInt, "");
            m_bOutstandingCksFlag = false;
            strcpy(m_szOutstandingCksFlag, "");
            m_bSavUserTranCd = false;
            strcpy(m_szSavUserTranCd, "");
            m_bLoanUserTranCd = false;
            strcpy(m_szLoanUserTranCd, "");
            m_bOutstandingChkAmt = false;
            strcpy(m_szOutstandingChkAmt, "000000000000000.000");
            m_bInterestTypeFlag = false;
            strcpy(m_szInterestTypeFlag, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCtl1 = false;
            strcpy(m_szCtl1, "");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "");
            m_bAcctNbr = false;
            strcpy(m_szAcctNbr, "");
            m_bTotalAmt = false;
            strcpy(m_szTotalAmt, "000000000000000.000");
            m_bDept = false;
            strcpy(m_szDept, "");
            m_bBatch = false;
            strcpy(m_szBatch, "");
            m_bUserTranCd = false;
            strcpy(m_szUserTranCd, "");
            m_bTranCd = false;
            strcpy(m_szTranCd, "");
            m_bIcrSelData = false;
            strcpy(m_szIcrSelData, "");
            m_bProcessFlag = false;
            strcpy(m_szProcessFlag, "");
            m_bSecProcOpt = false;
            strcpy(m_szSecProcOpt, "");
            m_bSaveAccCcyyddd = false;
            strcpy(m_szSaveAccCcyyddd, "+0000000");
            m_bSaveSeq = false;
            strcpy(m_szSaveSeq, "+0000000");
            m_bClosingTransFlag = false;
            strcpy(m_szClosingTransFlag, "");
            m_bBankPaysClosingInt = false;
            strcpy(m_szBankPaysClosingInt, "");
            m_bOutstandingCksFlag = false;
            strcpy(m_szOutstandingCksFlag, "");
            m_bSavUserTranCd = false;
            strcpy(m_szSavUserTranCd, "");
            m_bLoanUserTranCd = false;
            strcpy(m_szLoanUserTranCd, "");
            m_bOutstandingChkAmt = false;
            strcpy(m_szOutstandingChkAmt, "000000000000000.000");
            m_bInterestTypeFlag = false;
            strcpy(m_szInterestTypeFlag, "");
        }

        
        //    STANDARD CONTROL 1
        long lCtl1 () { return 2; };
        RWCString Ctl1 (void)
        {
            return m_szCtl1;
        }
        long Ctl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl1, sizeof(m_szCtl1), &m_bCtl1);
        }
        
        //    STANDARD CONTROL 2
        long lCtl2 () { return 3; };
        RWCString Ctl2 (void)
        {
            return m_szCtl2;
        }
        long Ctl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl2, sizeof(m_szCtl2), &m_bCtl2);
        }
        
        //    STANDARD CONTROL 3
        long lCtl3 () { return 3; };
        RWCString Ctl3 (void)
        {
            return m_szCtl3;
        }
        long Ctl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl3, sizeof(m_szCtl3), &m_bCtl3);
        }
        
        //    STANDARD CONTROL 4
        long lCtl4 () { return 4; };
        RWCString Ctl4 (void)
        {
            return m_szCtl4;
        }
        long Ctl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl4, sizeof(m_szCtl4), &m_bCtl4);
        }
        
        //    STANDARD ACCOUNT NUMBER
        long lAcctNbr () { return 10; };
        RWCString AcctNbr (void)
        {
            return m_szAcctNbr;
        }
        long AcctNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcctNbr, sizeof(m_szAcctNbr), &m_bAcctNbr);
        }
        
        //    TOTAL AMOUNT
        long lTotalAmt () { return 19; };
        RWCString TotalAmt (void)
        {
            return m_szTotalAmt;
        }
        long TotalAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szTotalAmt, sizeof(m_szTotalAmt), &m_bTotalAmt);
        }
        
        //    DEPARTMENT
        long lDept () { return 5; };
        RWCString Dept (void)
        {
            return m_szDept;
        }
        long Dept (const RWCString& rwc)
        {
            return SetString(rwc, m_szDept, sizeof(m_szDept), &m_bDept);
        }
        
        //    STANDARD BATCH
        long lBatch () { return 5; };
        RWCString Batch (void)
        {
            return m_szBatch;
        }
        long Batch (const RWCString& rwc)
        {
            return SetString(rwc, m_szBatch, sizeof(m_szBatch), &m_bBatch);
        }
        
        //    STANDARD USER TRAN CODE
        long lUserTranCd () { return 4; };
        RWCString UserTranCd (void)
        {
            return m_szUserTranCd;
        }
        long UserTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserTranCd, sizeof(m_szUserTranCd), &m_bUserTranCd);
        }
        
        //    STANDARD TRAN CODE
        long lTranCd () { return 2; };
        RWCString TranCd (void)
        {
            return m_szTranCd;
        }
        long TranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranCd, sizeof(m_szTranCd), &m_bTranCd);
        }
        
        //    STANDARD ICR SELECT DATA
        long lIcrSelData () { return 4; };
        RWCString IcrSelData (void)
        {
            return m_szIcrSelData;
        }
        long IcrSelData (const RWCString& rwc)
        {
            return SetString(rwc, m_szIcrSelData, sizeof(m_szIcrSelData), &m_bIcrSelData);
        }
        
        //    PROCESSING CONTROL FLAG
        long lProcessFlag () { return 1; };
        RWCString ProcessFlag (void)
        {
            return m_szProcessFlag;
        }
        long ProcessFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szProcessFlag, sizeof(m_szProcessFlag), &m_bProcessFlag);
        }
        
        //    SECURITY PROCESSING OPTION
        long lSecProcOpt () { return 1; };
        RWCString SecProcOpt (void)
        {
            return m_szSecProcOpt;
        }
        long SecProcOpt (const RWCString& rwc)
        {
            return SetString(rwc, m_szSecProcOpt, sizeof(m_szSecProcOpt), &m_bSecProcOpt);
        }
        
        //    SAVE ACC CCYYDDD
        long lSaveAccCcyyddd () { return 8; };
        RWCString SaveAccCcyyddd (void)
        {
            return AceZeroSupp(m_szSaveAccCcyyddd, &m_szSuppressBuff[0]);
        }
        RWCString SaveAccCcyydddRaw (void)
        {
            return m_szSaveAccCcyyddd;
        }
        long SaveAccCcyyddd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveAccCcyyddd, sizeof(m_szSaveAccCcyyddd), &m_bSaveAccCcyyddd);
        }
        
        //    SAVE SEQUENCE
        long lSaveSeq () { return 8; };
        RWCString SaveSeq (void)
        {
            return AceZeroSupp(m_szSaveSeq, &m_szSuppressBuff[0]);
        }
        RWCString SaveSeqRaw (void)
        {
            return m_szSaveSeq;
        }
        long SaveSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveSeq, sizeof(m_szSaveSeq), &m_bSaveSeq);
        }
        
        //    CLOSING TRANSACTION FLAG
        long lClosingTransFlag () { return 1; };
        RWCString ClosingTransFlag (void)
        {
            return m_szClosingTransFlag;
        }
        long ClosingTransFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szClosingTransFlag, sizeof(m_szClosingTransFlag), &m_bClosingTransFlag);
        }
        
        //    BK PAYS ACCRUES INT AT CLOSING
        long lBankPaysClosingInt () { return 1; };
        RWCString BankPaysClosingInt (void)
        {
            return m_szBankPaysClosingInt;
        }
        long BankPaysClosingInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szBankPaysClosingInt, sizeof(m_szBankPaysClosingInt), &m_bBankPaysClosingInt);
        }
        
        //    INDICATES THE ACCT HAS OUTSTANDING CHECKS
        long lOutstandingCksFlag () { return 1; };
        RWCString OutstandingCksFlag (void)
        {
            return m_szOutstandingCksFlag;
        }
        long OutstandingCksFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szOutstandingCksFlag, sizeof(m_szOutstandingCksFlag), &m_bOutstandingCksFlag);
        }
        
        //    SAVINGS BAL WAS RETURNED ON THE CLOSING INQ
        long lSavUserTranCd () { return 4; };
        RWCString SavUserTranCd (void)
        {
            return m_szSavUserTranCd;
        }
        long SavUserTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSavUserTranCd, sizeof(m_szSavUserTranCd), &m_bSavUserTranCd);
        }
        
        //    LOAN BALANCE WAS RETURNED ON THE CLOSING INQ
        long lLoanUserTranCd () { return 4; };
        RWCString LoanUserTranCd (void)
        {
            return m_szLoanUserTranCd;
        }
        long LoanUserTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanUserTranCd, sizeof(m_szLoanUserTranCd), &m_bLoanUserTranCd);
        }
        
        //    TOTAL OUTSTANDING CHECKS AMOUNT FOR CLOSINGS
        long lOutstandingChkAmt () { return 19; };
        RWCString OutstandingChkAmt (void)
        {
            return m_szOutstandingChkAmt;
        }
        long OutstandingChkAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szOutstandingChkAmt, sizeof(m_szOutstandingChkAmt), &m_bOutstandingChkAmt);
        }
        
        //    INTEREST TYPE FLAG FOR CLOSINGS
        long lInterestTypeFlag () { return 1; };
        RWCString InterestTypeFlag (void)
        {
            return m_szInterestTypeFlag;
        }
        long InterestTypeFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szInterestTypeFlag, sizeof(m_szInterestTypeFlag), &m_bInterestTypeFlag);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bCtl1) return true;
            if (m_bCtl2) return true;
            if (m_bCtl3) return true;
            if (m_bCtl4) return true;
            if (m_bAcctNbr) return true;
            if (m_bTotalAmt) return true;
            if (m_bDept) return true;
            if (m_bBatch) return true;
            if (m_bUserTranCd) return true;
            if (m_bTranCd) return true;
            if (m_bIcrSelData) return true;
            if (m_bProcessFlag) return true;
            if (m_bSecProcOpt) return true;
            if (m_bSaveAccCcyyddd) return true;
            if (m_bSaveSeq) return true;
            if (m_bClosingTransFlag) return true;
            if (m_bBankPaysClosingInt) return true;
            if (m_bOutstandingCksFlag) return true;
            if (m_bSavUserTranCd) return true;
            if (m_bLoanUserTranCd) return true;
            if (m_bOutstandingChkAmt) return true;
            if (m_bInterestTypeFlag) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDIMCMMI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "Ctl1", m_szCtl1, &m_bCtl1);
                AddXMLField(pSess, "Ctl2", m_szCtl2, &m_bCtl2);
                AddXMLField(pSess, "Ctl3", m_szCtl3, &m_bCtl3);
                AddXMLField(pSess, "Ctl4", m_szCtl4, &m_bCtl4);
                AddXMLField(pSess, "AcctNbr", m_szAcctNbr, &m_bAcctNbr);
                AddXMLField(pSess, "TotalAmt", m_szTotalAmt, &m_bTotalAmt);
                AddXMLField(pSess, "Dept", m_szDept, &m_bDept);
                AddXMLField(pSess, "Batch", m_szBatch, &m_bBatch);
                AddXMLField(pSess, "UserTranCd", m_szUserTranCd, &m_bUserTranCd);
                AddXMLField(pSess, "TranCd", m_szTranCd, &m_bTranCd);
                AddXMLField(pSess, "IcrSelData", m_szIcrSelData, &m_bIcrSelData);
                AddXMLField(pSess, "ProcessFlag", m_szProcessFlag, &m_bProcessFlag);
                AddXMLField(pSess, "SecProcOpt", m_szSecProcOpt, &m_bSecProcOpt);
                AddXMLField(pSess, "SaveAccCcyyddd", m_szSaveAccCcyyddd, &m_bSaveAccCcyyddd);
                AddXMLField(pSess, "SaveSeq", m_szSaveSeq, &m_bSaveSeq);
                AddXMLField(pSess, "ClosingTransFlag", m_szClosingTransFlag, &m_bClosingTransFlag);
                AddXMLField(pSess, "BankPaysClosingInt", m_szBankPaysClosingInt, &m_bBankPaysClosingInt);
                AddXMLField(pSess, "OutstandingCksFlag", m_szOutstandingCksFlag, &m_bOutstandingCksFlag);
                AddXMLField(pSess, "SavUserTranCd", m_szSavUserTranCd, &m_bSavUserTranCd);
                AddXMLField(pSess, "LoanUserTranCd", m_szLoanUserTranCd, &m_bLoanUserTranCd);
                AddXMLField(pSess, "OutstandingChkAmt", m_szOutstandingChkAmt, &m_bOutstandingChkAmt);
                AddXMLField(pSess, "InterestTypeFlag", m_szInterestTypeFlag, &m_bInterestTypeFlag);
                AddXMLCloseRecord(pSess, "SDIMCMMI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDIMCMMI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "Ctl1", m_szCtl1);
                GetXMLField(pSess, "Ctl2", m_szCtl2);
                GetXMLField(pSess, "Ctl3", m_szCtl3);
                GetXMLField(pSess, "Ctl4", m_szCtl4);
                GetXMLField(pSess, "AcctNbr", m_szAcctNbr);
                GetXMLField(pSess, "TotalAmt", m_szTotalAmt);
                GetXMLField(pSess, "Dept", m_szDept);
                GetXMLField(pSess, "Batch", m_szBatch);
                GetXMLField(pSess, "UserTranCd", m_szUserTranCd);
                GetXMLField(pSess, "TranCd", m_szTranCd);
                GetXMLField(pSess, "IcrSelData", m_szIcrSelData);
                GetXMLField(pSess, "ProcessFlag", m_szProcessFlag);
                GetXMLField(pSess, "SecProcOpt", m_szSecProcOpt);
                GetXMLField(pSess, "SaveAccCcyyddd", m_szSaveAccCcyyddd);
                GetXMLField(pSess, "SaveSeq", m_szSaveSeq);
                GetXMLField(pSess, "ClosingTransFlag", m_szClosingTransFlag);
                GetXMLField(pSess, "BankPaysClosingInt", m_szBankPaysClosingInt);
                GetXMLField(pSess, "OutstandingCksFlag", m_szOutstandingCksFlag);
                GetXMLField(pSess, "SavUserTranCd", m_szSavUserTranCd);
                GetXMLField(pSess, "LoanUserTranCd", m_szLoanUserTranCd);
                GetXMLField(pSess, "OutstandingChkAmt", m_szOutstandingChkAmt);
                GetXMLField(pSess, "InterestTypeFlag", m_szInterestTypeFlag);
                CloseXMLRecord(pSess, "SDIMCMMI");
            };
        }
    };

    AsdSDIMCMMI CSDIMCMMI;
    AsdSDIMCMMI *SDIMCMMI;
    
    //**************** End AsdSDIMCMMI Definition ****************

    
    //**************** Start AsdSDIMMYMI Definition ****************
    //                 MONETARY TRANSACTION DAG                                    
    
    //    SDIMMYMI.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/04/02 15:38:50
    class AsdSDIMMYMI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bUserTranCd;
        char      m_szUserTranCd[4+1];
        bool      m_bTranAmt;
        char      m_szTranAmt[19+1];
        bool      m_bCheckNbr;
        char      m_szCheckNbr[10+1];
        bool      m_bTraceNbr;
        char      m_szTraceNbr[7+1];
        bool      m_bNbrItems;
        char      m_szNbrItems[5+1];
        bool      m_bOrigCent;
        char      m_szOrigCent[2+1];
        bool      m_bOrigYr;
        char      m_szOrigYr[2+1];
        bool      m_bOrigMo;
        char      m_szOrigMo[2+1];
        bool      m_bOrigDa;
        char      m_szOrigDa[2+1];
        bool      m_bHolidays;
        char      m_szHolidays[1+1];
        bool      m_bTranDesc;
        char      m_szTranDesc[18+1];
        bool      m_bEntryCent;
        char      m_szEntryCent[2+1];
        bool      m_bEntryYr;
        char      m_szEntryYr[2+1];
        bool      m_bEntryMo;
        char      m_szEntryMo[2+1];
        bool      m_bEntryDa;
        char      m_szEntryDa[2+1];
        bool      m_bOrigUserTran;
        char      m_szOrigUserTran[4+1];
        bool      m_bOrigBatch;
        char      m_szOrigBatch[5+1];
        bool      m_bOrigSeq;
        char      m_szOrigSeq[5+1];
        bool      m_bOrigNbrItems;
        char      m_szOrigNbrItems[5+1];
        bool      m_bOrigHolidays;
        char      m_szOrigHolidays[1+1];
        bool      m_bAchDesc;
        char      m_szAchDesc[10+1];
        bool      m_bIndivId;
        char      m_szIndivId[15+1];
        bool      m_bCoName;
        char      m_szCoName[16+1];
        bool      m_bAddendaType;
        char      m_szAddendaType[2+1];
        bool      m_bAddlInfo;
        char      m_szAddlInfo[44+1];
        bool      m_bTermCode;
        char      m_szTermCode[4+1];
        bool      m_bLoanPrin;
        char      m_szLoanPrin[16+1];
        bool      m_bLoanInt;
        char      m_szLoanInt[16+1];
        bool      m_bLoanOth;
        char      m_szLoanOth[16+1];
        bool      m_bMoneyCd;
        char      m_szMoneyCd[1+1];
        bool      m_bLoanFees;
        char      m_szLoanFees[16+1];
        bool      m_bLoanIns1;
        char      m_szLoanIns1[16+1];
        bool      m_bLoanIns2;
        char      m_szLoanIns2[16+1];
    
      public:
        long      m_lIndex;

        AsdSDIMMYMI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bUserTranCd = false;
            strcpy(m_szUserTranCd, "");
            m_bTranAmt = false;
            strcpy(m_szTranAmt, "000000000000000.000");
            m_bCheckNbr = false;
            strcpy(m_szCheckNbr, "");
            m_bTraceNbr = false;
            strcpy(m_szTraceNbr, "");
            m_bNbrItems = false;
            strcpy(m_szNbrItems, "");
            m_bOrigCent = false;
            strcpy(m_szOrigCent, "");
            m_bOrigYr = false;
            strcpy(m_szOrigYr, "");
            m_bOrigMo = false;
            strcpy(m_szOrigMo, "");
            m_bOrigDa = false;
            strcpy(m_szOrigDa, "");
            m_bHolidays = false;
            strcpy(m_szHolidays, "");
            m_bTranDesc = false;
            strcpy(m_szTranDesc, "");
            m_bEntryCent = false;
            strcpy(m_szEntryCent, "");
            m_bEntryYr = false;
            strcpy(m_szEntryYr, "");
            m_bEntryMo = false;
            strcpy(m_szEntryMo, "");
            m_bEntryDa = false;
            strcpy(m_szEntryDa, "");
            m_bOrigUserTran = false;
            strcpy(m_szOrigUserTran, "");
            m_bOrigBatch = false;
            strcpy(m_szOrigBatch, "");
            m_bOrigSeq = false;
            strcpy(m_szOrigSeq, "");
            m_bOrigNbrItems = false;
            strcpy(m_szOrigNbrItems, "");
            m_bOrigHolidays = false;
            strcpy(m_szOrigHolidays, "");
            m_bAchDesc = false;
            strcpy(m_szAchDesc, "");
            m_bIndivId = false;
            strcpy(m_szIndivId, "");
            m_bCoName = false;
            strcpy(m_szCoName, "");
            m_bAddendaType = false;
            strcpy(m_szAddendaType, "");
            m_bAddlInfo = false;
            strcpy(m_szAddlInfo, "");
            m_bTermCode = false;
            strcpy(m_szTermCode, "");
            m_bLoanPrin = false;
            strcpy(m_szLoanPrin, "0000000000000.00");
            m_bLoanInt = false;
            strcpy(m_szLoanInt, "0000000000000.00");
            m_bLoanOth = false;
            strcpy(m_szLoanOth, "0000000000000.00");
            m_bMoneyCd = false;
            strcpy(m_szMoneyCd, "");
            m_bLoanFees = false;
            strcpy(m_szLoanFees, "0000000000000.00");
            m_bLoanIns1 = false;
            strcpy(m_szLoanIns1, "0000000000000.00");
            m_bLoanIns2 = false;
            strcpy(m_szLoanIns2, "0000000000000.00");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 13; lOccurs++)
            {
                UdtArea[lOccurs]  = &CUdtArea[lOccurs];
                CUdtArea[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bUserTranCd = false;
            strcpy(m_szUserTranCd, "");
            m_bTranAmt = false;
            strcpy(m_szTranAmt, "000000000000000.000");
            m_bCheckNbr = false;
            strcpy(m_szCheckNbr, "");
            m_bTraceNbr = false;
            strcpy(m_szTraceNbr, "");
            m_bNbrItems = false;
            strcpy(m_szNbrItems, "");
            m_bOrigCent = false;
            strcpy(m_szOrigCent, "");
            m_bOrigYr = false;
            strcpy(m_szOrigYr, "");
            m_bOrigMo = false;
            strcpy(m_szOrigMo, "");
            m_bOrigDa = false;
            strcpy(m_szOrigDa, "");
            m_bHolidays = false;
            strcpy(m_szHolidays, "");
            m_bTranDesc = false;
            strcpy(m_szTranDesc, "");
            m_bEntryCent = false;
            strcpy(m_szEntryCent, "");
            m_bEntryYr = false;
            strcpy(m_szEntryYr, "");
            m_bEntryMo = false;
            strcpy(m_szEntryMo, "");
            m_bEntryDa = false;
            strcpy(m_szEntryDa, "");
            m_bOrigUserTran = false;
            strcpy(m_szOrigUserTran, "");
            m_bOrigBatch = false;
            strcpy(m_szOrigBatch, "");
            m_bOrigSeq = false;
            strcpy(m_szOrigSeq, "");
            m_bOrigNbrItems = false;
            strcpy(m_szOrigNbrItems, "");
            m_bOrigHolidays = false;
            strcpy(m_szOrigHolidays, "");
            m_bAchDesc = false;
            strcpy(m_szAchDesc, "");
            m_bIndivId = false;
            strcpy(m_szIndivId, "");
            m_bCoName = false;
            strcpy(m_szCoName, "");
            m_bAddendaType = false;
            strcpy(m_szAddendaType, "");
            m_bAddlInfo = false;
            strcpy(m_szAddlInfo, "");
            m_bTermCode = false;
            strcpy(m_szTermCode, "");
            m_bLoanPrin = false;
            strcpy(m_szLoanPrin, "0000000000000.00");
            m_bLoanInt = false;
            strcpy(m_szLoanInt, "0000000000000.00");
            m_bLoanOth = false;
            strcpy(m_szLoanOth, "0000000000000.00");
            m_bMoneyCd = false;
            strcpy(m_szMoneyCd, "");
            m_bLoanFees = false;
            strcpy(m_szLoanFees, "0000000000000.00");
            m_bLoanIns1 = false;
            strcpy(m_szLoanIns1, "0000000000000.00");
            m_bLoanIns2 = false;
            strcpy(m_szLoanIns2, "0000000000000.00");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 13; lOccurs++)
            {
                UdtArea[lOccurs]  = &CUdtArea[lOccurs];
                CUdtArea[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    STANDARD USER TRAN CODE
        long lUserTranCd () { return 4; };
        RWCString UserTranCd (void)
        {
            return m_szUserTranCd;
        }
        long UserTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserTranCd, sizeof(m_szUserTranCd), &m_bUserTranCd);
        }
        
        //    MONETARY TRANSACTION AMOUNT
        long lTranAmt () { return 19; };
        RWCString TranAmt (void)
        {
            return m_szTranAmt;
        }
        long TranAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranAmt, sizeof(m_szTranAmt), &m_bTranAmt);
        }
        
        //    MONETARY CHECK/SERIAL NUMBER
        long lCheckNbr () { return 10; };
        RWCString CheckNbr (void)
        {
            return m_szCheckNbr;
        }
        long CheckNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szCheckNbr, sizeof(m_szCheckNbr), &m_bCheckNbr);
        }
        
        //    MONETARY TRACE NUMBER
        long lTraceNbr () { return 7; };
        RWCString TraceNbr (void)
        {
            return m_szTraceNbr;
        }
        long TraceNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szTraceNbr, sizeof(m_szTraceNbr), &m_bTraceNbr);
        }
        
        //    MONETARY NUMBER OF ITEMS
        long lNbrItems () { return 5; };
        RWCString NbrItems (void)
        {
            return m_szNbrItems;
        }
        long NbrItems (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrItems, sizeof(m_szNbrItems), &m_bNbrItems);
        }
        
        //    ORIGINAL DATE CENTURY
        long lOrigCent () { return 2; };
        RWCString OrigCent (void)
        {
            return m_szOrigCent;
        }
        long OrigCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigCent, sizeof(m_szOrigCent), &m_bOrigCent);
        }
        
        //    ORIGINAL DATE YEAR
        long lOrigYr () { return 2; };
        RWCString OrigYr (void)
        {
            return m_szOrigYr;
        }
        long OrigYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigYr, sizeof(m_szOrigYr), &m_bOrigYr);
        }
        
        //    ORIGINAL DATE MONTH
        long lOrigMo () { return 2; };
        RWCString OrigMo (void)
        {
            return m_szOrigMo;
        }
        long OrigMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigMo, sizeof(m_szOrigMo), &m_bOrigMo);
        }
        
        //    ORIGINAL DATE DAY
        long lOrigDa () { return 2; };
        RWCString OrigDa (void)
        {
            return m_szOrigDa;
        }
        long OrigDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigDa, sizeof(m_szOrigDa), &m_bOrigDa);
        }
        
        //    MONETARY HOLIDAYS
        long lHolidays () { return 1; };
        RWCString Holidays (void)
        {
            return m_szHolidays;
        }
        long Holidays (const RWCString& rwc)
        {
            return SetString(rwc, m_szHolidays, sizeof(m_szHolidays), &m_bHolidays);
        }
        
        //    MONETARY TRANSACTION DESCRIPTION
        long lTranDesc () { return 18; };
        RWCString TranDesc (void)
        {
            return m_szTranDesc;
        }
        long TranDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranDesc, sizeof(m_szTranDesc), &m_bTranDesc);
        }
        
        //    ENTRY DATE CENTURY
        long lEntryCent () { return 2; };
        RWCString EntryCent (void)
        {
            return m_szEntryCent;
        }
        long EntryCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szEntryCent, sizeof(m_szEntryCent), &m_bEntryCent);
        }
        
        //    ENTRY DATE YEAR
        long lEntryYr () { return 2; };
        RWCString EntryYr (void)
        {
            return m_szEntryYr;
        }
        long EntryYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szEntryYr, sizeof(m_szEntryYr), &m_bEntryYr);
        }
        
        //    ENTRY DATE MONTH
        long lEntryMo () { return 2; };
        RWCString EntryMo (void)
        {
            return m_szEntryMo;
        }
        long EntryMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szEntryMo, sizeof(m_szEntryMo), &m_bEntryMo);
        }
        
        //    ENTRY DATE DAY
        long lEntryDa () { return 2; };
        RWCString EntryDa (void)
        {
            return m_szEntryDa;
        }
        long EntryDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szEntryDa, sizeof(m_szEntryDa), &m_bEntryDa);
        }
        
        //    MONETARY REVERSAL ORIGINAL USER TRAN CODE
        long lOrigUserTran () { return 4; };
        RWCString OrigUserTran (void)
        {
            return m_szOrigUserTran;
        }
        long OrigUserTran (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigUserTran, sizeof(m_szOrigUserTran), &m_bOrigUserTran);
        }
        
        //    MONETARY REVERSAL ORIGINAL BATCH
        long lOrigBatch () { return 5; };
        RWCString OrigBatch (void)
        {
            return m_szOrigBatch;
        }
        long OrigBatch (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigBatch, sizeof(m_szOrigBatch), &m_bOrigBatch);
        }
        
        //    MONETARY REVERSAL ORIGINAL SEQUENCE
        long lOrigSeq () { return 5; };
        RWCString OrigSeq (void)
        {
            return m_szOrigSeq;
        }
        long OrigSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigSeq, sizeof(m_szOrigSeq), &m_bOrigSeq);
        }
        
        //    MONETARY REVERSAL ORIGINAL NUMBER OF ITEMS
        long lOrigNbrItems () { return 5; };
        RWCString OrigNbrItems (void)
        {
            return m_szOrigNbrItems;
        }
        long OrigNbrItems (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigNbrItems, sizeof(m_szOrigNbrItems), &m_bOrigNbrItems);
        }
        
        //    MONETARY REVERSAL ORIGINAL NUMBER OF HOLIDAYS
        long lOrigHolidays () { return 1; };
        RWCString OrigHolidays (void)
        {
            return m_szOrigHolidays;
        }
        long OrigHolidays (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigHolidays, sizeof(m_szOrigHolidays), &m_bOrigHolidays);
        }
        
        //    MONETARY ACH DESCRIPTION
        long lAchDesc () { return 10; };
        RWCString AchDesc (void)
        {
            return m_szAchDesc;
        }
        long AchDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szAchDesc, sizeof(m_szAchDesc), &m_bAchDesc);
        }
        
        //    MONETARY ACH INDIVIDUAL ID
        long lIndivId () { return 15; };
        RWCString IndivId (void)
        {
            return m_szIndivId;
        }
        long IndivId (const RWCString& rwc)
        {
            return SetString(rwc, m_szIndivId, sizeof(m_szIndivId), &m_bIndivId);
        }
        
        //    MONETARY ACH COMPANY NAME
        long lCoName () { return 16; };
        RWCString CoName (void)
        {
            return m_szCoName;
        }
        long CoName (const RWCString& rwc)
        {
            return SetString(rwc, m_szCoName, sizeof(m_szCoName), &m_bCoName);
        }
        
        //    MONETARY ACH ADDENDA TYPE
        long lAddendaType () { return 2; };
        RWCString AddendaType (void)
        {
            return m_szAddendaType;
        }
        long AddendaType (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddendaType, sizeof(m_szAddendaType), &m_bAddendaType);
        }
        
        //    MONETARY ACH ADDENDA ADDITIONAL INFO
        long lAddlInfo () { return 44; };
        RWCString AddlInfo (void)
        {
            return m_szAddlInfo;
        }
        long AddlInfo (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddlInfo, sizeof(m_szAddlInfo), &m_bAddlInfo);
        }
        
        //    MONETARY ATM TRANSACTION TERMINAL CODE
        long lTermCode () { return 4; };
        RWCString TermCode (void)
        {
            return m_szTermCode;
        }
        long TermCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szTermCode, sizeof(m_szTermCode), &m_bTermCode);
        }
        
        //    MONETARY LOAN TRANSACIOTN PRINCIPAL
        long lLoanPrin () { return 16; };
        RWCString LoanPrin (void)
        {
            return m_szLoanPrin;
        }
        long LoanPrin (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanPrin, sizeof(m_szLoanPrin), &m_bLoanPrin);
        }
        
        //    MONETARY LOAN TRANSACIOTN INTEREST
        long lLoanInt () { return 16; };
        RWCString LoanInt (void)
        {
            return m_szLoanInt;
        }
        long LoanInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanInt, sizeof(m_szLoanInt), &m_bLoanInt);
        }
        
        //    MONETARY LOAN TRANSACIOTN OTHER
        long lLoanOth () { return 16; };
        RWCString LoanOth (void)
        {
            return m_szLoanOth;
        }
        long LoanOth (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanOth, sizeof(m_szLoanOth), &m_bLoanOth);
        }
        
        //    MONETARY LOAN TRANSACIOTN MONEY CODE
        long lMoneyCd () { return 1; };
        RWCString MoneyCd (void)
        {
            return m_szMoneyCd;
        }
        long MoneyCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoneyCd, sizeof(m_szMoneyCd), &m_bMoneyCd);
        }
        
        //    MONETARY LOAN TRANSACIOTN FEES
        long lLoanFees () { return 16; };
        RWCString LoanFees (void)
        {
            return m_szLoanFees;
        }
        long LoanFees (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanFees, sizeof(m_szLoanFees), &m_bLoanFees);
        }
        
        //    MONETARY LOAN TRANSACIOTN INSURANCE AMOUNT 1
        long lLoanIns1 () { return 16; };
        RWCString LoanIns1 (void)
        {
            return m_szLoanIns1;
        }
        long LoanIns1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanIns1, sizeof(m_szLoanIns1), &m_bLoanIns1);
        }
        
        //    MONETARY LOAN TRANSACIOTN INSURANCE AMOUNT 2
        long lLoanIns2 () { return 16; };
        RWCString LoanIns2 (void)
        {
            return m_szLoanIns2;
        }
        long LoanIns2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanIns2, sizeof(m_szLoanIns2), &m_bLoanIns2);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bUserTranCd) return true;
            if (m_bTranAmt) return true;
            if (m_bCheckNbr) return true;
            if (m_bTraceNbr) return true;
            if (m_bNbrItems) return true;
            if (m_bOrigCent) return true;
            if (m_bOrigYr) return true;
            if (m_bOrigMo) return true;
            if (m_bOrigDa) return true;
            if (m_bHolidays) return true;
            if (m_bTranDesc) return true;
            if (m_bEntryCent) return true;
            if (m_bEntryYr) return true;
            if (m_bEntryMo) return true;
            if (m_bEntryDa) return true;
            if (m_bOrigUserTran) return true;
            if (m_bOrigBatch) return true;
            if (m_bOrigSeq) return true;
            if (m_bOrigNbrItems) return true;
            if (m_bOrigHolidays) return true;
            if (m_bAchDesc) return true;
            if (m_bIndivId) return true;
            if (m_bCoName) return true;
            if (m_bAddendaType) return true;
            if (m_bAddlInfo) return true;
            if (m_bTermCode) return true;
            if (m_bLoanPrin) return true;
            if (m_bLoanInt) return true;
            if (m_bLoanOth) return true;
            if (m_bMoneyCd) return true;
            if (m_bLoanFees) return true;
            if (m_bLoanIns1) return true;
            if (m_bLoanIns2) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 13; lOccurs++)
            {
                if(CUdtArea[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDIMMYMI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "UserTranCd", m_szUserTranCd, &m_bUserTranCd);
                AddXMLField(pSess, "TranAmt", m_szTranAmt, &m_bTranAmt);
                AddXMLField(pSess, "CheckNbr", m_szCheckNbr, &m_bCheckNbr);
                AddXMLField(pSess, "TraceNbr", m_szTraceNbr, &m_bTraceNbr);
                AddXMLField(pSess, "NbrItems", m_szNbrItems, &m_bNbrItems);
                AddXMLField(pSess, "OrigCent", m_szOrigCent, &m_bOrigCent);
                AddXMLField(pSess, "OrigYr", m_szOrigYr, &m_bOrigYr);
                AddXMLField(pSess, "OrigMo", m_szOrigMo, &m_bOrigMo);
                AddXMLField(pSess, "OrigDa", m_szOrigDa, &m_bOrigDa);
                AddXMLField(pSess, "Holidays", m_szHolidays, &m_bHolidays);
                AddXMLField(pSess, "TranDesc", m_szTranDesc, &m_bTranDesc);
                AddXMLField(pSess, "EntryCent", m_szEntryCent, &m_bEntryCent);
                AddXMLField(pSess, "EntryYr", m_szEntryYr, &m_bEntryYr);
                AddXMLField(pSess, "EntryMo", m_szEntryMo, &m_bEntryMo);
                AddXMLField(pSess, "EntryDa", m_szEntryDa, &m_bEntryDa);
                AddXMLField(pSess, "OrigUserTran", m_szOrigUserTran, &m_bOrigUserTran);
                AddXMLField(pSess, "OrigBatch", m_szOrigBatch, &m_bOrigBatch);
                AddXMLField(pSess, "OrigSeq", m_szOrigSeq, &m_bOrigSeq);
                AddXMLField(pSess, "OrigNbrItems", m_szOrigNbrItems, &m_bOrigNbrItems);
                AddXMLField(pSess, "OrigHolidays", m_szOrigHolidays, &m_bOrigHolidays);
                AddXMLField(pSess, "AchDesc", m_szAchDesc, &m_bAchDesc);
                AddXMLField(pSess, "IndivId", m_szIndivId, &m_bIndivId);
                AddXMLField(pSess, "CoName", m_szCoName, &m_bCoName);
                AddXMLField(pSess, "AddendaType", m_szAddendaType, &m_bAddendaType);
                AddXMLField(pSess, "AddlInfo", m_szAddlInfo, &m_bAddlInfo);
                AddXMLField(pSess, "TermCode", m_szTermCode, &m_bTermCode);
                AddXMLField(pSess, "LoanPrin", m_szLoanPrin, &m_bLoanPrin);
                AddXMLField(pSess, "LoanInt", m_szLoanInt, &m_bLoanInt);
                AddXMLField(pSess, "LoanOth", m_szLoanOth, &m_bLoanOth);
                AddXMLField(pSess, "MoneyCd", m_szMoneyCd, &m_bMoneyCd);
                AddXMLField(pSess, "LoanFees", m_szLoanFees, &m_bLoanFees);
                AddXMLField(pSess, "LoanIns1", m_szLoanIns1, &m_bLoanIns1);
                AddXMLField(pSess, "LoanIns2", m_szLoanIns2, &m_bLoanIns2);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 13; lOccurs++)
                {
                    CUdtArea[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDIMMYMI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDIMMYMI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "UserTranCd", m_szUserTranCd);
                GetXMLField(pSess, "TranAmt", m_szTranAmt);
                GetXMLField(pSess, "CheckNbr", m_szCheckNbr);
                GetXMLField(pSess, "TraceNbr", m_szTraceNbr);
                GetXMLField(pSess, "NbrItems", m_szNbrItems);
                GetXMLField(pSess, "OrigCent", m_szOrigCent);
                GetXMLField(pSess, "OrigYr", m_szOrigYr);
                GetXMLField(pSess, "OrigMo", m_szOrigMo);
                GetXMLField(pSess, "OrigDa", m_szOrigDa);
                GetXMLField(pSess, "Holidays", m_szHolidays);
                GetXMLField(pSess, "TranDesc", m_szTranDesc);
                GetXMLField(pSess, "EntryCent", m_szEntryCent);
                GetXMLField(pSess, "EntryYr", m_szEntryYr);
                GetXMLField(pSess, "EntryMo", m_szEntryMo);
                GetXMLField(pSess, "EntryDa", m_szEntryDa);
                GetXMLField(pSess, "OrigUserTran", m_szOrigUserTran);
                GetXMLField(pSess, "OrigBatch", m_szOrigBatch);
                GetXMLField(pSess, "OrigSeq", m_szOrigSeq);
                GetXMLField(pSess, "OrigNbrItems", m_szOrigNbrItems);
                GetXMLField(pSess, "OrigHolidays", m_szOrigHolidays);
                GetXMLField(pSess, "AchDesc", m_szAchDesc);
                GetXMLField(pSess, "IndivId", m_szIndivId);
                GetXMLField(pSess, "CoName", m_szCoName);
                GetXMLField(pSess, "AddendaType", m_szAddendaType);
                GetXMLField(pSess, "AddlInfo", m_szAddlInfo);
                GetXMLField(pSess, "TermCode", m_szTermCode);
                GetXMLField(pSess, "LoanPrin", m_szLoanPrin);
                GetXMLField(pSess, "LoanInt", m_szLoanInt);
                GetXMLField(pSess, "LoanOth", m_szLoanOth);
                GetXMLField(pSess, "MoneyCd", m_szMoneyCd);
                GetXMLField(pSess, "LoanFees", m_szLoanFees);
                GetXMLField(pSess, "LoanIns1", m_szLoanIns1);
                GetXMLField(pSess, "LoanIns2", m_szLoanIns2);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 13; lOccurs++)
                {
                    CUdtArea[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDIMMYMI");
            };
        }
        
        //**************** Start AsdUdtArea Definition ****************
        //                 MONETARY UNIVERSAL DESCRIPTION AREA
        
        class AsdUdtArea
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bUdtLine;
            char      m_szUdtLine[60+1];
        
          public:
            long      m_lIndex;

            AsdUdtArea ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bUdtLine = false;
                strcpy(m_szUdtLine, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    MONETARY UNIVERSAL DESCRIPTION LINE
            long lUdtLine () { return 60; };
            RWCString UdtLine (void)
            {
                return m_szUdtLine;
            }
            long UdtLine (const RWCString& rwc)
            {
                return SetString(rwc, m_szUdtLine, sizeof(m_szUdtLine), &m_bUdtLine);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bUdtLine) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "UdtArea", m_lIndex);
                    AddXMLField(pSess, "UdtLine", m_szUdtLine, &m_bUdtLine);
                    AddXMLCloseRecord(pSess, "UdtArea");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "UdtArea", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "UdtLine", m_szUdtLine);
                    CloseXMLRecord(pSess, "UdtArea");
                };
            }
        };

        AsdUdtArea  CUdtArea[13];
        AsdUdtArea *UdtArea[13];
        
        //**************** End AsdUdtArea Definition ****************
        
    };

    AsdSDIMMYMI CSDIMMYMI;
    AsdSDIMMYMI *SDIMMYMI;
    
    //**************** End AsdSDIMMYMI Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCIP80Data Definition ****************

typedef AsdSDPCIP80Data *LPSDPCIP80;
typedef AsdSDPCIP80Data::AsdTSHeader *LPSDPCIP80_TSHeader;
typedef AsdSDPCIP80Data::AsdSDIMCMMI *LPSDPCIP80_SDIMCMMI;
typedef AsdSDPCIP80Data::AsdSDIMMYMI *LPSDPCIP80_SDIMMYMI;
typedef AsdSDPCIP80Data::AsdSDIMMYMI::AsdUdtArea *LPSDPCIP80_SDIMMYMI_UdtArea;
typedef AsdSDPCIP80Data::AsdTSMDA *LPSDPCIP80_TSMDA;
typedef AsdSDPCIP80Data::AsdTSMDA::AsdMdaTrmMsg *LPSDPCIP80_TSMDA_MdaTrmMsg;
typedef AsdSDPCIP80Data::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCIP80_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCIP80Data_H

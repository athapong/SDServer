#ifndef AsdSDPCIMMIData_H
#define AsdSDPCIMMIData_H

#include <stdlib.h>
#ifdef  AsdSDPCIMMI_INTEGRITY_STRING
#undef  AsdSDPCIMMI_INTEGRITY_STRING
#endif
#define AsdSDPCIMMI_INTEGRITY_STRING        ""

#ifdef  AsdSDPCIMMI_CRC_STRING
#undef  AsdSDPCIMMI_CRC_STRING
#endif
#define AsdSDPCIMMI_CRC_STRING "3271980819"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCIMMIData Definition ****************
//                 IM Account Inquiry #2

//                 SDPCIMMIData.h generated by AceGen2 ver. 2.5.09

class AsdSDPCIMMIData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCIMMIData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCIMMI.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCIMMI_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDIMINP = &CSDIMINP;
        SDIMDTLO = &CSDIMDTLO;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCIMMIData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDIMINP.Reinit();
            CSDIMDTLO.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCIMMI_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIMMI_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDIMINP.Save(&m_Sess);
        CSDIMDTLO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIMMI", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDIMINP.Load(&m_Sess);
                        CSDIMDTLO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIMMI");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIMMI_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDIMINP.Save(&m_Sess);
        CSDIMDTLO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIMMI", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDIMINP.Load(&m_Sess);
                        CSDIMDTLO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIMMI");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIMMI_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDIMINP Definition ****************
    //                 SERVICE DELIVER IMPACS INPUT REQUEST DAG                    
    
    //    SDIMINP.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/16/02 16:39:34
    class AsdSDIMINP
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bControl1;
        char      m_szControl1[2+1];
        bool      m_bControl2;
        char      m_szControl2[3+1];
        bool      m_bControl3;
        char      m_szControl3[3+1];
        bool      m_bControl4;
        char      m_szControl4[4+1];
        bool      m_bAcctNo;
        char      m_szAcctNo[10+1];
    
      public:
        long      m_lIndex;

        AsdSDIMINP ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bControl1 = false;
            strcpy(m_szControl1, "00");
            m_bControl2 = false;
            strcpy(m_szControl2, "000");
            m_bControl3 = false;
            strcpy(m_szControl3, "000");
            m_bControl4 = false;
            strcpy(m_szControl4, "0000");
            m_bAcctNo = false;
            strcpy(m_szAcctNo, "0000000000");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bControl1 = false;
            strcpy(m_szControl1, "00");
            m_bControl2 = false;
            strcpy(m_szControl2, "000");
            m_bControl3 = false;
            strcpy(m_szControl3, "000");
            m_bControl4 = false;
            strcpy(m_szControl4, "0000");
            m_bAcctNo = false;
            strcpy(m_szAcctNo, "0000000000");
        }

        
        //    CONTROL 1
        long lControl1 () { return 2; };
        RWCString Control1 (void)
        {
            return m_szControl1;
        }
        long Control1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl1, sizeof(m_szControl1), &m_bControl1);
        }
        
        //    CONTROL 2
        long lControl2 () { return 3; };
        RWCString Control2 (void)
        {
            return m_szControl2;
        }
        long Control2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl2, sizeof(m_szControl2), &m_bControl2);
        }
        
        //    CONTROL 3
        long lControl3 () { return 3; };
        RWCString Control3 (void)
        {
            return m_szControl3;
        }
        long Control3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl3, sizeof(m_szControl3), &m_bControl3);
        }
        
        //    CONTROL 4
        long lControl4 () { return 4; };
        RWCString Control4 (void)
        {
            return m_szControl4;
        }
        long Control4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl4, sizeof(m_szControl4), &m_bControl4);
        }
        
        //    ACCOUNT NUMBER
        long lAcctNo () { return 10; };
        RWCString AcctNo (void)
        {
            return m_szAcctNo;
        }
        long AcctNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcctNo, sizeof(m_szAcctNo), &m_bAcctNo);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bControl1) return true;
            if (m_bControl2) return true;
            if (m_bControl3) return true;
            if (m_bControl4) return true;
            if (m_bAcctNo) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDIMINP", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "Control1", m_szControl1, &m_bControl1);
                AddXMLField(pSess, "Control2", m_szControl2, &m_bControl2);
                AddXMLField(pSess, "Control3", m_szControl3, &m_bControl3);
                AddXMLField(pSess, "Control4", m_szControl4, &m_bControl4);
                AddXMLField(pSess, "AcctNo", m_szAcctNo, &m_bAcctNo);
                AddXMLCloseRecord(pSess, "SDIMINP");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDIMINP", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "Control1", m_szControl1);
                GetXMLField(pSess, "Control2", m_szControl2);
                GetXMLField(pSess, "Control3", m_szControl3);
                GetXMLField(pSess, "Control4", m_szControl4);
                GetXMLField(pSess, "AcctNo", m_szAcctNo);
                CloseXMLRecord(pSess, "SDIMINP");
            };
        }
    };

    AsdSDIMINP CSDIMINP;
    AsdSDIMINP *SDIMINP;
    
    //**************** End AsdSDIMINP Definition ****************

    
    //**************** Start AsdSDIMDTLO Definition ****************
    //                 SERVICE DELIVERY IMPACS DETAIL DAG                          
    
    //    SDIMDTLO.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 05/13/03 11:43:53
    class AsdSDIMDTLO
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bWmsControl1;
        char      m_szWmsControl1[2+1];
        bool      m_bWmsControl2;
        char      m_szWmsControl2[3+1];
        bool      m_bWmsControl3;
        char      m_szWmsControl3[3+1];
        bool      m_bWmsControl4;
        char      m_szWmsControl4[4+1];
        bool      m_bWmsAcctNo;
        char      m_szWmsAcctNo[10+1];
        bool      m_bWorkMoreBreakdown;
        char      m_szWorkMoreBreakdown[27+1];
        bool      m_bWorkReasonStatus;
        char      m_szWorkReasonStatus[34+1];
        bool      m_bWorkSysType;
        char      m_szWorkSysType[19+1];
        bool      m_bWorkLoanBal;
        char      m_szWorkLoanBal[17+1];
        bool      m_bWorkHoldAmt;
        char      m_szWorkHoldAmt[17+1];
        bool      m_bWorkAvgCollBal;
        char      m_szWorkAvgCollBal[17+1];
        bool      m_bWorkMtdAvgBal;
        char      m_szWorkMtdAvgBal[17+1];
        bool      m_bImMemoOlAvailBal;
        char      m_szImMemoOlAvailBal[17+1];
        bool      m_bWorkCashAvailAmt;
        char      m_szWorkCashAvailAmt[17+1];
        bool      m_bWbcProcThruCent;
        char      m_szWbcProcThruCent[2+1];
        bool      m_bWbcProcThruYr;
        char      m_szWbcProcThruYr[2+1];
        bool      m_bWbcProcThruMo;
        char      m_szWbcProcThruMo[2+1];
        bool      m_bWbcProcThruDa;
        char      m_szWbcProcThruDa[2+1];
        bool      m_bCreditLimit;
        char      m_szCreditLimit[14+1];
        bool      m_bWmsStatus;
        char      m_szWmsStatus[2+1];
        bool      m_bWmsAcctType;
        char      m_szWmsAcctType[3+1];
        bool      m_bWmsCityState;
        char      m_szWmsCityState[30+1];
        bool      m_bWmsNaZipCode;
        char      m_szWmsNaZipCode[10+1];
        bool      m_bWmsTaxNumber;
        char      m_szWmsTaxNumber[11+1];
        bool      m_bWmsHoldAllFundsFlag;
        char      m_szWmsHoldAllFundsFlag[1+1];
        bool      m_bWmsBankAvailAmt;
        char      m_szWmsBankAvailAmt[14+1];
        bool      m_bWmsCustAvailAmt;
        char      m_szWmsCustAvailAmt[14+1];
        bool      m_bWmsAmtLastDeposit;
        char      m_szWmsAmtLastDeposit[17+1];
        bool      m_bWmsDdaBal;
        char      m_szWmsDdaBal[17+1];
        bool      m_bWmsMinBal;
        char      m_szWmsMinBal[17+1];
        bool      m_bWmsOpenedCent;
        char      m_szWmsOpenedCent[2+1];
        bool      m_bWmsOpenedYr;
        char      m_szWmsOpenedYr[2+1];
        bool      m_bWmsOpenedMo;
        char      m_szWmsOpenedMo[2+1];
        bool      m_bWmsOpenedDa;
        char      m_szWmsOpenedDa[2+1];
        bool      m_bWmsCentLastDep;
        char      m_szWmsCentLastDep[2+1];
        bool      m_bWmsYrLastDep;
        char      m_szWmsYrLastDep[2+1];
        bool      m_bWmsMoLastDep;
        char      m_szWmsMoLastDep[2+1];
        bool      m_bWmsDaLastDep;
        char      m_szWmsDaLastDep[2+1];
        bool      m_bWmsLastCustActCent;
        char      m_szWmsLastCustActCent[2+1];
        bool      m_bWmsLastCustActYr;
        char      m_szWmsLastCustActYr[2+1];
        bool      m_bWmsLastCustActMo;
        char      m_szWmsLastCustActMo[2+1];
        bool      m_bWmsLastCustActDa;
        char      m_szWmsLastCustActDa[2+1];
        bool      m_bWmsLastMaintCent;
        char      m_szWmsLastMaintCent[2+1];
        bool      m_bWmsLastMaintYr;
        char      m_szWmsLastMaintYr[2+1];
        bool      m_bWmsLastMaintMo;
        char      m_szWmsLastMaintMo[2+1];
        bool      m_bWmsLastMaintDa;
        char      m_szWmsLastMaintDa[2+1];
        bool      m_bWmsChgCardFlg;
        char      m_szWmsChgCardFlg[1+1];
        bool      m_bWmsSpecInstToday;
        char      m_szWmsSpecInstToday[1+1];
        bool      m_bWmsNsfToday;
        char      m_szWmsNsfToday[1+1];
        bool      m_bWmsOdToday;
        char      m_szWmsOdToday[1+1];
        bool      m_bWmsKitingFlag;
        char      m_szWmsKitingFlag[1+1];
        bool      m_bWmsKiteConsecDays;
        char      m_szWmsKiteConsecDays[4+1];
        bool      m_bWmsMtdKitingSusp;
        char      m_szWmsMtdKitingSusp[4+1];
        bool      m_bWmsIodCycAccInt;
        char      m_szWmsIodCycAccInt[19+1];
        bool      m_bWmsIodProjAccr;
        char      m_szWmsIodProjAccr[17+1];
        bool      m_bWmsScAmttrnsfrNo;
        char      m_szWmsScAmttrnsfrNo[8+1];
        bool      m_bWmsOdLimit;
        char      m_szWmsOdLimit[1+1];
        bool      m_bWmsScCheckItems;
        char      m_szWmsScCheckItems[8+1];
        bool      m_bImMemoOlStopPays;
        char      m_szImMemoOlStopPays[8+1];
        bool      m_bWmsBalanceHistory;
        char      m_szWmsBalanceHistory[1+1];
        bool      m_bWmsBalHistRet;
        char      m_szWmsBalHistRet[4+1];
        bool      m_bWmsBranch;
        char      m_szWmsBranch[3+1];
        bool      m_bWmsOfficer;
        char      m_szWmsOfficer[5+1];
        bool      m_bWmsIodRatePtr;
        char      m_szWmsIodRatePtr[4+1];
        bool      m_bWmsIodCurAnn;
        char      m_szWmsIodCurAnn[11+1];
        bool      m_bWmsIodYtdIntPaid;
        char      m_szWmsIodYtdIntPaid[17+1];
        bool      m_bWmsIodPrvYtdIntPd;
        char      m_szWmsIodPrvYtdIntPd[17+1];
        bool      m_bWmsStmtPull;
        char      m_szWmsStmtPull[1+1];
        bool      m_bWmsStmtSupp;
        char      m_szWmsStmtSupp[1+1];
        bool      m_bWmsStmtFld1;
        char      m_szWmsStmtFld1[2+1];
        bool      m_bWmsStmtFld2;
        char      m_szWmsStmtFld2[2+1];
        bool      m_bWmsStmtFld3;
        char      m_szWmsStmtFld3[2+1];
        bool      m_bWmsStmtFld4;
        char      m_szWmsStmtFld4[2+1];
        bool      m_bWmsIodAccrualType;
        char      m_szWmsIodAccrualType[1+1];
        bool      m_bWmsUnavailToday;
        char      m_szWmsUnavailToday[1+1];
        bool      m_bWmsDaysNsfToDate;
        char      m_szWmsDaysNsfToDate[6+1];
        bool      m_bWmsDaysOdToDate;
        char      m_szWmsDaysOdToDate[6+1];
        bool      m_bWmsCustomerNumber;
        char      m_szWmsCustomerNumber[12+1];
        bool      m_bWmsNmeAddrTlrs;
        char      m_szWmsNmeAddrTlrs[2+1];
        bool      m_bWmsSocSecNa;
        char      m_szWmsSocSecNa[1+1];
        bool      m_bWmsDcTrlr;
        char      m_szWmsDcTrlr[1+1];
        bool      m_bWmsLoanTrlr;
        char      m_szWmsLoanTrlr[1+1];
        bool      m_bWmsMarketTrlr;
        char      m_szWmsMarketTrlr[1+1];
        bool      m_bWmsTrnsfrAfflTrlr;
        char      m_szWmsTrnsfrAfflTrlr[4+1];
        bool      m_bWmsOdNsfTrlr;
        char      m_szWmsOdNsfTrlr[1+1];
        bool      m_bWmsSavingsTrlr;
        char      m_szWmsSavingsTrlr[1+1];
        bool      m_bWmsBankAvailTrlr;
        char      m_szWmsBankAvailTrlr[1+1];
        bool      m_bWmsCustAvailTrlr;
        char      m_szWmsCustAvailTrlr[1+1];
        bool      m_bWmsCombinedStat;
        char      m_szWmsCombinedStat[4+1];
        bool      m_bWmsTargetAmtTrlr;
        char      m_szWmsTargetAmtTrlr[1+1];
        bool      m_bWmsLimitTransfer;
        char      m_szWmsLimitTransfer[1+1];
        bool      m_bWmsDcdTaxDataTrlr;
        char      m_szWmsDcdTaxDataTrlr[1+1];
        bool      m_bWmsOdAccrualTrlr;
        char      m_szWmsOdAccrualTrlr[1+1];
        bool      m_bWmsInfoTrlr;
        char      m_szWmsInfoTrlr[1+1];
        bool      m_bWmsExtScDataTrlr;
        char      m_szWmsExtScDataTrlr[1+1];
        bool      m_bWmsExtrnlDepositTrlr;
        char      m_szWmsExtrnlDepositTrlr[1+1];
        bool      m_bWmsKitingSuspTrlr;
        char      m_szWmsKitingSuspTrlr[1+1];
        bool      m_bWmsEfaTrlr;
        char      m_szWmsEfaTrlr[1+1];
        bool      m_bWmsCashAvailTrlr;
        char      m_szWmsCashAvailTrlr[1+1];
        bool      m_bWmsInvestmentTrlr;
        char      m_szWmsInvestmentTrlr[1+1];
        bool      m_bWmsRateTrlr;
        char      m_szWmsRateTrlr[1+1];
        bool      m_bWmsSavPtr;
        char      m_szWmsSavPtr[2+1];
        bool      m_bWmsExpansionInd;
        char      m_szWmsExpansionInd[1+1];
        bool      m_bWmsInfoContinent;
        char      m_szWmsInfoContinent[1+1];
        bool      m_bWmsInfoCntry;
        char      m_szWmsInfoCntry[4+1];
        bool      m_bWmsIntCurBal;
        char      m_szWmsIntCurBal[17+1];
        bool      m_bWmsPayoffAmt;
        char      m_szWmsPayoffAmt[17+1];
        bool      m_bWmsLastPmtCent;
        char      m_szWmsLastPmtCent[2+1];
        bool      m_bWmsLastPmtYr;
        char      m_szWmsLastPmtYr[2+1];
        bool      m_bWmsLastPmtMo;
        char      m_szWmsLastPmtMo[2+1];
        bool      m_bWmsLastPmtDa;
        char      m_szWmsLastPmtDa[2+1];
        bool      m_bWmsPymtDueAmt;
        char      m_szWmsPymtDueAmt[17+1];
        bool      m_bWmsBankAvailTrAmt[7];
        char      m_szWmsBankAvailTrAmt[7][14+1];
        bool      m_bWmsCustAvailFunds[12];
        char      m_szWmsCustAvailFunds[12][14+1];
        bool      m_bWmsTimesNsfMo[12];
        char      m_szWmsTimesNsfMo[12][4+1];
        bool      m_bWmsTimesOdMo[12];
        char      m_szWmsTimesOdMo[12][4+1];
        bool      m_bWmsTimesUnavailMo[12];
        char      m_szWmsTimesUnavailMo[12][4+1];
        bool      m_bImMemoOlDrAmt;
        char      m_szImMemoOlDrAmt[17+1];
        bool      m_bImMemoOlCrAmt;
        char      m_szImMemoOlCrAmt[17+1];
        bool      m_bImMemoOlSvDrAmt;
        char      m_szImMemoOlSvDrAmt[17+1];
        bool      m_bImMemoOlSvCrAmt;
        char      m_szImMemoOlSvCrAmt[17+1];
        bool      m_bImMemoOlLnDrAmt;
        char      m_szImMemoOlLnDrAmt[17+1];
        bool      m_bImMemoOlLnCrAmt;
        char      m_szImMemoOlLnCrAmt[17+1];
        bool      m_bImMemoOlLnAvailBal;
        char      m_szImMemoOlLnAvailBal[17+1];
        bool      m_bWmsSsnForeignAddress;
        char      m_szWmsSsnForeignAddress[1+1];
        bool      m_bWmsLoanStatus;
        char      m_szWmsLoanStatus[1+1];
        bool      m_bWmsIntlCurrCode;
        char      m_szWmsIntlCurrCode[3+1];
        bool      m_bWmsIntlCurrDec;
        char      m_szWmsIntlCurrDec[1+1];
        bool      m_bWmsIntlCustLanguage;
        char      m_szWmsIntlCustLanguage[2+1];
        bool      m_bWmsIntlCustLangGroup;
        char      m_szWmsIntlCustLangGroup[1+1];
        bool      m_bWmsTaxCode;
        char      m_szWmsTaxCode[1+1];
        bool      m_bWmsAnnualRate;
        char      m_szWmsAnnualRate[11+1];
        bool      m_bWmsLoanPrevYtdInt;
        char      m_szWmsLoanPrevYtdInt[17+1];
        bool      m_bWmsLoanYtdInt;
        char      m_szWmsLoanYtdInt[17+1];
        bool      m_bWmsSavCurAnn;
        char      m_szWmsSavCurAnn[11+1];
        bool      m_bWmsYtdIntPaid;
        char      m_szWmsYtdIntPaid[17+1];
        bool      m_bImMemoOlOffEmp;
        char      m_szImMemoOlOffEmp[1+1];
        bool      m_bWmsMtdAnalysis;
        char      m_szWmsMtdAnalysis[1+1];
        bool      m_bWmsChkTruncFlag;
        char      m_szWmsChkTruncFlag[1+1];
        bool      m_bWmsPrevYtdInt;
        char      m_szWmsPrevYtdInt[17+1];
        bool      m_bWmsShortName;
        char      m_szWmsShortName[13+1];
        bool      m_bWmsLastStmtCc;
        char      m_szWmsLastStmtCc[2+1];
        bool      m_bWmsLastStmtYr;
        char      m_szWmsLastStmtYr[2+1];
        bool      m_bWmsLastStmtMo;
        char      m_szWmsLastStmtMo[2+1];
        bool      m_bWmsLastStmtDa;
        char      m_szWmsLastStmtDa[2+1];
        bool      m_bWmsNsfWaive;
        char      m_szWmsNsfWaive[1+1];
        bool      m_bWmsOdWaive;
        char      m_szWmsOdWaive[1+1];
        bool      m_bWmsWaiveFee;
        char      m_szWmsWaiveFee[1+1];
        bool      m_bWmsRegion;
        char      m_szWmsRegion[3+1];
        bool      m_bWbcOrigProcThruCent;
        char      m_szWbcOrigProcThruCent[2+1];
        bool      m_bWbcOrigProcThruYr;
        char      m_szWbcOrigProcThruYr[2+1];
        bool      m_bWbcOrigProcThruMo;
        char      m_szWbcOrigProcThruMo[2+1];
        bool      m_bWbcOrigProcThruDa;
        char      m_szWbcOrigProcThruDa[2+1];
        bool      m_bWmsScCharge;
        char      m_szWmsScCharge[1+1];
        bool      m_bWmsScWaiveReason;
        char      m_szWmsScWaiveReason[2+1];
        bool      m_bWmsOdLimitAmt;
        char      m_szWmsOdLimitAmt[17+1];
        bool      m_bWbcLastProcCc;
        char      m_szWbcLastProcCc[2+1];
        bool      m_bWbcLastProcYr;
        char      m_szWbcLastProcYr[2+1];
        bool      m_bWbcLastProcMo;
        char      m_szWbcLastProcMo[2+1];
        bool      m_bWbcLastProcDa;
        char      m_szWbcLastProcDa[2+1];
        bool      m_bWmsStmtClear;
        char      m_szWmsStmtClear[1+1];
        bool      m_bWmsFundingFlag;
        char      m_szWmsFundingFlag[1+1];
        bool      m_bWmsHomeAreaCode;
        char      m_szWmsHomeAreaCode[3+1];
        bool      m_bWmsHomePhoneNo;
        char      m_szWmsHomePhoneNo[7+1];
        bool      m_bWmsHomeExtension;
        char      m_szWmsHomeExtension[4+1];
        bool      m_bWmsBusAreaCode;
        char      m_szWmsBusAreaCode[3+1];
        bool      m_bWmsBusPhoneNo;
        char      m_szWmsBusPhoneNo[7+1];
        bool      m_bWmsBusExtension;
        char      m_szWmsBusExtension[4+1];
        bool      m_bWmsTinCertification;
        char      m_szWmsTinCertification[1+1];
        bool      m_bCollBal;
        char      m_szCollBal[17+1];
        bool      m_bYtdAvgBal;
        char      m_szYtdAvgBal[17+1];
        bool      m_bWmsStmtSpeclHandl;
        char      m_szWmsStmtSpeclHandl[1+1];
        bool      m_bDateClosedCc;
        char      m_szDateClosedCc[2+1];
        bool      m_bDateClosedYr;
        char      m_szDateClosedYr[2+1];
        bool      m_bDateClosedMo;
        char      m_szDateClosedMo[2+1];
        bool      m_bDateClosedDa;
        char      m_szDateClosedDa[2+1];
        bool      m_bNoNsf;
        char      m_szNoNsf[3+1];
        bool      m_bNoOd;
        char      m_szNoOd[3+1];
        bool      m_bWmsBkupWthldFlag;
        char      m_szWmsBkupWthldFlag[1+1];
        bool      m_bWmsTaxExemptRsn;
        char      m_szWmsTaxExemptRsn[1+1];
        bool      m_bWmsApprovalCc;
        char      m_szWmsApprovalCc[2+1];
        bool      m_bWmsApprovalYr;
        char      m_szWmsApprovalYr[2+1];
        bool      m_bWmsApprovalMo;
        char      m_szWmsApprovalMo[2+1];
        bool      m_bWmsApprovalDa;
        char      m_szWmsApprovalDa[2+1];
        bool      m_bWmsCrRatingCc;
        char      m_szWmsCrRatingCc[2+1];
        bool      m_bWmsCrRatingYr;
        char      m_szWmsCrRatingYr[2+1];
        bool      m_bWmsCrRatingMo;
        char      m_szWmsCrRatingMo[2+1];
        bool      m_bWmsCrRatingDa;
        char      m_szWmsCrRatingDa[2+1];
        bool      m_bImMemoOlPrinBal;
        char      m_szImMemoOlPrinBal[17+1];
        bool      m_bImMemoOlDdaBal;
        char      m_szImMemoOlDdaBal[17+1];
        bool      m_bImMemoOlSvAvailBal;
        char      m_szImMemoOlSvAvailBal[17+1];
        bool      m_bImMemoOlNewDelFlag;
        char      m_szImMemoOlNewDelFlag[1+1];
        bool      m_bWmsPastDueAmt;
        char      m_szWmsPastDueAmt[17+1];
        bool      m_bWmsAutoPymt;
        char      m_szWmsAutoPymt[1+1];
        bool      m_bWmsLastPymtAmt;
        char      m_szWmsLastPymtAmt[17+1];
        bool      m_bWmsACt;
        char      m_szWmsACt[4+1];
        bool      m_bWmsBCt;
        char      m_szWmsBCt[4+1];
        bool      m_bWmsCCt;
        char      m_szWmsCCt[4+1];
        bool      m_bWmsDCt;
        char      m_szWmsDCt[4+1];
        bool      m_bWmsECt;
        char      m_szWmsECt[4+1];
        bool      m_bWmsFCt;
        char      m_szWmsFCt[4+1];
        bool      m_bWbcAbaNumber;
        char      m_szWbcAbaNumber[9+1];
        bool      m_bWbcNextProcCent;
        char      m_szWbcNextProcCent[2+1];
        bool      m_bWbcNextProcYr;
        char      m_szWbcNextProcYr[2+1];
        bool      m_bWbcNextProcMo;
        char      m_szWbcNextProcMo[2+1];
        bool      m_bWbcNextProcDa;
        char      m_szWbcNextProcDa[2+1];
        bool      m_bWbcCaptCent;
        char      m_szWbcCaptCent[2+1];
        bool      m_bWbcCaptYr;
        char      m_szWbcCaptYr[2+1];
        bool      m_bWbcCaptMo;
        char      m_szWbcCaptMo[2+1];
        bool      m_bWbcCaptDa;
        char      m_szWbcCaptDa[2+1];
        bool      m_bWmsMmdaIndicator;
        char      m_szWmsMmdaIndicator[1+1];
        bool      m_bWmsIntStatus;
        char      m_szWmsIntStatus[1+1];
        bool      m_bWmsIodDistCd;
        char      m_szWmsIodDistCd[1+1];
        bool      m_bWmsNaCountry;
        char      m_szWmsNaCountry[2+1];
        bool      m_bWmsNraTaxProvince;
        char      m_szWmsNraTaxProvince[2+1];
        bool      m_bWmsNraTaxCountry;
        char      m_szWmsNraTaxCountry[2+1];
        bool      m_bWmsNraCertName1;
        char      m_szWmsNraCertName1[1+1];
        bool      m_bWmsNraCertName2;
        char      m_szWmsNraCertName2[1+1];
        bool      m_bWmsInfoAlienCode;
        char      m_szWmsInfoAlienCode[1+1];
        bool      m_bWmsStmtBeginBal;
        char      m_szWmsStmtBeginBal[17+1];
        bool      m_bWmsLoanMinPartPmt;
        char      m_szWmsLoanMinPartPmt[17+1];
        bool      m_bWmsHoldNo;
        char      m_szWmsHoldNo[8+1];
        bool      m_bMemoOlDtLstMonCent;
        char      m_szMemoOlDtLstMonCent[2+1];
        bool      m_bMemoOlDtLstMonYr;
        char      m_szMemoOlDtLstMonYr[2+1];
        bool      m_bMemoOlDtLstMonMo;
        char      m_szMemoOlDtLstMonMo[2+1];
        bool      m_bMemoOlDtLstMonDa;
        char      m_szMemoOlDtLstMonDa[2+1];
        bool      m_bWmsIodXferIntPtr;
        char      m_szWmsIodXferIntPtr[2+1];
        bool      m_bUserCharField1;
        char      m_szUserCharField1[15+1];
        bool      m_bUserCharField2;
        char      m_szUserCharField2[15+1];
        bool      m_bUserCharField3;
        char      m_szUserCharField3[15+1];
        bool      m_bYesterdayFloatAmt;
        char      m_szYesterdayFloatAmt[17+1];
        bool      m_bTodayFloatAmt;
        char      m_szTodayFloatAmt[17+1];
        bool      m_bTotalBalance;
        char      m_szTotalBalance[17+1];
        bool      m_bWmsGovernmentId;
        char      m_szWmsGovernmentId[25+1];
    
      public:
        long      m_lIndex;

        AsdSDIMDTLO ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bWmsControl1 = false;
            strcpy(m_szWmsControl1, "");
            m_bWmsControl2 = false;
            strcpy(m_szWmsControl2, "");
            m_bWmsControl3 = false;
            strcpy(m_szWmsControl3, "");
            m_bWmsControl4 = false;
            strcpy(m_szWmsControl4, "");
            m_bWmsAcctNo = false;
            strcpy(m_szWmsAcctNo, "");
            m_bWorkMoreBreakdown = false;
            strcpy(m_szWorkMoreBreakdown, "");
            m_bWorkReasonStatus = false;
            strcpy(m_szWorkReasonStatus, "");
            m_bWorkSysType = false;
            strcpy(m_szWorkSysType, "");
            m_bWorkLoanBal = false;
            strcpy(m_szWorkLoanBal, "+0000000000000.00");
            m_bWorkHoldAmt = false;
            strcpy(m_szWorkHoldAmt, "+0000000000000.00");
            m_bWorkAvgCollBal = false;
            strcpy(m_szWorkAvgCollBal, "+0000000000000.00");
            m_bWorkMtdAvgBal = false;
            strcpy(m_szWorkMtdAvgBal, "+0000000000000.00");
            m_bImMemoOlAvailBal = false;
            strcpy(m_szImMemoOlAvailBal, "+0000000000000.00");
            m_bWorkCashAvailAmt = false;
            strcpy(m_szWorkCashAvailAmt, "+0000000000000.00");
            m_bWbcProcThruCent = false;
            strcpy(m_szWbcProcThruCent, "");
            m_bWbcProcThruYr = false;
            strcpy(m_szWbcProcThruYr, "");
            m_bWbcProcThruMo = false;
            strcpy(m_szWbcProcThruMo, "");
            m_bWbcProcThruDa = false;
            strcpy(m_szWbcProcThruDa, "");
            m_bCreditLimit = false;
            strcpy(m_szCreditLimit, "+0000000000000");
            m_bWmsStatus = false;
            strcpy(m_szWmsStatus, "");
            m_bWmsAcctType = false;
            strcpy(m_szWmsAcctType, "");
            m_bWmsCityState = false;
            strcpy(m_szWmsCityState, "");
            m_bWmsNaZipCode = false;
            strcpy(m_szWmsNaZipCode, "");
            m_bWmsTaxNumber = false;
            strcpy(m_szWmsTaxNumber, "");
            m_bWmsHoldAllFundsFlag = false;
            strcpy(m_szWmsHoldAllFundsFlag, "");
            m_bWmsBankAvailAmt = false;
            strcpy(m_szWmsBankAvailAmt, "+0000000000000");
            m_bWmsCustAvailAmt = false;
            strcpy(m_szWmsCustAvailAmt, "+0000000000000");
            m_bWmsAmtLastDeposit = false;
            strcpy(m_szWmsAmtLastDeposit, "+0000000000000.00");
            m_bWmsDdaBal = false;
            strcpy(m_szWmsDdaBal, "+0000000000000.00");
            m_bWmsMinBal = false;
            strcpy(m_szWmsMinBal, "+0000000000000.00");
            m_bWmsOpenedCent = false;
            strcpy(m_szWmsOpenedCent, "");
            m_bWmsOpenedYr = false;
            strcpy(m_szWmsOpenedYr, "");
            m_bWmsOpenedMo = false;
            strcpy(m_szWmsOpenedMo, "");
            m_bWmsOpenedDa = false;
            strcpy(m_szWmsOpenedDa, "");
            m_bWmsCentLastDep = false;
            strcpy(m_szWmsCentLastDep, "");
            m_bWmsYrLastDep = false;
            strcpy(m_szWmsYrLastDep, "");
            m_bWmsMoLastDep = false;
            strcpy(m_szWmsMoLastDep, "");
            m_bWmsDaLastDep = false;
            strcpy(m_szWmsDaLastDep, "");
            m_bWmsLastCustActCent = false;
            strcpy(m_szWmsLastCustActCent, "");
            m_bWmsLastCustActYr = false;
            strcpy(m_szWmsLastCustActYr, "");
            m_bWmsLastCustActMo = false;
            strcpy(m_szWmsLastCustActMo, "");
            m_bWmsLastCustActDa = false;
            strcpy(m_szWmsLastCustActDa, "");
            m_bWmsLastMaintCent = false;
            strcpy(m_szWmsLastMaintCent, "");
            m_bWmsLastMaintYr = false;
            strcpy(m_szWmsLastMaintYr, "");
            m_bWmsLastMaintMo = false;
            strcpy(m_szWmsLastMaintMo, "");
            m_bWmsLastMaintDa = false;
            strcpy(m_szWmsLastMaintDa, "");
            m_bWmsChgCardFlg = false;
            strcpy(m_szWmsChgCardFlg, "");
            m_bWmsSpecInstToday = false;
            strcpy(m_szWmsSpecInstToday, "");
            m_bWmsNsfToday = false;
            strcpy(m_szWmsNsfToday, "");
            m_bWmsOdToday = false;
            strcpy(m_szWmsOdToday, "");
            m_bWmsKitingFlag = false;
            strcpy(m_szWmsKitingFlag, "");
            m_bWmsKiteConsecDays = false;
            strcpy(m_szWmsKiteConsecDays, "+000");
            m_bWmsMtdKitingSusp = false;
            strcpy(m_szWmsMtdKitingSusp, "+000");
            m_bWmsIodCycAccInt = false;
            strcpy(m_szWmsIodCycAccInt, "+00000000000.000000");
            m_bWmsIodProjAccr = false;
            strcpy(m_szWmsIodProjAccr, "+0000000000000.00");
            m_bWmsScAmttrnsfrNo = false;
            strcpy(m_szWmsScAmttrnsfrNo, "+0000000");
            m_bWmsOdLimit = false;
            strcpy(m_szWmsOdLimit, "");
            m_bWmsScCheckItems = false;
            strcpy(m_szWmsScCheckItems, "+0000000");
            m_bImMemoOlStopPays = false;
            strcpy(m_szImMemoOlStopPays, "+0000000");
            m_bWmsBalanceHistory = false;
            strcpy(m_szWmsBalanceHistory, "");
            m_bWmsBalHistRet = false;
            strcpy(m_szWmsBalHistRet, "+000");
            m_bWmsBranch = false;
            strcpy(m_szWmsBranch, "");
            m_bWmsOfficer = false;
            strcpy(m_szWmsOfficer, "");
            m_bWmsIodRatePtr = false;
            strcpy(m_szWmsIodRatePtr, "+000");
            m_bWmsIodCurAnn = false;
            strcpy(m_szWmsIodCurAnn, "+0.00000000");
            m_bWmsIodYtdIntPaid = false;
            strcpy(m_szWmsIodYtdIntPaid, "+0000000000000.00");
            m_bWmsIodPrvYtdIntPd = false;
            strcpy(m_szWmsIodPrvYtdIntPd, "+0000000000000.00");
            m_bWmsStmtPull = false;
            strcpy(m_szWmsStmtPull, "");
            m_bWmsStmtSupp = false;
            strcpy(m_szWmsStmtSupp, "");
            m_bWmsStmtFld1 = false;
            strcpy(m_szWmsStmtFld1, "00");
            m_bWmsStmtFld2 = false;
            strcpy(m_szWmsStmtFld2, "00");
            m_bWmsStmtFld3 = false;
            strcpy(m_szWmsStmtFld3, "00");
            m_bWmsStmtFld4 = false;
            strcpy(m_szWmsStmtFld4, "00");
            m_bWmsIodAccrualType = false;
            strcpy(m_szWmsIodAccrualType, "");
            m_bWmsUnavailToday = false;
            strcpy(m_szWmsUnavailToday, "");
            m_bWmsDaysNsfToDate = false;
            strcpy(m_szWmsDaysNsfToDate, "+00000");
            m_bWmsDaysOdToDate = false;
            strcpy(m_szWmsDaysOdToDate, "+00000");
            m_bWmsCustomerNumber = false;
            strcpy(m_szWmsCustomerNumber, "");
            m_bWmsNmeAddrTlrs = false;
            strcpy(m_szWmsNmeAddrTlrs, "+0");
            m_bWmsSocSecNa = false;
            strcpy(m_szWmsSocSecNa, "");
            m_bWmsDcTrlr = false;
            strcpy(m_szWmsDcTrlr, "");
            m_bWmsLoanTrlr = false;
            strcpy(m_szWmsLoanTrlr, "");
            m_bWmsMarketTrlr = false;
            strcpy(m_szWmsMarketTrlr, "");
            m_bWmsTrnsfrAfflTrlr = false;
            strcpy(m_szWmsTrnsfrAfflTrlr, "+000");
            m_bWmsOdNsfTrlr = false;
            strcpy(m_szWmsOdNsfTrlr, "");
            m_bWmsSavingsTrlr = false;
            strcpy(m_szWmsSavingsTrlr, "");
            m_bWmsBankAvailTrlr = false;
            strcpy(m_szWmsBankAvailTrlr, "");
            m_bWmsCustAvailTrlr = false;
            strcpy(m_szWmsCustAvailTrlr, "");
            m_bWmsCombinedStat = false;
            strcpy(m_szWmsCombinedStat, "+000");
            m_bWmsTargetAmtTrlr = false;
            strcpy(m_szWmsTargetAmtTrlr, "");
            m_bWmsLimitTransfer = false;
            strcpy(m_szWmsLimitTransfer, "");
            m_bWmsDcdTaxDataTrlr = false;
            strcpy(m_szWmsDcdTaxDataTrlr, "");
            m_bWmsOdAccrualTrlr = false;
            strcpy(m_szWmsOdAccrualTrlr, "");
            m_bWmsInfoTrlr = false;
            strcpy(m_szWmsInfoTrlr, "");
            m_bWmsExtScDataTrlr = false;
            strcpy(m_szWmsExtScDataTrlr, "");
            m_bWmsExtrnlDepositTrlr = false;
            strcpy(m_szWmsExtrnlDepositTrlr, "");
            m_bWmsKitingSuspTrlr = false;
            strcpy(m_szWmsKitingSuspTrlr, "");
            m_bWmsEfaTrlr = false;
            strcpy(m_szWmsEfaTrlr, "");
            m_bWmsCashAvailTrlr = false;
            strcpy(m_szWmsCashAvailTrlr, "");
            m_bWmsInvestmentTrlr = false;
            strcpy(m_szWmsInvestmentTrlr, "");
            m_bWmsRateTrlr = false;
            strcpy(m_szWmsRateTrlr, "");
            m_bWmsSavPtr = false;
            strcpy(m_szWmsSavPtr, "+0");
            m_bWmsExpansionInd = false;
            strcpy(m_szWmsExpansionInd, "");
            m_bWmsInfoContinent = false;
            strcpy(m_szWmsInfoContinent, "");
            m_bWmsInfoCntry = false;
            strcpy(m_szWmsInfoCntry, "");
            m_bWmsIntCurBal = false;
            strcpy(m_szWmsIntCurBal, "+0000000000000.00");
            m_bWmsPayoffAmt = false;
            strcpy(m_szWmsPayoffAmt, "+0000000000000.00");
            m_bWmsLastPmtCent = false;
            strcpy(m_szWmsLastPmtCent, "");
            m_bWmsLastPmtYr = false;
            strcpy(m_szWmsLastPmtYr, "");
            m_bWmsLastPmtMo = false;
            strcpy(m_szWmsLastPmtMo, "");
            m_bWmsLastPmtDa = false;
            strcpy(m_szWmsLastPmtDa, "");
            m_bWmsPymtDueAmt = false;
            strcpy(m_szWmsPymtDueAmt, "+0000000000000.00");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 7; lOccurs++)
            {
                m_bWmsBankAvailTrAmt[lOccurs] = false;
                strcpy(m_szWmsBankAvailTrAmt[lOccurs], "+0000000000000");
            }
            for (lOccurs = 0; lOccurs < 12; lOccurs++)
            {
                m_bWmsCustAvailFunds[lOccurs] = false;
                strcpy(m_szWmsCustAvailFunds[lOccurs], "+0000000000000");
            }
            for (lOccurs = 0; lOccurs < 12; lOccurs++)
            {
                m_bWmsTimesNsfMo[lOccurs] = false;
                strcpy(m_szWmsTimesNsfMo[lOccurs], "+000");
            }
            for (lOccurs = 0; lOccurs < 12; lOccurs++)
            {
                m_bWmsTimesOdMo[lOccurs] = false;
                strcpy(m_szWmsTimesOdMo[lOccurs], "+000");
            }
            for (lOccurs = 0; lOccurs < 12; lOccurs++)
            {
                m_bWmsTimesUnavailMo[lOccurs] = false;
                strcpy(m_szWmsTimesUnavailMo[lOccurs], "+000");
            }
            m_bImMemoOlDrAmt = false;
            strcpy(m_szImMemoOlDrAmt, "+0000000000000.00");
            m_bImMemoOlCrAmt = false;
            strcpy(m_szImMemoOlCrAmt, "+0000000000000.00");
            m_bImMemoOlSvDrAmt = false;
            strcpy(m_szImMemoOlSvDrAmt, "+0000000000000.00");
            m_bImMemoOlSvCrAmt = false;
            strcpy(m_szImMemoOlSvCrAmt, "+0000000000000.00");
            m_bImMemoOlLnDrAmt = false;
            strcpy(m_szImMemoOlLnDrAmt, "+0000000000000.00");
            m_bImMemoOlLnCrAmt = false;
            strcpy(m_szImMemoOlLnCrAmt, "+0000000000000.00");
            m_bImMemoOlLnAvailBal = false;
            strcpy(m_szImMemoOlLnAvailBal, "+0000000000000.00");
            m_bWmsSsnForeignAddress = false;
            strcpy(m_szWmsSsnForeignAddress, "");
            m_bWmsLoanStatus = false;
            strcpy(m_szWmsLoanStatus, "");
            m_bWmsIntlCurrCode = false;
            strcpy(m_szWmsIntlCurrCode, "");
            m_bWmsIntlCurrDec = false;
            strcpy(m_szWmsIntlCurrDec, "");
            m_bWmsIntlCustLanguage = false;
            strcpy(m_szWmsIntlCustLanguage, "");
            m_bWmsIntlCustLangGroup = false;
            strcpy(m_szWmsIntlCustLangGroup, "");
            m_bWmsTaxCode = false;
            strcpy(m_szWmsTaxCode, "");
            m_bWmsAnnualRate = false;
            strcpy(m_szWmsAnnualRate, "+0.00000000");
            m_bWmsLoanPrevYtdInt = false;
            strcpy(m_szWmsLoanPrevYtdInt, "+0000000000000.00");
            m_bWmsLoanYtdInt = false;
            strcpy(m_szWmsLoanYtdInt, "+0000000000000.00");
            m_bWmsSavCurAnn = false;
            strcpy(m_szWmsSavCurAnn, "+0.00000000");
            m_bWmsYtdIntPaid = false;
            strcpy(m_szWmsYtdIntPaid, "+0000000000000.00");
            m_bImMemoOlOffEmp = false;
            strcpy(m_szImMemoOlOffEmp, "");
            m_bWmsMtdAnalysis = false;
            strcpy(m_szWmsMtdAnalysis, "");
            m_bWmsChkTruncFlag = false;
            strcpy(m_szWmsChkTruncFlag, "");
            m_bWmsPrevYtdInt = false;
            strcpy(m_szWmsPrevYtdInt, "+0000000000000.00");
            m_bWmsShortName = false;
            strcpy(m_szWmsShortName, "");
            m_bWmsLastStmtCc = false;
            strcpy(m_szWmsLastStmtCc, "");
            m_bWmsLastStmtYr = false;
            strcpy(m_szWmsLastStmtYr, "");
            m_bWmsLastStmtMo = false;
            strcpy(m_szWmsLastStmtMo, "");
            m_bWmsLastStmtDa = false;
            strcpy(m_szWmsLastStmtDa, "");
            m_bWmsNsfWaive = false;
            strcpy(m_szWmsNsfWaive, "");
            m_bWmsOdWaive = false;
            strcpy(m_szWmsOdWaive, "");
            m_bWmsWaiveFee = false;
            strcpy(m_szWmsWaiveFee, "");
            m_bWmsRegion = false;
            strcpy(m_szWmsRegion, "");
            m_bWbcOrigProcThruCent = false;
            strcpy(m_szWbcOrigProcThruCent, "");
            m_bWbcOrigProcThruYr = false;
            strcpy(m_szWbcOrigProcThruYr, "");
            m_bWbcOrigProcThruMo = false;
            strcpy(m_szWbcOrigProcThruMo, "");
            m_bWbcOrigProcThruDa = false;
            strcpy(m_szWbcOrigProcThruDa, "");
            m_bWmsScCharge = false;
            strcpy(m_szWmsScCharge, "");
            m_bWmsScWaiveReason = false;
            strcpy(m_szWmsScWaiveReason, "");
            m_bWmsOdLimitAmt = false;
            strcpy(m_szWmsOdLimitAmt, "+0000000000000.00");
            m_bWbcLastProcCc = false;
            strcpy(m_szWbcLastProcCc, "");
            m_bWbcLastProcYr = false;
            strcpy(m_szWbcLastProcYr, "");
            m_bWbcLastProcMo = false;
            strcpy(m_szWbcLastProcMo, "");
            m_bWbcLastProcDa = false;
            strcpy(m_szWbcLastProcDa, "");
            m_bWmsStmtClear = false;
            strcpy(m_szWmsStmtClear, "");
            m_bWmsFundingFlag = false;
            strcpy(m_szWmsFundingFlag, "");
            m_bWmsHomeAreaCode = false;
            strcpy(m_szWmsHomeAreaCode, "");
            m_bWmsHomePhoneNo = false;
            strcpy(m_szWmsHomePhoneNo, "");
            m_bWmsHomeExtension = false;
            strcpy(m_szWmsHomeExtension, "");
            m_bWmsBusAreaCode = false;
            strcpy(m_szWmsBusAreaCode, "");
            m_bWmsBusPhoneNo = false;
            strcpy(m_szWmsBusPhoneNo, "");
            m_bWmsBusExtension = false;
            strcpy(m_szWmsBusExtension, "");
            m_bWmsTinCertification = false;
            strcpy(m_szWmsTinCertification, "");
            m_bCollBal = false;
            strcpy(m_szCollBal, "+0000000000000.00");
            m_bYtdAvgBal = false;
            strcpy(m_szYtdAvgBal, "+0000000000000.00");
            m_bWmsStmtSpeclHandl = false;
            strcpy(m_szWmsStmtSpeclHandl, "");
            m_bDateClosedCc = false;
            strcpy(m_szDateClosedCc, "");
            m_bDateClosedYr = false;
            strcpy(m_szDateClosedYr, "");
            m_bDateClosedMo = false;
            strcpy(m_szDateClosedMo, "");
            m_bDateClosedDa = false;
            strcpy(m_szDateClosedDa, "");
            m_bNoNsf = false;
            strcpy(m_szNoNsf, "000");
            m_bNoOd = false;
            strcpy(m_szNoOd, "000");
            m_bWmsBkupWthldFlag = false;
            strcpy(m_szWmsBkupWthldFlag, "");
            m_bWmsTaxExemptRsn = false;
            strcpy(m_szWmsTaxExemptRsn, "");
            m_bWmsApprovalCc = false;
            strcpy(m_szWmsApprovalCc, "");
            m_bWmsApprovalYr = false;
            strcpy(m_szWmsApprovalYr, "");
            m_bWmsApprovalMo = false;
            strcpy(m_szWmsApprovalMo, "");
            m_bWmsApprovalDa = false;
            strcpy(m_szWmsApprovalDa, "");
            m_bWmsCrRatingCc = false;
            strcpy(m_szWmsCrRatingCc, "");
            m_bWmsCrRatingYr = false;
            strcpy(m_szWmsCrRatingYr, "");
            m_bWmsCrRatingMo = false;
            strcpy(m_szWmsCrRatingMo, "");
            m_bWmsCrRatingDa = false;
            strcpy(m_szWmsCrRatingDa, "");
            m_bImMemoOlPrinBal = false;
            strcpy(m_szImMemoOlPrinBal, "+0000000000000.00");
            m_bImMemoOlDdaBal = false;
            strcpy(m_szImMemoOlDdaBal, "+0000000000000.00");
            m_bImMemoOlSvAvailBal = false;
            strcpy(m_szImMemoOlSvAvailBal, "+0000000000000.00");
            m_bImMemoOlNewDelFlag = false;
            strcpy(m_szImMemoOlNewDelFlag, "");
            m_bWmsPastDueAmt = false;
            strcpy(m_szWmsPastDueAmt, "+0000000000000.00");
            m_bWmsAutoPymt = false;
            strcpy(m_szWmsAutoPymt, "");
            m_bWmsLastPymtAmt = false;
            strcpy(m_szWmsLastPymtAmt, "+0000000000000.00");
            m_bWmsACt = false;
            strcpy(m_szWmsACt, "+000");
            m_bWmsBCt = false;
            strcpy(m_szWmsBCt, "+000");
            m_bWmsCCt = false;
            strcpy(m_szWmsCCt, "+000");
            m_bWmsDCt = false;
            strcpy(m_szWmsDCt, "+000");
            m_bWmsECt = false;
            strcpy(m_szWmsECt, "+000");
            m_bWmsFCt = false;
            strcpy(m_szWmsFCt, "+000");
            m_bWbcAbaNumber = false;
            strcpy(m_szWbcAbaNumber, "");
            m_bWbcNextProcCent = false;
            strcpy(m_szWbcNextProcCent, "");
            m_bWbcNextProcYr = false;
            strcpy(m_szWbcNextProcYr, "");
            m_bWbcNextProcMo = false;
            strcpy(m_szWbcNextProcMo, "");
            m_bWbcNextProcDa = false;
            strcpy(m_szWbcNextProcDa, "");
            m_bWbcCaptCent = false;
            strcpy(m_szWbcCaptCent, "");
            m_bWbcCaptYr = false;
            strcpy(m_szWbcCaptYr, "");
            m_bWbcCaptMo = false;
            strcpy(m_szWbcCaptMo, "");
            m_bWbcCaptDa = false;
            strcpy(m_szWbcCaptDa, "");
            m_bWmsMmdaIndicator = false;
            strcpy(m_szWmsMmdaIndicator, "");
            m_bWmsIntStatus = false;
            strcpy(m_szWmsIntStatus, "");
            m_bWmsIodDistCd = false;
            strcpy(m_szWmsIodDistCd, "");
            m_bWmsNaCountry = false;
            strcpy(m_szWmsNaCountry, "");
            m_bWmsNraTaxProvince = false;
            strcpy(m_szWmsNraTaxProvince, "");
            m_bWmsNraTaxCountry = false;
            strcpy(m_szWmsNraTaxCountry, "");
            m_bWmsNraCertName1 = false;
            strcpy(m_szWmsNraCertName1, "");
            m_bWmsNraCertName2 = false;
            strcpy(m_szWmsNraCertName2, "");
            m_bWmsInfoAlienCode = false;
            strcpy(m_szWmsInfoAlienCode, "");
            m_bWmsStmtBeginBal = false;
            strcpy(m_szWmsStmtBeginBal, "+0000000000000.00");
            m_bWmsLoanMinPartPmt = false;
            strcpy(m_szWmsLoanMinPartPmt, "+0000000000000.00");
            m_bWmsHoldNo = false;
            strcpy(m_szWmsHoldNo, "+0000000");
            m_bMemoOlDtLstMonCent = false;
            strcpy(m_szMemoOlDtLstMonCent, "");
            m_bMemoOlDtLstMonYr = false;
            strcpy(m_szMemoOlDtLstMonYr, "");
            m_bMemoOlDtLstMonMo = false;
            strcpy(m_szMemoOlDtLstMonMo, "");
            m_bMemoOlDtLstMonDa = false;
            strcpy(m_szMemoOlDtLstMonDa, "");
            m_bWmsIodXferIntPtr = false;
            strcpy(m_szWmsIodXferIntPtr, "+0");
            m_bUserCharField1 = false;
            strcpy(m_szUserCharField1, "");
            m_bUserCharField2 = false;
            strcpy(m_szUserCharField2, "");
            m_bUserCharField3 = false;
            strcpy(m_szUserCharField3, "");
            m_bYesterdayFloatAmt = false;
            strcpy(m_szYesterdayFloatAmt, "+0000000000000.00");
            m_bTodayFloatAmt = false;
            strcpy(m_szTodayFloatAmt, "+0000000000000.00");
            m_bTotalBalance = false;
            strcpy(m_szTotalBalance, "+0000000000000.00");
            m_bWmsGovernmentId = false;
            strcpy(m_szWmsGovernmentId, "");
        
            for (lOccurs = 0; lOccurs < 7; lOccurs++)
            {
                WmsNaLine[lOccurs]  = &CWmsNaLine[lOccurs];
                CWmsNaLine[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 7; lOccurs++)
            {
                WmsBillDueDate[lOccurs]  = &CWmsBillDueDate[lOccurs];
                CWmsBillDueDate[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 25; lOccurs++)
            {
                WmsScMiscAmounts[lOccurs]  = &CWmsScMiscAmounts[lOccurs];
                CWmsScMiscAmounts[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                XferAffilTr[lOccurs]  = &CXferAffilTr[lOccurs];
                CXferAffilTr[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bWmsControl1 = false;
            strcpy(m_szWmsControl1, "");
            m_bWmsControl2 = false;
            strcpy(m_szWmsControl2, "");
            m_bWmsControl3 = false;
            strcpy(m_szWmsControl3, "");
            m_bWmsControl4 = false;
            strcpy(m_szWmsControl4, "");
            m_bWmsAcctNo = false;
            strcpy(m_szWmsAcctNo, "");
            m_bWorkMoreBreakdown = false;
            strcpy(m_szWorkMoreBreakdown, "");
            m_bWorkReasonStatus = false;
            strcpy(m_szWorkReasonStatus, "");
            m_bWorkSysType = false;
            strcpy(m_szWorkSysType, "");
            m_bWorkLoanBal = false;
            strcpy(m_szWorkLoanBal, "+0000000000000.00");
            m_bWorkHoldAmt = false;
            strcpy(m_szWorkHoldAmt, "+0000000000000.00");
            m_bWorkAvgCollBal = false;
            strcpy(m_szWorkAvgCollBal, "+0000000000000.00");
            m_bWorkMtdAvgBal = false;
            strcpy(m_szWorkMtdAvgBal, "+0000000000000.00");
            m_bImMemoOlAvailBal = false;
            strcpy(m_szImMemoOlAvailBal, "+0000000000000.00");
            m_bWorkCashAvailAmt = false;
            strcpy(m_szWorkCashAvailAmt, "+0000000000000.00");
            m_bWbcProcThruCent = false;
            strcpy(m_szWbcProcThruCent, "");
            m_bWbcProcThruYr = false;
            strcpy(m_szWbcProcThruYr, "");
            m_bWbcProcThruMo = false;
            strcpy(m_szWbcProcThruMo, "");
            m_bWbcProcThruDa = false;
            strcpy(m_szWbcProcThruDa, "");
            m_bCreditLimit = false;
            strcpy(m_szCreditLimit, "+0000000000000");
            m_bWmsStatus = false;
            strcpy(m_szWmsStatus, "");
            m_bWmsAcctType = false;
            strcpy(m_szWmsAcctType, "");
            m_bWmsCityState = false;
            strcpy(m_szWmsCityState, "");
            m_bWmsNaZipCode = false;
            strcpy(m_szWmsNaZipCode, "");
            m_bWmsTaxNumber = false;
            strcpy(m_szWmsTaxNumber, "");
            m_bWmsHoldAllFundsFlag = false;
            strcpy(m_szWmsHoldAllFundsFlag, "");
            m_bWmsBankAvailAmt = false;
            strcpy(m_szWmsBankAvailAmt, "+0000000000000");
            m_bWmsCustAvailAmt = false;
            strcpy(m_szWmsCustAvailAmt, "+0000000000000");
            m_bWmsAmtLastDeposit = false;
            strcpy(m_szWmsAmtLastDeposit, "+0000000000000.00");
            m_bWmsDdaBal = false;
            strcpy(m_szWmsDdaBal, "+0000000000000.00");
            m_bWmsMinBal = false;
            strcpy(m_szWmsMinBal, "+0000000000000.00");
            m_bWmsOpenedCent = false;
            strcpy(m_szWmsOpenedCent, "");
            m_bWmsOpenedYr = false;
            strcpy(m_szWmsOpenedYr, "");
            m_bWmsOpenedMo = false;
            strcpy(m_szWmsOpenedMo, "");
            m_bWmsOpenedDa = false;
            strcpy(m_szWmsOpenedDa, "");
            m_bWmsCentLastDep = false;
            strcpy(m_szWmsCentLastDep, "");
            m_bWmsYrLastDep = false;
            strcpy(m_szWmsYrLastDep, "");
            m_bWmsMoLastDep = false;
            strcpy(m_szWmsMoLastDep, "");
            m_bWmsDaLastDep = false;
            strcpy(m_szWmsDaLastDep, "");
            m_bWmsLastCustActCent = false;
            strcpy(m_szWmsLastCustActCent, "");
            m_bWmsLastCustActYr = false;
            strcpy(m_szWmsLastCustActYr, "");
            m_bWmsLastCustActMo = false;
            strcpy(m_szWmsLastCustActMo, "");
            m_bWmsLastCustActDa = false;
            strcpy(m_szWmsLastCustActDa, "");
            m_bWmsLastMaintCent = false;
            strcpy(m_szWmsLastMaintCent, "");
            m_bWmsLastMaintYr = false;
            strcpy(m_szWmsLastMaintYr, "");
            m_bWmsLastMaintMo = false;
            strcpy(m_szWmsLastMaintMo, "");
            m_bWmsLastMaintDa = false;
            strcpy(m_szWmsLastMaintDa, "");
            m_bWmsChgCardFlg = false;
            strcpy(m_szWmsChgCardFlg, "");
            m_bWmsSpecInstToday = false;
            strcpy(m_szWmsSpecInstToday, "");
            m_bWmsNsfToday = false;
            strcpy(m_szWmsNsfToday, "");
            m_bWmsOdToday = false;
            strcpy(m_szWmsOdToday, "");
            m_bWmsKitingFlag = false;
            strcpy(m_szWmsKitingFlag, "");
            m_bWmsKiteConsecDays = false;
            strcpy(m_szWmsKiteConsecDays, "+000");
            m_bWmsMtdKitingSusp = false;
            strcpy(m_szWmsMtdKitingSusp, "+000");
            m_bWmsIodCycAccInt = false;
            strcpy(m_szWmsIodCycAccInt, "+00000000000.000000");
            m_bWmsIodProjAccr = false;
            strcpy(m_szWmsIodProjAccr, "+0000000000000.00");
            m_bWmsScAmttrnsfrNo = false;
            strcpy(m_szWmsScAmttrnsfrNo, "+0000000");
            m_bWmsOdLimit = false;
            strcpy(m_szWmsOdLimit, "");
            m_bWmsScCheckItems = false;
            strcpy(m_szWmsScCheckItems, "+0000000");
            m_bImMemoOlStopPays = false;
            strcpy(m_szImMemoOlStopPays, "+0000000");
            m_bWmsBalanceHistory = false;
            strcpy(m_szWmsBalanceHistory, "");
            m_bWmsBalHistRet = false;
            strcpy(m_szWmsBalHistRet, "+000");
            m_bWmsBranch = false;
            strcpy(m_szWmsBranch, "");
            m_bWmsOfficer = false;
            strcpy(m_szWmsOfficer, "");
            m_bWmsIodRatePtr = false;
            strcpy(m_szWmsIodRatePtr, "+000");
            m_bWmsIodCurAnn = false;
            strcpy(m_szWmsIodCurAnn, "+0.00000000");
            m_bWmsIodYtdIntPaid = false;
            strcpy(m_szWmsIodYtdIntPaid, "+0000000000000.00");
            m_bWmsIodPrvYtdIntPd = false;
            strcpy(m_szWmsIodPrvYtdIntPd, "+0000000000000.00");
            m_bWmsStmtPull = false;
            strcpy(m_szWmsStmtPull, "");
            m_bWmsStmtSupp = false;
            strcpy(m_szWmsStmtSupp, "");
            m_bWmsStmtFld1 = false;
            strcpy(m_szWmsStmtFld1, "00");
            m_bWmsStmtFld2 = false;
            strcpy(m_szWmsStmtFld2, "00");
            m_bWmsStmtFld3 = false;
            strcpy(m_szWmsStmtFld3, "00");
            m_bWmsStmtFld4 = false;
            strcpy(m_szWmsStmtFld4, "00");
            m_bWmsIodAccrualType = false;
            strcpy(m_szWmsIodAccrualType, "");
            m_bWmsUnavailToday = false;
            strcpy(m_szWmsUnavailToday, "");
            m_bWmsDaysNsfToDate = false;
            strcpy(m_szWmsDaysNsfToDate, "+00000");
            m_bWmsDaysOdToDate = false;
            strcpy(m_szWmsDaysOdToDate, "+00000");
            m_bWmsCustomerNumber = false;
            strcpy(m_szWmsCustomerNumber, "");
            m_bWmsNmeAddrTlrs = false;
            strcpy(m_szWmsNmeAddrTlrs, "+0");
            m_bWmsSocSecNa = false;
            strcpy(m_szWmsSocSecNa, "");
            m_bWmsDcTrlr = false;
            strcpy(m_szWmsDcTrlr, "");
            m_bWmsLoanTrlr = false;
            strcpy(m_szWmsLoanTrlr, "");
            m_bWmsMarketTrlr = false;
            strcpy(m_szWmsMarketTrlr, "");
            m_bWmsTrnsfrAfflTrlr = false;
            strcpy(m_szWmsTrnsfrAfflTrlr, "+000");
            m_bWmsOdNsfTrlr = false;
            strcpy(m_szWmsOdNsfTrlr, "");
            m_bWmsSavingsTrlr = false;
            strcpy(m_szWmsSavingsTrlr, "");
            m_bWmsBankAvailTrlr = false;
            strcpy(m_szWmsBankAvailTrlr, "");
            m_bWmsCustAvailTrlr = false;
            strcpy(m_szWmsCustAvailTrlr, "");
            m_bWmsCombinedStat = false;
            strcpy(m_szWmsCombinedStat, "+000");
            m_bWmsTargetAmtTrlr = false;
            strcpy(m_szWmsTargetAmtTrlr, "");
            m_bWmsLimitTransfer = false;
            strcpy(m_szWmsLimitTransfer, "");
            m_bWmsDcdTaxDataTrlr = false;
            strcpy(m_szWmsDcdTaxDataTrlr, "");
            m_bWmsOdAccrualTrlr = false;
            strcpy(m_szWmsOdAccrualTrlr, "");
            m_bWmsInfoTrlr = false;
            strcpy(m_szWmsInfoTrlr, "");
            m_bWmsExtScDataTrlr = false;
            strcpy(m_szWmsExtScDataTrlr, "");
            m_bWmsExtrnlDepositTrlr = false;
            strcpy(m_szWmsExtrnlDepositTrlr, "");
            m_bWmsKitingSuspTrlr = false;
            strcpy(m_szWmsKitingSuspTrlr, "");
            m_bWmsEfaTrlr = false;
            strcpy(m_szWmsEfaTrlr, "");
            m_bWmsCashAvailTrlr = false;
            strcpy(m_szWmsCashAvailTrlr, "");
            m_bWmsInvestmentTrlr = false;
            strcpy(m_szWmsInvestmentTrlr, "");
            m_bWmsRateTrlr = false;
            strcpy(m_szWmsRateTrlr, "");
            m_bWmsSavPtr = false;
            strcpy(m_szWmsSavPtr, "+0");
            m_bWmsExpansionInd = false;
            strcpy(m_szWmsExpansionInd, "");
            m_bWmsInfoContinent = false;
            strcpy(m_szWmsInfoContinent, "");
            m_bWmsInfoCntry = false;
            strcpy(m_szWmsInfoCntry, "");
            m_bWmsIntCurBal = false;
            strcpy(m_szWmsIntCurBal, "+0000000000000.00");
            m_bWmsPayoffAmt = false;
            strcpy(m_szWmsPayoffAmt, "+0000000000000.00");
            m_bWmsLastPmtCent = false;
            strcpy(m_szWmsLastPmtCent, "");
            m_bWmsLastPmtYr = false;
            strcpy(m_szWmsLastPmtYr, "");
            m_bWmsLastPmtMo = false;
            strcpy(m_szWmsLastPmtMo, "");
            m_bWmsLastPmtDa = false;
            strcpy(m_szWmsLastPmtDa, "");
            m_bWmsPymtDueAmt = false;
            strcpy(m_szWmsPymtDueAmt, "+0000000000000.00");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 7; lOccurs++ )
            {
                m_bWmsBankAvailTrAmt[lOccurs] = false;
                strcpy(m_szWmsBankAvailTrAmt[lOccurs], "+0000000000000");
            }
        
            for ( lOccurs = 0; lOccurs < 12; lOccurs++ )
            {
                m_bWmsCustAvailFunds[lOccurs] = false;
                strcpy(m_szWmsCustAvailFunds[lOccurs], "+0000000000000");
            }
        
            for ( lOccurs = 0; lOccurs < 12; lOccurs++ )
            {
                m_bWmsTimesNsfMo[lOccurs] = false;
                strcpy(m_szWmsTimesNsfMo[lOccurs], "+000");
            }
        
            for ( lOccurs = 0; lOccurs < 12; lOccurs++ )
            {
                m_bWmsTimesOdMo[lOccurs] = false;
                strcpy(m_szWmsTimesOdMo[lOccurs], "+000");
            }
        
            for ( lOccurs = 0; lOccurs < 12; lOccurs++ )
            {
                m_bWmsTimesUnavailMo[lOccurs] = false;
                strcpy(m_szWmsTimesUnavailMo[lOccurs], "+000");
            }
            m_bImMemoOlDrAmt = false;
            strcpy(m_szImMemoOlDrAmt, "+0000000000000.00");
            m_bImMemoOlCrAmt = false;
            strcpy(m_szImMemoOlCrAmt, "+0000000000000.00");
            m_bImMemoOlSvDrAmt = false;
            strcpy(m_szImMemoOlSvDrAmt, "+0000000000000.00");
            m_bImMemoOlSvCrAmt = false;
            strcpy(m_szImMemoOlSvCrAmt, "+0000000000000.00");
            m_bImMemoOlLnDrAmt = false;
            strcpy(m_szImMemoOlLnDrAmt, "+0000000000000.00");
            m_bImMemoOlLnCrAmt = false;
            strcpy(m_szImMemoOlLnCrAmt, "+0000000000000.00");
            m_bImMemoOlLnAvailBal = false;
            strcpy(m_szImMemoOlLnAvailBal, "+0000000000000.00");
            m_bWmsSsnForeignAddress = false;
            strcpy(m_szWmsSsnForeignAddress, "");
            m_bWmsLoanStatus = false;
            strcpy(m_szWmsLoanStatus, "");
            m_bWmsIntlCurrCode = false;
            strcpy(m_szWmsIntlCurrCode, "");
            m_bWmsIntlCurrDec = false;
            strcpy(m_szWmsIntlCurrDec, "");
            m_bWmsIntlCustLanguage = false;
            strcpy(m_szWmsIntlCustLanguage, "");
            m_bWmsIntlCustLangGroup = false;
            strcpy(m_szWmsIntlCustLangGroup, "");
            m_bWmsTaxCode = false;
            strcpy(m_szWmsTaxCode, "");
            m_bWmsAnnualRate = false;
            strcpy(m_szWmsAnnualRate, "+0.00000000");
            m_bWmsLoanPrevYtdInt = false;
            strcpy(m_szWmsLoanPrevYtdInt, "+0000000000000.00");
            m_bWmsLoanYtdInt = false;
            strcpy(m_szWmsLoanYtdInt, "+0000000000000.00");
            m_bWmsSavCurAnn = false;
            strcpy(m_szWmsSavCurAnn, "+0.00000000");
            m_bWmsYtdIntPaid = false;
            strcpy(m_szWmsYtdIntPaid, "+0000000000000.00");
            m_bImMemoOlOffEmp = false;
            strcpy(m_szImMemoOlOffEmp, "");
            m_bWmsMtdAnalysis = false;
            strcpy(m_szWmsMtdAnalysis, "");
            m_bWmsChkTruncFlag = false;
            strcpy(m_szWmsChkTruncFlag, "");
            m_bWmsPrevYtdInt = false;
            strcpy(m_szWmsPrevYtdInt, "+0000000000000.00");
            m_bWmsShortName = false;
            strcpy(m_szWmsShortName, "");
            m_bWmsLastStmtCc = false;
            strcpy(m_szWmsLastStmtCc, "");
            m_bWmsLastStmtYr = false;
            strcpy(m_szWmsLastStmtYr, "");
            m_bWmsLastStmtMo = false;
            strcpy(m_szWmsLastStmtMo, "");
            m_bWmsLastStmtDa = false;
            strcpy(m_szWmsLastStmtDa, "");
            m_bWmsNsfWaive = false;
            strcpy(m_szWmsNsfWaive, "");
            m_bWmsOdWaive = false;
            strcpy(m_szWmsOdWaive, "");
            m_bWmsWaiveFee = false;
            strcpy(m_szWmsWaiveFee, "");
            m_bWmsRegion = false;
            strcpy(m_szWmsRegion, "");
            m_bWbcOrigProcThruCent = false;
            strcpy(m_szWbcOrigProcThruCent, "");
            m_bWbcOrigProcThruYr = false;
            strcpy(m_szWbcOrigProcThruYr, "");
            m_bWbcOrigProcThruMo = false;
            strcpy(m_szWbcOrigProcThruMo, "");
            m_bWbcOrigProcThruDa = false;
            strcpy(m_szWbcOrigProcThruDa, "");
            m_bWmsScCharge = false;
            strcpy(m_szWmsScCharge, "");
            m_bWmsScWaiveReason = false;
            strcpy(m_szWmsScWaiveReason, "");
            m_bWmsOdLimitAmt = false;
            strcpy(m_szWmsOdLimitAmt, "+0000000000000.00");
            m_bWbcLastProcCc = false;
            strcpy(m_szWbcLastProcCc, "");
            m_bWbcLastProcYr = false;
            strcpy(m_szWbcLastProcYr, "");
            m_bWbcLastProcMo = false;
            strcpy(m_szWbcLastProcMo, "");
            m_bWbcLastProcDa = false;
            strcpy(m_szWbcLastProcDa, "");
            m_bWmsStmtClear = false;
            strcpy(m_szWmsStmtClear, "");
            m_bWmsFundingFlag = false;
            strcpy(m_szWmsFundingFlag, "");
            m_bWmsHomeAreaCode = false;
            strcpy(m_szWmsHomeAreaCode, "");
            m_bWmsHomePhoneNo = false;
            strcpy(m_szWmsHomePhoneNo, "");
            m_bWmsHomeExtension = false;
            strcpy(m_szWmsHomeExtension, "");
            m_bWmsBusAreaCode = false;
            strcpy(m_szWmsBusAreaCode, "");
            m_bWmsBusPhoneNo = false;
            strcpy(m_szWmsBusPhoneNo, "");
            m_bWmsBusExtension = false;
            strcpy(m_szWmsBusExtension, "");
            m_bWmsTinCertification = false;
            strcpy(m_szWmsTinCertification, "");
            m_bCollBal = false;
            strcpy(m_szCollBal, "+0000000000000.00");
            m_bYtdAvgBal = false;
            strcpy(m_szYtdAvgBal, "+0000000000000.00");
            m_bWmsStmtSpeclHandl = false;
            strcpy(m_szWmsStmtSpeclHandl, "");
            m_bDateClosedCc = false;
            strcpy(m_szDateClosedCc, "");
            m_bDateClosedYr = false;
            strcpy(m_szDateClosedYr, "");
            m_bDateClosedMo = false;
            strcpy(m_szDateClosedMo, "");
            m_bDateClosedDa = false;
            strcpy(m_szDateClosedDa, "");
            m_bNoNsf = false;
            strcpy(m_szNoNsf, "000");
            m_bNoOd = false;
            strcpy(m_szNoOd, "000");
            m_bWmsBkupWthldFlag = false;
            strcpy(m_szWmsBkupWthldFlag, "");
            m_bWmsTaxExemptRsn = false;
            strcpy(m_szWmsTaxExemptRsn, "");
            m_bWmsApprovalCc = false;
            strcpy(m_szWmsApprovalCc, "");
            m_bWmsApprovalYr = false;
            strcpy(m_szWmsApprovalYr, "");
            m_bWmsApprovalMo = false;
            strcpy(m_szWmsApprovalMo, "");
            m_bWmsApprovalDa = false;
            strcpy(m_szWmsApprovalDa, "");
            m_bWmsCrRatingCc = false;
            strcpy(m_szWmsCrRatingCc, "");
            m_bWmsCrRatingYr = false;
            strcpy(m_szWmsCrRatingYr, "");
            m_bWmsCrRatingMo = false;
            strcpy(m_szWmsCrRatingMo, "");
            m_bWmsCrRatingDa = false;
            strcpy(m_szWmsCrRatingDa, "");
            m_bImMemoOlPrinBal = false;
            strcpy(m_szImMemoOlPrinBal, "+0000000000000.00");
            m_bImMemoOlDdaBal = false;
            strcpy(m_szImMemoOlDdaBal, "+0000000000000.00");
            m_bImMemoOlSvAvailBal = false;
            strcpy(m_szImMemoOlSvAvailBal, "+0000000000000.00");
            m_bImMemoOlNewDelFlag = false;
            strcpy(m_szImMemoOlNewDelFlag, "");
            m_bWmsPastDueAmt = false;
            strcpy(m_szWmsPastDueAmt, "+0000000000000.00");
            m_bWmsAutoPymt = false;
            strcpy(m_szWmsAutoPymt, "");
            m_bWmsLastPymtAmt = false;
            strcpy(m_szWmsLastPymtAmt, "+0000000000000.00");
            m_bWmsACt = false;
            strcpy(m_szWmsACt, "+000");
            m_bWmsBCt = false;
            strcpy(m_szWmsBCt, "+000");
            m_bWmsCCt = false;
            strcpy(m_szWmsCCt, "+000");
            m_bWmsDCt = false;
            strcpy(m_szWmsDCt, "+000");
            m_bWmsECt = false;
            strcpy(m_szWmsECt, "+000");
            m_bWmsFCt = false;
            strcpy(m_szWmsFCt, "+000");
            m_bWbcAbaNumber = false;
            strcpy(m_szWbcAbaNumber, "");
            m_bWbcNextProcCent = false;
            strcpy(m_szWbcNextProcCent, "");
            m_bWbcNextProcYr = false;
            strcpy(m_szWbcNextProcYr, "");
            m_bWbcNextProcMo = false;
            strcpy(m_szWbcNextProcMo, "");
            m_bWbcNextProcDa = false;
            strcpy(m_szWbcNextProcDa, "");
            m_bWbcCaptCent = false;
            strcpy(m_szWbcCaptCent, "");
            m_bWbcCaptYr = false;
            strcpy(m_szWbcCaptYr, "");
            m_bWbcCaptMo = false;
            strcpy(m_szWbcCaptMo, "");
            m_bWbcCaptDa = false;
            strcpy(m_szWbcCaptDa, "");
            m_bWmsMmdaIndicator = false;
            strcpy(m_szWmsMmdaIndicator, "");
            m_bWmsIntStatus = false;
            strcpy(m_szWmsIntStatus, "");
            m_bWmsIodDistCd = false;
            strcpy(m_szWmsIodDistCd, "");
            m_bWmsNaCountry = false;
            strcpy(m_szWmsNaCountry, "");
            m_bWmsNraTaxProvince = false;
            strcpy(m_szWmsNraTaxProvince, "");
            m_bWmsNraTaxCountry = false;
            strcpy(m_szWmsNraTaxCountry, "");
            m_bWmsNraCertName1 = false;
            strcpy(m_szWmsNraCertName1, "");
            m_bWmsNraCertName2 = false;
            strcpy(m_szWmsNraCertName2, "");
            m_bWmsInfoAlienCode = false;
            strcpy(m_szWmsInfoAlienCode, "");
            m_bWmsStmtBeginBal = false;
            strcpy(m_szWmsStmtBeginBal, "+0000000000000.00");
            m_bWmsLoanMinPartPmt = false;
            strcpy(m_szWmsLoanMinPartPmt, "+0000000000000.00");
            m_bWmsHoldNo = false;
            strcpy(m_szWmsHoldNo, "+0000000");
            m_bMemoOlDtLstMonCent = false;
            strcpy(m_szMemoOlDtLstMonCent, "");
            m_bMemoOlDtLstMonYr = false;
            strcpy(m_szMemoOlDtLstMonYr, "");
            m_bMemoOlDtLstMonMo = false;
            strcpy(m_szMemoOlDtLstMonMo, "");
            m_bMemoOlDtLstMonDa = false;
            strcpy(m_szMemoOlDtLstMonDa, "");
            m_bWmsIodXferIntPtr = false;
            strcpy(m_szWmsIodXferIntPtr, "+0");
            m_bUserCharField1 = false;
            strcpy(m_szUserCharField1, "");
            m_bUserCharField2 = false;
            strcpy(m_szUserCharField2, "");
            m_bUserCharField3 = false;
            strcpy(m_szUserCharField3, "");
            m_bYesterdayFloatAmt = false;
            strcpy(m_szYesterdayFloatAmt, "+0000000000000.00");
            m_bTodayFloatAmt = false;
            strcpy(m_szTodayFloatAmt, "+0000000000000.00");
            m_bTotalBalance = false;
            strcpy(m_szTotalBalance, "+0000000000000.00");
            m_bWmsGovernmentId = false;
            strcpy(m_szWmsGovernmentId, "");
        
            for (lOccurs = 0; lOccurs < 7; lOccurs++)
            {
                WmsNaLine[lOccurs]  = &CWmsNaLine[lOccurs];
                CWmsNaLine[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 7; lOccurs++)
            {
                WmsBillDueDate[lOccurs]  = &CWmsBillDueDate[lOccurs];
                CWmsBillDueDate[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 25; lOccurs++)
            {
                WmsScMiscAmounts[lOccurs]  = &CWmsScMiscAmounts[lOccurs];
                CWmsScMiscAmounts[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                XferAffilTr[lOccurs]  = &CXferAffilTr[lOccurs];
                CXferAffilTr[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    HIGHEST LEVEL OF CONTROL
        long lWmsControl1 () { return 2; };
        RWCString WmsControl1 (void)
        {
            return m_szWmsControl1;
        }
        long WmsControl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsControl1, sizeof(m_szWmsControl1), &m_bWmsControl1);
        }
        
        //    SECOND LEVEL OF CONTROL
        long lWmsControl2 () { return 3; };
        RWCString WmsControl2 (void)
        {
            return m_szWmsControl2;
        }
        long WmsControl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsControl2, sizeof(m_szWmsControl2), &m_bWmsControl2);
        }
        
        //    THIRD LEVEL OF CONTROL
        long lWmsControl3 () { return 3; };
        RWCString WmsControl3 (void)
        {
            return m_szWmsControl3;
        }
        long WmsControl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsControl3, sizeof(m_szWmsControl3), &m_bWmsControl3);
        }
        
        //    FOURTH LEVEL OF CONTROL
        long lWmsControl4 () { return 4; };
        RWCString WmsControl4 (void)
        {
            return m_szWmsControl4;
        }
        long WmsControl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsControl4, sizeof(m_szWmsControl4), &m_bWmsControl4);
        }
        
        //    CUSTOMER ACCOUNT NUMBER
        long lWmsAcctNo () { return 10; };
        RWCString WmsAcctNo (void)
        {
            return m_szWmsAcctNo;
        }
        long WmsAcctNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsAcctNo, sizeof(m_szWmsAcctNo), &m_bWmsAcctNo);
        }
        
        //    ACCUMULATED MESSAGE IDENTIFIERS
        long lWorkMoreBreakdown () { return 27; };
        RWCString WorkMoreBreakdown (void)
        {
            return m_szWorkMoreBreakdown;
        }
        long WorkMoreBreakdown (const RWCString& rwc)
        {
            return SetString(rwc, m_szWorkMoreBreakdown, sizeof(m_szWorkMoreBreakdown), &m_bWorkMoreBreakdown);
        }
        
        //    REASON CODE FOR WHY AN ACCOUNT WAS CLOSED
        long lWorkReasonStatus () { return 34; };
        RWCString WorkReasonStatus (void)
        {
            return m_szWorkReasonStatus;
        }
        long WorkReasonStatus (const RWCString& rwc)
        {
            return SetString(rwc, m_szWorkReasonStatus, sizeof(m_szWorkReasonStatus), &m_bWorkReasonStatus);
        }
        
        //    TYPE OF ACCOUNT
        long lWorkSysType () { return 19; };
        RWCString WorkSysType (void)
        {
            return m_szWorkSysType;
        }
        long WorkSysType (const RWCString& rwc)
        {
            return SetString(rwc, m_szWorkSysType, sizeof(m_szWorkSysType), &m_bWorkSysType);
        }
        
        //    LOAN BALANCE INCLUDING THE PRINCIPAL, INTEREST, AND CHARGES
        long lWorkLoanBal () { return 17; };
        RWCString WorkLoanBal (void)
        {
            return AceZeroSupp(m_szWorkLoanBal, &m_szSuppressBuff[0]);
        }
        RWCString WorkLoanBalRaw (void)
        {
            return m_szWorkLoanBal;
        }
        long WorkLoanBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szWorkLoanBal, sizeof(m_szWorkLoanBal), &m_bWorkLoanBal);
        }
        
        //    SUM OF BEGINNING HOLD AMOUNT PLUS TODAY'S HOLD AMOUNT
        long lWorkHoldAmt () { return 17; };
        RWCString WorkHoldAmt (void)
        {
            return AceZeroSupp(m_szWorkHoldAmt, &m_szSuppressBuff[0]);
        }
        RWCString WorkHoldAmtRaw (void)
        {
            return m_szWorkHoldAmt;
        }
        long WorkHoldAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWorkHoldAmt, sizeof(m_szWorkHoldAmt), &m_bWorkHoldAmt);
        }
        
        //    AVERAGE COLLECTED BALANCE FOR THE ACCOUNT
        long lWorkAvgCollBal () { return 17; };
        RWCString WorkAvgCollBal (void)
        {
            return AceZeroSupp(m_szWorkAvgCollBal, &m_szSuppressBuff[0]);
        }
        RWCString WorkAvgCollBalRaw (void)
        {
            return m_szWorkAvgCollBal;
        }
        long WorkAvgCollBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szWorkAvgCollBal, sizeof(m_szWorkAvgCollBal), &m_bWorkAvgCollBal);
        }
        
        //    MONTH-TO-DATE AVERAGE BALANCE
        long lWorkMtdAvgBal () { return 17; };
        RWCString WorkMtdAvgBal (void)
        {
            return AceZeroSupp(m_szWorkMtdAvgBal, &m_szSuppressBuff[0]);
        }
        RWCString WorkMtdAvgBalRaw (void)
        {
            return m_szWorkMtdAvgBal;
        }
        long WorkMtdAvgBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szWorkMtdAvgBal, sizeof(m_szWorkMtdAvgBal), &m_bWorkMtdAvgBal);
        }
        
        //    ONLINE AVAILABLE BALANCE
        long lImMemoOlAvailBal () { return 17; };
        RWCString ImMemoOlAvailBal (void)
        {
            return AceZeroSupp(m_szImMemoOlAvailBal, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlAvailBalRaw (void)
        {
            return m_szImMemoOlAvailBal;
        }
        long ImMemoOlAvailBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlAvailBal, sizeof(m_szImMemoOlAvailBal), &m_bImMemoOlAvailBal);
        }
        
        //    AMOUNT AVAILABLE FOR CASH WITHDRAWAL
        long lWorkCashAvailAmt () { return 17; };
        RWCString WorkCashAvailAmt (void)
        {
            return AceZeroSupp(m_szWorkCashAvailAmt, &m_szSuppressBuff[0]);
        }
        RWCString WorkCashAvailAmtRaw (void)
        {
            return m_szWorkCashAvailAmt;
        }
        long WorkCashAvailAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWorkCashAvailAmt, sizeof(m_szWorkCashAvailAmt), &m_bWorkCashAvailAmt);
        }
        
        //    CENTURY THROUGH WHICH PROCESSING OCCURS
        long lWbcProcThruCent () { return 2; };
        RWCString WbcProcThruCent (void)
        {
            return m_szWbcProcThruCent;
        }
        long WbcProcThruCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcProcThruCent, sizeof(m_szWbcProcThruCent), &m_bWbcProcThruCent);
        }
        
        //    YEAR THROUGH WHICH PROCESSING OCCURS
        long lWbcProcThruYr () { return 2; };
        RWCString WbcProcThruYr (void)
        {
            return m_szWbcProcThruYr;
        }
        long WbcProcThruYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcProcThruYr, sizeof(m_szWbcProcThruYr), &m_bWbcProcThruYr);
        }
        
        //    MONTH THROUGH WHICH PROCESSING OCCURS
        long lWbcProcThruMo () { return 2; };
        RWCString WbcProcThruMo (void)
        {
            return m_szWbcProcThruMo;
        }
        long WbcProcThruMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcProcThruMo, sizeof(m_szWbcProcThruMo), &m_bWbcProcThruMo);
        }
        
        //    DAY THROUGH WHICH PROCESSING OCCURS
        long lWbcProcThruDa () { return 2; };
        RWCString WbcProcThruDa (void)
        {
            return m_szWbcProcThruDa;
        }
        long WbcProcThruDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcProcThruDa, sizeof(m_szWbcProcThruDa), &m_bWbcProcThruDa);
        }
        
        //    MAXIMUM LOAN AMOUNT FOR THE ACCOUNT
        long lCreditLimit () { return 14; };
        RWCString CreditLimit (void)
        {
            return AceZeroSupp(m_szCreditLimit, &m_szSuppressBuff[0]);
        }
        RWCString CreditLimitRaw (void)
        {
            return m_szCreditLimit;
        }
        long CreditLimit (const RWCString& rwc)
        {
            return SetString(rwc, m_szCreditLimit, sizeof(m_szCreditLimit), &m_bCreditLimit);
        }
        
        //    ACCOUNT STATUS
        long lWmsStatus () { return 2; };
        RWCString WmsStatus (void)
        {
            return m_szWmsStatus;
        }
        long WmsStatus (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStatus, sizeof(m_szWmsStatus), &m_bWmsStatus);
        }
        
        //    IDENTIFIES THE TYPE OF PRODUCT
        long lWmsAcctType () { return 3; };
        RWCString WmsAcctType (void)
        {
            return m_szWmsAcctType;
        }
        long WmsAcctType (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsAcctType, sizeof(m_szWmsAcctType), &m_bWmsAcctType);
        }
        
        //    CITY AND STATE INFORMATION
        long lWmsCityState () { return 30; };
        RWCString WmsCityState (void)
        {
            return m_szWmsCityState;
        }
        long WmsCityState (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCityState, sizeof(m_szWmsCityState), &m_bWmsCityState);
        }
        
        //    ZIP CODE
        long lWmsNaZipCode () { return 10; };
        RWCString WmsNaZipCode (void)
        {
            return m_szWmsNaZipCode;
        }
        long WmsNaZipCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNaZipCode, sizeof(m_szWmsNaZipCode), &m_bWmsNaZipCode);
        }
        
        //    TAX IDENTIFICATION NUMBER FOR THE ACCOUNT
        long lWmsTaxNumber () { return 11; };
        RWCString WmsTaxNumber (void)
        {
            return m_szWmsTaxNumber;
        }
        long WmsTaxNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTaxNumber, sizeof(m_szWmsTaxNumber), &m_bWmsTaxNumber);
        }
        
        //    INDICATES WHETHER A HOLD ALL FUNDS RECORD EXISTS FOR ACCT
        long lWmsHoldAllFundsFlag () { return 1; };
        RWCString WmsHoldAllFundsFlag (void)
        {
            return m_szWmsHoldAllFundsFlag;
        }
        long WmsHoldAllFundsFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsHoldAllFundsFlag, sizeof(m_szWmsHoldAllFundsFlag), &m_bWmsHoldAllFundsFlag);
        }
        
        //    TOTAL AMOUNT OF BANK FUNDS THAT ARE CURRENTLY UNAVAILABLE
        long lWmsBankAvailAmt () { return 14; };
        RWCString WmsBankAvailAmt (void)
        {
            return AceZeroSupp(m_szWmsBankAvailAmt, &m_szSuppressBuff[0]);
        }
        RWCString WmsBankAvailAmtRaw (void)
        {
            return m_szWmsBankAvailAmt;
        }
        long WmsBankAvailAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBankAvailAmt, sizeof(m_szWmsBankAvailAmt), &m_bWmsBankAvailAmt);
        }
        
        //    TOTAL AMOUNT OF CUSTOMER FUNDS CURRENTLY UNAVAILABLE
        long lWmsCustAvailAmt () { return 14; };
        RWCString WmsCustAvailAmt (void)
        {
            return AceZeroSupp(m_szWmsCustAvailAmt, &m_szSuppressBuff[0]);
        }
        RWCString WmsCustAvailAmtRaw (void)
        {
            return m_szWmsCustAvailAmt;
        }
        long WmsCustAvailAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCustAvailAmt, sizeof(m_szWmsCustAvailAmt), &m_bWmsCustAvailAmt);
        }
        
        //    AMOUNT OF LAST DEPOSIT TRANSACTION
        long lWmsAmtLastDeposit () { return 17; };
        RWCString WmsAmtLastDeposit (void)
        {
            return AceZeroSupp(m_szWmsAmtLastDeposit, &m_szSuppressBuff[0]);
        }
        RWCString WmsAmtLastDepositRaw (void)
        {
            return m_szWmsAmtLastDeposit;
        }
        long WmsAmtLastDeposit (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsAmtLastDeposit, sizeof(m_szWmsAmtLastDeposit), &m_bWmsAmtLastDeposit);
        }
        
        //    DDA PORTION OF CUSTOMER BALANCE
        long lWmsDdaBal () { return 17; };
        RWCString WmsDdaBal (void)
        {
            return AceZeroSupp(m_szWmsDdaBal, &m_szSuppressBuff[0]);
        }
        RWCString WmsDdaBalRaw (void)
        {
            return m_szWmsDdaBal;
        }
        long WmsDdaBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsDdaBal, sizeof(m_szWmsDdaBal), &m_bWmsDdaBal);
        }
        
        //    MIN DDA BAL TO BE MAINTAINED BY TRANSFERS FROM SAV OR LOANS
        long lWmsMinBal () { return 17; };
        RWCString WmsMinBal (void)
        {
            return AceZeroSupp(m_szWmsMinBal, &m_szSuppressBuff[0]);
        }
        RWCString WmsMinBalRaw (void)
        {
            return m_szWmsMinBal;
        }
        long WmsMinBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsMinBal, sizeof(m_szWmsMinBal), &m_bWmsMinBal);
        }
        
        //    CENTURY THE ACCOUNT WAS OPENED
        long lWmsOpenedCent () { return 2; };
        RWCString WmsOpenedCent (void)
        {
            return m_szWmsOpenedCent;
        }
        long WmsOpenedCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOpenedCent, sizeof(m_szWmsOpenedCent), &m_bWmsOpenedCent);
        }
        
        //    YEAR THE ACCOUNT WAS OPENED
        long lWmsOpenedYr () { return 2; };
        RWCString WmsOpenedYr (void)
        {
            return m_szWmsOpenedYr;
        }
        long WmsOpenedYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOpenedYr, sizeof(m_szWmsOpenedYr), &m_bWmsOpenedYr);
        }
        
        //    MONTH THE ACCOUNT WAS OPENED
        long lWmsOpenedMo () { return 2; };
        RWCString WmsOpenedMo (void)
        {
            return m_szWmsOpenedMo;
        }
        long WmsOpenedMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOpenedMo, sizeof(m_szWmsOpenedMo), &m_bWmsOpenedMo);
        }
        
        //    DAY THE ACCOUNT WAS OPENED
        long lWmsOpenedDa () { return 2; };
        RWCString WmsOpenedDa (void)
        {
            return m_szWmsOpenedDa;
        }
        long WmsOpenedDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOpenedDa, sizeof(m_szWmsOpenedDa), &m_bWmsOpenedDa);
        }
        
        //    CENTURY OF THE LAST DEPOSIT
        long lWmsCentLastDep () { return 2; };
        RWCString WmsCentLastDep (void)
        {
            return m_szWmsCentLastDep;
        }
        long WmsCentLastDep (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCentLastDep, sizeof(m_szWmsCentLastDep), &m_bWmsCentLastDep);
        }
        
        //    YEAR OF THE LAST DEPOSIT
        long lWmsYrLastDep () { return 2; };
        RWCString WmsYrLastDep (void)
        {
            return m_szWmsYrLastDep;
        }
        long WmsYrLastDep (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsYrLastDep, sizeof(m_szWmsYrLastDep), &m_bWmsYrLastDep);
        }
        
        //    MONTH OF THE LAST DEPOSIT
        long lWmsMoLastDep () { return 2; };
        RWCString WmsMoLastDep (void)
        {
            return m_szWmsMoLastDep;
        }
        long WmsMoLastDep (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsMoLastDep, sizeof(m_szWmsMoLastDep), &m_bWmsMoLastDep);
        }
        
        //    DAY OF THE LAST DEPOSIT
        long lWmsDaLastDep () { return 2; };
        RWCString WmsDaLastDep (void)
        {
            return m_szWmsDaLastDep;
        }
        long WmsDaLastDep (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsDaLastDep, sizeof(m_szWmsDaLastDep), &m_bWmsDaLastDep);
        }
        
        //    CENTURY OF LAST CUSTOMER-GENERATED ACTIVITY
        long lWmsLastCustActCent () { return 2; };
        RWCString WmsLastCustActCent (void)
        {
            return m_szWmsLastCustActCent;
        }
        long WmsLastCustActCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastCustActCent, sizeof(m_szWmsLastCustActCent), &m_bWmsLastCustActCent);
        }
        
        //    YEAR OF LAST CUSTOMER-GENERATED ACTIVITY/SYSTEM GENERATE
        long lWmsLastCustActYr () { return 2; };
        RWCString WmsLastCustActYr (void)
        {
            return m_szWmsLastCustActYr;
        }
        long WmsLastCustActYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastCustActYr, sizeof(m_szWmsLastCustActYr), &m_bWmsLastCustActYr);
        }
        
        //    MONTH OF LAST CUSTOMER-GENERATED ACTIVITY
        long lWmsLastCustActMo () { return 2; };
        RWCString WmsLastCustActMo (void)
        {
            return m_szWmsLastCustActMo;
        }
        long WmsLastCustActMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastCustActMo, sizeof(m_szWmsLastCustActMo), &m_bWmsLastCustActMo);
        }
        
        //    DAY OF LAST CUSTOMER-GENERATED ACTIVITY
        long lWmsLastCustActDa () { return 2; };
        RWCString WmsLastCustActDa (void)
        {
            return m_szWmsLastCustActDa;
        }
        long WmsLastCustActDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastCustActDa, sizeof(m_szWmsLastCustActDa), &m_bWmsLastCustActDa);
        }
        
        //    CENTURY WHEN THE ACCOUNT HAD MAINTENANCE ACTIVITY POSTED
        long lWmsLastMaintCent () { return 2; };
        RWCString WmsLastMaintCent (void)
        {
            return m_szWmsLastMaintCent;
        }
        long WmsLastMaintCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastMaintCent, sizeof(m_szWmsLastMaintCent), &m_bWmsLastMaintCent);
        }
        
        //    YEAR WHEN THE ACCOUNT HAD MAINTENANCE ACTIVITY POSTED
        long lWmsLastMaintYr () { return 2; };
        RWCString WmsLastMaintYr (void)
        {
            return m_szWmsLastMaintYr;
        }
        long WmsLastMaintYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastMaintYr, sizeof(m_szWmsLastMaintYr), &m_bWmsLastMaintYr);
        }
        
        //    MONTH WHEN THE ACCOUNT HAD MAINTENANCE ACTIVITY POSTED
        long lWmsLastMaintMo () { return 2; };
        RWCString WmsLastMaintMo (void)
        {
            return m_szWmsLastMaintMo;
        }
        long WmsLastMaintMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastMaintMo, sizeof(m_szWmsLastMaintMo), &m_bWmsLastMaintMo);
        }
        
        //    DAY WHEN THE ACCOUNT HAD MAINTENANCE ACTIVITY POSTED
        long lWmsLastMaintDa () { return 2; };
        RWCString WmsLastMaintDa (void)
        {
            return m_szWmsLastMaintDa;
        }
        long WmsLastMaintDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastMaintDa, sizeof(m_szWmsLastMaintDa), &m_bWmsLastMaintDa);
        }
        
        //    INDICATES WHETHER CHARGE CARD IS USED FOR OVERDRAFT HANDLING
        long lWmsChgCardFlg () { return 1; };
        RWCString WmsChgCardFlg (void)
        {
            return m_szWmsChgCardFlg;
        }
        long WmsChgCardFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsChgCardFlg, sizeof(m_szWmsChgCardFlg), &m_bWmsChgCardFlg);
        }
        
        //    INDICATES WHETHER SPECIAL INSTRUCTIONS ON FILE FOR ACCT
        long lWmsSpecInstToday () { return 1; };
        RWCString WmsSpecInstToday (void)
        {
            return m_szWmsSpecInstToday;
        }
        long WmsSpecInstToday (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSpecInstToday, sizeof(m_szWmsSpecInstToday), &m_bWmsSpecInstToday);
        }
        
        //    INDICATES WHETHER THE ACCOUNT HAD NONSUFFICIENT FUNDS TODAY
        long lWmsNsfToday () { return 1; };
        RWCString WmsNsfToday (void)
        {
            return m_szWmsNsfToday;
        }
        long WmsNsfToday (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNsfToday, sizeof(m_szWmsNsfToday), &m_bWmsNsfToday);
        }
        
        //    INDICATES WHETHER THE ACCOUNT IS OVERDRAWN TODAY
        long lWmsOdToday () { return 1; };
        RWCString WmsOdToday (void)
        {
            return m_szWmsOdToday;
        }
        long WmsOdToday (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOdToday, sizeof(m_szWmsOdToday), &m_bWmsOdToday);
        }
        
        //    METHOD USED FOR REPORTING KITING SUSPECTS FOR THE ACCOUNT
        long lWmsKitingFlag () { return 1; };
        RWCString WmsKitingFlag (void)
        {
            return m_szWmsKitingFlag;
        }
        long WmsKitingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsKitingFlag, sizeof(m_szWmsKitingFlag), &m_bWmsKitingFlag);
        }
        
        //    NUMBER OF CONSECUTIVE DAYS ACCT WAS ON KITING SUSPECT RPT
        long lWmsKiteConsecDays () { return 4; };
        RWCString WmsKiteConsecDays (void)
        {
            return AceZeroSupp(m_szWmsKiteConsecDays, &m_szSuppressBuff[0]);
        }
        RWCString WmsKiteConsecDaysRaw (void)
        {
            return m_szWmsKiteConsecDays;
        }
        long WmsKiteConsecDays (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsKiteConsecDays, sizeof(m_szWmsKiteConsecDays), &m_bWmsKiteConsecDays);
        }
        
        //    NUM DAYS DURING CUR MONTH ACCT APPEARED ON KITING SUSP REPT
        long lWmsMtdKitingSusp () { return 4; };
        RWCString WmsMtdKitingSusp (void)
        {
            return AceZeroSupp(m_szWmsMtdKitingSusp, &m_szSuppressBuff[0]);
        }
        RWCString WmsMtdKitingSuspRaw (void)
        {
            return m_szWmsMtdKitingSusp;
        }
        long WmsMtdKitingSusp (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsMtdKitingSusp, sizeof(m_szWmsMtdKitingSusp), &m_bWmsMtdKitingSusp);
        }
        
        //    DAILY INTEREST ACCRUED DURING THIS INTEREST CYCLE
        long lWmsIodCycAccInt () { return 19; };
        RWCString WmsIodCycAccInt (void)
        {
            return AceZeroSupp(m_szWmsIodCycAccInt, &m_szSuppressBuff[0]);
        }
        RWCString WmsIodCycAccIntRaw (void)
        {
            return m_szWmsIodCycAccInt;
        }
        long WmsIodCycAccInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodCycAccInt, sizeof(m_szWmsIodCycAccInt), &m_bWmsIodCycAccInt);
        }
        
        //    AMOUNT OF ACCRUED INTEREST PAYABLE ON NEXT PROCESSING DAY
        long lWmsIodProjAccr () { return 17; };
        RWCString WmsIodProjAccr (void)
        {
            return AceZeroSupp(m_szWmsIodProjAccr, &m_szSuppressBuff[0]);
        }
        RWCString WmsIodProjAccrRaw (void)
        {
            return m_szWmsIodProjAccr;
        }
        long WmsIodProjAccr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodProjAccr, sizeof(m_szWmsIodProjAccr), &m_bWmsIodProjAccr);
        }
        
        //    NUMBER OF TRANSFERS THIS SERVICE CHARGE CYCLE
        long lWmsScAmttrnsfrNo () { return 8; };
        RWCString WmsScAmttrnsfrNo (void)
        {
            return AceZeroSupp(m_szWmsScAmttrnsfrNo, &m_szSuppressBuff[0]);
        }
        RWCString WmsScAmttrnsfrNoRaw (void)
        {
            return m_szWmsScAmttrnsfrNo;
        }
        long WmsScAmttrnsfrNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsScAmttrnsfrNo, sizeof(m_szWmsScAmttrnsfrNo), &m_bWmsScAmttrnsfrNo);
        }
        
        //    OVERDRAFT LIMIT INDICATING MAX AMT ACCOUNT CAN BE OVERDRAWN
        long lWmsOdLimit () { return 1; };
        RWCString WmsOdLimit (void)
        {
            return m_szWmsOdLimit;
        }
        long WmsOdLimit (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOdLimit, sizeof(m_szWmsOdLimit), &m_bWmsOdLimit);
        }
        
        //    NUMBER OF CHECKS THIS SERVICE CHARGE CYCLE
        long lWmsScCheckItems () { return 8; };
        RWCString WmsScCheckItems (void)
        {
            return AceZeroSupp(m_szWmsScCheckItems, &m_szSuppressBuff[0]);
        }
        RWCString WmsScCheckItemsRaw (void)
        {
            return m_szWmsScCheckItems;
        }
        long WmsScCheckItems (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsScCheckItems, sizeof(m_szWmsScCheckItems), &m_bWmsScCheckItems);
        }
        
        //    TOTAL NUMBER OF STOP PAYS ON THE ACCOUNT
        long lImMemoOlStopPays () { return 8; };
        RWCString ImMemoOlStopPays (void)
        {
            return AceZeroSupp(m_szImMemoOlStopPays, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlStopPaysRaw (void)
        {
            return m_szImMemoOlStopPays;
        }
        long ImMemoOlStopPays (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlStopPays, sizeof(m_szImMemoOlStopPays), &m_bImMemoOlStopPays);
        }
        
        //    INDICATES WHETHER TO MAINTAIN BALANCE HISTORY FOR AN ACCT
        long lWmsBalanceHistory () { return 1; };
        RWCString WmsBalanceHistory (void)
        {
            return m_szWmsBalanceHistory;
        }
        long WmsBalanceHistory (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBalanceHistory, sizeof(m_szWmsBalanceHistory), &m_bWmsBalanceHistory);
        }
        
        //    NUMBER OF DAYS TO MAINTAIN BALANCE HISTORY
        long lWmsBalHistRet () { return 4; };
        RWCString WmsBalHistRet (void)
        {
            return AceZeroSupp(m_szWmsBalHistRet, &m_szSuppressBuff[0]);
        }
        RWCString WmsBalHistRetRaw (void)
        {
            return m_szWmsBalHistRet;
        }
        long WmsBalHistRet (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBalHistRet, sizeof(m_szWmsBalHistRet), &m_bWmsBalHistRet);
        }
        
        //    USER-DEFINED: IDENTIFIES BRANCH WHERE ACCOUNT WAS OPENED
        long lWmsBranch () { return 3; };
        RWCString WmsBranch (void)
        {
            return m_szWmsBranch;
        }
        long WmsBranch (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBranch, sizeof(m_szWmsBranch), &m_bWmsBranch);
        }
        
        //    USER-DEFINED FIELD FOR OFFICER ASSOCIATED WITH THE ACCOUNT
        long lWmsOfficer () { return 5; };
        RWCString WmsOfficer (void)
        {
            return m_szWmsOfficer;
        }
        long WmsOfficer (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOfficer, sizeof(m_szWmsOfficer), &m_bWmsOfficer);
        }
        
        //    RATE AT WHICH INTEREST IS CALCULATED.  POINTS TO BCR TABLE.
        long lWmsIodRatePtr () { return 4; };
        RWCString WmsIodRatePtr (void)
        {
            return AceZeroSupp(m_szWmsIodRatePtr, &m_szSuppressBuff[0]);
        }
        RWCString WmsIodRatePtrRaw (void)
        {
            return m_szWmsIodRatePtr;
        }
        long WmsIodRatePtr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodRatePtr, sizeof(m_szWmsIodRatePtr), &m_bWmsIodRatePtr);
        }
        
        //    CURRENT ANNUAL INTEREST RATE FOR THE ACCOUNT
        long lWmsIodCurAnn () { return 11; };
        RWCString WmsIodCurAnn (void)
        {
            return AceZeroSupp(m_szWmsIodCurAnn, &m_szSuppressBuff[0]);
        }
        RWCString WmsIodCurAnnRaw (void)
        {
            return m_szWmsIodCurAnn;
        }
        long WmsIodCurAnn (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodCurAnn, sizeof(m_szWmsIodCurAnn), &m_bWmsIodCurAnn);
        }
        
        //    INTEREST PAID THIS CALENDAR YEAR
        long lWmsIodYtdIntPaid () { return 17; };
        RWCString WmsIodYtdIntPaid (void)
        {
            return AceZeroSupp(m_szWmsIodYtdIntPaid, &m_szSuppressBuff[0]);
        }
        RWCString WmsIodYtdIntPaidRaw (void)
        {
            return m_szWmsIodYtdIntPaid;
        }
        long WmsIodYtdIntPaid (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodYtdIntPaid, sizeof(m_szWmsIodYtdIntPaid), &m_bWmsIodYtdIntPaid);
        }
        
        //    INTEREST CREDITED TO THE ACCOUNT LAST YEAR
        long lWmsIodPrvYtdIntPd () { return 17; };
        RWCString WmsIodPrvYtdIntPd (void)
        {
            return AceZeroSupp(m_szWmsIodPrvYtdIntPd, &m_szSuppressBuff[0]);
        }
        RWCString WmsIodPrvYtdIntPdRaw (void)
        {
            return m_szWmsIodPrvYtdIntPd;
        }
        long WmsIodPrvYtdIntPd (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodPrvYtdIntPd, sizeof(m_szWmsIodPrvYtdIntPd), &m_bWmsIodPrvYtdIntPd);
        }
        
        //    INDICATES WHEN TO GENERATE A STATEMENT FOR THE ACCOUNT
        long lWmsStmtPull () { return 1; };
        RWCString WmsStmtPull (void)
        {
            return m_szWmsStmtPull;
        }
        long WmsStmtPull (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtPull, sizeof(m_szWmsStmtPull), &m_bWmsStmtPull);
        }
        
        //    INDICATES WHEN TO GEN A SUPPLEMENTAL STATEMENT FOR THE ACCT
        long lWmsStmtSupp () { return 1; };
        RWCString WmsStmtSupp (void)
        {
            return m_szWmsStmtSupp;
        }
        long WmsStmtSupp (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtSupp, sizeof(m_szWmsStmtSupp), &m_bWmsStmtSupp);
        }
        
        //    USED WITH STMT PULL CODE TO INDICATE STMT CYCLE FOR ACCOUNT
        long lWmsStmtFld1 () { return 2; };
        RWCString WmsStmtFld1 (void)
        {
            return m_szWmsStmtFld1;
        }
        long WmsStmtFld1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtFld1, sizeof(m_szWmsStmtFld1), &m_bWmsStmtFld1);
        }
        
        //    USED WITH STMT PULL CODE TO INDICATE STMT CYCLE FOR ACCOUNT
        long lWmsStmtFld2 () { return 2; };
        RWCString WmsStmtFld2 (void)
        {
            return m_szWmsStmtFld2;
        }
        long WmsStmtFld2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtFld2, sizeof(m_szWmsStmtFld2), &m_bWmsStmtFld2);
        }
        
        //    USED WITH STMT PULL CODE TO INDICATE STMT CYCLE FOR ACCOUNT
        long lWmsStmtFld3 () { return 2; };
        RWCString WmsStmtFld3 (void)
        {
            return m_szWmsStmtFld3;
        }
        long WmsStmtFld3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtFld3, sizeof(m_szWmsStmtFld3), &m_bWmsStmtFld3);
        }
        
        //    USED WITH STMT PULL CODE TO INDICATE STMT CYCLE FOR ACCOUNT.
        long lWmsStmtFld4 () { return 2; };
        RWCString WmsStmtFld4 (void)
        {
            return m_szWmsStmtFld4;
        }
        long WmsStmtFld4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtFld4, sizeof(m_szWmsStmtFld4), &m_bWmsStmtFld4);
        }
        
        //    INTEREST ACCRUAL METHOD (SIMPLE, DAILY,  OR CONTINUOUS)
        long lWmsIodAccrualType () { return 1; };
        RWCString WmsIodAccrualType (void)
        {
            return m_szWmsIodAccrualType;
        }
        long WmsIodAccrualType (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodAccrualType, sizeof(m_szWmsIodAccrualType), &m_bWmsIodAccrualType);
        }
        
        //    INTEREST WHETHER ACCT DRAWN AGAINST CUS UNAVAIL FNDS TODAY
        long lWmsUnavailToday () { return 1; };
        RWCString WmsUnavailToday (void)
        {
            return m_szWmsUnavailToday;
        }
        long WmsUnavailToday (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsUnavailToday, sizeof(m_szWmsUnavailToday), &m_bWmsUnavailToday);
        }
        
        //    NUMBER OF TIMES ACCOUNT HAS HAD NSF ACTIVITY SINCE OPENING
        long lWmsDaysNsfToDate () { return 6; };
        RWCString WmsDaysNsfToDate (void)
        {
            return AceZeroSupp(m_szWmsDaysNsfToDate, &m_szSuppressBuff[0]);
        }
        RWCString WmsDaysNsfToDateRaw (void)
        {
            return m_szWmsDaysNsfToDate;
        }
        long WmsDaysNsfToDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsDaysNsfToDate, sizeof(m_szWmsDaysNsfToDate), &m_bWmsDaysNsfToDate);
        }
        
        //    NUMBER OF TIMES ACCOUNT HAD OVERDRAFT ITEMS SINCE OPENING
        long lWmsDaysOdToDate () { return 6; };
        RWCString WmsDaysOdToDate (void)
        {
            return AceZeroSupp(m_szWmsDaysOdToDate, &m_szSuppressBuff[0]);
        }
        RWCString WmsDaysOdToDateRaw (void)
        {
            return m_szWmsDaysOdToDate;
        }
        long WmsDaysOdToDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsDaysOdToDate, sizeof(m_szWmsDaysOdToDate), &m_bWmsDaysOdToDate);
        }
        
        //    USER-DEFINED NUMBER THAT IDENTIFIES THE CUSTOMER
        long lWmsCustomerNumber () { return 12; };
        RWCString WmsCustomerNumber (void)
        {
            return m_szWmsCustomerNumber;
        }
        long WmsCustomerNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCustomerNumber, sizeof(m_szWmsCustomerNumber), &m_bWmsCustomerNumber);
        }
        
        //    NUMBER NAME/ADDRESS TRAILERS ON THE ACCOUNT
        long lWmsNmeAddrTlrs () { return 2; };
        RWCString WmsNmeAddrTlrs (void)
        {
            return AceZeroSupp(m_szWmsNmeAddrTlrs, &m_szSuppressBuff[0]);
        }
        RWCString WmsNmeAddrTlrsRaw (void)
        {
            return m_szWmsNmeAddrTlrs;
        }
        long WmsNmeAddrTlrs (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNmeAddrTlrs, sizeof(m_szWmsNmeAddrTlrs), &m_bWmsNmeAddrTlrs);
        }
        
        //    INDICATES WHETHER AN ACCOUNT HAS A SOCIAL SECURITY TRAILER
        long lWmsSocSecNa () { return 1; };
        RWCString WmsSocSecNa (void)
        {
            return m_szWmsSocSecNa;
        }
        long WmsSocSecNa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSocSecNa, sizeof(m_szWmsSocSecNa), &m_bWmsSocSecNa);
        }
        
        //    INDICATES WHETHER AN ACCOUNT HAS A DATA CENTER TRAILER
        long lWmsDcTrlr () { return 1; };
        RWCString WmsDcTrlr (void)
        {
            return m_szWmsDcTrlr;
        }
        long WmsDcTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsDcTrlr, sizeof(m_szWmsDcTrlr), &m_bWmsDcTrlr);
        }
        
        //    INDICATES WHETHER AN ACCOUNT HAS A LOAN TRAILER
        long lWmsLoanTrlr () { return 1; };
        RWCString WmsLoanTrlr (void)
        {
            return m_szWmsLoanTrlr;
        }
        long WmsLoanTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLoanTrlr, sizeof(m_szWmsLoanTrlr), &m_bWmsLoanTrlr);
        }
        
        //    INDICATES WHETHER AN ACCOUNT HAS A MARKET TRAILER
        long lWmsMarketTrlr () { return 1; };
        RWCString WmsMarketTrlr (void)
        {
            return m_szWmsMarketTrlr;
        }
        long WmsMarketTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsMarketTrlr, sizeof(m_szWmsMarketTrlr), &m_bWmsMarketTrlr);
        }
        
        //    NUMBER OF TRANSFER AND/OR AFFILIATE TRAILERS ON ACCOUNT
        long lWmsTrnsfrAfflTrlr () { return 4; };
        RWCString WmsTrnsfrAfflTrlr (void)
        {
            return AceZeroSupp(m_szWmsTrnsfrAfflTrlr, &m_szSuppressBuff[0]);
        }
        RWCString WmsTrnsfrAfflTrlrRaw (void)
        {
            return m_szWmsTrnsfrAfflTrlr;
        }
        long WmsTrnsfrAfflTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTrnsfrAfflTrlr, sizeof(m_szWmsTrnsfrAfflTrlr), &m_bWmsTrnsfrAfflTrlr);
        }
        
        //    INDICATES WHETHER THE ACCOUNT HAS AN OD/NSF TRAILER
        long lWmsOdNsfTrlr () { return 1; };
        RWCString WmsOdNsfTrlr (void)
        {
            return m_szWmsOdNsfTrlr;
        }
        long WmsOdNsfTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOdNsfTrlr, sizeof(m_szWmsOdNsfTrlr), &m_bWmsOdNsfTrlr);
        }
        
        //    INDICATES WHETHER THE ACCOUNT HAS A SAVINGS TRAILER
        long lWmsSavingsTrlr () { return 1; };
        RWCString WmsSavingsTrlr (void)
        {
            return m_szWmsSavingsTrlr;
        }
        long WmsSavingsTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSavingsTrlr, sizeof(m_szWmsSavingsTrlr), &m_bWmsSavingsTrlr);
        }
        
        //    INDICATES WHETHER THE ACCOUNT HAS A BANK AVAILABLE TRAILER
        long lWmsBankAvailTrlr () { return 1; };
        RWCString WmsBankAvailTrlr (void)
        {
            return m_szWmsBankAvailTrlr;
        }
        long WmsBankAvailTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBankAvailTrlr, sizeof(m_szWmsBankAvailTrlr), &m_bWmsBankAvailTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS A CUSTOMER AVAILABLE TRAILER
        long lWmsCustAvailTrlr () { return 1; };
        RWCString WmsCustAvailTrlr (void)
        {
            return m_szWmsCustAvailTrlr;
        }
        long WmsCustAvailTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCustAvailTrlr, sizeof(m_szWmsCustAvailTrlr), &m_bWmsCustAvailTrlr);
        }
        
        //    NUMBER OF COMBINED STATEMENT TRAILERS
        long lWmsCombinedStat () { return 4; };
        RWCString WmsCombinedStat (void)
        {
            return AceZeroSupp(m_szWmsCombinedStat, &m_szSuppressBuff[0]);
        }
        RWCString WmsCombinedStatRaw (void)
        {
            return m_szWmsCombinedStat;
        }
        long WmsCombinedStat (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCombinedStat, sizeof(m_szWmsCombinedStat), &m_bWmsCombinedStat);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS TARGER AMOUNT TRAILER
        long lWmsTargetAmtTrlr () { return 1; };
        RWCString WmsTargetAmtTrlr (void)
        {
            return m_szWmsTargetAmtTrlr;
        }
        long WmsTargetAmtTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTargetAmtTrlr, sizeof(m_szWmsTargetAmtTrlr), &m_bWmsTargetAmtTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS LIMIT TRANSFER TRAILER
        long lWmsLimitTransfer () { return 1; };
        RWCString WmsLimitTransfer (void)
        {
            return m_szWmsLimitTransfer;
        }
        long WmsLimitTransfer (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLimitTransfer, sizeof(m_szWmsLimitTransfer), &m_bWmsLimitTransfer);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS TAX TRAILER
        long lWmsDcdTaxDataTrlr () { return 1; };
        RWCString WmsDcdTaxDataTrlr (void)
        {
            return m_szWmsDcdTaxDataTrlr;
        }
        long WmsDcdTaxDataTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsDcdTaxDataTrlr, sizeof(m_szWmsDcdTaxDataTrlr), &m_bWmsDcdTaxDataTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS OVERDRAFT ACCRUAL TRAILER
        long lWmsOdAccrualTrlr () { return 1; };
        RWCString WmsOdAccrualTrlr (void)
        {
            return m_szWmsOdAccrualTrlr;
        }
        long WmsOdAccrualTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOdAccrualTrlr, sizeof(m_szWmsOdAccrualTrlr), &m_bWmsOdAccrualTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS INFORMATION TRAILER
        long lWmsInfoTrlr () { return 1; };
        RWCString WmsInfoTrlr (void)
        {
            return m_szWmsInfoTrlr;
        }
        long WmsInfoTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsInfoTrlr, sizeof(m_szWmsInfoTrlr), &m_bWmsInfoTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS SERVICE CHARGE TRAILER
        long lWmsExtScDataTrlr () { return 1; };
        RWCString WmsExtScDataTrlr (void)
        {
            return m_szWmsExtScDataTrlr;
        }
        long WmsExtScDataTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsExtScDataTrlr, sizeof(m_szWmsExtScDataTrlr), &m_bWmsExtScDataTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS EXTERNAL DEPOSIT TRAILER
        long lWmsExtrnlDepositTrlr () { return 1; };
        RWCString WmsExtrnlDepositTrlr (void)
        {
            return m_szWmsExtrnlDepositTrlr;
        }
        long WmsExtrnlDepositTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsExtrnlDepositTrlr, sizeof(m_szWmsExtrnlDepositTrlr), &m_bWmsExtrnlDepositTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS KITING SUSPECT TRAILER
        long lWmsKitingSuspTrlr () { return 1; };
        RWCString WmsKitingSuspTrlr (void)
        {
            return m_szWmsKitingSuspTrlr;
        }
        long WmsKitingSuspTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsKitingSuspTrlr, sizeof(m_szWmsKitingSuspTrlr), &m_bWmsKitingSuspTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS EFA TRAILER
        long lWmsEfaTrlr () { return 1; };
        RWCString WmsEfaTrlr (void)
        {
            return m_szWmsEfaTrlr;
        }
        long WmsEfaTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsEfaTrlr, sizeof(m_szWmsEfaTrlr), &m_bWmsEfaTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS CASH AVAILABLE TRAILER
        long lWmsCashAvailTrlr () { return 1; };
        RWCString WmsCashAvailTrlr (void)
        {
            return m_szWmsCashAvailTrlr;
        }
        long WmsCashAvailTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCashAvailTrlr, sizeof(m_szWmsCashAvailTrlr), &m_bWmsCashAvailTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS INVESTMENT TRAILER
        long lWmsInvestmentTrlr () { return 1; };
        RWCString WmsInvestmentTrlr (void)
        {
            return m_szWmsInvestmentTrlr;
        }
        long WmsInvestmentTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsInvestmentTrlr, sizeof(m_szWmsInvestmentTrlr), &m_bWmsInvestmentTrlr);
        }
        
        //    INDICATES WHETHER ACCOUNT HAS RATE TRAILER
        long lWmsRateTrlr () { return 1; };
        RWCString WmsRateTrlr (void)
        {
            return m_szWmsRateTrlr;
        }
        long WmsRateTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsRateTrlr, sizeof(m_szWmsRateTrlr), &m_bWmsRateTrlr);
        }
        
        //    NUMBER OF SAVINGS TRANSFERS IN AFFILIATE ACCOUNT TRAILERS
        long lWmsSavPtr () { return 2; };
        RWCString WmsSavPtr (void)
        {
            return AceZeroSupp(m_szWmsSavPtr, &m_szSuppressBuff[0]);
        }
        RWCString WmsSavPtrRaw (void)
        {
            return m_szWmsSavPtr;
        }
        long WmsSavPtr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSavPtr, sizeof(m_szWmsSavPtr), &m_bWmsSavPtr);
        }
        
        //    DETERMINES THE CORRECT NUMBER OF TRAILER RECORDS
        long lWmsExpansionInd () { return 1; };
        RWCString WmsExpansionInd (void)
        {
            return m_szWmsExpansionInd;
        }
        long WmsExpansionInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsExpansionInd, sizeof(m_szWmsExpansionInd), &m_bWmsExpansionInd);
        }
        
        //    CONTINENT WHERE THE ACCOUNT HOLDER RESIDES
        long lWmsInfoContinent () { return 1; };
        RWCString WmsInfoContinent (void)
        {
            return m_szWmsInfoContinent;
        }
        long WmsInfoContinent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsInfoContinent, sizeof(m_szWmsInfoContinent), &m_bWmsInfoContinent);
        }
        
        //    COUNTRY WHERE THE ACCOUNT HOLDER RESIDES
        long lWmsInfoCntry () { return 4; };
        RWCString WmsInfoCntry (void)
        {
            return m_szWmsInfoCntry;
        }
        long WmsInfoCntry (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsInfoCntry, sizeof(m_szWmsInfoCntry), &m_bWmsInfoCntry);
        }
        
        //    CURRENT SAVINGS BALANCE
        long lWmsIntCurBal () { return 17; };
        RWCString WmsIntCurBal (void)
        {
            return AceZeroSupp(m_szWmsIntCurBal, &m_szSuppressBuff[0]);
        }
        RWCString WmsIntCurBalRaw (void)
        {
            return m_szWmsIntCurBal;
        }
        long WmsIntCurBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIntCurBal, sizeof(m_szWmsIntCurBal), &m_bWmsIntCurBal);
        }
        
        //    AMOUNT NEEDED TO PAY ENTIRE BAL DUE ON NEXT PROCESSING DAY
        long lWmsPayoffAmt () { return 17; };
        RWCString WmsPayoffAmt (void)
        {
            return AceZeroSupp(m_szWmsPayoffAmt, &m_szSuppressBuff[0]);
        }
        RWCString WmsPayoffAmtRaw (void)
        {
            return m_szWmsPayoffAmt;
        }
        long WmsPayoffAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsPayoffAmt, sizeof(m_szWmsPayoffAmt), &m_bWmsPayoffAmt);
        }
        
        //    CENTURY WHEN THE LAST PAYMENT WAS MADE TO THE ACCOUNT
        long lWmsLastPmtCent () { return 2; };
        RWCString WmsLastPmtCent (void)
        {
            return m_szWmsLastPmtCent;
        }
        long WmsLastPmtCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastPmtCent, sizeof(m_szWmsLastPmtCent), &m_bWmsLastPmtCent);
        }
        
        //    YEAR WHEN THE LAST PAYMENT WAS MADE TO THE ACCOUNT
        long lWmsLastPmtYr () { return 2; };
        RWCString WmsLastPmtYr (void)
        {
            return m_szWmsLastPmtYr;
        }
        long WmsLastPmtYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastPmtYr, sizeof(m_szWmsLastPmtYr), &m_bWmsLastPmtYr);
        }
        
        //    MONTH WHEN THE LAST PAYMENT WAS MADE TO THE ACCOUNT
        long lWmsLastPmtMo () { return 2; };
        RWCString WmsLastPmtMo (void)
        {
            return m_szWmsLastPmtMo;
        }
        long WmsLastPmtMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastPmtMo, sizeof(m_szWmsLastPmtMo), &m_bWmsLastPmtMo);
        }
        
        //    DAY WHEN THE LAST PAYMENT WAS MADE TO THE ACCOUNT
        long lWmsLastPmtDa () { return 2; };
        RWCString WmsLastPmtDa (void)
        {
            return m_szWmsLastPmtDa;
        }
        long WmsLastPmtDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastPmtDa, sizeof(m_szWmsLastPmtDa), &m_bWmsLastPmtDa);
        }
        
        //    TOTAL AMOUNT DUE THAT WAS BILLED BUT NOT PAID
        long lWmsPymtDueAmt () { return 17; };
        RWCString WmsPymtDueAmt (void)
        {
            return AceZeroSupp(m_szWmsPymtDueAmt, &m_szSuppressBuff[0]);
        }
        RWCString WmsPymtDueAmtRaw (void)
        {
            return m_szWmsPymtDueAmt;
        }
        long WmsPymtDueAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsPymtDueAmt, sizeof(m_szWmsPymtDueAmt), &m_bWmsPymtDueAmt);
        }
        
        //    NEXT CALENDAR DAY WHEN BANK AVAILABLE AMT WILL BE PROCESSED
        long lWmsBankAvailTrAmt () { return 14; };
        RWCString WmsBankAvailTrAmt (long i)
        {
            if (i >= 0 && i < 7)
                return AceZeroSupp(m_szWmsBankAvailTrAmt[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString WmsBankAvailTrAmtRaw (long i)
        {
            if (i >= 0 && i < 7)
                return m_szWmsBankAvailTrAmt[i];
            else
                return "";
        }
        long WmsBankAvailTrAmt (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 7)
                return SetString(rwc, m_szWmsBankAvailTrAmt[i], sizeof(m_szWmsBankAvailTrAmt[i]), &m_bWmsBankAvailTrAmt[i]);
            else
                return -1;
        }
        
        //    NEXT CALENDAR DAY WHEN CUST AVAILABLE AMT WILL BE PROCESSED
        long lWmsCustAvailFunds () { return 14; };
        RWCString WmsCustAvailFunds (long i)
        {
            if (i >= 0 && i < 12)
                return AceZeroSupp(m_szWmsCustAvailFunds[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString WmsCustAvailFundsRaw (long i)
        {
            if (i >= 0 && i < 12)
                return m_szWmsCustAvailFunds[i];
            else
                return "";
        }
        long WmsCustAvailFunds (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 12)
                return SetString(rwc, m_szWmsCustAvailFunds[i], sizeof(m_szWmsCustAvailFunds[i]), &m_bWmsCustAvailFunds[i]);
            else
                return -1;
        }
        
        //    NUM DAYS NSF ITEMS RETURNED DURING PREVIOUS TWELVE MONTHS
        long lWmsTimesNsfMo () { return 4; };
        RWCString WmsTimesNsfMo (long i)
        {
            if (i >= 0 && i < 12)
                return AceZeroSupp(m_szWmsTimesNsfMo[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString WmsTimesNsfMoRaw (long i)
        {
            if (i >= 0 && i < 12)
                return m_szWmsTimesNsfMo[i];
            else
                return "";
        }
        long WmsTimesNsfMo (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 12)
                return SetString(rwc, m_szWmsTimesNsfMo[i], sizeof(m_szWmsTimesNsfMo[i]), &m_bWmsTimesNsfMo[i]);
            else
                return -1;
        }
        
        //    NUM DAYS OD ITEMS WERE PAID DURING PREVIOUS TWELVE MONTHS
        long lWmsTimesOdMo () { return 4; };
        RWCString WmsTimesOdMo (long i)
        {
            if (i >= 0 && i < 12)
                return AceZeroSupp(m_szWmsTimesOdMo[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString WmsTimesOdMoRaw (long i)
        {
            if (i >= 0 && i < 12)
                return m_szWmsTimesOdMo[i];
            else
                return "";
        }
        long WmsTimesOdMo (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 12)
                return SetString(rwc, m_szWmsTimesOdMo[i], sizeof(m_szWmsTimesOdMo[i]), &m_bWmsTimesOdMo[i]);
            else
                return -1;
        }
        
        //    # DAYS ITEMS PAID AGAINST CUST UNAVAIL FUNDS PREV TWELVE MOS
        long lWmsTimesUnavailMo () { return 4; };
        RWCString WmsTimesUnavailMo (long i)
        {
            if (i >= 0 && i < 12)
                return AceZeroSupp(m_szWmsTimesUnavailMo[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString WmsTimesUnavailMoRaw (long i)
        {
            if (i >= 0 && i < 12)
                return m_szWmsTimesUnavailMo[i];
            else
                return "";
        }
        long WmsTimesUnavailMo (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 12)
                return SetString(rwc, m_szWmsTimesUnavailMo[i], sizeof(m_szWmsTimesUnavailMo[i]), &m_bWmsTimesUnavailMo[i]);
            else
                return -1;
        }
        
        //    ONLINE AMOUNT OF DEBITS
        long lImMemoOlDrAmt () { return 17; };
        RWCString ImMemoOlDrAmt (void)
        {
            return AceZeroSupp(m_szImMemoOlDrAmt, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlDrAmtRaw (void)
        {
            return m_szImMemoOlDrAmt;
        }
        long ImMemoOlDrAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlDrAmt, sizeof(m_szImMemoOlDrAmt), &m_bImMemoOlDrAmt);
        }
        
        //    ONLINE AMOUNT OF CREDITS
        long lImMemoOlCrAmt () { return 17; };
        RWCString ImMemoOlCrAmt (void)
        {
            return AceZeroSupp(m_szImMemoOlCrAmt, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlCrAmtRaw (void)
        {
            return m_szImMemoOlCrAmt;
        }
        long ImMemoOlCrAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlCrAmt, sizeof(m_szImMemoOlCrAmt), &m_bImMemoOlCrAmt);
        }
        
        //    ONLINE AMOUNT OF SAVINGS DEBITS
        long lImMemoOlSvDrAmt () { return 17; };
        RWCString ImMemoOlSvDrAmt (void)
        {
            return AceZeroSupp(m_szImMemoOlSvDrAmt, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlSvDrAmtRaw (void)
        {
            return m_szImMemoOlSvDrAmt;
        }
        long ImMemoOlSvDrAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlSvDrAmt, sizeof(m_szImMemoOlSvDrAmt), &m_bImMemoOlSvDrAmt);
        }
        
        //    ONLINE AMOUNT OF SAVINGS CREDITS
        long lImMemoOlSvCrAmt () { return 17; };
        RWCString ImMemoOlSvCrAmt (void)
        {
            return AceZeroSupp(m_szImMemoOlSvCrAmt, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlSvCrAmtRaw (void)
        {
            return m_szImMemoOlSvCrAmt;
        }
        long ImMemoOlSvCrAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlSvCrAmt, sizeof(m_szImMemoOlSvCrAmt), &m_bImMemoOlSvCrAmt);
        }
        
        //    ONLINE AMOUNT OF LOAN DEBITS
        long lImMemoOlLnDrAmt () { return 17; };
        RWCString ImMemoOlLnDrAmt (void)
        {
            return AceZeroSupp(m_szImMemoOlLnDrAmt, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlLnDrAmtRaw (void)
        {
            return m_szImMemoOlLnDrAmt;
        }
        long ImMemoOlLnDrAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlLnDrAmt, sizeof(m_szImMemoOlLnDrAmt), &m_bImMemoOlLnDrAmt);
        }
        
        //    ONLINE AMOUNT OF LOAN CREDITS
        long lImMemoOlLnCrAmt () { return 17; };
        RWCString ImMemoOlLnCrAmt (void)
        {
            return AceZeroSupp(m_szImMemoOlLnCrAmt, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlLnCrAmtRaw (void)
        {
            return m_szImMemoOlLnCrAmt;
        }
        long ImMemoOlLnCrAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlLnCrAmt, sizeof(m_szImMemoOlLnCrAmt), &m_bImMemoOlLnCrAmt);
        }
        
        //    ONLINE LOANS AVAILABLE BALANCE
        long lImMemoOlLnAvailBal () { return 17; };
        RWCString ImMemoOlLnAvailBal (void)
        {
            return AceZeroSupp(m_szImMemoOlLnAvailBal, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlLnAvailBalRaw (void)
        {
            return m_szImMemoOlLnAvailBal;
        }
        long ImMemoOlLnAvailBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlLnAvailBal, sizeof(m_szImMemoOlLnAvailBal), &m_bImMemoOlLnAvailBal);
        }
        
        //    INDICATES WHETHER ACCT HOLDER'S ADDR IS FOREIGN OR DOMESTIC
        long lWmsSsnForeignAddress () { return 1; };
        RWCString WmsSsnForeignAddress (void)
        {
            return m_szWmsSsnForeignAddress;
        }
        long WmsSsnForeignAddress (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSsnForeignAddress, sizeof(m_szWmsSsnForeignAddress), &m_bWmsSsnForeignAddress);
        }
        
        //    STATUS OF LOAN ACCT THAT IS ASSOCIATED WITH THE DDA ACCT
        long lWmsLoanStatus () { return 1; };
        RWCString WmsLoanStatus (void)
        {
            return m_szWmsLoanStatus;
        }
        long WmsLoanStatus (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLoanStatus, sizeof(m_szWmsLoanStatus), &m_bWmsLoanStatus);
        }
        
        //    CURRENCY FOR THE ACCOUNT (U.S. DOLLARS, JAPANESE YEN, ETC.)
        long lWmsIntlCurrCode () { return 3; };
        RWCString WmsIntlCurrCode (void)
        {
            return m_szWmsIntlCurrCode;
        }
        long WmsIntlCurrCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIntlCurrCode, sizeof(m_szWmsIntlCurrCode), &m_bWmsIntlCurrCode);
        }
        
        //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY
        long lWmsIntlCurrDec () { return 1; };
        RWCString WmsIntlCurrDec (void)
        {
            return m_szWmsIntlCurrDec;
        }
        long WmsIntlCurrDec (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIntlCurrDec, sizeof(m_szWmsIntlCurrDec), &m_bWmsIntlCurrDec);
        }
        
        //    CUSTOMER LANGUAGE (ENGLISH, SPANISH, ETC.)
        long lWmsIntlCustLanguage () { return 2; };
        RWCString WmsIntlCustLanguage (void)
        {
            return m_szWmsIntlCustLanguage;
        }
        long WmsIntlCustLanguage (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIntlCustLanguage, sizeof(m_szWmsIntlCustLanguage), &m_bWmsIntlCustLanguage);
        }
        
        //    CUSTOMER LANGUAGE GROUP
        long lWmsIntlCustLangGroup () { return 1; };
        RWCString WmsIntlCustLangGroup (void)
        {
            return m_szWmsIntlCustLangGroup;
        }
        long WmsIntlCustLangGroup (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIntlCustLangGroup, sizeof(m_szWmsIntlCustLangGroup), &m_bWmsIntlCustLangGroup);
        }
        
        //    INDICATES HOW THE TAX NUMBER IS USED (BUS OR PERSONAL)
        long lWmsTaxCode () { return 1; };
        RWCString WmsTaxCode (void)
        {
            return m_szWmsTaxCode;
        }
        long WmsTaxCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTaxCode, sizeof(m_szWmsTaxCode), &m_bWmsTaxCode);
        }
        
        //    ANNUAL INTEREST RATE FOR THE ACCOUNT
        long lWmsAnnualRate () { return 11; };
        RWCString WmsAnnualRate (void)
        {
            return AceZeroSupp(m_szWmsAnnualRate, &m_szSuppressBuff[0]);
        }
        RWCString WmsAnnualRateRaw (void)
        {
            return m_szWmsAnnualRate;
        }
        long WmsAnnualRate (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsAnnualRate, sizeof(m_szWmsAnnualRate), &m_bWmsAnnualRate);
        }
        
        //    INTEREST PAID LAST YEAR
        long lWmsLoanPrevYtdInt () { return 17; };
        RWCString WmsLoanPrevYtdInt (void)
        {
            return AceZeroSupp(m_szWmsLoanPrevYtdInt, &m_szSuppressBuff[0]);
        }
        RWCString WmsLoanPrevYtdIntRaw (void)
        {
            return m_szWmsLoanPrevYtdInt;
        }
        long WmsLoanPrevYtdInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLoanPrevYtdInt, sizeof(m_szWmsLoanPrevYtdInt), &m_bWmsLoanPrevYtdInt);
        }
        
        //    INTEREST PAID THIS YEAR
        long lWmsLoanYtdInt () { return 17; };
        RWCString WmsLoanYtdInt (void)
        {
            return AceZeroSupp(m_szWmsLoanYtdInt, &m_szSuppressBuff[0]);
        }
        RWCString WmsLoanYtdIntRaw (void)
        {
            return m_szWmsLoanYtdInt;
        }
        long WmsLoanYtdInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLoanYtdInt, sizeof(m_szWmsLoanYtdInt), &m_bWmsLoanYtdInt);
        }
        
        //    CURRENT ANNUAL SAVINGS RATE
        long lWmsSavCurAnn () { return 11; };
        RWCString WmsSavCurAnn (void)
        {
            return AceZeroSupp(m_szWmsSavCurAnn, &m_szSuppressBuff[0]);
        }
        RWCString WmsSavCurAnnRaw (void)
        {
            return m_szWmsSavCurAnn;
        }
        long WmsSavCurAnn (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSavCurAnn, sizeof(m_szWmsSavCurAnn), &m_bWmsSavCurAnn);
        }
        
        //    INTEREST CREDITED TO THE ACCOUNT THIS YEAR
        long lWmsYtdIntPaid () { return 17; };
        RWCString WmsYtdIntPaid (void)
        {
            return AceZeroSupp(m_szWmsYtdIntPaid, &m_szSuppressBuff[0]);
        }
        RWCString WmsYtdIntPaidRaw (void)
        {
            return m_szWmsYtdIntPaid;
        }
        long WmsYtdIntPaid (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsYtdIntPaid, sizeof(m_szWmsYtdIntPaid), &m_bWmsYtdIntPaid);
        }
        
        //    ACCOUNT HOLDER'S RELATIONSHIP WITH THE INSTITUTION
        long lImMemoOlOffEmp () { return 1; };
        RWCString ImMemoOlOffEmp (void)
        {
            return m_szImMemoOlOffEmp;
        }
        long ImMemoOlOffEmp (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlOffEmp, sizeof(m_szImMemoOlOffEmp), &m_bImMemoOlOffEmp);
        }
        
        //    INDICATES WHETHER TO INCLUDE ACCT IN END OF MONTH ANALYSIS
        long lWmsMtdAnalysis () { return 1; };
        RWCString WmsMtdAnalysis (void)
        {
            return m_szWmsMtdAnalysis;
        }
        long WmsMtdAnalysis (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsMtdAnalysis, sizeof(m_szWmsMtdAnalysis), &m_bWmsMtdAnalysis);
        }
        
        //    INDICATES WHETHER TO USE DR/CR CHECK TRUNCATION FOR ACCOUNT
        long lWmsChkTruncFlag () { return 1; };
        RWCString WmsChkTruncFlag (void)
        {
            return m_szWmsChkTruncFlag;
        }
        long WmsChkTruncFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsChkTruncFlag, sizeof(m_szWmsChkTruncFlag), &m_bWmsChkTruncFlag);
        }
        
        //    INTEREST CREDITED TO THE ACCOUNT LAST YEAR
        long lWmsPrevYtdInt () { return 17; };
        RWCString WmsPrevYtdInt (void)
        {
            return AceZeroSupp(m_szWmsPrevYtdInt, &m_szSuppressBuff[0]);
        }
        RWCString WmsPrevYtdIntRaw (void)
        {
            return m_szWmsPrevYtdInt;
        }
        long WmsPrevYtdInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsPrevYtdInt, sizeof(m_szWmsPrevYtdInt), &m_bWmsPrevYtdInt);
        }
        
        //    ABBREVIATED VERSION OF THE CUSTOMER'S NAME
        long lWmsShortName () { return 13; };
        RWCString WmsShortName (void)
        {
            return m_szWmsShortName;
        }
        long WmsShortName (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsShortName, sizeof(m_szWmsShortName), &m_bWmsShortName);
        }
        
        //    CENTURY WHEN THE LAST RESET STATEMENT WAS PRODUCED
        long lWmsLastStmtCc () { return 2; };
        RWCString WmsLastStmtCc (void)
        {
            return m_szWmsLastStmtCc;
        }
        long WmsLastStmtCc (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastStmtCc, sizeof(m_szWmsLastStmtCc), &m_bWmsLastStmtCc);
        }
        
        //    YEAR WHEN THE LAST RESET STATEMENT WAS PRODUCED
        long lWmsLastStmtYr () { return 2; };
        RWCString WmsLastStmtYr (void)
        {
            return m_szWmsLastStmtYr;
        }
        long WmsLastStmtYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastStmtYr, sizeof(m_szWmsLastStmtYr), &m_bWmsLastStmtYr);
        }
        
        //    MONTH WHEN THE LAST RESET STATEMENT WAS PRODUCED
        long lWmsLastStmtMo () { return 2; };
        RWCString WmsLastStmtMo (void)
        {
            return m_szWmsLastStmtMo;
        }
        long WmsLastStmtMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastStmtMo, sizeof(m_szWmsLastStmtMo), &m_bWmsLastStmtMo);
        }
        
        //    DAY WHEN THE LAST RESET STATEMENT WAS PRODUCED
        long lWmsLastStmtDa () { return 2; };
        RWCString WmsLastStmtDa (void)
        {
            return m_szWmsLastStmtDa;
        }
        long WmsLastStmtDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastStmtDa, sizeof(m_szWmsLastStmtDa), &m_bWmsLastStmtDa);
        }
        
        //    INDICATES WHETHER TO WAIVE THE NSF FEE
        long lWmsNsfWaive () { return 1; };
        RWCString WmsNsfWaive (void)
        {
            return m_szWmsNsfWaive;
        }
        long WmsNsfWaive (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNsfWaive, sizeof(m_szWmsNsfWaive), &m_bWmsNsfWaive);
        }
        
        //    INDICATES WHETHER TO WAIVE THE OVERDRAFT FEE
        long lWmsOdWaive () { return 1; };
        RWCString WmsOdWaive (void)
        {
            return m_szWmsOdWaive;
        }
        long WmsOdWaive (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOdWaive, sizeof(m_szWmsOdWaive), &m_bWmsOdWaive);
        }
        
        //    INDICATES WHETHER TO WAIVE THE LATE CHARGE FEE
        long lWmsWaiveFee () { return 1; };
        RWCString WmsWaiveFee (void)
        {
            return m_szWmsWaiveFee;
        }
        long WmsWaiveFee (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsWaiveFee, sizeof(m_szWmsWaiveFee), &m_bWmsWaiveFee);
        }
        
        //    USER DEFINED REGION CODE
        long lWmsRegion () { return 3; };
        RWCString WmsRegion (void)
        {
            return m_szWmsRegion;
        }
        long WmsRegion (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsRegion, sizeof(m_szWmsRegion), &m_bWmsRegion);
        }
        
        //    CENTURY THROUGH WHICH PROCESSING OCCURS
        long lWbcOrigProcThruCent () { return 2; };
        RWCString WbcOrigProcThruCent (void)
        {
            return m_szWbcOrigProcThruCent;
        }
        long WbcOrigProcThruCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcOrigProcThruCent, sizeof(m_szWbcOrigProcThruCent), &m_bWbcOrigProcThruCent);
        }
        
        //    YEAR THROUGH WHICH PROCESSING OCCURS
        long lWbcOrigProcThruYr () { return 2; };
        RWCString WbcOrigProcThruYr (void)
        {
            return m_szWbcOrigProcThruYr;
        }
        long WbcOrigProcThruYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcOrigProcThruYr, sizeof(m_szWbcOrigProcThruYr), &m_bWbcOrigProcThruYr);
        }
        
        //    MONTH THROUGH WHICH PROCESSING OCCURS
        long lWbcOrigProcThruMo () { return 2; };
        RWCString WbcOrigProcThruMo (void)
        {
            return m_szWbcOrigProcThruMo;
        }
        long WbcOrigProcThruMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcOrigProcThruMo, sizeof(m_szWbcOrigProcThruMo), &m_bWbcOrigProcThruMo);
        }
        
        //    DAY THROUGH WHICH PROCESSING OCCURS
        long lWbcOrigProcThruDa () { return 2; };
        RWCString WbcOrigProcThruDa (void)
        {
            return m_szWbcOrigProcThruDa;
        }
        long WbcOrigProcThruDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcOrigProcThruDa, sizeof(m_szWbcOrigProcThruDa), &m_bWbcOrigProcThruDa);
        }
        
        //    INDICATES WHETHER TO WAIVE THE SERVICE CHARGE
        long lWmsScCharge () { return 1; };
        RWCString WmsScCharge (void)
        {
            return m_szWmsScCharge;
        }
        long WmsScCharge (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsScCharge, sizeof(m_szWmsScCharge), &m_bWmsScCharge);
        }
        
        //    REASON TO WAIVE THE SERVICE CHARGE
        long lWmsScWaiveReason () { return 2; };
        RWCString WmsScWaiveReason (void)
        {
            return m_szWmsScWaiveReason;
        }
        long WmsScWaiveReason (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsScWaiveReason, sizeof(m_szWmsScWaiveReason), &m_bWmsScWaiveReason);
        }
        
        //    OD LIMIT AMOUNT
        long lWmsOdLimitAmt () { return 17; };
        RWCString WmsOdLimitAmt (void)
        {
            return AceZeroSupp(m_szWmsOdLimitAmt, &m_szSuppressBuff[0]);
        }
        RWCString WmsOdLimitAmtRaw (void)
        {
            return m_szWmsOdLimitAmt;
        }
        long WmsOdLimitAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOdLimitAmt, sizeof(m_szWmsOdLimitAmt), &m_bWmsOdLimitAmt);
        }
        
        //    LAST PROCESS THROUGH CENT
        long lWbcLastProcCc () { return 2; };
        RWCString WbcLastProcCc (void)
        {
            return m_szWbcLastProcCc;
        }
        long WbcLastProcCc (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcLastProcCc, sizeof(m_szWbcLastProcCc), &m_bWbcLastProcCc);
        }
        
        //    LAST PROCESS THROUGH YEAR
        long lWbcLastProcYr () { return 2; };
        RWCString WbcLastProcYr (void)
        {
            return m_szWbcLastProcYr;
        }
        long WbcLastProcYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcLastProcYr, sizeof(m_szWbcLastProcYr), &m_bWbcLastProcYr);
        }
        
        //    LAST PROCESS THROUGH MONTH
        long lWbcLastProcMo () { return 2; };
        RWCString WbcLastProcMo (void)
        {
            return m_szWbcLastProcMo;
        }
        long WbcLastProcMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcLastProcMo, sizeof(m_szWbcLastProcMo), &m_bWbcLastProcMo);
        }
        
        //    LAST PROCESS THROUGH DAY
        long lWbcLastProcDa () { return 2; };
        RWCString WbcLastProcDa (void)
        {
            return m_szWbcLastProcDa;
        }
        long WbcLastProcDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcLastProcDa, sizeof(m_szWbcLastProcDa), &m_bWbcLastProcDa);
        }
        
        //    RESETS STMT FIELDS THE DAY AFTER A STATEMENT CYCLE
        long lWmsStmtClear () { return 1; };
        RWCString WmsStmtClear (void)
        {
            return m_szWmsStmtClear;
        }
        long WmsStmtClear (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtClear, sizeof(m_szWmsStmtClear), &m_bWmsStmtClear);
        }
        
        //    FUNDING FLAG - ACCOUNT IS USED TO FUND OTHER ACCOUNTS
        long lWmsFundingFlag () { return 1; };
        RWCString WmsFundingFlag (void)
        {
            return m_szWmsFundingFlag;
        }
        long WmsFundingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsFundingFlag, sizeof(m_szWmsFundingFlag), &m_bWmsFundingFlag);
        }
        
        //    CUSTOMERS HOME AREA CODE
        long lWmsHomeAreaCode () { return 3; };
        RWCString WmsHomeAreaCode (void)
        {
            return m_szWmsHomeAreaCode;
        }
        long WmsHomeAreaCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsHomeAreaCode, sizeof(m_szWmsHomeAreaCode), &m_bWmsHomeAreaCode);
        }
        
        //    CUSTOMERS HOME PHONE NUMBER
        long lWmsHomePhoneNo () { return 7; };
        RWCString WmsHomePhoneNo (void)
        {
            return m_szWmsHomePhoneNo;
        }
        long WmsHomePhoneNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsHomePhoneNo, sizeof(m_szWmsHomePhoneNo), &m_bWmsHomePhoneNo);
        }
        
        //    CUSTOMERS HOME PHONE EXTENSION
        long lWmsHomeExtension () { return 4; };
        RWCString WmsHomeExtension (void)
        {
            return m_szWmsHomeExtension;
        }
        long WmsHomeExtension (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsHomeExtension, sizeof(m_szWmsHomeExtension), &m_bWmsHomeExtension);
        }
        
        //    CUSTOMER'S BUSINESS AREA CODE
        long lWmsBusAreaCode () { return 3; };
        RWCString WmsBusAreaCode (void)
        {
            return m_szWmsBusAreaCode;
        }
        long WmsBusAreaCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBusAreaCode, sizeof(m_szWmsBusAreaCode), &m_bWmsBusAreaCode);
        }
        
        //    CUSTOMER'S BUSINESS PHONE NUMBER
        long lWmsBusPhoneNo () { return 7; };
        RWCString WmsBusPhoneNo (void)
        {
            return m_szWmsBusPhoneNo;
        }
        long WmsBusPhoneNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBusPhoneNo, sizeof(m_szWmsBusPhoneNo), &m_bWmsBusPhoneNo);
        }
        
        //    CUSTOMER'S BUSINESS EXTENSION
        long lWmsBusExtension () { return 4; };
        RWCString WmsBusExtension (void)
        {
            return m_szWmsBusExtension;
        }
        long WmsBusExtension (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBusExtension, sizeof(m_szWmsBusExtension), &m_bWmsBusExtension);
        }
        
        //    INDICATES IF TAX IF CERTIFICATION IS ON FILE
        long lWmsTinCertification () { return 1; };
        RWCString WmsTinCertification (void)
        {
            return m_szWmsTinCertification;
        }
        long WmsTinCertification (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTinCertification, sizeof(m_szWmsTinCertification), &m_bWmsTinCertification);
        }
        
        //    DEPOSITED FUNDS THAT HAVE BEEN COLLECTED BY THE BANK
        long lCollBal () { return 17; };
        RWCString CollBal (void)
        {
            return AceZeroSupp(m_szCollBal, &m_szSuppressBuff[0]);
        }
        RWCString CollBalRaw (void)
        {
            return m_szCollBal;
        }
        long CollBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szCollBal, sizeof(m_szCollBal), &m_bCollBal);
        }
        
        //    AVERAGE BALANCE OF THE ACCOUNT SINCE THE BEG. OF YR
        long lYtdAvgBal () { return 17; };
        RWCString YtdAvgBal (void)
        {
            return AceZeroSupp(m_szYtdAvgBal, &m_szSuppressBuff[0]);
        }
        RWCString YtdAvgBalRaw (void)
        {
            return m_szYtdAvgBal;
        }
        long YtdAvgBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szYtdAvgBal, sizeof(m_szYtdAvgBal), &m_bYtdAvgBal);
        }
        
        //    CAUSES STMT TO SORT DIRECTLY BEHIND THE REG SPEC HNDLNG STMT
        long lWmsStmtSpeclHandl () { return 1; };
        RWCString WmsStmtSpeclHandl (void)
        {
            return m_szWmsStmtSpeclHandl;
        }
        long WmsStmtSpeclHandl (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtSpeclHandl, sizeof(m_szWmsStmtSpeclHandl), &m_bWmsStmtSpeclHandl);
        }
        
        //    DATE CLOSED CC
        long lDateClosedCc () { return 2; };
        RWCString DateClosedCc (void)
        {
            return m_szDateClosedCc;
        }
        long DateClosedCc (const RWCString& rwc)
        {
            return SetString(rwc, m_szDateClosedCc, sizeof(m_szDateClosedCc), &m_bDateClosedCc);
        }
        
        //    DATE CLOSED YR
        long lDateClosedYr () { return 2; };
        RWCString DateClosedYr (void)
        {
            return m_szDateClosedYr;
        }
        long DateClosedYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szDateClosedYr, sizeof(m_szDateClosedYr), &m_bDateClosedYr);
        }
        
        //    DATE CLOSED MO
        long lDateClosedMo () { return 2; };
        RWCString DateClosedMo (void)
        {
            return m_szDateClosedMo;
        }
        long DateClosedMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szDateClosedMo, sizeof(m_szDateClosedMo), &m_bDateClosedMo);
        }
        
        //    DATE CLOSED DA
        long lDateClosedDa () { return 2; };
        RWCString DateClosedDa (void)
        {
            return m_szDateClosedDa;
        }
        long DateClosedDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szDateClosedDa, sizeof(m_szDateClosedDa), &m_bDateClosedDa);
        }
        
        //    NUM OF TIMES DURING LAST 12 MOS CHECKS RETURNED INSUFF.
        long lNoNsf () { return 3; };
        RWCString NoNsf (void)
        {
            return m_szNoNsf;
        }
        long NoNsf (const RWCString& rwc)
        {
            return SetString(rwc, m_szNoNsf, sizeof(m_szNoNsf), &m_bNoNsf);
        }
        
        //    NUM OF TIMES DURING LAST 12 MOS ACCT OVERDRAWN
        long lNoOd () { return 3; };
        RWCString NoOd (void)
        {
            return m_szNoOd;
        }
        long NoOd (const RWCString& rwc)
        {
            return SetString(rwc, m_szNoOd, sizeof(m_szNoOd), &m_bNoOd);
        }
        
        //    INDICATES THE REASON FOR BACKUP WITHHOLDING
        long lWmsBkupWthldFlag () { return 1; };
        RWCString WmsBkupWthldFlag (void)
        {
            return m_szWmsBkupWthldFlag;
        }
        long WmsBkupWthldFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBkupWthldFlag, sizeof(m_szWmsBkupWthldFlag), &m_bWmsBkupWthldFlag);
        }
        
        //    USER DEFINED
        long lWmsTaxExemptRsn () { return 1; };
        RWCString WmsTaxExemptRsn (void)
        {
            return m_szWmsTaxExemptRsn;
        }
        long WmsTaxExemptRsn (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTaxExemptRsn, sizeof(m_szWmsTaxExemptRsn), &m_bWmsTaxExemptRsn);
        }
        
        //    CENT THIS LOAN WAS APPROVED
        long lWmsApprovalCc () { return 2; };
        RWCString WmsApprovalCc (void)
        {
            return m_szWmsApprovalCc;
        }
        long WmsApprovalCc (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsApprovalCc, sizeof(m_szWmsApprovalCc), &m_bWmsApprovalCc);
        }
        
        //    YEAR THIS LOAN WAS APPROVED
        long lWmsApprovalYr () { return 2; };
        RWCString WmsApprovalYr (void)
        {
            return m_szWmsApprovalYr;
        }
        long WmsApprovalYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsApprovalYr, sizeof(m_szWmsApprovalYr), &m_bWmsApprovalYr);
        }
        
        //    MONTH THIS LOAN WAS APPROVED
        long lWmsApprovalMo () { return 2; };
        RWCString WmsApprovalMo (void)
        {
            return m_szWmsApprovalMo;
        }
        long WmsApprovalMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsApprovalMo, sizeof(m_szWmsApprovalMo), &m_bWmsApprovalMo);
        }
        
        //    DAY THIS LOAN WAS APPROVED
        long lWmsApprovalDa () { return 2; };
        RWCString WmsApprovalDa (void)
        {
            return m_szWmsApprovalDa;
        }
        long WmsApprovalDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsApprovalDa, sizeof(m_szWmsApprovalDa), &m_bWmsApprovalDa);
        }
        
        //    CENTURY OF NEXT REVIEW DATE
        long lWmsCrRatingCc () { return 2; };
        RWCString WmsCrRatingCc (void)
        {
            return m_szWmsCrRatingCc;
        }
        long WmsCrRatingCc (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCrRatingCc, sizeof(m_szWmsCrRatingCc), &m_bWmsCrRatingCc);
        }
        
        //    YEAR OF NEXT REVIEW DATE
        long lWmsCrRatingYr () { return 2; };
        RWCString WmsCrRatingYr (void)
        {
            return m_szWmsCrRatingYr;
        }
        long WmsCrRatingYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCrRatingYr, sizeof(m_szWmsCrRatingYr), &m_bWmsCrRatingYr);
        }
        
        //    MONTH OF NEXT REVIEW DATE
        long lWmsCrRatingMo () { return 2; };
        RWCString WmsCrRatingMo (void)
        {
            return m_szWmsCrRatingMo;
        }
        long WmsCrRatingMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCrRatingMo, sizeof(m_szWmsCrRatingMo), &m_bWmsCrRatingMo);
        }
        
        //    DAY OF NEXT REVIEW DATE
        long lWmsCrRatingDa () { return 2; };
        RWCString WmsCrRatingDa (void)
        {
            return m_szWmsCrRatingDa;
        }
        long WmsCrRatingDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCrRatingDa, sizeof(m_szWmsCrRatingDa), &m_bWmsCrRatingDa);
        }
        
        //    ONLINE PRINCIPAL BALANCE
        long lImMemoOlPrinBal () { return 17; };
        RWCString ImMemoOlPrinBal (void)
        {
            return AceZeroSupp(m_szImMemoOlPrinBal, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlPrinBalRaw (void)
        {
            return m_szImMemoOlPrinBal;
        }
        long ImMemoOlPrinBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlPrinBal, sizeof(m_szImMemoOlPrinBal), &m_bImMemoOlPrinBal);
        }
        
        //    ONLINE DDA BALANCE
        long lImMemoOlDdaBal () { return 17; };
        RWCString ImMemoOlDdaBal (void)
        {
            return AceZeroSupp(m_szImMemoOlDdaBal, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlDdaBalRaw (void)
        {
            return m_szImMemoOlDdaBal;
        }
        long ImMemoOlDdaBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlDdaBal, sizeof(m_szImMemoOlDdaBal), &m_bImMemoOlDdaBal);
        }
        
        //    ONLINE SAVINGS AVAILABLE BALANCE
        long lImMemoOlSvAvailBal () { return 17; };
        RWCString ImMemoOlSvAvailBal (void)
        {
            return AceZeroSupp(m_szImMemoOlSvAvailBal, &m_szSuppressBuff[0]);
        }
        RWCString ImMemoOlSvAvailBalRaw (void)
        {
            return m_szImMemoOlSvAvailBal;
        }
        long ImMemoOlSvAvailBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlSvAvailBal, sizeof(m_szImMemoOlSvAvailBal), &m_bImMemoOlSvAvailBal);
        }
        
        //    ONLINE NEW/DELETE ACCOUNT FLAG
        long lImMemoOlNewDelFlag () { return 1; };
        RWCString ImMemoOlNewDelFlag (void)
        {
            return m_szImMemoOlNewDelFlag;
        }
        long ImMemoOlNewDelFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlNewDelFlag, sizeof(m_szImMemoOlNewDelFlag), &m_bImMemoOlNewDelFlag);
        }
        
        //    PORTION OF PAYMENT DUE AMOUNT IS PAST DUE
        long lWmsPastDueAmt () { return 17; };
        RWCString WmsPastDueAmt (void)
        {
            return AceZeroSupp(m_szWmsPastDueAmt, &m_szSuppressBuff[0]);
        }
        RWCString WmsPastDueAmtRaw (void)
        {
            return m_szWmsPastDueAmt;
        }
        long WmsPastDueAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsPastDueAmt, sizeof(m_szWmsPastDueAmt), &m_bWmsPastDueAmt);
        }
        
        //    INDICATES HOW PAYMENT IS BILLED
        long lWmsAutoPymt () { return 1; };
        RWCString WmsAutoPymt (void)
        {
            return m_szWmsAutoPymt;
        }
        long WmsAutoPymt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsAutoPymt, sizeof(m_szWmsAutoPymt), &m_bWmsAutoPymt);
        }
        
        //    LAST PAYMENT AMOUNT
        long lWmsLastPymtAmt () { return 17; };
        RWCString WmsLastPymtAmt (void)
        {
            return AceZeroSupp(m_szWmsLastPymtAmt, &m_szSuppressBuff[0]);
        }
        RWCString WmsLastPymtAmtRaw (void)
        {
            return m_szWmsLastPymtAmt;
        }
        long WmsLastPymtAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLastPymtAmt, sizeof(m_szWmsLastPymtAmt), &m_bWmsLastPymtAmt);
        }
        
        //    NUMBER OF TIMES THE ACCOUNT HAS BEEN PAST DUE ACROSS BDRY A
        long lWmsACt () { return 4; };
        RWCString WmsACt (void)
        {
            return AceZeroSupp(m_szWmsACt, &m_szSuppressBuff[0]);
        }
        RWCString WmsACtRaw (void)
        {
            return m_szWmsACt;
        }
        long WmsACt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsACt, sizeof(m_szWmsACt), &m_bWmsACt);
        }
        
        //    NUMBER OF TIMES THE ACCOUNT HAS BEEN PAST DUE ACROSS BDRY B
        long lWmsBCt () { return 4; };
        RWCString WmsBCt (void)
        {
            return AceZeroSupp(m_szWmsBCt, &m_szSuppressBuff[0]);
        }
        RWCString WmsBCtRaw (void)
        {
            return m_szWmsBCt;
        }
        long WmsBCt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBCt, sizeof(m_szWmsBCt), &m_bWmsBCt);
        }
        
        //    NUMBER OF TIMES THE ACCOUNT HAS BEEN PAST DUE ACROSS BDRY C
        long lWmsCCt () { return 4; };
        RWCString WmsCCt (void)
        {
            return AceZeroSupp(m_szWmsCCt, &m_szSuppressBuff[0]);
        }
        RWCString WmsCCtRaw (void)
        {
            return m_szWmsCCt;
        }
        long WmsCCt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCCt, sizeof(m_szWmsCCt), &m_bWmsCCt);
        }
        
        //    NUMBER OF TIMES THE ACCOUNT HAS BEEN PAST DUE ACROSS BDRY D
        long lWmsDCt () { return 4; };
        RWCString WmsDCt (void)
        {
            return AceZeroSupp(m_szWmsDCt, &m_szSuppressBuff[0]);
        }
        RWCString WmsDCtRaw (void)
        {
            return m_szWmsDCt;
        }
        long WmsDCt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsDCt, sizeof(m_szWmsDCt), &m_bWmsDCt);
        }
        
        //    NUMBER OF TIMES THE ACCOUNT HAS BEEN PAST DUE ACROSS BDRY E
        long lWmsECt () { return 4; };
        RWCString WmsECt (void)
        {
            return AceZeroSupp(m_szWmsECt, &m_szSuppressBuff[0]);
        }
        RWCString WmsECtRaw (void)
        {
            return m_szWmsECt;
        }
        long WmsECt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsECt, sizeof(m_szWmsECt), &m_bWmsECt);
        }
        
        //    NUMBER OF TIMES THE ACCOUNT HAS BEEN PAST DUE ACROSS BDRY F
        long lWmsFCt () { return 4; };
        RWCString WmsFCt (void)
        {
            return AceZeroSupp(m_szWmsFCt, &m_szSuppressBuff[0]);
        }
        RWCString WmsFCtRaw (void)
        {
            return m_szWmsFCt;
        }
        long WmsFCt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsFCt, sizeof(m_szWmsFCt), &m_bWmsFCt);
        }
        
        //    BANK ABA NUMBER
        long lWbcAbaNumber () { return 9; };
        RWCString WbcAbaNumber (void)
        {
            return m_szWbcAbaNumber;
        }
        long WbcAbaNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcAbaNumber, sizeof(m_szWbcAbaNumber), &m_bWbcAbaNumber);
        }
        
        //    CENTURY THROUGH WHICH PROCESSING OCCURS.
        long lWbcNextProcCent () { return 2; };
        RWCString WbcNextProcCent (void)
        {
            return m_szWbcNextProcCent;
        }
        long WbcNextProcCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcNextProcCent, sizeof(m_szWbcNextProcCent), &m_bWbcNextProcCent);
        }
        
        //    YEAR THROUGH WHICH PROCESSING OCCURS.
        long lWbcNextProcYr () { return 2; };
        RWCString WbcNextProcYr (void)
        {
            return m_szWbcNextProcYr;
        }
        long WbcNextProcYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcNextProcYr, sizeof(m_szWbcNextProcYr), &m_bWbcNextProcYr);
        }
        
        //    MONTH THROUGH WHICH PROCESSING OCCURS.
        long lWbcNextProcMo () { return 2; };
        RWCString WbcNextProcMo (void)
        {
            return m_szWbcNextProcMo;
        }
        long WbcNextProcMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcNextProcMo, sizeof(m_szWbcNextProcMo), &m_bWbcNextProcMo);
        }
        
        //    DAY THROUGH WHICH PROCESSING OCCURS.
        long lWbcNextProcDa () { return 2; };
        RWCString WbcNextProcDa (void)
        {
            return m_szWbcNextProcDa;
        }
        long WbcNextProcDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcNextProcDa, sizeof(m_szWbcNextProcDa), &m_bWbcNextProcDa);
        }
        
        //    CAPTURE CENTURY
        long lWbcCaptCent () { return 2; };
        RWCString WbcCaptCent (void)
        {
            return m_szWbcCaptCent;
        }
        long WbcCaptCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcCaptCent, sizeof(m_szWbcCaptCent), &m_bWbcCaptCent);
        }
        
        //    CAPTURE YEAR
        long lWbcCaptYr () { return 2; };
        RWCString WbcCaptYr (void)
        {
            return m_szWbcCaptYr;
        }
        long WbcCaptYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcCaptYr, sizeof(m_szWbcCaptYr), &m_bWbcCaptYr);
        }
        
        //    CAPTURE MONTH
        long lWbcCaptMo () { return 2; };
        RWCString WbcCaptMo (void)
        {
            return m_szWbcCaptMo;
        }
        long WbcCaptMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcCaptMo, sizeof(m_szWbcCaptMo), &m_bWbcCaptMo);
        }
        
        //    CAPTURE DAY
        long lWbcCaptDa () { return 2; };
        RWCString WbcCaptDa (void)
        {
            return m_szWbcCaptDa;
        }
        long WbcCaptDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szWbcCaptDa, sizeof(m_szWbcCaptDa), &m_bWbcCaptDa);
        }
        
        //    MMDA INDICATOR - INDICATES MMDA OR NON-MMDA
        long lWmsMmdaIndicator () { return 1; };
        RWCString WmsMmdaIndicator (void)
        {
            return m_szWmsMmdaIndicator;
        }
        long WmsMmdaIndicator (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsMmdaIndicator, sizeof(m_szWmsMmdaIndicator), &m_bWmsMmdaIndicator);
        }
        
        //    INDICATES STATUS OF THE SAVINGS TRAILER
        long lWmsIntStatus () { return 1; };
        RWCString WmsIntStatus (void)
        {
            return m_szWmsIntStatus;
        }
        long WmsIntStatus (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIntStatus, sizeof(m_szWmsIntStatus), &m_bWmsIntStatus);
        }
        
        //    INDICATES HOW INTEREST FROM AN IOD ACCT IS TO BE PAID
        long lWmsIodDistCd () { return 1; };
        RWCString WmsIodDistCd (void)
        {
            return m_szWmsIodDistCd;
        }
        long WmsIodDistCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodDistCd, sizeof(m_szWmsIodDistCd), &m_bWmsIodDistCd);
        }
        
        //    COUNTRY CODE USED FOR NAME ADDRESS PURPOSES
        long lWmsNaCountry () { return 2; };
        RWCString WmsNaCountry (void)
        {
            return m_szWmsNaCountry;
        }
        long WmsNaCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNaCountry, sizeof(m_szWmsNaCountry), &m_bWmsNaCountry);
        }
        
        //    NON RESIDENT ALIEN TAX PROVINCE
        long lWmsNraTaxProvince () { return 2; };
        RWCString WmsNraTaxProvince (void)
        {
            return m_szWmsNraTaxProvince;
        }
        long WmsNraTaxProvince (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNraTaxProvince, sizeof(m_szWmsNraTaxProvince), &m_bWmsNraTaxProvince);
        }
        
        //    CODE DEFINED BY IRS USED FOR 1042S REPORTING
        long lWmsNraTaxCountry () { return 2; };
        RWCString WmsNraTaxCountry (void)
        {
            return m_szWmsNraTaxCountry;
        }
        long WmsNraTaxCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNraTaxCountry, sizeof(m_szWmsNraTaxCountry), &m_bWmsNraTaxCountry);
        }
        
        //    STATUS OF THE W-8 CERTIFICATION FOR PRIMARY ACCT HOLDER
        long lWmsNraCertName1 () { return 1; };
        RWCString WmsNraCertName1 (void)
        {
            return m_szWmsNraCertName1;
        }
        long WmsNraCertName1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNraCertName1, sizeof(m_szWmsNraCertName1), &m_bWmsNraCertName1);
        }
        
        //    INDICATES THE STATUS OF W-8 CERT FOR THE SECDRY ACCT HOLDER
        long lWmsNraCertName2 () { return 1; };
        RWCString WmsNraCertName2 (void)
        {
            return m_szWmsNraCertName2;
        }
        long WmsNraCertName2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNraCertName2, sizeof(m_szWmsNraCertName2), &m_bWmsNraCertName2);
        }
        
        //    INDICATES IF CUSTOMER IS AN ALIEN
        long lWmsInfoAlienCode () { return 1; };
        RWCString WmsInfoAlienCode (void)
        {
            return m_szWmsInfoAlienCode;
        }
        long WmsInfoAlienCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsInfoAlienCode, sizeof(m_szWmsInfoAlienCode), &m_bWmsInfoAlienCode);
        }
        
        //    BEGINNING STATEMENT BALANCE
        long lWmsStmtBeginBal () { return 17; };
        RWCString WmsStmtBeginBal (void)
        {
            return AceZeroSupp(m_szWmsStmtBeginBal, &m_szSuppressBuff[0]);
        }
        RWCString WmsStmtBeginBalRaw (void)
        {
            return m_szWmsStmtBeginBal;
        }
        long WmsStmtBeginBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtBeginBal, sizeof(m_szWmsStmtBeginBal), &m_bWmsStmtBeginBal);
        }
        
        //    MINIMUM PARTIAL PAYMENT
        long lWmsLoanMinPartPmt () { return 17; };
        RWCString WmsLoanMinPartPmt (void)
        {
            return AceZeroSupp(m_szWmsLoanMinPartPmt, &m_szSuppressBuff[0]);
        }
        RWCString WmsLoanMinPartPmtRaw (void)
        {
            return m_szWmsLoanMinPartPmt;
        }
        long WmsLoanMinPartPmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLoanMinPartPmt, sizeof(m_szWmsLoanMinPartPmt), &m_bWmsLoanMinPartPmt);
        }
        
        //    TOTAL NUMBER OF HOLDS ON THIS ACCOUNT
        long lWmsHoldNo () { return 8; };
        RWCString WmsHoldNo (void)
        {
            return AceZeroSupp(m_szWmsHoldNo, &m_szSuppressBuff[0]);
        }
        RWCString WmsHoldNoRaw (void)
        {
            return m_szWmsHoldNo;
        }
        long WmsHoldNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsHoldNo, sizeof(m_szWmsHoldNo), &m_bWmsHoldNo);
        }
        
        //    ONLINE DATE LAST MONETARY CENT
        long lMemoOlDtLstMonCent () { return 2; };
        RWCString MemoOlDtLstMonCent (void)
        {
            return m_szMemoOlDtLstMonCent;
        }
        long MemoOlDtLstMonCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szMemoOlDtLstMonCent, sizeof(m_szMemoOlDtLstMonCent), &m_bMemoOlDtLstMonCent);
        }
        
        //    ONLINE DATE LAST MONETARY YEAR
        long lMemoOlDtLstMonYr () { return 2; };
        RWCString MemoOlDtLstMonYr (void)
        {
            return m_szMemoOlDtLstMonYr;
        }
        long MemoOlDtLstMonYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szMemoOlDtLstMonYr, sizeof(m_szMemoOlDtLstMonYr), &m_bMemoOlDtLstMonYr);
        }
        
        //    ONLINE DATE LAST MONETARY MO.
        long lMemoOlDtLstMonMo () { return 2; };
        RWCString MemoOlDtLstMonMo (void)
        {
            return m_szMemoOlDtLstMonMo;
        }
        long MemoOlDtLstMonMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szMemoOlDtLstMonMo, sizeof(m_szMemoOlDtLstMonMo), &m_bMemoOlDtLstMonMo);
        }
        
        //    ONLINE DATE LAST MONETARY DA.
        long lMemoOlDtLstMonDa () { return 2; };
        RWCString MemoOlDtLstMonDa (void)
        {
            return m_szMemoOlDtLstMonDa;
        }
        long MemoOlDtLstMonDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szMemoOlDtLstMonDa, sizeof(m_szMemoOlDtLstMonDa), &m_bMemoOlDtLstMonDa);
        }
        
        //    DESIGNATES WHICH AFFILIATE TRAILER TO TRANSFER INTEREST
        long lWmsIodXferIntPtr () { return 2; };
        RWCString WmsIodXferIntPtr (void)
        {
            return AceZeroSupp(m_szWmsIodXferIntPtr, &m_szSuppressBuff[0]);
        }
        RWCString WmsIodXferIntPtrRaw (void)
        {
            return m_szWmsIodXferIntPtr;
        }
        long WmsIodXferIntPtr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsIodXferIntPtr, sizeof(m_szWmsIodXferIntPtr), &m_bWmsIodXferIntPtr);
        }
        
        //    USER CHARACTER FIELD 1.
        long lUserCharField1 () { return 15; };
        RWCString UserCharField1 (void)
        {
            return m_szUserCharField1;
        }
        long UserCharField1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField1, sizeof(m_szUserCharField1), &m_bUserCharField1);
        }
        
        //    USER CHARACTER FIELD 2.
        long lUserCharField2 () { return 15; };
        RWCString UserCharField2 (void)
        {
            return m_szUserCharField2;
        }
        long UserCharField2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField2, sizeof(m_szUserCharField2), &m_bUserCharField2);
        }
        
        //    USER CHARACTER FIELD 3.
        long lUserCharField3 () { return 15; };
        RWCString UserCharField3 (void)
        {
            return m_szUserCharField3;
        }
        long UserCharField3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField3, sizeof(m_szUserCharField3), &m_bUserCharField3);
        }
        
        //    YESTERDAY FLOAT AMOUNT
        long lYesterdayFloatAmt () { return 17; };
        RWCString YesterdayFloatAmt (void)
        {
            return AceZeroSupp(m_szYesterdayFloatAmt, &m_szSuppressBuff[0]);
        }
        RWCString YesterdayFloatAmtRaw (void)
        {
            return m_szYesterdayFloatAmt;
        }
        long YesterdayFloatAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szYesterdayFloatAmt, sizeof(m_szYesterdayFloatAmt), &m_bYesterdayFloatAmt);
        }
        
        //    TODAYS FLOAT AMOUNT
        long lTodayFloatAmt () { return 17; };
        RWCString TodayFloatAmt (void)
        {
            return AceZeroSupp(m_szTodayFloatAmt, &m_szSuppressBuff[0]);
        }
        RWCString TodayFloatAmtRaw (void)
        {
            return m_szTodayFloatAmt;
        }
        long TodayFloatAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szTodayFloatAmt, sizeof(m_szTodayFloatAmt), &m_bTodayFloatAmt);
        }
        
        //    TOTAL BALANCE
        long lTotalBalance () { return 17; };
        RWCString TotalBalance (void)
        {
            return AceZeroSupp(m_szTotalBalance, &m_szSuppressBuff[0]);
        }
        RWCString TotalBalanceRaw (void)
        {
            return m_szTotalBalance;
        }
        long TotalBalance (const RWCString& rwc)
        {
            return SetString(rwc, m_szTotalBalance, sizeof(m_szTotalBalance), &m_bTotalBalance);
        }
        
        //    GOVERNMENT ID
        long lWmsGovernmentId () { return 25; };
        RWCString WmsGovernmentId (void)
        {
            return m_szWmsGovernmentId;
        }
        long WmsGovernmentId (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsGovernmentId, sizeof(m_szWmsGovernmentId), &m_bWmsGovernmentId);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bWmsControl1) return true;
            if (m_bWmsControl2) return true;
            if (m_bWmsControl3) return true;
            if (m_bWmsControl4) return true;
            if (m_bWmsAcctNo) return true;
            if (m_bWorkMoreBreakdown) return true;
            if (m_bWorkReasonStatus) return true;
            if (m_bWorkSysType) return true;
            if (m_bWorkLoanBal) return true;
            if (m_bWorkHoldAmt) return true;
            if (m_bWorkAvgCollBal) return true;
            if (m_bWorkMtdAvgBal) return true;
            if (m_bImMemoOlAvailBal) return true;
            if (m_bWorkCashAvailAmt) return true;
            if (m_bWbcProcThruCent) return true;
            if (m_bWbcProcThruYr) return true;
            if (m_bWbcProcThruMo) return true;
            if (m_bWbcProcThruDa) return true;
            if (m_bCreditLimit) return true;
            if (m_bWmsStatus) return true;
            if (m_bWmsAcctType) return true;
            if (m_bWmsCityState) return true;
            if (m_bWmsNaZipCode) return true;
            if (m_bWmsTaxNumber) return true;
            if (m_bWmsHoldAllFundsFlag) return true;
            if (m_bWmsBankAvailAmt) return true;
            if (m_bWmsCustAvailAmt) return true;
            if (m_bWmsAmtLastDeposit) return true;
            if (m_bWmsDdaBal) return true;
            if (m_bWmsMinBal) return true;
            if (m_bWmsOpenedCent) return true;
            if (m_bWmsOpenedYr) return true;
            if (m_bWmsOpenedMo) return true;
            if (m_bWmsOpenedDa) return true;
            if (m_bWmsCentLastDep) return true;
            if (m_bWmsYrLastDep) return true;
            if (m_bWmsMoLastDep) return true;
            if (m_bWmsDaLastDep) return true;
            if (m_bWmsLastCustActCent) return true;
            if (m_bWmsLastCustActYr) return true;
            if (m_bWmsLastCustActMo) return true;
            if (m_bWmsLastCustActDa) return true;
            if (m_bWmsLastMaintCent) return true;
            if (m_bWmsLastMaintYr) return true;
            if (m_bWmsLastMaintMo) return true;
            if (m_bWmsLastMaintDa) return true;
            if (m_bWmsChgCardFlg) return true;
            if (m_bWmsSpecInstToday) return true;
            if (m_bWmsNsfToday) return true;
            if (m_bWmsOdToday) return true;
            if (m_bWmsKitingFlag) return true;
            if (m_bWmsKiteConsecDays) return true;
            if (m_bWmsMtdKitingSusp) return true;
            if (m_bWmsIodCycAccInt) return true;
            if (m_bWmsIodProjAccr) return true;
            if (m_bWmsScAmttrnsfrNo) return true;
            if (m_bWmsOdLimit) return true;
            if (m_bWmsScCheckItems) return true;
            if (m_bImMemoOlStopPays) return true;
            if (m_bWmsBalanceHistory) return true;
            if (m_bWmsBalHistRet) return true;
            if (m_bWmsBranch) return true;
            if (m_bWmsOfficer) return true;
            if (m_bWmsIodRatePtr) return true;
            if (m_bWmsIodCurAnn) return true;
            if (m_bWmsIodYtdIntPaid) return true;
            if (m_bWmsIodPrvYtdIntPd) return true;
            if (m_bWmsStmtPull) return true;
            if (m_bWmsStmtSupp) return true;
            if (m_bWmsStmtFld1) return true;
            if (m_bWmsStmtFld2) return true;
            if (m_bWmsStmtFld3) return true;
            if (m_bWmsStmtFld4) return true;
            if (m_bWmsIodAccrualType) return true;
            if (m_bWmsUnavailToday) return true;
            if (m_bWmsDaysNsfToDate) return true;
            if (m_bWmsDaysOdToDate) return true;
            if (m_bWmsCustomerNumber) return true;
            if (m_bWmsNmeAddrTlrs) return true;
            if (m_bWmsSocSecNa) return true;
            if (m_bWmsDcTrlr) return true;
            if (m_bWmsLoanTrlr) return true;
            if (m_bWmsMarketTrlr) return true;
            if (m_bWmsTrnsfrAfflTrlr) return true;
            if (m_bWmsOdNsfTrlr) return true;
            if (m_bWmsSavingsTrlr) return true;
            if (m_bWmsBankAvailTrlr) return true;
            if (m_bWmsCustAvailTrlr) return true;
            if (m_bWmsCombinedStat) return true;
            if (m_bWmsTargetAmtTrlr) return true;
            if (m_bWmsLimitTransfer) return true;
            if (m_bWmsDcdTaxDataTrlr) return true;
            if (m_bWmsOdAccrualTrlr) return true;
            if (m_bWmsInfoTrlr) return true;
            if (m_bWmsExtScDataTrlr) return true;
            if (m_bWmsExtrnlDepositTrlr) return true;
            if (m_bWmsKitingSuspTrlr) return true;
            if (m_bWmsEfaTrlr) return true;
            if (m_bWmsCashAvailTrlr) return true;
            if (m_bWmsInvestmentTrlr) return true;
            if (m_bWmsRateTrlr) return true;
            if (m_bWmsSavPtr) return true;
            if (m_bWmsExpansionInd) return true;
            if (m_bWmsInfoContinent) return true;
            if (m_bWmsInfoCntry) return true;
            if (m_bWmsIntCurBal) return true;
            if (m_bWmsPayoffAmt) return true;
            if (m_bWmsLastPmtCent) return true;
            if (m_bWmsLastPmtYr) return true;
            if (m_bWmsLastPmtMo) return true;
            if (m_bWmsLastPmtDa) return true;
            if (m_bWmsPymtDueAmt) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 7; lOccurs++)
                if (m_bWmsBankAvailTrAmt[lOccurs]) return true;
            for (lOccurs = 0; lOccurs < 12; lOccurs++)
                if (m_bWmsCustAvailFunds[lOccurs]) return true;
            for (lOccurs = 0; lOccurs < 12; lOccurs++)
                if (m_bWmsTimesNsfMo[lOccurs]) return true;
            for (lOccurs = 0; lOccurs < 12; lOccurs++)
                if (m_bWmsTimesOdMo[lOccurs]) return true;
            for (lOccurs = 0; lOccurs < 12; lOccurs++)
                if (m_bWmsTimesUnavailMo[lOccurs]) return true;
            if (m_bImMemoOlDrAmt) return true;
            if (m_bImMemoOlCrAmt) return true;
            if (m_bImMemoOlSvDrAmt) return true;
            if (m_bImMemoOlSvCrAmt) return true;
            if (m_bImMemoOlLnDrAmt) return true;
            if (m_bImMemoOlLnCrAmt) return true;
            if (m_bImMemoOlLnAvailBal) return true;
            if (m_bWmsSsnForeignAddress) return true;
            if (m_bWmsLoanStatus) return true;
            if (m_bWmsIntlCurrCode) return true;
            if (m_bWmsIntlCurrDec) return true;
            if (m_bWmsIntlCustLanguage) return true;
            if (m_bWmsIntlCustLangGroup) return true;
            if (m_bWmsTaxCode) return true;
            if (m_bWmsAnnualRate) return true;
            if (m_bWmsLoanPrevYtdInt) return true;
            if (m_bWmsLoanYtdInt) return true;
            if (m_bWmsSavCurAnn) return true;
            if (m_bWmsYtdIntPaid) return true;
            if (m_bImMemoOlOffEmp) return true;
            if (m_bWmsMtdAnalysis) return true;
            if (m_bWmsChkTruncFlag) return true;
            if (m_bWmsPrevYtdInt) return true;
            if (m_bWmsShortName) return true;
            if (m_bWmsLastStmtCc) return true;
            if (m_bWmsLastStmtYr) return true;
            if (m_bWmsLastStmtMo) return true;
            if (m_bWmsLastStmtDa) return true;
            if (m_bWmsNsfWaive) return true;
            if (m_bWmsOdWaive) return true;
            if (m_bWmsWaiveFee) return true;
            if (m_bWmsRegion) return true;
            if (m_bWbcOrigProcThruCent) return true;
            if (m_bWbcOrigProcThruYr) return true;
            if (m_bWbcOrigProcThruMo) return true;
            if (m_bWbcOrigProcThruDa) return true;
            if (m_bWmsScCharge) return true;
            if (m_bWmsScWaiveReason) return true;
            if (m_bWmsOdLimitAmt) return true;
            if (m_bWbcLastProcCc) return true;
            if (m_bWbcLastProcYr) return true;
            if (m_bWbcLastProcMo) return true;
            if (m_bWbcLastProcDa) return true;
            if (m_bWmsStmtClear) return true;
            if (m_bWmsFundingFlag) return true;
            if (m_bWmsHomeAreaCode) return true;
            if (m_bWmsHomePhoneNo) return true;
            if (m_bWmsHomeExtension) return true;
            if (m_bWmsBusAreaCode) return true;
            if (m_bWmsBusPhoneNo) return true;
            if (m_bWmsBusExtension) return true;
            if (m_bWmsTinCertification) return true;
            if (m_bCollBal) return true;
            if (m_bYtdAvgBal) return true;
            if (m_bWmsStmtSpeclHandl) return true;
            if (m_bDateClosedCc) return true;
            if (m_bDateClosedYr) return true;
            if (m_bDateClosedMo) return true;
            if (m_bDateClosedDa) return true;
            if (m_bNoNsf) return true;
            if (m_bNoOd) return true;
            if (m_bWmsBkupWthldFlag) return true;
            if (m_bWmsTaxExemptRsn) return true;
            if (m_bWmsApprovalCc) return true;
            if (m_bWmsApprovalYr) return true;
            if (m_bWmsApprovalMo) return true;
            if (m_bWmsApprovalDa) return true;
            if (m_bWmsCrRatingCc) return true;
            if (m_bWmsCrRatingYr) return true;
            if (m_bWmsCrRatingMo) return true;
            if (m_bWmsCrRatingDa) return true;
            if (m_bImMemoOlPrinBal) return true;
            if (m_bImMemoOlDdaBal) return true;
            if (m_bImMemoOlSvAvailBal) return true;
            if (m_bImMemoOlNewDelFlag) return true;
            if (m_bWmsPastDueAmt) return true;
            if (m_bWmsAutoPymt) return true;
            if (m_bWmsLastPymtAmt) return true;
            if (m_bWmsACt) return true;
            if (m_bWmsBCt) return true;
            if (m_bWmsCCt) return true;
            if (m_bWmsDCt) return true;
            if (m_bWmsECt) return true;
            if (m_bWmsFCt) return true;
            if (m_bWbcAbaNumber) return true;
            if (m_bWbcNextProcCent) return true;
            if (m_bWbcNextProcYr) return true;
            if (m_bWbcNextProcMo) return true;
            if (m_bWbcNextProcDa) return true;
            if (m_bWbcCaptCent) return true;
            if (m_bWbcCaptYr) return true;
            if (m_bWbcCaptMo) return true;
            if (m_bWbcCaptDa) return true;
            if (m_bWmsMmdaIndicator) return true;
            if (m_bWmsIntStatus) return true;
            if (m_bWmsIodDistCd) return true;
            if (m_bWmsNaCountry) return true;
            if (m_bWmsNraTaxProvince) return true;
            if (m_bWmsNraTaxCountry) return true;
            if (m_bWmsNraCertName1) return true;
            if (m_bWmsNraCertName2) return true;
            if (m_bWmsInfoAlienCode) return true;
            if (m_bWmsStmtBeginBal) return true;
            if (m_bWmsLoanMinPartPmt) return true;
            if (m_bWmsHoldNo) return true;
            if (m_bMemoOlDtLstMonCent) return true;
            if (m_bMemoOlDtLstMonYr) return true;
            if (m_bMemoOlDtLstMonMo) return true;
            if (m_bMemoOlDtLstMonDa) return true;
            if (m_bWmsIodXferIntPtr) return true;
            if (m_bUserCharField1) return true;
            if (m_bUserCharField2) return true;
            if (m_bUserCharField3) return true;
            if (m_bYesterdayFloatAmt) return true;
            if (m_bTodayFloatAmt) return true;
            if (m_bTotalBalance) return true;
            if (m_bWmsGovernmentId) return true;
            for (lOccurs = 0; lOccurs < 7; lOccurs++)
            {
                if(CWmsNaLine[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 7; lOccurs++)
            {
                if(CWmsBillDueDate[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 25; lOccurs++)
            {
                if(CWmsScMiscAmounts[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                if(CXferAffilTr[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDIMDTLO", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "WmsControl1", m_szWmsControl1, &m_bWmsControl1);
                AddXMLField(pSess, "WmsControl2", m_szWmsControl2, &m_bWmsControl2);
                AddXMLField(pSess, "WmsControl3", m_szWmsControl3, &m_bWmsControl3);
                AddXMLField(pSess, "WmsControl4", m_szWmsControl4, &m_bWmsControl4);
                AddXMLField(pSess, "WmsAcctNo", m_szWmsAcctNo, &m_bWmsAcctNo);
                AddXMLField(pSess, "WorkMoreBreakdown", m_szWorkMoreBreakdown, &m_bWorkMoreBreakdown);
                AddXMLField(pSess, "WorkReasonStatus", m_szWorkReasonStatus, &m_bWorkReasonStatus);
                AddXMLField(pSess, "WorkSysType", m_szWorkSysType, &m_bWorkSysType);
                AddXMLField(pSess, "WorkLoanBal", m_szWorkLoanBal, &m_bWorkLoanBal);
                AddXMLField(pSess, "WorkHoldAmt", m_szWorkHoldAmt, &m_bWorkHoldAmt);
                AddXMLField(pSess, "WorkAvgCollBal", m_szWorkAvgCollBal, &m_bWorkAvgCollBal);
                AddXMLField(pSess, "WorkMtdAvgBal", m_szWorkMtdAvgBal, &m_bWorkMtdAvgBal);
                AddXMLField(pSess, "ImMemoOlAvailBal", m_szImMemoOlAvailBal, &m_bImMemoOlAvailBal);
                AddXMLField(pSess, "WorkCashAvailAmt", m_szWorkCashAvailAmt, &m_bWorkCashAvailAmt);
                AddXMLField(pSess, "WbcProcThruCent", m_szWbcProcThruCent, &m_bWbcProcThruCent);
                AddXMLField(pSess, "WbcProcThruYr", m_szWbcProcThruYr, &m_bWbcProcThruYr);
                AddXMLField(pSess, "WbcProcThruMo", m_szWbcProcThruMo, &m_bWbcProcThruMo);
                AddXMLField(pSess, "WbcProcThruDa", m_szWbcProcThruDa, &m_bWbcProcThruDa);
                AddXMLField(pSess, "CreditLimit", m_szCreditLimit, &m_bCreditLimit);
                AddXMLField(pSess, "WmsStatus", m_szWmsStatus, &m_bWmsStatus);
                AddXMLField(pSess, "WmsAcctType", m_szWmsAcctType, &m_bWmsAcctType);
                AddXMLField(pSess, "WmsCityState", m_szWmsCityState, &m_bWmsCityState);
                AddXMLField(pSess, "WmsNaZipCode", m_szWmsNaZipCode, &m_bWmsNaZipCode);
                AddXMLField(pSess, "WmsTaxNumber", m_szWmsTaxNumber, &m_bWmsTaxNumber);
                AddXMLField(pSess, "WmsHoldAllFundsFlag", m_szWmsHoldAllFundsFlag, &m_bWmsHoldAllFundsFlag);
                AddXMLField(pSess, "WmsBankAvailAmt", m_szWmsBankAvailAmt, &m_bWmsBankAvailAmt);
                AddXMLField(pSess, "WmsCustAvailAmt", m_szWmsCustAvailAmt, &m_bWmsCustAvailAmt);
                AddXMLField(pSess, "WmsAmtLastDeposit", m_szWmsAmtLastDeposit, &m_bWmsAmtLastDeposit);
                AddXMLField(pSess, "WmsDdaBal", m_szWmsDdaBal, &m_bWmsDdaBal);
                AddXMLField(pSess, "WmsMinBal", m_szWmsMinBal, &m_bWmsMinBal);
                AddXMLField(pSess, "WmsOpenedCent", m_szWmsOpenedCent, &m_bWmsOpenedCent);
                AddXMLField(pSess, "WmsOpenedYr", m_szWmsOpenedYr, &m_bWmsOpenedYr);
                AddXMLField(pSess, "WmsOpenedMo", m_szWmsOpenedMo, &m_bWmsOpenedMo);
                AddXMLField(pSess, "WmsOpenedDa", m_szWmsOpenedDa, &m_bWmsOpenedDa);
                AddXMLField(pSess, "WmsCentLastDep", m_szWmsCentLastDep, &m_bWmsCentLastDep);
                AddXMLField(pSess, "WmsYrLastDep", m_szWmsYrLastDep, &m_bWmsYrLastDep);
                AddXMLField(pSess, "WmsMoLastDep", m_szWmsMoLastDep, &m_bWmsMoLastDep);
                AddXMLField(pSess, "WmsDaLastDep", m_szWmsDaLastDep, &m_bWmsDaLastDep);
                AddXMLField(pSess, "WmsLastCustActCent", m_szWmsLastCustActCent, &m_bWmsLastCustActCent);
                AddXMLField(pSess, "WmsLastCustActYr", m_szWmsLastCustActYr, &m_bWmsLastCustActYr);
                AddXMLField(pSess, "WmsLastCustActMo", m_szWmsLastCustActMo, &m_bWmsLastCustActMo);
                AddXMLField(pSess, "WmsLastCustActDa", m_szWmsLastCustActDa, &m_bWmsLastCustActDa);
                AddXMLField(pSess, "WmsLastMaintCent", m_szWmsLastMaintCent, &m_bWmsLastMaintCent);
                AddXMLField(pSess, "WmsLastMaintYr", m_szWmsLastMaintYr, &m_bWmsLastMaintYr);
                AddXMLField(pSess, "WmsLastMaintMo", m_szWmsLastMaintMo, &m_bWmsLastMaintMo);
                AddXMLField(pSess, "WmsLastMaintDa", m_szWmsLastMaintDa, &m_bWmsLastMaintDa);
                AddXMLField(pSess, "WmsChgCardFlg", m_szWmsChgCardFlg, &m_bWmsChgCardFlg);
                AddXMLField(pSess, "WmsSpecInstToday", m_szWmsSpecInstToday, &m_bWmsSpecInstToday);
                AddXMLField(pSess, "WmsNsfToday", m_szWmsNsfToday, &m_bWmsNsfToday);
                AddXMLField(pSess, "WmsOdToday", m_szWmsOdToday, &m_bWmsOdToday);
                AddXMLField(pSess, "WmsKitingFlag", m_szWmsKitingFlag, &m_bWmsKitingFlag);
                AddXMLField(pSess, "WmsKiteConsecDays", m_szWmsKiteConsecDays, &m_bWmsKiteConsecDays);
                AddXMLField(pSess, "WmsMtdKitingSusp", m_szWmsMtdKitingSusp, &m_bWmsMtdKitingSusp);
                AddXMLField(pSess, "WmsIodCycAccInt", m_szWmsIodCycAccInt, &m_bWmsIodCycAccInt);
                AddXMLField(pSess, "WmsIodProjAccr", m_szWmsIodProjAccr, &m_bWmsIodProjAccr);
                AddXMLField(pSess, "WmsScAmttrnsfrNo", m_szWmsScAmttrnsfrNo, &m_bWmsScAmttrnsfrNo);
                AddXMLField(pSess, "WmsOdLimit", m_szWmsOdLimit, &m_bWmsOdLimit);
                AddXMLField(pSess, "WmsScCheckItems", m_szWmsScCheckItems, &m_bWmsScCheckItems);
                AddXMLField(pSess, "ImMemoOlStopPays", m_szImMemoOlStopPays, &m_bImMemoOlStopPays);
                AddXMLField(pSess, "WmsBalanceHistory", m_szWmsBalanceHistory, &m_bWmsBalanceHistory);
                AddXMLField(pSess, "WmsBalHistRet", m_szWmsBalHistRet, &m_bWmsBalHistRet);
                AddXMLField(pSess, "WmsBranch", m_szWmsBranch, &m_bWmsBranch);
                AddXMLField(pSess, "WmsOfficer", m_szWmsOfficer, &m_bWmsOfficer);
                AddXMLField(pSess, "WmsIodRatePtr", m_szWmsIodRatePtr, &m_bWmsIodRatePtr);
                AddXMLField(pSess, "WmsIodCurAnn", m_szWmsIodCurAnn, &m_bWmsIodCurAnn);
                AddXMLField(pSess, "WmsIodYtdIntPaid", m_szWmsIodYtdIntPaid, &m_bWmsIodYtdIntPaid);
                AddXMLField(pSess, "WmsIodPrvYtdIntPd", m_szWmsIodPrvYtdIntPd, &m_bWmsIodPrvYtdIntPd);
                AddXMLField(pSess, "WmsStmtPull", m_szWmsStmtPull, &m_bWmsStmtPull);
                AddXMLField(pSess, "WmsStmtSupp", m_szWmsStmtSupp, &m_bWmsStmtSupp);
                AddXMLField(pSess, "WmsStmtFld1", m_szWmsStmtFld1, &m_bWmsStmtFld1);
                AddXMLField(pSess, "WmsStmtFld2", m_szWmsStmtFld2, &m_bWmsStmtFld2);
                AddXMLField(pSess, "WmsStmtFld3", m_szWmsStmtFld3, &m_bWmsStmtFld3);
                AddXMLField(pSess, "WmsStmtFld4", m_szWmsStmtFld4, &m_bWmsStmtFld4);
                AddXMLField(pSess, "WmsIodAccrualType", m_szWmsIodAccrualType, &m_bWmsIodAccrualType);
                AddXMLField(pSess, "WmsUnavailToday", m_szWmsUnavailToday, &m_bWmsUnavailToday);
                AddXMLField(pSess, "WmsDaysNsfToDate", m_szWmsDaysNsfToDate, &m_bWmsDaysNsfToDate);
                AddXMLField(pSess, "WmsDaysOdToDate", m_szWmsDaysOdToDate, &m_bWmsDaysOdToDate);
                AddXMLField(pSess, "WmsCustomerNumber", m_szWmsCustomerNumber, &m_bWmsCustomerNumber);
                AddXMLField(pSess, "WmsNmeAddrTlrs", m_szWmsNmeAddrTlrs, &m_bWmsNmeAddrTlrs);
                AddXMLField(pSess, "WmsSocSecNa", m_szWmsSocSecNa, &m_bWmsSocSecNa);
                AddXMLField(pSess, "WmsDcTrlr", m_szWmsDcTrlr, &m_bWmsDcTrlr);
                AddXMLField(pSess, "WmsLoanTrlr", m_szWmsLoanTrlr, &m_bWmsLoanTrlr);
                AddXMLField(pSess, "WmsMarketTrlr", m_szWmsMarketTrlr, &m_bWmsMarketTrlr);
                AddXMLField(pSess, "WmsTrnsfrAfflTrlr", m_szWmsTrnsfrAfflTrlr, &m_bWmsTrnsfrAfflTrlr);
                AddXMLField(pSess, "WmsOdNsfTrlr", m_szWmsOdNsfTrlr, &m_bWmsOdNsfTrlr);
                AddXMLField(pSess, "WmsSavingsTrlr", m_szWmsSavingsTrlr, &m_bWmsSavingsTrlr);
                AddXMLField(pSess, "WmsBankAvailTrlr", m_szWmsBankAvailTrlr, &m_bWmsBankAvailTrlr);
                AddXMLField(pSess, "WmsCustAvailTrlr", m_szWmsCustAvailTrlr, &m_bWmsCustAvailTrlr);
                AddXMLField(pSess, "WmsCombinedStat", m_szWmsCombinedStat, &m_bWmsCombinedStat);
                AddXMLField(pSess, "WmsTargetAmtTrlr", m_szWmsTargetAmtTrlr, &m_bWmsTargetAmtTrlr);
                AddXMLField(pSess, "WmsLimitTransfer", m_szWmsLimitTransfer, &m_bWmsLimitTransfer);
                AddXMLField(pSess, "WmsDcdTaxDataTrlr", m_szWmsDcdTaxDataTrlr, &m_bWmsDcdTaxDataTrlr);
                AddXMLField(pSess, "WmsOdAccrualTrlr", m_szWmsOdAccrualTrlr, &m_bWmsOdAccrualTrlr);
                AddXMLField(pSess, "WmsInfoTrlr", m_szWmsInfoTrlr, &m_bWmsInfoTrlr);
                AddXMLField(pSess, "WmsExtScDataTrlr", m_szWmsExtScDataTrlr, &m_bWmsExtScDataTrlr);
                AddXMLField(pSess, "WmsExtrnlDepositTrlr", m_szWmsExtrnlDepositTrlr, &m_bWmsExtrnlDepositTrlr);
                AddXMLField(pSess, "WmsKitingSuspTrlr", m_szWmsKitingSuspTrlr, &m_bWmsKitingSuspTrlr);
                AddXMLField(pSess, "WmsEfaTrlr", m_szWmsEfaTrlr, &m_bWmsEfaTrlr);
                AddXMLField(pSess, "WmsCashAvailTrlr", m_szWmsCashAvailTrlr, &m_bWmsCashAvailTrlr);
                AddXMLField(pSess, "WmsInvestmentTrlr", m_szWmsInvestmentTrlr, &m_bWmsInvestmentTrlr);
                AddXMLField(pSess, "WmsRateTrlr", m_szWmsRateTrlr, &m_bWmsRateTrlr);
                AddXMLField(pSess, "WmsSavPtr", m_szWmsSavPtr, &m_bWmsSavPtr);
                AddXMLField(pSess, "WmsExpansionInd", m_szWmsExpansionInd, &m_bWmsExpansionInd);
                AddXMLField(pSess, "WmsInfoContinent", m_szWmsInfoContinent, &m_bWmsInfoContinent);
                AddXMLField(pSess, "WmsInfoCntry", m_szWmsInfoCntry, &m_bWmsInfoCntry);
                AddXMLField(pSess, "WmsIntCurBal", m_szWmsIntCurBal, &m_bWmsIntCurBal);
                AddXMLField(pSess, "WmsPayoffAmt", m_szWmsPayoffAmt, &m_bWmsPayoffAmt);
                AddXMLField(pSess, "WmsLastPmtCent", m_szWmsLastPmtCent, &m_bWmsLastPmtCent);
                AddXMLField(pSess, "WmsLastPmtYr", m_szWmsLastPmtYr, &m_bWmsLastPmtYr);
                AddXMLField(pSess, "WmsLastPmtMo", m_szWmsLastPmtMo, &m_bWmsLastPmtMo);
                AddXMLField(pSess, "WmsLastPmtDa", m_szWmsLastPmtDa, &m_bWmsLastPmtDa);
                AddXMLField(pSess, "WmsPymtDueAmt", m_szWmsPymtDueAmt, &m_bWmsPymtDueAmt);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 7; lOccurs++)
                    AddXMLField(pSess, "WmsBankAvailTrAmt", m_szWmsBankAvailTrAmt[lOccurs], &m_bWmsBankAvailTrAmt[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 12; lOccurs++)
                    AddXMLField(pSess, "WmsCustAvailFunds", m_szWmsCustAvailFunds[lOccurs], &m_bWmsCustAvailFunds[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 12; lOccurs++)
                    AddXMLField(pSess, "WmsTimesNsfMo", m_szWmsTimesNsfMo[lOccurs], &m_bWmsTimesNsfMo[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 12; lOccurs++)
                    AddXMLField(pSess, "WmsTimesOdMo", m_szWmsTimesOdMo[lOccurs], &m_bWmsTimesOdMo[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 12; lOccurs++)
                    AddXMLField(pSess, "WmsTimesUnavailMo", m_szWmsTimesUnavailMo[lOccurs], &m_bWmsTimesUnavailMo[lOccurs], lOccurs);
                AddXMLField(pSess, "ImMemoOlDrAmt", m_szImMemoOlDrAmt, &m_bImMemoOlDrAmt);
                AddXMLField(pSess, "ImMemoOlCrAmt", m_szImMemoOlCrAmt, &m_bImMemoOlCrAmt);
                AddXMLField(pSess, "ImMemoOlSvDrAmt", m_szImMemoOlSvDrAmt, &m_bImMemoOlSvDrAmt);
                AddXMLField(pSess, "ImMemoOlSvCrAmt", m_szImMemoOlSvCrAmt, &m_bImMemoOlSvCrAmt);
                AddXMLField(pSess, "ImMemoOlLnDrAmt", m_szImMemoOlLnDrAmt, &m_bImMemoOlLnDrAmt);
                AddXMLField(pSess, "ImMemoOlLnCrAmt", m_szImMemoOlLnCrAmt, &m_bImMemoOlLnCrAmt);
                AddXMLField(pSess, "ImMemoOlLnAvailBal", m_szImMemoOlLnAvailBal, &m_bImMemoOlLnAvailBal);
                AddXMLField(pSess, "WmsSsnForeignAddress", m_szWmsSsnForeignAddress, &m_bWmsSsnForeignAddress);
                AddXMLField(pSess, "WmsLoanStatus", m_szWmsLoanStatus, &m_bWmsLoanStatus);
                AddXMLField(pSess, "WmsIntlCurrCode", m_szWmsIntlCurrCode, &m_bWmsIntlCurrCode);
                AddXMLField(pSess, "WmsIntlCurrDec", m_szWmsIntlCurrDec, &m_bWmsIntlCurrDec);
                AddXMLField(pSess, "WmsIntlCustLanguage", m_szWmsIntlCustLanguage, &m_bWmsIntlCustLanguage);
                AddXMLField(pSess, "WmsIntlCustLangGroup", m_szWmsIntlCustLangGroup, &m_bWmsIntlCustLangGroup);
                AddXMLField(pSess, "WmsTaxCode", m_szWmsTaxCode, &m_bWmsTaxCode);
                AddXMLField(pSess, "WmsAnnualRate", m_szWmsAnnualRate, &m_bWmsAnnualRate);
                AddXMLField(pSess, "WmsLoanPrevYtdInt", m_szWmsLoanPrevYtdInt, &m_bWmsLoanPrevYtdInt);
                AddXMLField(pSess, "WmsLoanYtdInt", m_szWmsLoanYtdInt, &m_bWmsLoanYtdInt);
                AddXMLField(pSess, "WmsSavCurAnn", m_szWmsSavCurAnn, &m_bWmsSavCurAnn);
                AddXMLField(pSess, "WmsYtdIntPaid", m_szWmsYtdIntPaid, &m_bWmsYtdIntPaid);
                AddXMLField(pSess, "ImMemoOlOffEmp", m_szImMemoOlOffEmp, &m_bImMemoOlOffEmp);
                AddXMLField(pSess, "WmsMtdAnalysis", m_szWmsMtdAnalysis, &m_bWmsMtdAnalysis);
                AddXMLField(pSess, "WmsChkTruncFlag", m_szWmsChkTruncFlag, &m_bWmsChkTruncFlag);
                AddXMLField(pSess, "WmsPrevYtdInt", m_szWmsPrevYtdInt, &m_bWmsPrevYtdInt);
                AddXMLField(pSess, "WmsShortName", m_szWmsShortName, &m_bWmsShortName);
                AddXMLField(pSess, "WmsLastStmtCc", m_szWmsLastStmtCc, &m_bWmsLastStmtCc);
                AddXMLField(pSess, "WmsLastStmtYr", m_szWmsLastStmtYr, &m_bWmsLastStmtYr);
                AddXMLField(pSess, "WmsLastStmtMo", m_szWmsLastStmtMo, &m_bWmsLastStmtMo);
                AddXMLField(pSess, "WmsLastStmtDa", m_szWmsLastStmtDa, &m_bWmsLastStmtDa);
                AddXMLField(pSess, "WmsNsfWaive", m_szWmsNsfWaive, &m_bWmsNsfWaive);
                AddXMLField(pSess, "WmsOdWaive", m_szWmsOdWaive, &m_bWmsOdWaive);
                AddXMLField(pSess, "WmsWaiveFee", m_szWmsWaiveFee, &m_bWmsWaiveFee);
                AddXMLField(pSess, "WmsRegion", m_szWmsRegion, &m_bWmsRegion);
                AddXMLField(pSess, "WbcOrigProcThruCent", m_szWbcOrigProcThruCent, &m_bWbcOrigProcThruCent);
                AddXMLField(pSess, "WbcOrigProcThruYr", m_szWbcOrigProcThruYr, &m_bWbcOrigProcThruYr);
                AddXMLField(pSess, "WbcOrigProcThruMo", m_szWbcOrigProcThruMo, &m_bWbcOrigProcThruMo);
                AddXMLField(pSess, "WbcOrigProcThruDa", m_szWbcOrigProcThruDa, &m_bWbcOrigProcThruDa);
                AddXMLField(pSess, "WmsScCharge", m_szWmsScCharge, &m_bWmsScCharge);
                AddXMLField(pSess, "WmsScWaiveReason", m_szWmsScWaiveReason, &m_bWmsScWaiveReason);
                AddXMLField(pSess, "WmsOdLimitAmt", m_szWmsOdLimitAmt, &m_bWmsOdLimitAmt);
                AddXMLField(pSess, "WbcLastProcCc", m_szWbcLastProcCc, &m_bWbcLastProcCc);
                AddXMLField(pSess, "WbcLastProcYr", m_szWbcLastProcYr, &m_bWbcLastProcYr);
                AddXMLField(pSess, "WbcLastProcMo", m_szWbcLastProcMo, &m_bWbcLastProcMo);
                AddXMLField(pSess, "WbcLastProcDa", m_szWbcLastProcDa, &m_bWbcLastProcDa);
                AddXMLField(pSess, "WmsStmtClear", m_szWmsStmtClear, &m_bWmsStmtClear);
                AddXMLField(pSess, "WmsFundingFlag", m_szWmsFundingFlag, &m_bWmsFundingFlag);
                AddXMLField(pSess, "WmsHomeAreaCode", m_szWmsHomeAreaCode, &m_bWmsHomeAreaCode);
                AddXMLField(pSess, "WmsHomePhoneNo", m_szWmsHomePhoneNo, &m_bWmsHomePhoneNo);
                AddXMLField(pSess, "WmsHomeExtension", m_szWmsHomeExtension, &m_bWmsHomeExtension);
                AddXMLField(pSess, "WmsBusAreaCode", m_szWmsBusAreaCode, &m_bWmsBusAreaCode);
                AddXMLField(pSess, "WmsBusPhoneNo", m_szWmsBusPhoneNo, &m_bWmsBusPhoneNo);
                AddXMLField(pSess, "WmsBusExtension", m_szWmsBusExtension, &m_bWmsBusExtension);
                AddXMLField(pSess, "WmsTinCertification", m_szWmsTinCertification, &m_bWmsTinCertification);
                AddXMLField(pSess, "CollBal", m_szCollBal, &m_bCollBal);
                AddXMLField(pSess, "YtdAvgBal", m_szYtdAvgBal, &m_bYtdAvgBal);
                AddXMLField(pSess, "WmsStmtSpeclHandl", m_szWmsStmtSpeclHandl, &m_bWmsStmtSpeclHandl);
                AddXMLField(pSess, "DateClosedCc", m_szDateClosedCc, &m_bDateClosedCc);
                AddXMLField(pSess, "DateClosedYr", m_szDateClosedYr, &m_bDateClosedYr);
                AddXMLField(pSess, "DateClosedMo", m_szDateClosedMo, &m_bDateClosedMo);
                AddXMLField(pSess, "DateClosedDa", m_szDateClosedDa, &m_bDateClosedDa);
                AddXMLField(pSess, "NoNsf", m_szNoNsf, &m_bNoNsf);
                AddXMLField(pSess, "NoOd", m_szNoOd, &m_bNoOd);
                AddXMLField(pSess, "WmsBkupWthldFlag", m_szWmsBkupWthldFlag, &m_bWmsBkupWthldFlag);
                AddXMLField(pSess, "WmsTaxExemptRsn", m_szWmsTaxExemptRsn, &m_bWmsTaxExemptRsn);
                AddXMLField(pSess, "WmsApprovalCc", m_szWmsApprovalCc, &m_bWmsApprovalCc);
                AddXMLField(pSess, "WmsApprovalYr", m_szWmsApprovalYr, &m_bWmsApprovalYr);
                AddXMLField(pSess, "WmsApprovalMo", m_szWmsApprovalMo, &m_bWmsApprovalMo);
                AddXMLField(pSess, "WmsApprovalDa", m_szWmsApprovalDa, &m_bWmsApprovalDa);
                AddXMLField(pSess, "WmsCrRatingCc", m_szWmsCrRatingCc, &m_bWmsCrRatingCc);
                AddXMLField(pSess, "WmsCrRatingYr", m_szWmsCrRatingYr, &m_bWmsCrRatingYr);
                AddXMLField(pSess, "WmsCrRatingMo", m_szWmsCrRatingMo, &m_bWmsCrRatingMo);
                AddXMLField(pSess, "WmsCrRatingDa", m_szWmsCrRatingDa, &m_bWmsCrRatingDa);
                AddXMLField(pSess, "ImMemoOlPrinBal", m_szImMemoOlPrinBal, &m_bImMemoOlPrinBal);
                AddXMLField(pSess, "ImMemoOlDdaBal", m_szImMemoOlDdaBal, &m_bImMemoOlDdaBal);
                AddXMLField(pSess, "ImMemoOlSvAvailBal", m_szImMemoOlSvAvailBal, &m_bImMemoOlSvAvailBal);
                AddXMLField(pSess, "ImMemoOlNewDelFlag", m_szImMemoOlNewDelFlag, &m_bImMemoOlNewDelFlag);
                AddXMLField(pSess, "WmsPastDueAmt", m_szWmsPastDueAmt, &m_bWmsPastDueAmt);
                AddXMLField(pSess, "WmsAutoPymt", m_szWmsAutoPymt, &m_bWmsAutoPymt);
                AddXMLField(pSess, "WmsLastPymtAmt", m_szWmsLastPymtAmt, &m_bWmsLastPymtAmt);
                AddXMLField(pSess, "WmsACt", m_szWmsACt, &m_bWmsACt);
                AddXMLField(pSess, "WmsBCt", m_szWmsBCt, &m_bWmsBCt);
                AddXMLField(pSess, "WmsCCt", m_szWmsCCt, &m_bWmsCCt);
                AddXMLField(pSess, "WmsDCt", m_szWmsDCt, &m_bWmsDCt);
                AddXMLField(pSess, "WmsECt", m_szWmsECt, &m_bWmsECt);
                AddXMLField(pSess, "WmsFCt", m_szWmsFCt, &m_bWmsFCt);
                AddXMLField(pSess, "WbcAbaNumber", m_szWbcAbaNumber, &m_bWbcAbaNumber);
                AddXMLField(pSess, "WbcNextProcCent", m_szWbcNextProcCent, &m_bWbcNextProcCent);
                AddXMLField(pSess, "WbcNextProcYr", m_szWbcNextProcYr, &m_bWbcNextProcYr);
                AddXMLField(pSess, "WbcNextProcMo", m_szWbcNextProcMo, &m_bWbcNextProcMo);
                AddXMLField(pSess, "WbcNextProcDa", m_szWbcNextProcDa, &m_bWbcNextProcDa);
                AddXMLField(pSess, "WbcCaptCent", m_szWbcCaptCent, &m_bWbcCaptCent);
                AddXMLField(pSess, "WbcCaptYr", m_szWbcCaptYr, &m_bWbcCaptYr);
                AddXMLField(pSess, "WbcCaptMo", m_szWbcCaptMo, &m_bWbcCaptMo);
                AddXMLField(pSess, "WbcCaptDa", m_szWbcCaptDa, &m_bWbcCaptDa);
                AddXMLField(pSess, "WmsMmdaIndicator", m_szWmsMmdaIndicator, &m_bWmsMmdaIndicator);
                AddXMLField(pSess, "WmsIntStatus", m_szWmsIntStatus, &m_bWmsIntStatus);
                AddXMLField(pSess, "WmsIodDistCd", m_szWmsIodDistCd, &m_bWmsIodDistCd);
                AddXMLField(pSess, "WmsNaCountry", m_szWmsNaCountry, &m_bWmsNaCountry);
                AddXMLField(pSess, "WmsNraTaxProvince", m_szWmsNraTaxProvince, &m_bWmsNraTaxProvince);
                AddXMLField(pSess, "WmsNraTaxCountry", m_szWmsNraTaxCountry, &m_bWmsNraTaxCountry);
                AddXMLField(pSess, "WmsNraCertName1", m_szWmsNraCertName1, &m_bWmsNraCertName1);
                AddXMLField(pSess, "WmsNraCertName2", m_szWmsNraCertName2, &m_bWmsNraCertName2);
                AddXMLField(pSess, "WmsInfoAlienCode", m_szWmsInfoAlienCode, &m_bWmsInfoAlienCode);
                AddXMLField(pSess, "WmsStmtBeginBal", m_szWmsStmtBeginBal, &m_bWmsStmtBeginBal);
                AddXMLField(pSess, "WmsLoanMinPartPmt", m_szWmsLoanMinPartPmt, &m_bWmsLoanMinPartPmt);
                AddXMLField(pSess, "WmsHoldNo", m_szWmsHoldNo, &m_bWmsHoldNo);
                AddXMLField(pSess, "MemoOlDtLstMonCent", m_szMemoOlDtLstMonCent, &m_bMemoOlDtLstMonCent);
                AddXMLField(pSess, "MemoOlDtLstMonYr", m_szMemoOlDtLstMonYr, &m_bMemoOlDtLstMonYr);
                AddXMLField(pSess, "MemoOlDtLstMonMo", m_szMemoOlDtLstMonMo, &m_bMemoOlDtLstMonMo);
                AddXMLField(pSess, "MemoOlDtLstMonDa", m_szMemoOlDtLstMonDa, &m_bMemoOlDtLstMonDa);
                AddXMLField(pSess, "WmsIodXferIntPtr", m_szWmsIodXferIntPtr, &m_bWmsIodXferIntPtr);
                AddXMLField(pSess, "UserCharField1", m_szUserCharField1, &m_bUserCharField1);
                AddXMLField(pSess, "UserCharField2", m_szUserCharField2, &m_bUserCharField2);
                AddXMLField(pSess, "UserCharField3", m_szUserCharField3, &m_bUserCharField3);
                AddXMLField(pSess, "YesterdayFloatAmt", m_szYesterdayFloatAmt, &m_bYesterdayFloatAmt);
                AddXMLField(pSess, "TodayFloatAmt", m_szTodayFloatAmt, &m_bTodayFloatAmt);
                AddXMLField(pSess, "TotalBalance", m_szTotalBalance, &m_bTotalBalance);
                AddXMLField(pSess, "WmsGovernmentId", m_szWmsGovernmentId, &m_bWmsGovernmentId);
                for (lOccurs = 0; lOccurs < 7; lOccurs++)
                {
                    CWmsNaLine[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 7; lOccurs++)
                {
                    CWmsBillDueDate[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 25; lOccurs++)
                {
                    CWmsScMiscAmounts[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 9; lOccurs++)
                {
                    CXferAffilTr[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDIMDTLO");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDIMDTLO", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "WmsControl1", m_szWmsControl1);
                GetXMLField(pSess, "WmsControl2", m_szWmsControl2);
                GetXMLField(pSess, "WmsControl3", m_szWmsControl3);
                GetXMLField(pSess, "WmsControl4", m_szWmsControl4);
                GetXMLField(pSess, "WmsAcctNo", m_szWmsAcctNo);
                GetXMLField(pSess, "WorkMoreBreakdown", m_szWorkMoreBreakdown);
                GetXMLField(pSess, "WorkReasonStatus", m_szWorkReasonStatus);
                GetXMLField(pSess, "WorkSysType", m_szWorkSysType);
                GetXMLField(pSess, "WorkLoanBal", m_szWorkLoanBal);
                GetXMLField(pSess, "WorkHoldAmt", m_szWorkHoldAmt);
                GetXMLField(pSess, "WorkAvgCollBal", m_szWorkAvgCollBal);
                GetXMLField(pSess, "WorkMtdAvgBal", m_szWorkMtdAvgBal);
                GetXMLField(pSess, "ImMemoOlAvailBal", m_szImMemoOlAvailBal);
                GetXMLField(pSess, "WorkCashAvailAmt", m_szWorkCashAvailAmt);
                GetXMLField(pSess, "WbcProcThruCent", m_szWbcProcThruCent);
                GetXMLField(pSess, "WbcProcThruYr", m_szWbcProcThruYr);
                GetXMLField(pSess, "WbcProcThruMo", m_szWbcProcThruMo);
                GetXMLField(pSess, "WbcProcThruDa", m_szWbcProcThruDa);
                GetXMLField(pSess, "CreditLimit", m_szCreditLimit);
                GetXMLField(pSess, "WmsStatus", m_szWmsStatus);
                GetXMLField(pSess, "WmsAcctType", m_szWmsAcctType);
                GetXMLField(pSess, "WmsCityState", m_szWmsCityState);
                GetXMLField(pSess, "WmsNaZipCode", m_szWmsNaZipCode);
                GetXMLField(pSess, "WmsTaxNumber", m_szWmsTaxNumber);
                GetXMLField(pSess, "WmsHoldAllFundsFlag", m_szWmsHoldAllFundsFlag);
                GetXMLField(pSess, "WmsBankAvailAmt", m_szWmsBankAvailAmt);
                GetXMLField(pSess, "WmsCustAvailAmt", m_szWmsCustAvailAmt);
                GetXMLField(pSess, "WmsAmtLastDeposit", m_szWmsAmtLastDeposit);
                GetXMLField(pSess, "WmsDdaBal", m_szWmsDdaBal);
                GetXMLField(pSess, "WmsMinBal", m_szWmsMinBal);
                GetXMLField(pSess, "WmsOpenedCent", m_szWmsOpenedCent);
                GetXMLField(pSess, "WmsOpenedYr", m_szWmsOpenedYr);
                GetXMLField(pSess, "WmsOpenedMo", m_szWmsOpenedMo);
                GetXMLField(pSess, "WmsOpenedDa", m_szWmsOpenedDa);
                GetXMLField(pSess, "WmsCentLastDep", m_szWmsCentLastDep);
                GetXMLField(pSess, "WmsYrLastDep", m_szWmsYrLastDep);
                GetXMLField(pSess, "WmsMoLastDep", m_szWmsMoLastDep);
                GetXMLField(pSess, "WmsDaLastDep", m_szWmsDaLastDep);
                GetXMLField(pSess, "WmsLastCustActCent", m_szWmsLastCustActCent);
                GetXMLField(pSess, "WmsLastCustActYr", m_szWmsLastCustActYr);
                GetXMLField(pSess, "WmsLastCustActMo", m_szWmsLastCustActMo);
                GetXMLField(pSess, "WmsLastCustActDa", m_szWmsLastCustActDa);
                GetXMLField(pSess, "WmsLastMaintCent", m_szWmsLastMaintCent);
                GetXMLField(pSess, "WmsLastMaintYr", m_szWmsLastMaintYr);
                GetXMLField(pSess, "WmsLastMaintMo", m_szWmsLastMaintMo);
                GetXMLField(pSess, "WmsLastMaintDa", m_szWmsLastMaintDa);
                GetXMLField(pSess, "WmsChgCardFlg", m_szWmsChgCardFlg);
                GetXMLField(pSess, "WmsSpecInstToday", m_szWmsSpecInstToday);
                GetXMLField(pSess, "WmsNsfToday", m_szWmsNsfToday);
                GetXMLField(pSess, "WmsOdToday", m_szWmsOdToday);
                GetXMLField(pSess, "WmsKitingFlag", m_szWmsKitingFlag);
                GetXMLField(pSess, "WmsKiteConsecDays", m_szWmsKiteConsecDays);
                GetXMLField(pSess, "WmsMtdKitingSusp", m_szWmsMtdKitingSusp);
                GetXMLField(pSess, "WmsIodCycAccInt", m_szWmsIodCycAccInt);
                GetXMLField(pSess, "WmsIodProjAccr", m_szWmsIodProjAccr);
                GetXMLField(pSess, "WmsScAmttrnsfrNo", m_szWmsScAmttrnsfrNo);
                GetXMLField(pSess, "WmsOdLimit", m_szWmsOdLimit);
                GetXMLField(pSess, "WmsScCheckItems", m_szWmsScCheckItems);
                GetXMLField(pSess, "ImMemoOlStopPays", m_szImMemoOlStopPays);
                GetXMLField(pSess, "WmsBalanceHistory", m_szWmsBalanceHistory);
                GetXMLField(pSess, "WmsBalHistRet", m_szWmsBalHistRet);
                GetXMLField(pSess, "WmsBranch", m_szWmsBranch);
                GetXMLField(pSess, "WmsOfficer", m_szWmsOfficer);
                GetXMLField(pSess, "WmsIodRatePtr", m_szWmsIodRatePtr);
                GetXMLField(pSess, "WmsIodCurAnn", m_szWmsIodCurAnn);
                GetXMLField(pSess, "WmsIodYtdIntPaid", m_szWmsIodYtdIntPaid);
                GetXMLField(pSess, "WmsIodPrvYtdIntPd", m_szWmsIodPrvYtdIntPd);
                GetXMLField(pSess, "WmsStmtPull", m_szWmsStmtPull);
                GetXMLField(pSess, "WmsStmtSupp", m_szWmsStmtSupp);
                GetXMLField(pSess, "WmsStmtFld1", m_szWmsStmtFld1);
                GetXMLField(pSess, "WmsStmtFld2", m_szWmsStmtFld2);
                GetXMLField(pSess, "WmsStmtFld3", m_szWmsStmtFld3);
                GetXMLField(pSess, "WmsStmtFld4", m_szWmsStmtFld4);
                GetXMLField(pSess, "WmsIodAccrualType", m_szWmsIodAccrualType);
                GetXMLField(pSess, "WmsUnavailToday", m_szWmsUnavailToday);
                GetXMLField(pSess, "WmsDaysNsfToDate", m_szWmsDaysNsfToDate);
                GetXMLField(pSess, "WmsDaysOdToDate", m_szWmsDaysOdToDate);
                GetXMLField(pSess, "WmsCustomerNumber", m_szWmsCustomerNumber);
                GetXMLField(pSess, "WmsNmeAddrTlrs", m_szWmsNmeAddrTlrs);
                GetXMLField(pSess, "WmsSocSecNa", m_szWmsSocSecNa);
                GetXMLField(pSess, "WmsDcTrlr", m_szWmsDcTrlr);
                GetXMLField(pSess, "WmsLoanTrlr", m_szWmsLoanTrlr);
                GetXMLField(pSess, "WmsMarketTrlr", m_szWmsMarketTrlr);
                GetXMLField(pSess, "WmsTrnsfrAfflTrlr", m_szWmsTrnsfrAfflTrlr);
                GetXMLField(pSess, "WmsOdNsfTrlr", m_szWmsOdNsfTrlr);
                GetXMLField(pSess, "WmsSavingsTrlr", m_szWmsSavingsTrlr);
                GetXMLField(pSess, "WmsBankAvailTrlr", m_szWmsBankAvailTrlr);
                GetXMLField(pSess, "WmsCustAvailTrlr", m_szWmsCustAvailTrlr);
                GetXMLField(pSess, "WmsCombinedStat", m_szWmsCombinedStat);
                GetXMLField(pSess, "WmsTargetAmtTrlr", m_szWmsTargetAmtTrlr);
                GetXMLField(pSess, "WmsLimitTransfer", m_szWmsLimitTransfer);
                GetXMLField(pSess, "WmsDcdTaxDataTrlr", m_szWmsDcdTaxDataTrlr);
                GetXMLField(pSess, "WmsOdAccrualTrlr", m_szWmsOdAccrualTrlr);
                GetXMLField(pSess, "WmsInfoTrlr", m_szWmsInfoTrlr);
                GetXMLField(pSess, "WmsExtScDataTrlr", m_szWmsExtScDataTrlr);
                GetXMLField(pSess, "WmsExtrnlDepositTrlr", m_szWmsExtrnlDepositTrlr);
                GetXMLField(pSess, "WmsKitingSuspTrlr", m_szWmsKitingSuspTrlr);
                GetXMLField(pSess, "WmsEfaTrlr", m_szWmsEfaTrlr);
                GetXMLField(pSess, "WmsCashAvailTrlr", m_szWmsCashAvailTrlr);
                GetXMLField(pSess, "WmsInvestmentTrlr", m_szWmsInvestmentTrlr);
                GetXMLField(pSess, "WmsRateTrlr", m_szWmsRateTrlr);
                GetXMLField(pSess, "WmsSavPtr", m_szWmsSavPtr);
                GetXMLField(pSess, "WmsExpansionInd", m_szWmsExpansionInd);
                GetXMLField(pSess, "WmsInfoContinent", m_szWmsInfoContinent);
                GetXMLField(pSess, "WmsInfoCntry", m_szWmsInfoCntry);
                GetXMLField(pSess, "WmsIntCurBal", m_szWmsIntCurBal);
                GetXMLField(pSess, "WmsPayoffAmt", m_szWmsPayoffAmt);
                GetXMLField(pSess, "WmsLastPmtCent", m_szWmsLastPmtCent);
                GetXMLField(pSess, "WmsLastPmtYr", m_szWmsLastPmtYr);
                GetXMLField(pSess, "WmsLastPmtMo", m_szWmsLastPmtMo);
                GetXMLField(pSess, "WmsLastPmtDa", m_szWmsLastPmtDa);
                GetXMLField(pSess, "WmsPymtDueAmt", m_szWmsPymtDueAmt);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 7; lOccurs++)
                    GetXMLField(pSess, "WmsBankAvailTrAmt", m_szWmsBankAvailTrAmt[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 12; lOccurs++)
                    GetXMLField(pSess, "WmsCustAvailFunds", m_szWmsCustAvailFunds[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 12; lOccurs++)
                    GetXMLField(pSess, "WmsTimesNsfMo", m_szWmsTimesNsfMo[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 12; lOccurs++)
                    GetXMLField(pSess, "WmsTimesOdMo", m_szWmsTimesOdMo[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 12; lOccurs++)
                    GetXMLField(pSess, "WmsTimesUnavailMo", m_szWmsTimesUnavailMo[lOccurs], lOccurs);
                GetXMLField(pSess, "ImMemoOlDrAmt", m_szImMemoOlDrAmt);
                GetXMLField(pSess, "ImMemoOlCrAmt", m_szImMemoOlCrAmt);
                GetXMLField(pSess, "ImMemoOlSvDrAmt", m_szImMemoOlSvDrAmt);
                GetXMLField(pSess, "ImMemoOlSvCrAmt", m_szImMemoOlSvCrAmt);
                GetXMLField(pSess, "ImMemoOlLnDrAmt", m_szImMemoOlLnDrAmt);
                GetXMLField(pSess, "ImMemoOlLnCrAmt", m_szImMemoOlLnCrAmt);
                GetXMLField(pSess, "ImMemoOlLnAvailBal", m_szImMemoOlLnAvailBal);
                GetXMLField(pSess, "WmsSsnForeignAddress", m_szWmsSsnForeignAddress);
                GetXMLField(pSess, "WmsLoanStatus", m_szWmsLoanStatus);
                GetXMLField(pSess, "WmsIntlCurrCode", m_szWmsIntlCurrCode);
                GetXMLField(pSess, "WmsIntlCurrDec", m_szWmsIntlCurrDec);
                GetXMLField(pSess, "WmsIntlCustLanguage", m_szWmsIntlCustLanguage);
                GetXMLField(pSess, "WmsIntlCustLangGroup", m_szWmsIntlCustLangGroup);
                GetXMLField(pSess, "WmsTaxCode", m_szWmsTaxCode);
                GetXMLField(pSess, "WmsAnnualRate", m_szWmsAnnualRate);
                GetXMLField(pSess, "WmsLoanPrevYtdInt", m_szWmsLoanPrevYtdInt);
                GetXMLField(pSess, "WmsLoanYtdInt", m_szWmsLoanYtdInt);
                GetXMLField(pSess, "WmsSavCurAnn", m_szWmsSavCurAnn);
                GetXMLField(pSess, "WmsYtdIntPaid", m_szWmsYtdIntPaid);
                GetXMLField(pSess, "ImMemoOlOffEmp", m_szImMemoOlOffEmp);
                GetXMLField(pSess, "WmsMtdAnalysis", m_szWmsMtdAnalysis);
                GetXMLField(pSess, "WmsChkTruncFlag", m_szWmsChkTruncFlag);
                GetXMLField(pSess, "WmsPrevYtdInt", m_szWmsPrevYtdInt);
                GetXMLField(pSess, "WmsShortName", m_szWmsShortName);
                GetXMLField(pSess, "WmsLastStmtCc", m_szWmsLastStmtCc);
                GetXMLField(pSess, "WmsLastStmtYr", m_szWmsLastStmtYr);
                GetXMLField(pSess, "WmsLastStmtMo", m_szWmsLastStmtMo);
                GetXMLField(pSess, "WmsLastStmtDa", m_szWmsLastStmtDa);
                GetXMLField(pSess, "WmsNsfWaive", m_szWmsNsfWaive);
                GetXMLField(pSess, "WmsOdWaive", m_szWmsOdWaive);
                GetXMLField(pSess, "WmsWaiveFee", m_szWmsWaiveFee);
                GetXMLField(pSess, "WmsRegion", m_szWmsRegion);
                GetXMLField(pSess, "WbcOrigProcThruCent", m_szWbcOrigProcThruCent);
                GetXMLField(pSess, "WbcOrigProcThruYr", m_szWbcOrigProcThruYr);
                GetXMLField(pSess, "WbcOrigProcThruMo", m_szWbcOrigProcThruMo);
                GetXMLField(pSess, "WbcOrigProcThruDa", m_szWbcOrigProcThruDa);
                GetXMLField(pSess, "WmsScCharge", m_szWmsScCharge);
                GetXMLField(pSess, "WmsScWaiveReason", m_szWmsScWaiveReason);
                GetXMLField(pSess, "WmsOdLimitAmt", m_szWmsOdLimitAmt);
                GetXMLField(pSess, "WbcLastProcCc", m_szWbcLastProcCc);
                GetXMLField(pSess, "WbcLastProcYr", m_szWbcLastProcYr);
                GetXMLField(pSess, "WbcLastProcMo", m_szWbcLastProcMo);
                GetXMLField(pSess, "WbcLastProcDa", m_szWbcLastProcDa);
                GetXMLField(pSess, "WmsStmtClear", m_szWmsStmtClear);
                GetXMLField(pSess, "WmsFundingFlag", m_szWmsFundingFlag);
                GetXMLField(pSess, "WmsHomeAreaCode", m_szWmsHomeAreaCode);
                GetXMLField(pSess, "WmsHomePhoneNo", m_szWmsHomePhoneNo);
                GetXMLField(pSess, "WmsHomeExtension", m_szWmsHomeExtension);
                GetXMLField(pSess, "WmsBusAreaCode", m_szWmsBusAreaCode);
                GetXMLField(pSess, "WmsBusPhoneNo", m_szWmsBusPhoneNo);
                GetXMLField(pSess, "WmsBusExtension", m_szWmsBusExtension);
                GetXMLField(pSess, "WmsTinCertification", m_szWmsTinCertification);
                GetXMLField(pSess, "CollBal", m_szCollBal);
                GetXMLField(pSess, "YtdAvgBal", m_szYtdAvgBal);
                GetXMLField(pSess, "WmsStmtSpeclHandl", m_szWmsStmtSpeclHandl);
                GetXMLField(pSess, "DateClosedCc", m_szDateClosedCc);
                GetXMLField(pSess, "DateClosedYr", m_szDateClosedYr);
                GetXMLField(pSess, "DateClosedMo", m_szDateClosedMo);
                GetXMLField(pSess, "DateClosedDa", m_szDateClosedDa);
                GetXMLField(pSess, "NoNsf", m_szNoNsf);
                GetXMLField(pSess, "NoOd", m_szNoOd);
                GetXMLField(pSess, "WmsBkupWthldFlag", m_szWmsBkupWthldFlag);
                GetXMLField(pSess, "WmsTaxExemptRsn", m_szWmsTaxExemptRsn);
                GetXMLField(pSess, "WmsApprovalCc", m_szWmsApprovalCc);
                GetXMLField(pSess, "WmsApprovalYr", m_szWmsApprovalYr);
                GetXMLField(pSess, "WmsApprovalMo", m_szWmsApprovalMo);
                GetXMLField(pSess, "WmsApprovalDa", m_szWmsApprovalDa);
                GetXMLField(pSess, "WmsCrRatingCc", m_szWmsCrRatingCc);
                GetXMLField(pSess, "WmsCrRatingYr", m_szWmsCrRatingYr);
                GetXMLField(pSess, "WmsCrRatingMo", m_szWmsCrRatingMo);
                GetXMLField(pSess, "WmsCrRatingDa", m_szWmsCrRatingDa);
                GetXMLField(pSess, "ImMemoOlPrinBal", m_szImMemoOlPrinBal);
                GetXMLField(pSess, "ImMemoOlDdaBal", m_szImMemoOlDdaBal);
                GetXMLField(pSess, "ImMemoOlSvAvailBal", m_szImMemoOlSvAvailBal);
                GetXMLField(pSess, "ImMemoOlNewDelFlag", m_szImMemoOlNewDelFlag);
                GetXMLField(pSess, "WmsPastDueAmt", m_szWmsPastDueAmt);
                GetXMLField(pSess, "WmsAutoPymt", m_szWmsAutoPymt);
                GetXMLField(pSess, "WmsLastPymtAmt", m_szWmsLastPymtAmt);
                GetXMLField(pSess, "WmsACt", m_szWmsACt);
                GetXMLField(pSess, "WmsBCt", m_szWmsBCt);
                GetXMLField(pSess, "WmsCCt", m_szWmsCCt);
                GetXMLField(pSess, "WmsDCt", m_szWmsDCt);
                GetXMLField(pSess, "WmsECt", m_szWmsECt);
                GetXMLField(pSess, "WmsFCt", m_szWmsFCt);
                GetXMLField(pSess, "WbcAbaNumber", m_szWbcAbaNumber);
                GetXMLField(pSess, "WbcNextProcCent", m_szWbcNextProcCent);
                GetXMLField(pSess, "WbcNextProcYr", m_szWbcNextProcYr);
                GetXMLField(pSess, "WbcNextProcMo", m_szWbcNextProcMo);
                GetXMLField(pSess, "WbcNextProcDa", m_szWbcNextProcDa);
                GetXMLField(pSess, "WbcCaptCent", m_szWbcCaptCent);
                GetXMLField(pSess, "WbcCaptYr", m_szWbcCaptYr);
                GetXMLField(pSess, "WbcCaptMo", m_szWbcCaptMo);
                GetXMLField(pSess, "WbcCaptDa", m_szWbcCaptDa);
                GetXMLField(pSess, "WmsMmdaIndicator", m_szWmsMmdaIndicator);
                GetXMLField(pSess, "WmsIntStatus", m_szWmsIntStatus);
                GetXMLField(pSess, "WmsIodDistCd", m_szWmsIodDistCd);
                GetXMLField(pSess, "WmsNaCountry", m_szWmsNaCountry);
                GetXMLField(pSess, "WmsNraTaxProvince", m_szWmsNraTaxProvince);
                GetXMLField(pSess, "WmsNraTaxCountry", m_szWmsNraTaxCountry);
                GetXMLField(pSess, "WmsNraCertName1", m_szWmsNraCertName1);
                GetXMLField(pSess, "WmsNraCertName2", m_szWmsNraCertName2);
                GetXMLField(pSess, "WmsInfoAlienCode", m_szWmsInfoAlienCode);
                GetXMLField(pSess, "WmsStmtBeginBal", m_szWmsStmtBeginBal);
                GetXMLField(pSess, "WmsLoanMinPartPmt", m_szWmsLoanMinPartPmt);
                GetXMLField(pSess, "WmsHoldNo", m_szWmsHoldNo);
                GetXMLField(pSess, "MemoOlDtLstMonCent", m_szMemoOlDtLstMonCent);
                GetXMLField(pSess, "MemoOlDtLstMonYr", m_szMemoOlDtLstMonYr);
                GetXMLField(pSess, "MemoOlDtLstMonMo", m_szMemoOlDtLstMonMo);
                GetXMLField(pSess, "MemoOlDtLstMonDa", m_szMemoOlDtLstMonDa);
                GetXMLField(pSess, "WmsIodXferIntPtr", m_szWmsIodXferIntPtr);
                GetXMLField(pSess, "UserCharField1", m_szUserCharField1);
                GetXMLField(pSess, "UserCharField2", m_szUserCharField2);
                GetXMLField(pSess, "UserCharField3", m_szUserCharField3);
                GetXMLField(pSess, "YesterdayFloatAmt", m_szYesterdayFloatAmt);
                GetXMLField(pSess, "TodayFloatAmt", m_szTodayFloatAmt);
                GetXMLField(pSess, "TotalBalance", m_szTotalBalance);
                GetXMLField(pSess, "WmsGovernmentId", m_szWmsGovernmentId);
                for (lOccurs = 0; lOccurs < 7; lOccurs++)
                {
                    CWmsNaLine[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 7; lOccurs++)
                {
                    CWmsBillDueDate[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 25; lOccurs++)
                {
                    CWmsScMiscAmounts[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 9; lOccurs++)
                {
                    CXferAffilTr[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDIMDTLO");
            };
        }
        
        //**************** Start AsdWmsNaLine Definition ****************
        //                 
        
        class AsdWmsNaLine
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bWmsNameAddrType;
            char      m_szWmsNameAddrType[1+1];
            bool      m_bWmsLineNo;
            char      m_szWmsLineNo[1+1];
            bool      m_bWmsNameAddress;
            char      m_szWmsNameAddress[40+1];
        
          public:
            long      m_lIndex;

            AsdWmsNaLine ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bWmsNameAddrType = false;
                strcpy(m_szWmsNameAddrType, "");
                m_bWmsLineNo = false;
                strcpy(m_szWmsLineNo, "");
                m_bWmsNameAddress = false;
                strcpy(m_szWmsNameAddress, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    INDICATES TYPE OF NAME/ADDRESS LINE
            long lWmsNameAddrType () { return 1; };
            RWCString WmsNameAddrType (void)
            {
                return m_szWmsNameAddrType;
            }
            long WmsNameAddrType (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsNameAddrType, sizeof(m_szWmsNameAddrType), &m_bWmsNameAddrType);
            }
            
            //    INDICATES SEQUENCE OF THE LINE WITHIN THE TYPE
            long lWmsLineNo () { return 1; };
            RWCString WmsLineNo (void)
            {
                return m_szWmsLineNo;
            }
            long WmsLineNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsLineNo, sizeof(m_szWmsLineNo), &m_bWmsLineNo);
            }
            
            //    LINES FOR NAME AND ADDRESS
            long lWmsNameAddress () { return 40; };
            RWCString WmsNameAddress (void)
            {
                return m_szWmsNameAddress;
            }
            long WmsNameAddress (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsNameAddress, sizeof(m_szWmsNameAddress), &m_bWmsNameAddress);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bWmsNameAddrType) return true;
                if (m_bWmsLineNo) return true;
                if (m_bWmsNameAddress) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "WmsNaLine", m_lIndex);
                    AddXMLField(pSess, "WmsNameAddrType", m_szWmsNameAddrType, &m_bWmsNameAddrType);
                    AddXMLField(pSess, "WmsLineNo", m_szWmsLineNo, &m_bWmsLineNo);
                    AddXMLField(pSess, "WmsNameAddress", m_szWmsNameAddress, &m_bWmsNameAddress);
                    AddXMLCloseRecord(pSess, "WmsNaLine");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "WmsNaLine", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "WmsNameAddrType", m_szWmsNameAddrType);
                    GetXMLField(pSess, "WmsLineNo", m_szWmsLineNo);
                    GetXMLField(pSess, "WmsNameAddress", m_szWmsNameAddress);
                    CloseXMLRecord(pSess, "WmsNaLine");
                };
            }
        };

        AsdWmsNaLine  CWmsNaLine[7];
        AsdWmsNaLine *WmsNaLine[7];
        
        //**************** End AsdWmsNaLine Definition ****************
        
        
        //**************** Start AsdWmsBillDueDate Definition ****************
        //                 LOAN PAST DUE BILL DUE DATE
        
        class AsdWmsBillDueDate
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bWmsBillDueCent;
            char      m_szWmsBillDueCent[2+1];
            bool      m_bWmsBillDueYr;
            char      m_szWmsBillDueYr[2+1];
            bool      m_bWmsBillDueMo;
            char      m_szWmsBillDueMo[2+1];
            bool      m_bWmsBillDueDa;
            char      m_szWmsBillDueDa[2+1];
        
          public:
            long      m_lIndex;

            AsdWmsBillDueDate ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bWmsBillDueCent = false;
                strcpy(m_szWmsBillDueCent, "");
                m_bWmsBillDueYr = false;
                strcpy(m_szWmsBillDueYr, "");
                m_bWmsBillDueMo = false;
                strcpy(m_szWmsBillDueMo, "");
                m_bWmsBillDueDa = false;
                strcpy(m_szWmsBillDueDa, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    CENTURY THE PAYMENT IS DUE
            long lWmsBillDueCent () { return 2; };
            RWCString WmsBillDueCent (void)
            {
                return m_szWmsBillDueCent;
            }
            long WmsBillDueCent (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsBillDueCent, sizeof(m_szWmsBillDueCent), &m_bWmsBillDueCent);
            }
            
            //    YEAR THE PAYMENT IS DUE
            long lWmsBillDueYr () { return 2; };
            RWCString WmsBillDueYr (void)
            {
                return m_szWmsBillDueYr;
            }
            long WmsBillDueYr (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsBillDueYr, sizeof(m_szWmsBillDueYr), &m_bWmsBillDueYr);
            }
            
            //    MONTH THE PAYMENT IS DUE
            long lWmsBillDueMo () { return 2; };
            RWCString WmsBillDueMo (void)
            {
                return m_szWmsBillDueMo;
            }
            long WmsBillDueMo (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsBillDueMo, sizeof(m_szWmsBillDueMo), &m_bWmsBillDueMo);
            }
            
            //    DAY THE PAYMENT IS DUE
            long lWmsBillDueDa () { return 2; };
            RWCString WmsBillDueDa (void)
            {
                return m_szWmsBillDueDa;
            }
            long WmsBillDueDa (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsBillDueDa, sizeof(m_szWmsBillDueDa), &m_bWmsBillDueDa);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bWmsBillDueCent) return true;
                if (m_bWmsBillDueYr) return true;
                if (m_bWmsBillDueMo) return true;
                if (m_bWmsBillDueDa) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "WmsBillDueDate", m_lIndex);
                    AddXMLField(pSess, "WmsBillDueCent", m_szWmsBillDueCent, &m_bWmsBillDueCent);
                    AddXMLField(pSess, "WmsBillDueYr", m_szWmsBillDueYr, &m_bWmsBillDueYr);
                    AddXMLField(pSess, "WmsBillDueMo", m_szWmsBillDueMo, &m_bWmsBillDueMo);
                    AddXMLField(pSess, "WmsBillDueDa", m_szWmsBillDueDa, &m_bWmsBillDueDa);
                    AddXMLCloseRecord(pSess, "WmsBillDueDate");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "WmsBillDueDate", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "WmsBillDueCent", m_szWmsBillDueCent);
                    GetXMLField(pSess, "WmsBillDueYr", m_szWmsBillDueYr);
                    GetXMLField(pSess, "WmsBillDueMo", m_szWmsBillDueMo);
                    GetXMLField(pSess, "WmsBillDueDa", m_szWmsBillDueDa);
                    CloseXMLRecord(pSess, "WmsBillDueDate");
                };
            }
        };

        AsdWmsBillDueDate  CWmsBillDueDate[7];
        AsdWmsBillDueDate *WmsBillDueDate[7];
        
        //**************** End AsdWmsBillDueDate Definition ****************
        
        
        //**************** Start AsdWmsScMiscAmounts Definition ****************
        //                 SC MISC AMOUNTS
        
        class AsdWmsScMiscAmounts
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bWmsScMiscCntrFlg;
            char      m_szWmsScMiscCntrFlg[1+1];
            bool      m_bWmsScMiscAmts;
            char      m_szWmsScMiscAmts[19+1];
        
          public:
            long      m_lIndex;

            AsdWmsScMiscAmounts ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bWmsScMiscCntrFlg = false;
                strcpy(m_szWmsScMiscCntrFlg, "");
                m_bWmsScMiscAmts = false;
                strcpy(m_szWmsScMiscAmts, "+000000000000000.00");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    MISC SERV CHG CYCLE AND WHETHER CHG IS AMOUNT OR ITEM COUNT
            long lWmsScMiscCntrFlg () { return 1; };
            RWCString WmsScMiscCntrFlg (void)
            {
                return m_szWmsScMiscCntrFlg;
            }
            long WmsScMiscCntrFlg (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsScMiscCntrFlg, sizeof(m_szWmsScMiscCntrFlg), &m_bWmsScMiscCntrFlg);
            }
            
            //    MISCELLANEOUS SERVICE CHARGE AMOUNTS
            long lWmsScMiscAmts () { return 19; };
            RWCString WmsScMiscAmts (void)
            {
                return AceZeroSupp(m_szWmsScMiscAmts, &m_szSuppressBuff[0]);
            }
            RWCString WmsScMiscAmtsRaw (void)
            {
                return m_szWmsScMiscAmts;
            }
            long WmsScMiscAmts (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsScMiscAmts, sizeof(m_szWmsScMiscAmts), &m_bWmsScMiscAmts);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bWmsScMiscCntrFlg) return true;
                if (m_bWmsScMiscAmts) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "WmsScMiscAmounts", m_lIndex);
                    AddXMLField(pSess, "WmsScMiscCntrFlg", m_szWmsScMiscCntrFlg, &m_bWmsScMiscCntrFlg);
                    AddXMLField(pSess, "WmsScMiscAmts", m_szWmsScMiscAmts, &m_bWmsScMiscAmts);
                    AddXMLCloseRecord(pSess, "WmsScMiscAmounts");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "WmsScMiscAmounts", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "WmsScMiscCntrFlg", m_szWmsScMiscCntrFlg);
                    GetXMLField(pSess, "WmsScMiscAmts", m_szWmsScMiscAmts);
                    CloseXMLRecord(pSess, "WmsScMiscAmounts");
                };
            }
        };

        AsdWmsScMiscAmounts  CWmsScMiscAmounts[25];
        AsdWmsScMiscAmounts *WmsScMiscAmounts[25];
        
        //**************** End AsdWmsScMiscAmounts Definition ****************
        
        
        //**************** Start AsdXferAffilTr Definition ****************
        //                 TRANSFER AFFILIATE TRAILER
        
        class AsdXferAffilTr
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bWmsTrnsfrAfflFlag;
            char      m_szWmsTrnsfrAfflFlag[1+1];
            bool      m_bLinkApplId;
            char      m_szLinkApplId[2+1];
            bool      m_bLinkPriority;
            char      m_szLinkPriority[1+1];
            bool      m_bLinkCtl1;
            char      m_szLinkCtl1[2+1];
            bool      m_bLinkCtl2;
            char      m_szLinkCtl2[3+1];
            bool      m_bLinkCtl3;
            char      m_szLinkCtl3[3+1];
            bool      m_bLinkCtl4;
            char      m_szLinkCtl4[4+1];
            bool      m_bLinkAcctNbr;
            char      m_szLinkAcctNbr[14+1];
        
          public:
            long      m_lIndex;

            AsdXferAffilTr ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bWmsTrnsfrAfflFlag = false;
                strcpy(m_szWmsTrnsfrAfflFlag, "");
                m_bLinkApplId = false;
                strcpy(m_szLinkApplId, "");
                m_bLinkPriority = false;
                strcpy(m_szLinkPriority, "");
                m_bLinkCtl1 = false;
                strcpy(m_szLinkCtl1, "");
                m_bLinkCtl2 = false;
                strcpy(m_szLinkCtl2, "");
                m_bLinkCtl3 = false;
                strcpy(m_szLinkCtl3, "");
                m_bLinkCtl4 = false;
                strcpy(m_szLinkCtl4, "");
                m_bLinkAcctNbr = false;
                strcpy(m_szLinkAcctNbr, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    INDICATES TRAILER TYPE
            long lWmsTrnsfrAfflFlag () { return 1; };
            RWCString WmsTrnsfrAfflFlag (void)
            {
                return m_szWmsTrnsfrAfflFlag;
            }
            long WmsTrnsfrAfflFlag (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsTrnsfrAfflFlag, sizeof(m_szWmsTrnsfrAfflFlag), &m_bWmsTrnsfrAfflFlag);
            }
            
            //    APPLICATION ID OF THE ASSOCIATED ACCOUNT
            long lLinkApplId () { return 2; };
            RWCString LinkApplId (void)
            {
                return m_szLinkApplId;
            }
            long LinkApplId (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkApplId, sizeof(m_szLinkApplId), &m_bLinkApplId);
            }
            
            //    LINK PRIORITY
            long lLinkPriority () { return 1; };
            RWCString LinkPriority (void)
            {
                return m_szLinkPriority;
            }
            long LinkPriority (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkPriority, sizeof(m_szLinkPriority), &m_bLinkPriority);
            }
            
            //    CTL1 OF ASSOCIATED ACCOUNT
            long lLinkCtl1 () { return 2; };
            RWCString LinkCtl1 (void)
            {
                return m_szLinkCtl1;
            }
            long LinkCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkCtl1, sizeof(m_szLinkCtl1), &m_bLinkCtl1);
            }
            
            //    CTL2 OF ASSOCIATED ACCOUNT
            long lLinkCtl2 () { return 3; };
            RWCString LinkCtl2 (void)
            {
                return m_szLinkCtl2;
            }
            long LinkCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkCtl2, sizeof(m_szLinkCtl2), &m_bLinkCtl2);
            }
            
            //    CTL3 OF ASSOCIATED ACCOUNT
            long lLinkCtl3 () { return 3; };
            RWCString LinkCtl3 (void)
            {
                return m_szLinkCtl3;
            }
            long LinkCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkCtl3, sizeof(m_szLinkCtl3), &m_bLinkCtl3);
            }
            
            //    CTL4 OF ASSOCIATED ACCOUNT
            long lLinkCtl4 () { return 4; };
            RWCString LinkCtl4 (void)
            {
                return m_szLinkCtl4;
            }
            long LinkCtl4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkCtl4, sizeof(m_szLinkCtl4), &m_bLinkCtl4);
            }
            
            //    ACCT NBR OF ASSOCIATED ACCOUNT
            long lLinkAcctNbr () { return 14; };
            RWCString LinkAcctNbr (void)
            {
                return m_szLinkAcctNbr;
            }
            long LinkAcctNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkAcctNbr, sizeof(m_szLinkAcctNbr), &m_bLinkAcctNbr);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bWmsTrnsfrAfflFlag) return true;
                if (m_bLinkApplId) return true;
                if (m_bLinkPriority) return true;
                if (m_bLinkCtl1) return true;
                if (m_bLinkCtl2) return true;
                if (m_bLinkCtl3) return true;
                if (m_bLinkCtl4) return true;
                if (m_bLinkAcctNbr) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "XferAffilTr", m_lIndex);
                    AddXMLField(pSess, "WmsTrnsfrAfflFlag", m_szWmsTrnsfrAfflFlag, &m_bWmsTrnsfrAfflFlag);
                    AddXMLField(pSess, "LinkApplId", m_szLinkApplId, &m_bLinkApplId);
                    AddXMLField(pSess, "LinkPriority", m_szLinkPriority, &m_bLinkPriority);
                    AddXMLField(pSess, "LinkCtl1", m_szLinkCtl1, &m_bLinkCtl1);
                    AddXMLField(pSess, "LinkCtl2", m_szLinkCtl2, &m_bLinkCtl2);
                    AddXMLField(pSess, "LinkCtl3", m_szLinkCtl3, &m_bLinkCtl3);
                    AddXMLField(pSess, "LinkCtl4", m_szLinkCtl4, &m_bLinkCtl4);
                    AddXMLField(pSess, "LinkAcctNbr", m_szLinkAcctNbr, &m_bLinkAcctNbr);
                    AddXMLCloseRecord(pSess, "XferAffilTr");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "XferAffilTr", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "WmsTrnsfrAfflFlag", m_szWmsTrnsfrAfflFlag);
                    GetXMLField(pSess, "LinkApplId", m_szLinkApplId);
                    GetXMLField(pSess, "LinkPriority", m_szLinkPriority);
                    GetXMLField(pSess, "LinkCtl1", m_szLinkCtl1);
                    GetXMLField(pSess, "LinkCtl2", m_szLinkCtl2);
                    GetXMLField(pSess, "LinkCtl3", m_szLinkCtl3);
                    GetXMLField(pSess, "LinkCtl4", m_szLinkCtl4);
                    GetXMLField(pSess, "LinkAcctNbr", m_szLinkAcctNbr);
                    CloseXMLRecord(pSess, "XferAffilTr");
                };
            }
        };

        AsdXferAffilTr  CXferAffilTr[9];
        AsdXferAffilTr *XferAffilTr[9];
        
        //**************** End AsdXferAffilTr Definition ****************
        
    };

    AsdSDIMDTLO CSDIMDTLO;
    AsdSDIMDTLO *SDIMDTLO;
    
    //**************** End AsdSDIMDTLO Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCIMMIData Definition ****************

typedef AsdSDPCIMMIData *LPSDPCIMMI;
typedef AsdSDPCIMMIData::AsdTSHeader *LPSDPCIMMI_TSHeader;
typedef AsdSDPCIMMIData::AsdSDIMINP *LPSDPCIMMI_SDIMINP;
typedef AsdSDPCIMMIData::AsdSDIMDTLO *LPSDPCIMMI_SDIMDTLO;
typedef AsdSDPCIMMIData::AsdSDIMDTLO::AsdWmsNaLine *LPSDPCIMMI_SDIMDTLO_WmsNaLine;
typedef AsdSDPCIMMIData::AsdSDIMDTLO::AsdWmsBillDueDate *LPSDPCIMMI_SDIMDTLO_WmsBillDueDate;
typedef AsdSDPCIMMIData::AsdSDIMDTLO::AsdWmsScMiscAmounts *LPSDPCIMMI_SDIMDTLO_WmsScMiscAmounts;
typedef AsdSDPCIMMIData::AsdSDIMDTLO::AsdXferAffilTr *LPSDPCIMMI_SDIMDTLO_XferAffilTr;
typedef AsdSDPCIMMIData::AsdTSMDA *LPSDPCIMMI_TSMDA;
typedef AsdSDPCIMMIData::AsdTSMDA::AsdMdaTrmMsg *LPSDPCIMMI_TSMDA_MdaTrmMsg;
typedef AsdSDPCIMMIData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCIMMI_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCIMMIData_H

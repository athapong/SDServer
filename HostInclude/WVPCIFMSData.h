#ifndef AsdWVPCIFMSData_H
#define AsdWVPCIFMSData_H

#include <stdlib.h>
#ifdef  AsdWVPCIFMS_INTEGRITY_STRING
#undef  AsdWVPCIFMS_INTEGRITY_STRING
#endif
#define AsdWVPCIFMS_INTEGRITY_STRING        ""

#ifdef  AsdWVPCIFMS_CRC_STRING
#undef  AsdWVPCIFMS_CRC_STRING
#endif
#define AsdWVPCIFMS_CRC_STRING "4187949168"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdWVPCIFMSData Definition ****************
//                 IF Customer Inquiry

//                 WVPCIFMSData.h generated by AceGen2 ver. 2.5.09

class AsdWVPCIFMSData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdWVPCIFMSData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "WVPCIFMS.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdWVPCIFMS_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        WVTRCLPR = &CWVTRCLPR;
        WVTRST01 = &CWVTRST01;
        WVTRST02 = &CWVTRST02;
        WVTRST03 = &CWVTRST03;
        TSMDA = &CTSMDA;
    }

    ~AsdWVPCIFMSData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CWVTRCLPR.Reinit();
            CWVTRST01.Reinit();
            CWVTRST02.Reinit();
            CWVTRST03.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdWVPCIFMS_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCIFMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVTRCLPR.Save(&m_Sess);
        CWVTRST01.Save(&m_Sess);
        CWVTRST02.Save(&m_Sess);
        CWVTRST03.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCIFMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVTRCLPR.Load(&m_Sess);
                        CWVTRST01.Load(&m_Sess);
                        CWVTRST02.Load(&m_Sess);
                        CWVTRST03.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCIFMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCIFMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVTRCLPR.Save(&m_Sess);
        CWVTRST01.Save(&m_Sess);
        CWVTRST02.Save(&m_Sess);
        CWVTRST03.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCIFMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVTRCLPR.Load(&m_Sess);
                        CWVTRST01.Load(&m_Sess);
                        CWVTRST02.Load(&m_Sess);
                        CWVTRST03.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCIFMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCIFMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdWVTRCLPR Definition ****************
    //                 CUSTOMER LOCATE PROMPT TRAN DAG                             
    
    //    WVTRCLPR.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:34
    class AsdWVTRCLPR
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bErrCode;
        char      m_szErrCode[4+1];
        bool      m_bErrDesc;
        char      m_szErrDesc[40+1];
        bool      m_bSearchType;
        char      m_szSearchType[1+1];
        bool      m_bContinueFlg;
        char      m_szContinueFlg[1+1];
        bool      m_bNbrRequested;
        char      m_szNbrRequested[4+1];
        bool      m_bActCustFlag;
        char      m_szActCustFlag[1+1];
        bool      m_bActAcctsFlag;
        char      m_szActAcctsFlag[1+1];
        bool      m_bMstUserNo;
        char      m_szMstUserNo[2+1];
        bool      m_bMstCtl2;
        char      m_szMstCtl2[3+1];
        bool      m_bMstCtl3;
        char      m_szMstCtl3[3+1];
        bool      m_bMstCtl4;
        char      m_szMstCtl4[4+1];
        bool      m_bMstCustNo;
        char      m_szMstCustNo[10+1];
        bool      m_bFill0;
        char      m_szFill0[7+1];
        bool      m_bMstRecId;
        char      m_szMstRecId[1+1];
        bool      m_bMstRecSeq;
        char      m_szMstRecSeq[2+1];
        bool      m_bNxtTrlr;
        char      m_szNxtTrlr[2+1];
        bool      m_bNameType;
        char      m_szNameType[1+1];
        bool      m_bMstCifName;
        char      m_szMstCifName[40+1];
        bool      m_bMstSsnFiller;
        char      m_szMstSsnFiller[1+1];
        bool      m_bMstSsnPrefix;
        char      m_szMstSsnPrefix[1+1];
        bool      m_bMstSsnNumber;
        char      m_szMstSsnNumber[9+1];
        bool      m_bMstSsnSuffix;
        char      m_szMstSsnSuffix[1+1];
        bool      m_bApplId;
        char      m_szApplId[2+1];
        bool      m_bOlCtls;
        char      m_szOlCtls[37+1];
        bool      m_bNxtAlphaKey;
        char      m_szNxtAlphaKey[23+1];
        bool      m_bNxtApxKey;
        char      m_szNxtApxKey[43+1];
        bool      m_bFill1;
        char      m_szFill1[30+1];
    
      public:
        long      m_lIndex;

        AsdWVTRCLPR ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bErrCode = false;
            strcpy(m_szErrCode, "");
            m_bErrDesc = false;
            strcpy(m_szErrDesc, "");
            m_bSearchType = false;
            strcpy(m_szSearchType, "0");
            m_bContinueFlg = false;
            strcpy(m_szContinueFlg, "");
            m_bNbrRequested = false;
            strcpy(m_szNbrRequested, "0000");
            m_bActCustFlag = false;
            strcpy(m_szActCustFlag, "");
            m_bActAcctsFlag = false;
            strcpy(m_szActAcctsFlag, "");
            m_bMstUserNo = false;
            strcpy(m_szMstUserNo, "");
            m_bMstCtl2 = false;
            strcpy(m_szMstCtl2, "");
            m_bMstCtl3 = false;
            strcpy(m_szMstCtl3, "");
            m_bMstCtl4 = false;
            strcpy(m_szMstCtl4, "");
            m_bMstCustNo = false;
            strcpy(m_szMstCustNo, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMstRecId = false;
            strcpy(m_szMstRecId, "");
            m_bMstRecSeq = false;
            strcpy(m_szMstRecSeq, "00");
            m_bNxtTrlr = false;
            strcpy(m_szNxtTrlr, "");
            m_bNameType = false;
            strcpy(m_szNameType, "");
            m_bMstCifName = false;
            strcpy(m_szMstCifName, "");
            m_bMstSsnFiller = false;
            strcpy(m_szMstSsnFiller, "");
            m_bMstSsnPrefix = false;
            strcpy(m_szMstSsnPrefix, "");
            m_bMstSsnNumber = false;
            strcpy(m_szMstSsnNumber, "");
            m_bMstSsnSuffix = false;
            strcpy(m_szMstSsnSuffix, "");
            m_bApplId = false;
            strcpy(m_szApplId, "");
            m_bOlCtls = false;
            strcpy(m_szOlCtls, "");
            m_bNxtAlphaKey = false;
            strcpy(m_szNxtAlphaKey, "");
            m_bNxtApxKey = false;
            strcpy(m_szNxtApxKey, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bErrCode = false;
            strcpy(m_szErrCode, "");
            m_bErrDesc = false;
            strcpy(m_szErrDesc, "");
            m_bSearchType = false;
            strcpy(m_szSearchType, "0");
            m_bContinueFlg = false;
            strcpy(m_szContinueFlg, "");
            m_bNbrRequested = false;
            strcpy(m_szNbrRequested, "0000");
            m_bActCustFlag = false;
            strcpy(m_szActCustFlag, "");
            m_bActAcctsFlag = false;
            strcpy(m_szActAcctsFlag, "");
            m_bMstUserNo = false;
            strcpy(m_szMstUserNo, "");
            m_bMstCtl2 = false;
            strcpy(m_szMstCtl2, "");
            m_bMstCtl3 = false;
            strcpy(m_szMstCtl3, "");
            m_bMstCtl4 = false;
            strcpy(m_szMstCtl4, "");
            m_bMstCustNo = false;
            strcpy(m_szMstCustNo, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMstRecId = false;
            strcpy(m_szMstRecId, "");
            m_bMstRecSeq = false;
            strcpy(m_szMstRecSeq, "00");
            m_bNxtTrlr = false;
            strcpy(m_szNxtTrlr, "");
            m_bNameType = false;
            strcpy(m_szNameType, "");
            m_bMstCifName = false;
            strcpy(m_szMstCifName, "");
            m_bMstSsnFiller = false;
            strcpy(m_szMstSsnFiller, "");
            m_bMstSsnPrefix = false;
            strcpy(m_szMstSsnPrefix, "");
            m_bMstSsnNumber = false;
            strcpy(m_szMstSsnNumber, "");
            m_bMstSsnSuffix = false;
            strcpy(m_szMstSsnSuffix, "");
            m_bApplId = false;
            strcpy(m_szApplId, "");
            m_bOlCtls = false;
            strcpy(m_szOlCtls, "");
            m_bNxtAlphaKey = false;
            strcpy(m_szNxtAlphaKey, "");
            m_bNxtApxKey = false;
            strcpy(m_szNxtApxKey, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
        }

        
        //    ERROR CODE
        long lErrCode () { return 4; };
        RWCString ErrCode (void)
        {
            return m_szErrCode;
        }
        long ErrCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szErrCode, sizeof(m_szErrCode), &m_bErrCode);
        }
        
        //    ERROR DESCRIPTION
        long lErrDesc () { return 40; };
        RWCString ErrDesc (void)
        {
            return m_szErrDesc;
        }
        long ErrDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szErrDesc, sizeof(m_szErrDesc), &m_bErrDesc);
        }
        
        //    SEARCH TYPE
        long lSearchType () { return 1; };
        RWCString SearchType (void)
        {
            return m_szSearchType;
        }
        long SearchType (const RWCString& rwc)
        {
            return SetString(rwc, m_szSearchType, sizeof(m_szSearchType), &m_bSearchType);
        }
        
        //    CONTINUE WITH SEARCH FLAG
        long lContinueFlg () { return 1; };
        RWCString ContinueFlg (void)
        {
            return m_szContinueFlg;
        }
        long ContinueFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szContinueFlg, sizeof(m_szContinueFlg), &m_bContinueFlg);
        }
        
        //    NUMBER OF ENTRIES REQUESTED
        long lNbrRequested () { return 4; };
        RWCString NbrRequested (void)
        {
            return m_szNbrRequested;
        }
        long NbrRequested (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrRequested, sizeof(m_szNbrRequested), &m_bNbrRequested);
        }
        
        //    ACTIVE CUSTOMERS ONLY INDICATOR
        long lActCustFlag () { return 1; };
        RWCString ActCustFlag (void)
        {
            return m_szActCustFlag;
        }
        long ActCustFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szActCustFlag, sizeof(m_szActCustFlag), &m_bActCustFlag);
        }
        
        //    ACTIVE ACCOUNTS ONLY FLAG
        long lActAcctsFlag () { return 1; };
        RWCString ActAcctsFlag (void)
        {
            return m_szActAcctsFlag;
        }
        long ActAcctsFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szActAcctsFlag, sizeof(m_szActAcctsFlag), &m_bActAcctsFlag);
        }
        
        //    MASTER USER NUMBER
        long lMstUserNo () { return 2; };
        RWCString MstUserNo (void)
        {
            return m_szMstUserNo;
        }
        long MstUserNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstUserNo, sizeof(m_szMstUserNo), &m_bMstUserNo);
        }
        
        //    MASTER CONTROL 2
        long lMstCtl2 () { return 3; };
        RWCString MstCtl2 (void)
        {
            return m_szMstCtl2;
        }
        long MstCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCtl2, sizeof(m_szMstCtl2), &m_bMstCtl2);
        }
        
        //    MASTER CONTROL 3
        long lMstCtl3 () { return 3; };
        RWCString MstCtl3 (void)
        {
            return m_szMstCtl3;
        }
        long MstCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCtl3, sizeof(m_szMstCtl3), &m_bMstCtl3);
        }
        
        //    MASTER CONTROL 4
        long lMstCtl4 () { return 4; };
        RWCString MstCtl4 (void)
        {
            return m_szMstCtl4;
        }
        long MstCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCtl4, sizeof(m_szMstCtl4), &m_bMstCtl4);
        }
        
        //    MASTER CUSTOMER NUMBER
        long lMstCustNo () { return 10; };
        RWCString MstCustNo (void)
        {
            return m_szMstCustNo;
        }
        long MstCustNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCustNo, sizeof(m_szMstCustNo), &m_bMstCustNo);
        }
        
        long lFill0 () { return 7; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    MASTER RECORD ID
        long lMstRecId () { return 1; };
        RWCString MstRecId (void)
        {
            return m_szMstRecId;
        }
        long MstRecId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstRecId, sizeof(m_szMstRecId), &m_bMstRecId);
        }
        
        //    MASTER RECORD SEQUENCE NUMBER
        long lMstRecSeq () { return 2; };
        RWCString MstRecSeq (void)
        {
            return m_szMstRecSeq;
        }
        long MstRecSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstRecSeq, sizeof(m_szMstRecSeq), &m_bMstRecSeq);
        }
        
        //    TRAILER TO READ
        long lNxtTrlr () { return 2; };
        RWCString NxtTrlr (void)
        {
            return m_szNxtTrlr;
        }
        long NxtTrlr (const RWCString& rwc)
        {
            return SetString(rwc, m_szNxtTrlr, sizeof(m_szNxtTrlr), &m_bNxtTrlr);
        }
        
        //    NAME TYPE
        long lNameType () { return 1; };
        RWCString NameType (void)
        {
            return m_szNameType;
        }
        long NameType (const RWCString& rwc)
        {
            return SetString(rwc, m_szNameType, sizeof(m_szNameType), &m_bNameType);
        }
        
        //    CUSTOMER NAME
        long lMstCifName () { return 40; };
        RWCString MstCifName (void)
        {
            return m_szMstCifName;
        }
        long MstCifName (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCifName, sizeof(m_szMstCifName), &m_bMstCifName);
        }
        
        //    FILLER
        long lMstSsnFiller () { return 1; };
        RWCString MstSsnFiller (void)
        {
            return m_szMstSsnFiller;
        }
        long MstSsnFiller (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSsnFiller, sizeof(m_szMstSsnFiller), &m_bMstSsnFiller);
        }
        
        //    SOCIAL SECURITY PREFIX
        long lMstSsnPrefix () { return 1; };
        RWCString MstSsnPrefix (void)
        {
            return m_szMstSsnPrefix;
        }
        long MstSsnPrefix (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSsnPrefix, sizeof(m_szMstSsnPrefix), &m_bMstSsnPrefix);
        }
        
        //    SOCIAL SECURITY NUMBER
        long lMstSsnNumber () { return 9; };
        RWCString MstSsnNumber (void)
        {
            return m_szMstSsnNumber;
        }
        long MstSsnNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSsnNumber, sizeof(m_szMstSsnNumber), &m_bMstSsnNumber);
        }
        
        //    SOCIAL SECURITY SUFFIX
        long lMstSsnSuffix () { return 1; };
        RWCString MstSsnSuffix (void)
        {
            return m_szMstSsnSuffix;
        }
        long MstSsnSuffix (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSsnSuffix, sizeof(m_szMstSsnSuffix), &m_bMstSsnSuffix);
        }
        
        //    APPLICATION ID
        long lApplId () { return 2; };
        RWCString ApplId (void)
        {
            return m_szApplId;
        }
        long ApplId (const RWCString& rwc)
        {
            return SetString(rwc, m_szApplId, sizeof(m_szApplId), &m_bApplId);
        }
        
        //    ACCOUNT AND CTLS
        long lOlCtls () { return 37; };
        RWCString OlCtls (void)
        {
            return m_szOlCtls;
        }
        long OlCtls (const RWCString& rwc)
        {
            return SetString(rwc, m_szOlCtls, sizeof(m_szOlCtls), &m_bOlCtls);
        }
        
        //    NEXT ALPHA KEY
        long lNxtAlphaKey () { return 23; };
        RWCString NxtAlphaKey (void)
        {
            return m_szNxtAlphaKey;
        }
        long NxtAlphaKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szNxtAlphaKey, sizeof(m_szNxtAlphaKey), &m_bNxtAlphaKey);
        }
        
        //    NEXT APX KEY
        long lNxtApxKey () { return 43; };
        RWCString NxtApxKey (void)
        {
            return m_szNxtApxKey;
        }
        long NxtApxKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szNxtApxKey, sizeof(m_szNxtApxKey), &m_bNxtApxKey);
        }
        
        long lFill1 () { return 30; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bErrCode) return true;
            if (m_bErrDesc) return true;
            if (m_bSearchType) return true;
            if (m_bContinueFlg) return true;
            if (m_bNbrRequested) return true;
            if (m_bActCustFlag) return true;
            if (m_bActAcctsFlag) return true;
            if (m_bMstUserNo) return true;
            if (m_bMstCtl2) return true;
            if (m_bMstCtl3) return true;
            if (m_bMstCtl4) return true;
            if (m_bMstCustNo) return true;
            if (m_bFill0) return true;
            if (m_bMstRecId) return true;
            if (m_bMstRecSeq) return true;
            if (m_bNxtTrlr) return true;
            if (m_bNameType) return true;
            if (m_bMstCifName) return true;
            if (m_bMstSsnFiller) return true;
            if (m_bMstSsnPrefix) return true;
            if (m_bMstSsnNumber) return true;
            if (m_bMstSsnSuffix) return true;
            if (m_bApplId) return true;
            if (m_bOlCtls) return true;
            if (m_bNxtAlphaKey) return true;
            if (m_bNxtApxKey) return true;
            if (m_bFill1) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVTRCLPR", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "ErrCode", m_szErrCode, &m_bErrCode);
                AddXMLField(pSess, "ErrDesc", m_szErrDesc, &m_bErrDesc);
                AddXMLField(pSess, "SearchType", m_szSearchType, &m_bSearchType);
                AddXMLField(pSess, "ContinueFlg", m_szContinueFlg, &m_bContinueFlg);
                AddXMLField(pSess, "NbrRequested", m_szNbrRequested, &m_bNbrRequested);
                AddXMLField(pSess, "ActCustFlag", m_szActCustFlag, &m_bActCustFlag);
                AddXMLField(pSess, "ActAcctsFlag", m_szActAcctsFlag, &m_bActAcctsFlag);
                AddXMLField(pSess, "MstUserNo", m_szMstUserNo, &m_bMstUserNo);
                AddXMLField(pSess, "MstCtl2", m_szMstCtl2, &m_bMstCtl2);
                AddXMLField(pSess, "MstCtl3", m_szMstCtl3, &m_bMstCtl3);
                AddXMLField(pSess, "MstCtl4", m_szMstCtl4, &m_bMstCtl4);
                AddXMLField(pSess, "MstCustNo", m_szMstCustNo, &m_bMstCustNo);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MstRecId", m_szMstRecId, &m_bMstRecId);
                AddXMLField(pSess, "MstRecSeq", m_szMstRecSeq, &m_bMstRecSeq);
                AddXMLField(pSess, "NxtTrlr", m_szNxtTrlr, &m_bNxtTrlr);
                AddXMLField(pSess, "NameType", m_szNameType, &m_bNameType);
                AddXMLField(pSess, "MstCifName", m_szMstCifName, &m_bMstCifName);
                AddXMLField(pSess, "MstSsnFiller", m_szMstSsnFiller, &m_bMstSsnFiller);
                AddXMLField(pSess, "MstSsnPrefix", m_szMstSsnPrefix, &m_bMstSsnPrefix);
                AddXMLField(pSess, "MstSsnNumber", m_szMstSsnNumber, &m_bMstSsnNumber);
                AddXMLField(pSess, "MstSsnSuffix", m_szMstSsnSuffix, &m_bMstSsnSuffix);
                AddXMLField(pSess, "ApplId", m_szApplId, &m_bApplId);
                AddXMLField(pSess, "OlCtls", m_szOlCtls, &m_bOlCtls);
                AddXMLField(pSess, "NxtAlphaKey", m_szNxtAlphaKey, &m_bNxtAlphaKey);
                AddXMLField(pSess, "NxtApxKey", m_szNxtApxKey, &m_bNxtApxKey);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                AddXMLCloseRecord(pSess, "WVTRCLPR");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVTRCLPR", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "ErrCode", m_szErrCode);
                GetXMLField(pSess, "ErrDesc", m_szErrDesc);
                GetXMLField(pSess, "SearchType", m_szSearchType);
                GetXMLField(pSess, "ContinueFlg", m_szContinueFlg);
                GetXMLField(pSess, "NbrRequested", m_szNbrRequested);
                GetXMLField(pSess, "ActCustFlag", m_szActCustFlag);
                GetXMLField(pSess, "ActAcctsFlag", m_szActAcctsFlag);
                GetXMLField(pSess, "MstUserNo", m_szMstUserNo);
                GetXMLField(pSess, "MstCtl2", m_szMstCtl2);
                GetXMLField(pSess, "MstCtl3", m_szMstCtl3);
                GetXMLField(pSess, "MstCtl4", m_szMstCtl4);
                GetXMLField(pSess, "MstCustNo", m_szMstCustNo);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MstRecId", m_szMstRecId);
                GetXMLField(pSess, "MstRecSeq", m_szMstRecSeq);
                GetXMLField(pSess, "NxtTrlr", m_szNxtTrlr);
                GetXMLField(pSess, "NameType", m_szNameType);
                GetXMLField(pSess, "MstCifName", m_szMstCifName);
                GetXMLField(pSess, "MstSsnFiller", m_szMstSsnFiller);
                GetXMLField(pSess, "MstSsnPrefix", m_szMstSsnPrefix);
                GetXMLField(pSess, "MstSsnNumber", m_szMstSsnNumber);
                GetXMLField(pSess, "MstSsnSuffix", m_szMstSsnSuffix);
                GetXMLField(pSess, "ApplId", m_szApplId);
                GetXMLField(pSess, "OlCtls", m_szOlCtls);
                GetXMLField(pSess, "NxtAlphaKey", m_szNxtAlphaKey);
                GetXMLField(pSess, "NxtApxKey", m_szNxtApxKey);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CloseXMLRecord(pSess, "WVTRCLPR");
            };
        }
    };

    AsdWVTRCLPR CWVTRCLPR;
    AsdWVTRCLPR *WVTRCLPR;
    
    //**************** End AsdWVTRCLPR Definition ****************

    
    //**************** Start AsdWVTRST01 Definition ****************
    //                 OUTPUT FROM SEARCH TYPE 1                                   
    
    //    WVTRST01.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:34
    class AsdWVTRST01
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bGroupData;
        char      m_szGroupData[1713+1];
        bool      m_bFill0;
        char      m_szFill0[30+1];
        bool      m_bFill1;
        char      m_szFill1[30+1];
    
      public:
        long      m_lIndex;

        AsdWVTRST01 ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bGroupData = false;
            strcpy(m_szGroupData, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bGroupData = false;
            strcpy(m_szGroupData, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
        }

        
        //    WVTRST01-GROUP
        long lGroupData () { return 1713; };
        RWCString GroupData (void)
        {
            return m_szGroupData;
        }
        long GroupData (const RWCString& rwc)
        {
            return SetString(rwc, m_szGroupData, sizeof(m_szGroupData), &m_bGroupData);
        }
        
        long lFill0 () { return 30; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        long lFill1 () { return 30; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bGroupData) return true;
            if (m_bFill0) return true;
            if (m_bFill1) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVTRST01", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "GroupData", m_szGroupData, &m_bGroupData);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                AddXMLCloseRecord(pSess, "WVTRST01");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVTRST01", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "GroupData", m_szGroupData);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CloseXMLRecord(pSess, "WVTRST01");
            };
        }
    };

    AsdWVTRST01 CWVTRST01;
    AsdWVTRST01 *WVTRST01;
    
    //**************** End AsdWVTRST01 Definition ****************

    
    //**************** Start AsdWVTRST02 Definition ****************
    //                 OUTPUT FROM CUSTOMER NUMBER SEARCH                          
    
    //    WVTRST02.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:34
    class AsdWVTRST02
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bErrCode;
        char      m_szErrCode[4+1];
        bool      m_bErrDesc;
        char      m_szErrDesc[40+1];
        bool      m_bMstCifName;
        char      m_szMstCifName[40+1];
        bool      m_bMstTitle;
        char      m_szMstTitle[10+1];
        bool      m_bMstSalutation;
        char      m_szMstSalutation[15+1];
        bool      m_bMstSex;
        char      m_szMstSex[1+1];
        bool      m_bMstCustNo;
        char      m_szMstCustNo[10+1];
        bool      m_bMstCustType;
        char      m_szMstCustType[2+1];
        bool      m_bZipcodeData;
        char      m_szZipcodeData[10+1];
        bool      m_bAddressData;
        char      m_szAddressData[30+1];
        bool      m_bStateData;
        char      m_szStateData[2+1];
        bool      m_bMstCountry;
        char      m_szMstCountry[3+1];
        bool      m_bForeignAddrInd;
        char      m_szForeignAddrInd[1+1];
        bool      m_bMstSsnPrefix;
        char      m_szMstSsnPrefix[1+1];
        bool      m_bMstSsnNumber;
        char      m_szMstSsnNumber[9+1];
        bool      m_bMstSsnSuffix;
        char      m_szMstSsnSuffix[1+1];
        bool      m_bMstSsCode;
        char      m_szMstSsCode[1+1];
        bool      m_bMstBirthCen;
        char      m_szMstBirthCen[2+1];
        bool      m_bMstBirthYr;
        char      m_szMstBirthYr[2+1];
        bool      m_bMstBirthMo;
        char      m_szMstBirthMo[2+1];
        bool      m_bMstBirthDa;
        char      m_szMstBirthDa[2+1];
        bool      m_bMstBusArea;
        char      m_szMstBusArea[3+1];
        bool      m_bMstBusPhone;
        char      m_szMstBusPhone[7+1];
        bool      m_bMstBusExtn;
        char      m_szMstBusExtn[4+1];
        bool      m_bMstHomeArea;
        char      m_szMstHomeArea[3+1];
        bool      m_bMstHomePhone;
        char      m_szMstHomePhone[11+1];
        bool      m_bMstEmployer;
        char      m_szMstEmployer[30+1];
        bool      m_bMstDrvrsLcnse;
        char      m_szMstDrvrsLcnse[20+1];
        bool      m_bMstVip;
        char      m_szMstVip[1+1];
        bool      m_bMstOffEmpDir;
        char      m_szMstOffEmpDir[1+1];
        bool      m_bMstStockholder;
        char      m_szMstStockholder[1+1];
        bool      m_bDateMaint;
        char      m_szDateMaint[8+1];
        bool      m_bMstBranch;
        char      m_szMstBranch[3+1];
        bool      m_bMstOfficer1;
        char      m_szMstOfficer1[5+1];
        bool      m_bNbrInTable;
        char      m_szNbrInTable[4+1];
        bool      m_bMoreInd;
        char      m_szMoreInd[1+1];
        bool      m_bFill0;
        char      m_szFill0[30+1];
        bool      m_bFill1;
        char      m_szFill1[30+1];
    
      public:
        long      m_lIndex;

        AsdWVTRST02 ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bErrCode = false;
            strcpy(m_szErrCode, "");
            m_bErrDesc = false;
            strcpy(m_szErrDesc, "");
            m_bMstCifName = false;
            strcpy(m_szMstCifName, "");
            m_bMstTitle = false;
            strcpy(m_szMstTitle, "");
            m_bMstSalutation = false;
            strcpy(m_szMstSalutation, "");
            m_bMstSex = false;
            strcpy(m_szMstSex, "");
            m_bMstCustNo = false;
            strcpy(m_szMstCustNo, "0000000000");
            m_bMstCustType = false;
            strcpy(m_szMstCustType, "");
            m_bZipcodeData = false;
            strcpy(m_szZipcodeData, "");
            m_bAddressData = false;
            strcpy(m_szAddressData, "");
            m_bStateData = false;
            strcpy(m_szStateData, "");
            m_bMstCountry = false;
            strcpy(m_szMstCountry, "");
            m_bForeignAddrInd = false;
            strcpy(m_szForeignAddrInd, "");
            m_bMstSsnPrefix = false;
            strcpy(m_szMstSsnPrefix, "");
            m_bMstSsnNumber = false;
            strcpy(m_szMstSsnNumber, "");
            m_bMstSsnSuffix = false;
            strcpy(m_szMstSsnSuffix, "");
            m_bMstSsCode = false;
            strcpy(m_szMstSsCode, "");
            m_bMstBirthCen = false;
            strcpy(m_szMstBirthCen, "");
            m_bMstBirthYr = false;
            strcpy(m_szMstBirthYr, "");
            m_bMstBirthMo = false;
            strcpy(m_szMstBirthMo, "");
            m_bMstBirthDa = false;
            strcpy(m_szMstBirthDa, "");
            m_bMstBusArea = false;
            strcpy(m_szMstBusArea, "");
            m_bMstBusPhone = false;
            strcpy(m_szMstBusPhone, "");
            m_bMstBusExtn = false;
            strcpy(m_szMstBusExtn, "");
            m_bMstHomeArea = false;
            strcpy(m_szMstHomeArea, "");
            m_bMstHomePhone = false;
            strcpy(m_szMstHomePhone, "");
            m_bMstEmployer = false;
            strcpy(m_szMstEmployer, "");
            m_bMstDrvrsLcnse = false;
            strcpy(m_szMstDrvrsLcnse, "");
            m_bMstVip = false;
            strcpy(m_szMstVip, "");
            m_bMstOffEmpDir = false;
            strcpy(m_szMstOffEmpDir, "");
            m_bMstStockholder = false;
            strcpy(m_szMstStockholder, "");
            m_bDateMaint = false;
            strcpy(m_szDateMaint, "");
            m_bMstBranch = false;
            strcpy(m_szMstBranch, "");
            m_bMstOfficer1 = false;
            strcpy(m_szMstOfficer1, "");
            m_bNbrInTable = false;
            strcpy(m_szNbrInTable, "0000");
            m_bMoreInd = false;
            strcpy(m_szMoreInd, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 5; lOccurs++)
            {
                MstNaInfo[lOccurs]  = &CMstNaInfo[lOccurs];
                CMstNaInfo[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 32; lOccurs++)
            {
                TrlrData[lOccurs]  = &CTrlrData[lOccurs];
                CTrlrData[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bErrCode = false;
            strcpy(m_szErrCode, "");
            m_bErrDesc = false;
            strcpy(m_szErrDesc, "");
            m_bMstCifName = false;
            strcpy(m_szMstCifName, "");
            m_bMstTitle = false;
            strcpy(m_szMstTitle, "");
            m_bMstSalutation = false;
            strcpy(m_szMstSalutation, "");
            m_bMstSex = false;
            strcpy(m_szMstSex, "");
            m_bMstCustNo = false;
            strcpy(m_szMstCustNo, "0000000000");
            m_bMstCustType = false;
            strcpy(m_szMstCustType, "");
            m_bZipcodeData = false;
            strcpy(m_szZipcodeData, "");
            m_bAddressData = false;
            strcpy(m_szAddressData, "");
            m_bStateData = false;
            strcpy(m_szStateData, "");
            m_bMstCountry = false;
            strcpy(m_szMstCountry, "");
            m_bForeignAddrInd = false;
            strcpy(m_szForeignAddrInd, "");
            m_bMstSsnPrefix = false;
            strcpy(m_szMstSsnPrefix, "");
            m_bMstSsnNumber = false;
            strcpy(m_szMstSsnNumber, "");
            m_bMstSsnSuffix = false;
            strcpy(m_szMstSsnSuffix, "");
            m_bMstSsCode = false;
            strcpy(m_szMstSsCode, "");
            m_bMstBirthCen = false;
            strcpy(m_szMstBirthCen, "");
            m_bMstBirthYr = false;
            strcpy(m_szMstBirthYr, "");
            m_bMstBirthMo = false;
            strcpy(m_szMstBirthMo, "");
            m_bMstBirthDa = false;
            strcpy(m_szMstBirthDa, "");
            m_bMstBusArea = false;
            strcpy(m_szMstBusArea, "");
            m_bMstBusPhone = false;
            strcpy(m_szMstBusPhone, "");
            m_bMstBusExtn = false;
            strcpy(m_szMstBusExtn, "");
            m_bMstHomeArea = false;
            strcpy(m_szMstHomeArea, "");
            m_bMstHomePhone = false;
            strcpy(m_szMstHomePhone, "");
            m_bMstEmployer = false;
            strcpy(m_szMstEmployer, "");
            m_bMstDrvrsLcnse = false;
            strcpy(m_szMstDrvrsLcnse, "");
            m_bMstVip = false;
            strcpy(m_szMstVip, "");
            m_bMstOffEmpDir = false;
            strcpy(m_szMstOffEmpDir, "");
            m_bMstStockholder = false;
            strcpy(m_szMstStockholder, "");
            m_bDateMaint = false;
            strcpy(m_szDateMaint, "");
            m_bMstBranch = false;
            strcpy(m_szMstBranch, "");
            m_bMstOfficer1 = false;
            strcpy(m_szMstOfficer1, "");
            m_bNbrInTable = false;
            strcpy(m_szNbrInTable, "0000");
            m_bMoreInd = false;
            strcpy(m_szMoreInd, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 5; lOccurs++)
            {
                MstNaInfo[lOccurs]  = &CMstNaInfo[lOccurs];
                CMstNaInfo[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 32; lOccurs++)
            {
                TrlrData[lOccurs]  = &CTrlrData[lOccurs];
                CTrlrData[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    ERROR MESSAGE CODE.
        long lErrCode () { return 4; };
        RWCString ErrCode (void)
        {
            return m_szErrCode;
        }
        long ErrCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szErrCode, sizeof(m_szErrCode), &m_bErrCode);
        }
        
        //    ERROR MESSAGE TEXT.
        long lErrDesc () { return 40; };
        RWCString ErrDesc (void)
        {
            return m_szErrDesc;
        }
        long ErrDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szErrDesc, sizeof(m_szErrDesc), &m_bErrDesc);
        }
        
        //    NAME OF THE INDIVIDUAL FOR WHOM THE RECORD WAS CREATED.
        long lMstCifName () { return 40; };
        RWCString MstCifName (void)
        {
            return m_szMstCifName;
        }
        long MstCifName (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCifName, sizeof(m_szMstCifName), &m_bMstCifName);
        }
        
        //    CUSTOMER'S PROFESSIONAL TITLE.
        long lMstTitle () { return 10; };
        RWCString MstTitle (void)
        {
            return m_szMstTitle;
        }
        long MstTitle (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstTitle, sizeof(m_szMstTitle), &m_bMstTitle);
        }
        
        //    TITLE TO PRECEDE THE CUSTOMER'S NAME (MR., DR., MISS, ETC.).
        long lMstSalutation () { return 15; };
        RWCString MstSalutation (void)
        {
            return m_szMstSalutation;
        }
        long MstSalutation (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSalutation, sizeof(m_szMstSalutation), &m_bMstSalutation);
        }
        
        //    CUSTOMER'S GENDER.
        long lMstSex () { return 1; };
        RWCString MstSex (void)
        {
            return m_szMstSex;
        }
        long MstSex (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSex, sizeof(m_szMstSex), &m_bMstSex);
        }
        
        //    UNIQUE NUMBER IDENTIFYING THE CUSTOMER.
        long lMstCustNo () { return 10; };
        RWCString MstCustNo (void)
        {
            return m_szMstCustNo;
        }
        long MstCustNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCustNo, sizeof(m_szMstCustNo), &m_bMstCustNo);
        }
        
        //    TYPE OF CUSTOMER (INDIVIDUAL, COMMERCIAL, GOVERNMENT, ETC.).
        long lMstCustType () { return 2; };
        RWCString MstCustType (void)
        {
            return m_szMstCustType;
        }
        long MstCustType (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCustType, sizeof(m_szMstCustType), &m_bMstCustType);
        }
        
        //    ZIP CODE FOR THE ADDRESS.
        long lZipcodeData () { return 10; };
        RWCString ZipcodeData (void)
        {
            return m_szZipcodeData;
        }
        long ZipcodeData (const RWCString& rwc)
        {
            return SetString(rwc, m_szZipcodeData, sizeof(m_szZipcodeData), &m_bZipcodeData);
        }
        
        //    CUSTOMER'S CITY WHEN SEARCH IS BASED ON CUSTOMER NUMBER.
        long lAddressData () { return 30; };
        RWCString AddressData (void)
        {
            return m_szAddressData;
        }
        long AddressData (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddressData, sizeof(m_szAddressData), &m_bAddressData);
        }
        
        //    STATE DATA FOR RETURN DAG
        long lStateData () { return 2; };
        RWCString StateData (void)
        {
            return m_szStateData;
        }
        long StateData (const RWCString& rwc)
        {
            return SetString(rwc, m_szStateData, sizeof(m_szStateData), &m_bStateData);
        }
        
        //    COUNTRY WHERE THE CUSTOMER RESIDES.
        long lMstCountry () { return 3; };
        RWCString MstCountry (void)
        {
            return m_szMstCountry;
        }
        long MstCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstCountry, sizeof(m_szMstCountry), &m_bMstCountry);
        }
        
        //    FOREIGN ADDRESS INDICATOR
        long lForeignAddrInd () { return 1; };
        RWCString ForeignAddrInd (void)
        {
            return m_szForeignAddrInd;
        }
        long ForeignAddrInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szForeignAddrInd, sizeof(m_szForeignAddrInd), &m_bForeignAddrInd);
        }
        
        //    PREFIX OF SOCIAL SECURITY NUMBER OR TIN.
        long lMstSsnPrefix () { return 1; };
        RWCString MstSsnPrefix (void)
        {
            return m_szMstSsnPrefix;
        }
        long MstSsnPrefix (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSsnPrefix, sizeof(m_szMstSsnPrefix), &m_bMstSsnPrefix);
        }
        
        //    CUSTOMER'S SOCIAL SECURITY NUMBER OR TIN.
        long lMstSsnNumber () { return 9; };
        RWCString MstSsnNumber (void)
        {
            return m_szMstSsnNumber;
        }
        long MstSsnNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSsnNumber, sizeof(m_szMstSsnNumber), &m_bMstSsnNumber);
        }
        
        //    SUFFIX OF SOCIAL SECURITY NUMBER OR TIN.
        long lMstSsnSuffix () { return 1; };
        RWCString MstSsnSuffix (void)
        {
            return m_szMstSsnSuffix;
        }
        long MstSsnSuffix (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSsnSuffix, sizeof(m_szMstSsnSuffix), &m_bMstSsnSuffix);
        }
        
        //    INDICATES WHETHER TIN IS AN EIN, SSN, TIN, OR NOT AVAILABLE.
        long lMstSsCode () { return 1; };
        RWCString MstSsCode (void)
        {
            return m_szMstSsCode;
        }
        long MstSsCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstSsCode, sizeof(m_szMstSsCode), &m_bMstSsCode);
        }
        
        //    CUSTOMER'S BIRTH CENTURY OR CENTURY EST IF COMMERCIAL CUST.
        long lMstBirthCen () { return 2; };
        RWCString MstBirthCen (void)
        {
            return m_szMstBirthCen;
        }
        long MstBirthCen (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstBirthCen, sizeof(m_szMstBirthCen), &m_bMstBirthCen);
        }
        
        //    CUSTOMER'S BIRTH YEAR OR YEAR EST IF COMMERCIAL CUSTOMER.
        long lMstBirthYr () { return 2; };
        RWCString MstBirthYr (void)
        {
            return m_szMstBirthYr;
        }
        long MstBirthYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstBirthYr, sizeof(m_szMstBirthYr), &m_bMstBirthYr);
        }
        
        //    CUSTOMER'S BIRTH MONTH OR MONTH EST IF COMMERCIAL CUSTOMER.
        long lMstBirthMo () { return 2; };
        RWCString MstBirthMo (void)
        {
            return m_szMstBirthMo;
        }
        long MstBirthMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstBirthMo, sizeof(m_szMstBirthMo), &m_bMstBirthMo);
        }
        
        //    CUSTOMER'S DAY OF BIRTH OR DAY EST IF COMMERCIAL CUSTOMER.
        long lMstBirthDa () { return 2; };
        RWCString MstBirthDa (void)
        {
            return m_szMstBirthDa;
        }
        long MstBirthDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstBirthDa, sizeof(m_szMstBirthDa), &m_bMstBirthDa);
        }
        
        //    AREA CODE OF BUSINESS PHONE NUMBER.
        long lMstBusArea () { return 3; };
        RWCString MstBusArea (void)
        {
            return m_szMstBusArea;
        }
        long MstBusArea (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstBusArea, sizeof(m_szMstBusArea), &m_bMstBusArea);
        }
        
        //    BUSINESS PHONE NUMBER.
        long lMstBusPhone () { return 7; };
        RWCString MstBusPhone (void)
        {
            return m_szMstBusPhone;
        }
        long MstBusPhone (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstBusPhone, sizeof(m_szMstBusPhone), &m_bMstBusPhone);
        }
        
        //    EXTENSION OF BUSINESS PHONE NUMBER.
        long lMstBusExtn () { return 4; };
        RWCString MstBusExtn (void)
        {
            return m_szMstBusExtn;
        }
        long MstBusExtn (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstBusExtn, sizeof(m_szMstBusExtn), &m_bMstBusExtn);
        }
        
        //    AREA CODE OF CUSTOMER'S HOME PHONE NUMBER.
        long lMstHomeArea () { return 3; };
        RWCString MstHomeArea (void)
        {
            return m_szMstHomeArea;
        }
        long MstHomeArea (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstHomeArea, sizeof(m_szMstHomeArea), &m_bMstHomeArea);
        }
        
        //    CUSTOMER'S HOME PHONE NUMBER.
        long lMstHomePhone () { return 11; };
        RWCString MstHomePhone (void)
        {
            return m_szMstHomePhone;
        }
        long MstHomePhone (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstHomePhone, sizeof(m_szMstHomePhone), &m_bMstHomePhone);
        }
        
        //    CUSTOMER'S EMPLOYER.
        long lMstEmployer () { return 30; };
        RWCString MstEmployer (void)
        {
            return m_szMstEmployer;
        }
        long MstEmployer (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstEmployer, sizeof(m_szMstEmployer), &m_bMstEmployer);
        }
        
        //    CUSTOMER'S DRIVERS LICENSE NUMBER.
        long lMstDrvrsLcnse () { return 20; };
        RWCString MstDrvrsLcnse (void)
        {
            return m_szMstDrvrsLcnse;
        }
        long MstDrvrsLcnse (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstDrvrsLcnse, sizeof(m_szMstDrvrsLcnse), &m_bMstDrvrsLcnse);
        }
        
        //    INDICATES WHETHER THE CUSTOMER IS A VIP.
        long lMstVip () { return 1; };
        RWCString MstVip (void)
        {
            return m_szMstVip;
        }
        long MstVip (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstVip, sizeof(m_szMstVip), &m_bMstVip);
        }
        
        //    INDICATES WHETHER CUST IS OFFICER, EMPL, OR DIR OF INSTITUT.
        long lMstOffEmpDir () { return 1; };
        RWCString MstOffEmpDir (void)
        {
            return m_szMstOffEmpDir;
        }
        long MstOffEmpDir (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstOffEmpDir, sizeof(m_szMstOffEmpDir), &m_bMstOffEmpDir);
        }
        
        //    INDICATES WHETHER CUST IS A STOCKHOLDER OF THE INSTITUTION.
        long lMstStockholder () { return 1; };
        RWCString MstStockholder (void)
        {
            return m_szMstStockholder;
        }
        long MstStockholder (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstStockholder, sizeof(m_szMstStockholder), &m_bMstStockholder);
        }
        
        //    DATE WHEN THE ACCOUNT WAS LAST UPDATED.
        long lDateMaint () { return 8; };
        RWCString DateMaint (void)
        {
            return m_szDateMaint;
        }
        long DateMaint (const RWCString& rwc)
        {
            return SetString(rwc, m_szDateMaint, sizeof(m_szDateMaint), &m_bDateMaint);
        }
        
        //    BRANCH WHERE CUSTOMER HAS PRIMARY CONTACT.
        long lMstBranch () { return 3; };
        RWCString MstBranch (void)
        {
            return m_szMstBranch;
        }
        long MstBranch (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstBranch, sizeof(m_szMstBranch), &m_bMstBranch);
        }
        
        //    OFFICER WITH WHOM THE CUSTOMER HAS PRIMARY CONTACT.
        long lMstOfficer1 () { return 5; };
        RWCString MstOfficer1 (void)
        {
            return m_szMstOfficer1;
        }
        long MstOfficer1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMstOfficer1, sizeof(m_szMstOfficer1), &m_bMstOfficer1);
        }
        
        //    NUMBER OF RECORDS ACTUALLY STORED IN THE TRANSACTION DAG.
        long lNbrInTable () { return 4; };
        RWCString NbrInTable (void)
        {
            return m_szNbrInTable;
        }
        long NbrInTable (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrInTable, sizeof(m_szNbrInTable), &m_bNbrInTable);
        }
        
        //    INDICATES WHETHER ADDITIONAL SEGMENTS OR RECORDS EXIST.
        long lMoreInd () { return 1; };
        RWCString MoreInd (void)
        {
            return m_szMoreInd;
        }
        long MoreInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreInd, sizeof(m_szMoreInd), &m_bMoreInd);
        }
        
        long lFill0 () { return 30; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        long lFill1 () { return 30; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bErrCode) return true;
            if (m_bErrDesc) return true;
            if (m_bMstCifName) return true;
            if (m_bMstTitle) return true;
            if (m_bMstSalutation) return true;
            if (m_bMstSex) return true;
            if (m_bMstCustNo) return true;
            if (m_bMstCustType) return true;
            if (m_bZipcodeData) return true;
            if (m_bAddressData) return true;
            if (m_bStateData) return true;
            if (m_bMstCountry) return true;
            if (m_bForeignAddrInd) return true;
            if (m_bMstSsnPrefix) return true;
            if (m_bMstSsnNumber) return true;
            if (m_bMstSsnSuffix) return true;
            if (m_bMstSsCode) return true;
            if (m_bMstBirthCen) return true;
            if (m_bMstBirthYr) return true;
            if (m_bMstBirthMo) return true;
            if (m_bMstBirthDa) return true;
            if (m_bMstBusArea) return true;
            if (m_bMstBusPhone) return true;
            if (m_bMstBusExtn) return true;
            if (m_bMstHomeArea) return true;
            if (m_bMstHomePhone) return true;
            if (m_bMstEmployer) return true;
            if (m_bMstDrvrsLcnse) return true;
            if (m_bMstVip) return true;
            if (m_bMstOffEmpDir) return true;
            if (m_bMstStockholder) return true;
            if (m_bDateMaint) return true;
            if (m_bMstBranch) return true;
            if (m_bMstOfficer1) return true;
            if (m_bNbrInTable) return true;
            if (m_bMoreInd) return true;
            if (m_bFill0) return true;
            if (m_bFill1) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 5; lOccurs++)
            {
                if(CMstNaInfo[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 32; lOccurs++)
            {
                if(CTrlrData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVTRST02", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "ErrCode", m_szErrCode, &m_bErrCode);
                AddXMLField(pSess, "ErrDesc", m_szErrDesc, &m_bErrDesc);
                AddXMLField(pSess, "MstCifName", m_szMstCifName, &m_bMstCifName);
                AddXMLField(pSess, "MstTitle", m_szMstTitle, &m_bMstTitle);
                AddXMLField(pSess, "MstSalutation", m_szMstSalutation, &m_bMstSalutation);
                AddXMLField(pSess, "MstSex", m_szMstSex, &m_bMstSex);
                AddXMLField(pSess, "MstCustNo", m_szMstCustNo, &m_bMstCustNo);
                AddXMLField(pSess, "MstCustType", m_szMstCustType, &m_bMstCustType);
                AddXMLField(pSess, "ZipcodeData", m_szZipcodeData, &m_bZipcodeData);
                AddXMLField(pSess, "AddressData", m_szAddressData, &m_bAddressData);
                AddXMLField(pSess, "StateData", m_szStateData, &m_bStateData);
                AddXMLField(pSess, "MstCountry", m_szMstCountry, &m_bMstCountry);
                AddXMLField(pSess, "ForeignAddrInd", m_szForeignAddrInd, &m_bForeignAddrInd);
                AddXMLField(pSess, "MstSsnPrefix", m_szMstSsnPrefix, &m_bMstSsnPrefix);
                AddXMLField(pSess, "MstSsnNumber", m_szMstSsnNumber, &m_bMstSsnNumber);
                AddXMLField(pSess, "MstSsnSuffix", m_szMstSsnSuffix, &m_bMstSsnSuffix);
                AddXMLField(pSess, "MstSsCode", m_szMstSsCode, &m_bMstSsCode);
                AddXMLField(pSess, "MstBirthCen", m_szMstBirthCen, &m_bMstBirthCen);
                AddXMLField(pSess, "MstBirthYr", m_szMstBirthYr, &m_bMstBirthYr);
                AddXMLField(pSess, "MstBirthMo", m_szMstBirthMo, &m_bMstBirthMo);
                AddXMLField(pSess, "MstBirthDa", m_szMstBirthDa, &m_bMstBirthDa);
                AddXMLField(pSess, "MstBusArea", m_szMstBusArea, &m_bMstBusArea);
                AddXMLField(pSess, "MstBusPhone", m_szMstBusPhone, &m_bMstBusPhone);
                AddXMLField(pSess, "MstBusExtn", m_szMstBusExtn, &m_bMstBusExtn);
                AddXMLField(pSess, "MstHomeArea", m_szMstHomeArea, &m_bMstHomeArea);
                AddXMLField(pSess, "MstHomePhone", m_szMstHomePhone, &m_bMstHomePhone);
                AddXMLField(pSess, "MstEmployer", m_szMstEmployer, &m_bMstEmployer);
                AddXMLField(pSess, "MstDrvrsLcnse", m_szMstDrvrsLcnse, &m_bMstDrvrsLcnse);
                AddXMLField(pSess, "MstVip", m_szMstVip, &m_bMstVip);
                AddXMLField(pSess, "MstOffEmpDir", m_szMstOffEmpDir, &m_bMstOffEmpDir);
                AddXMLField(pSess, "MstStockholder", m_szMstStockholder, &m_bMstStockholder);
                AddXMLField(pSess, "DateMaint", m_szDateMaint, &m_bDateMaint);
                AddXMLField(pSess, "MstBranch", m_szMstBranch, &m_bMstBranch);
                AddXMLField(pSess, "MstOfficer1", m_szMstOfficer1, &m_bMstOfficer1);
                AddXMLField(pSess, "NbrInTable", m_szNbrInTable, &m_bNbrInTable);
                AddXMLField(pSess, "MoreInd", m_szMoreInd, &m_bMoreInd);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 5; lOccurs++)
                {
                    CMstNaInfo[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 32; lOccurs++)
                {
                    CTrlrData[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "WVTRST02");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVTRST02", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "ErrCode", m_szErrCode);
                GetXMLField(pSess, "ErrDesc", m_szErrDesc);
                GetXMLField(pSess, "MstCifName", m_szMstCifName);
                GetXMLField(pSess, "MstTitle", m_szMstTitle);
                GetXMLField(pSess, "MstSalutation", m_szMstSalutation);
                GetXMLField(pSess, "MstSex", m_szMstSex);
                GetXMLField(pSess, "MstCustNo", m_szMstCustNo);
                GetXMLField(pSess, "MstCustType", m_szMstCustType);
                GetXMLField(pSess, "ZipcodeData", m_szZipcodeData);
                GetXMLField(pSess, "AddressData", m_szAddressData);
                GetXMLField(pSess, "StateData", m_szStateData);
                GetXMLField(pSess, "MstCountry", m_szMstCountry);
                GetXMLField(pSess, "ForeignAddrInd", m_szForeignAddrInd);
                GetXMLField(pSess, "MstSsnPrefix", m_szMstSsnPrefix);
                GetXMLField(pSess, "MstSsnNumber", m_szMstSsnNumber);
                GetXMLField(pSess, "MstSsnSuffix", m_szMstSsnSuffix);
                GetXMLField(pSess, "MstSsCode", m_szMstSsCode);
                GetXMLField(pSess, "MstBirthCen", m_szMstBirthCen);
                GetXMLField(pSess, "MstBirthYr", m_szMstBirthYr);
                GetXMLField(pSess, "MstBirthMo", m_szMstBirthMo);
                GetXMLField(pSess, "MstBirthDa", m_szMstBirthDa);
                GetXMLField(pSess, "MstBusArea", m_szMstBusArea);
                GetXMLField(pSess, "MstBusPhone", m_szMstBusPhone);
                GetXMLField(pSess, "MstBusExtn", m_szMstBusExtn);
                GetXMLField(pSess, "MstHomeArea", m_szMstHomeArea);
                GetXMLField(pSess, "MstHomePhone", m_szMstHomePhone);
                GetXMLField(pSess, "MstEmployer", m_szMstEmployer);
                GetXMLField(pSess, "MstDrvrsLcnse", m_szMstDrvrsLcnse);
                GetXMLField(pSess, "MstVip", m_szMstVip);
                GetXMLField(pSess, "MstOffEmpDir", m_szMstOffEmpDir);
                GetXMLField(pSess, "MstStockholder", m_szMstStockholder);
                GetXMLField(pSess, "DateMaint", m_szDateMaint);
                GetXMLField(pSess, "MstBranch", m_szMstBranch);
                GetXMLField(pSess, "MstOfficer1", m_szMstOfficer1);
                GetXMLField(pSess, "NbrInTable", m_szNbrInTable);
                GetXMLField(pSess, "MoreInd", m_szMoreInd);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "Fill1", m_szFill1);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 5; lOccurs++)
                {
                    CMstNaInfo[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 32; lOccurs++)
                {
                    CTrlrData[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "WVTRST02");
            };
        }
        
        //**************** Start AsdMstNaInfo Definition ****************
        //                 NAME AND ADDRESS INFORMATION
        
        class AsdMstNaInfo
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bMstNaType;
            char      m_szMstNaType[1+1];
            bool      m_bMstNaSeq;
            char      m_szMstNaSeq[1+1];
            bool      m_bMstNaLine;
            char      m_szMstNaLine[40+1];
        
          public:
            long      m_lIndex;

            AsdMstNaInfo ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bMstNaType = false;
                strcpy(m_szMstNaType, "");
                m_bMstNaSeq = false;
                strcpy(m_szMstNaSeq, "");
                m_bMstNaLine = false;
                strcpy(m_szMstNaLine, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    INDICATES WHETHER NAME/ADDR LINE CONTAINS NAME OR ADDR INFO.
            long lMstNaType () { return 1; };
            RWCString MstNaType (void)
            {
                return m_szMstNaType;
            }
            long MstNaType (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstNaType, sizeof(m_szMstNaType), &m_bMstNaType);
            }
            
            //    SEQUENCE NUMBER THAT IDENTIFIES EACH ADDRESS OR NAME LINE.
            long lMstNaSeq () { return 1; };
            RWCString MstNaSeq (void)
            {
                return m_szMstNaSeq;
            }
            long MstNaSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstNaSeq, sizeof(m_szMstNaSeq), &m_bMstNaSeq);
            }
            
            //    EITHER NAME OR ADDRESS INFO AS DEFINED BY NAME/ADDRESS TYPE.
            long lMstNaLine () { return 40; };
            RWCString MstNaLine (void)
            {
                return m_szMstNaLine;
            }
            long MstNaLine (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstNaLine, sizeof(m_szMstNaLine), &m_bMstNaLine);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bMstNaType) return true;
                if (m_bMstNaSeq) return true;
                if (m_bMstNaLine) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MstNaInfo", m_lIndex);
                    AddXMLField(pSess, "MstNaType", m_szMstNaType, &m_bMstNaType);
                    AddXMLField(pSess, "MstNaSeq", m_szMstNaSeq, &m_bMstNaSeq);
                    AddXMLField(pSess, "MstNaLine", m_szMstNaLine, &m_bMstNaLine);
                    AddXMLCloseRecord(pSess, "MstNaInfo");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MstNaInfo", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "MstNaType", m_szMstNaType);
                    GetXMLField(pSess, "MstNaSeq", m_szMstNaSeq);
                    GetXMLField(pSess, "MstNaLine", m_szMstNaLine);
                    CloseXMLRecord(pSess, "MstNaInfo");
                };
            }
        };

        AsdMstNaInfo  CMstNaInfo[5];
        AsdMstNaInfo *MstNaInfo[5];
        
        //**************** End AsdMstNaInfo Definition ****************
        
        
        //**************** Start AsdTrlrData Definition ****************
        //                 TRAILER DATA
        
        class AsdTrlrData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bTrlrErrCode;
            char      m_szTrlrErrCode[4+1];
            bool      m_bOlApplicCode;
            char      m_szOlApplicCode[2+1];
            bool      m_bOlApplicRel;
            char      m_szOlApplicRel[2+1];
            bool      m_bOlCtls;
            char      m_szOlCtls[37+1];
            bool      m_bOlStatus;
            char      m_szOlStatus[2+1];
            bool      m_bOlAcctType;
            char      m_szOlAcctType[3+1];
            bool      m_bOlBal;
            char      m_szOlBal[17+1];
            bool      m_bWmsIntlCurrCode;
            char      m_szWmsIntlCurrCode[3+1];
            bool      m_bWmsIntlCurrDec;
            char      m_szWmsIntlCurrDec[1+1];
        
          public:
            long      m_lIndex;

            AsdTrlrData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bTrlrErrCode = false;
                strcpy(m_szTrlrErrCode, "");
                m_bOlApplicCode = false;
                strcpy(m_szOlApplicCode, "");
                m_bOlApplicRel = false;
                strcpy(m_szOlApplicRel, "");
                m_bOlCtls = false;
                strcpy(m_szOlCtls, "");
                m_bOlStatus = false;
                strcpy(m_szOlStatus, "");
                m_bOlAcctType = false;
                strcpy(m_szOlAcctType, "");
                m_bOlBal = false;
                strcpy(m_szOlBal, "+0000000000000.00");
                m_bWmsIntlCurrCode = false;
                strcpy(m_szWmsIntlCurrCode, "");
                m_bWmsIntlCurrDec = false;
                strcpy(m_szWmsIntlCurrDec, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    ERROR MESSAGE CODE WHEN PROCESSING TRAILER INFORMATION.
            long lTrlrErrCode () { return 4; };
            RWCString TrlrErrCode (void)
            {
                return m_szTrlrErrCode;
            }
            long TrlrErrCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrlrErrCode, sizeof(m_szTrlrErrCode), &m_bTrlrErrCode);
            }
            
            //    APPLICATION CODE FOR ACCOUNT THAT IS TIED TO THE CUSTOMER.
            long lOlApplicCode () { return 2; };
            RWCString OlApplicCode (void)
            {
                return m_szOlApplicCode;
            }
            long OlApplicCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szOlApplicCode, sizeof(m_szOlApplicCode), &m_bOlApplicCode);
            }
            
            //    CUSTOMER'S RELATIONSHIP TO THE TRAILER.
            long lOlApplicRel () { return 2; };
            RWCString OlApplicRel (void)
            {
                return m_szOlApplicRel;
            }
            long OlApplicRel (const RWCString& rwc)
            {
                return SetString(rwc, m_szOlApplicRel, sizeof(m_szOlApplicRel), &m_bOlApplicRel);
            }
            
            //    ACCOUNT NUMBER AND CONTROL NUMBERS FOR THE ACCOUNT.
            long lOlCtls () { return 37; };
            RWCString OlCtls (void)
            {
                return m_szOlCtls;
            }
            long OlCtls (const RWCString& rwc)
            {
                return SetString(rwc, m_szOlCtls, sizeof(m_szOlCtls), &m_bOlCtls);
            }
            
            //    USER-DEFINED CODE INDICATING THE ACCOUNT'S STATUS.
            long lOlStatus () { return 2; };
            RWCString OlStatus (void)
            {
                return m_szOlStatus;
            }
            long OlStatus (const RWCString& rwc)
            {
                return SetString(rwc, m_szOlStatus, sizeof(m_szOlStatus), &m_bOlStatus);
            }
            
            //    TYPE OF PRODUCT FOR THE ACCOUNT.
            long lOlAcctType () { return 3; };
            RWCString OlAcctType (void)
            {
                return m_szOlAcctType;
            }
            long OlAcctType (const RWCString& rwc)
            {
                return SetString(rwc, m_szOlAcctType, sizeof(m_szOlAcctType), &m_bOlAcctType);
            }
            
            //    ONLINE BALANCE.
            long lOlBal () { return 17; };
            RWCString OlBal (void)
            {
                return AceZeroSupp(m_szOlBal, &m_szSuppressBuff[0]);
            }
            RWCString OlBalRaw (void)
            {
                return m_szOlBal;
            }
            long OlBal (const RWCString& rwc)
            {
                return SetString(rwc, m_szOlBal, sizeof(m_szOlBal), &m_bOlBal);
            }
            
            //    CURRENCY FOR THE ACCOUNT (U.S. DOLLARS, JAPANESE YEN, ETC.).
            long lWmsIntlCurrCode () { return 3; };
            RWCString WmsIntlCurrCode (void)
            {
                return m_szWmsIntlCurrCode;
            }
            long WmsIntlCurrCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsIntlCurrCode, sizeof(m_szWmsIntlCurrCode), &m_bWmsIntlCurrCode);
            }
            
            //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY.
            long lWmsIntlCurrDec () { return 1; };
            RWCString WmsIntlCurrDec (void)
            {
                return m_szWmsIntlCurrDec;
            }
            long WmsIntlCurrDec (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsIntlCurrDec, sizeof(m_szWmsIntlCurrDec), &m_bWmsIntlCurrDec);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bTrlrErrCode) return true;
                if (m_bOlApplicCode) return true;
                if (m_bOlApplicRel) return true;
                if (m_bOlCtls) return true;
                if (m_bOlStatus) return true;
                if (m_bOlAcctType) return true;
                if (m_bOlBal) return true;
                if (m_bWmsIntlCurrCode) return true;
                if (m_bWmsIntlCurrDec) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "TrlrData", m_lIndex);
                    AddXMLField(pSess, "TrlrErrCode", m_szTrlrErrCode, &m_bTrlrErrCode);
                    AddXMLField(pSess, "OlApplicCode", m_szOlApplicCode, &m_bOlApplicCode);
                    AddXMLField(pSess, "OlApplicRel", m_szOlApplicRel, &m_bOlApplicRel);
                    AddXMLField(pSess, "OlCtls", m_szOlCtls, &m_bOlCtls);
                    AddXMLField(pSess, "OlStatus", m_szOlStatus, &m_bOlStatus);
                    AddXMLField(pSess, "OlAcctType", m_szOlAcctType, &m_bOlAcctType);
                    AddXMLField(pSess, "OlBal", m_szOlBal, &m_bOlBal);
                    AddXMLField(pSess, "WmsIntlCurrCode", m_szWmsIntlCurrCode, &m_bWmsIntlCurrCode);
                    AddXMLField(pSess, "WmsIntlCurrDec", m_szWmsIntlCurrDec, &m_bWmsIntlCurrDec);
                    AddXMLCloseRecord(pSess, "TrlrData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "TrlrData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "TrlrErrCode", m_szTrlrErrCode);
                    GetXMLField(pSess, "OlApplicCode", m_szOlApplicCode);
                    GetXMLField(pSess, "OlApplicRel", m_szOlApplicRel);
                    GetXMLField(pSess, "OlCtls", m_szOlCtls);
                    GetXMLField(pSess, "OlStatus", m_szOlStatus);
                    GetXMLField(pSess, "OlAcctType", m_szOlAcctType);
                    GetXMLField(pSess, "OlBal", m_szOlBal);
                    GetXMLField(pSess, "WmsIntlCurrCode", m_szWmsIntlCurrCode);
                    GetXMLField(pSess, "WmsIntlCurrDec", m_szWmsIntlCurrDec);
                    CloseXMLRecord(pSess, "TrlrData");
                };
            }
        };

        AsdTrlrData  CTrlrData[32];
        AsdTrlrData *TrlrData[32];
        
        //**************** End AsdTrlrData Definition ****************
        
    };

    AsdWVTRST02 CWVTRST02;
    AsdWVTRST02 *WVTRST02;
    
    //**************** End AsdWVTRST02 Definition ****************

    
    //**************** Start AsdWVTRST03 Definition ****************
    //                 OUTPUT FROM ACCOUNT NUMBER SEARCH                           
    
    //    WVTRST03.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:34
    class AsdWVTRST03
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMoreInd;
        char      m_szMoreInd[1+1];
        bool      m_bErrCode;
        char      m_szErrCode[4+1];
        bool      m_bErrDesc;
        char      m_szErrDesc[40+1];
        bool      m_bNbrInTable;
        char      m_szNbrInTable[4+1];
        bool      m_bFill0;
        char      m_szFill0[30+1];
        bool      m_bFill1;
        char      m_szFill1[30+1];
    
      public:
        long      m_lIndex;

        AsdWVTRST03 ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMoreInd = false;
            strcpy(m_szMoreInd, "");
            m_bErrCode = false;
            strcpy(m_szErrCode, "");
            m_bErrDesc = false;
            strcpy(m_szErrDesc, "");
            m_bNbrInTable = false;
            strcpy(m_szNbrInTable, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 10; lOccurs++)
            {
                CustData[lOccurs]  = &CCustData[lOccurs];
                CCustData[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMoreInd = false;
            strcpy(m_szMoreInd, "");
            m_bErrCode = false;
            strcpy(m_szErrCode, "");
            m_bErrDesc = false;
            strcpy(m_szErrDesc, "");
            m_bNbrInTable = false;
            strcpy(m_szNbrInTable, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 10; lOccurs++)
            {
                CustData[lOccurs]  = &CCustData[lOccurs];
                CCustData[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    MORE ENTRIES IN TABLE FLAG
        long lMoreInd () { return 1; };
        RWCString MoreInd (void)
        {
            return m_szMoreInd;
        }
        long MoreInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreInd, sizeof(m_szMoreInd), &m_bMoreInd);
        }
        
        //    ERROR CODE
        long lErrCode () { return 4; };
        RWCString ErrCode (void)
        {
            return m_szErrCode;
        }
        long ErrCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szErrCode, sizeof(m_szErrCode), &m_bErrCode);
        }
        
        //    ERROR DESCRIPTION
        long lErrDesc () { return 40; };
        RWCString ErrDesc (void)
        {
            return m_szErrDesc;
        }
        long ErrDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szErrDesc, sizeof(m_szErrDesc), &m_bErrDesc);
        }
        
        //    NUMBER OF ENTRIES IN THE TABLE
        long lNbrInTable () { return 4; };
        RWCString NbrInTable (void)
        {
            return m_szNbrInTable;
        }
        long NbrInTable (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrInTable, sizeof(m_szNbrInTable), &m_bNbrInTable);
        }
        
        long lFill0 () { return 30; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        long lFill1 () { return 30; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMoreInd) return true;
            if (m_bErrCode) return true;
            if (m_bErrDesc) return true;
            if (m_bNbrInTable) return true;
            if (m_bFill0) return true;
            if (m_bFill1) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 10; lOccurs++)
            {
                if(CCustData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVTRST03", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MoreInd", m_szMoreInd, &m_bMoreInd);
                AddXMLField(pSess, "ErrCode", m_szErrCode, &m_bErrCode);
                AddXMLField(pSess, "ErrDesc", m_szErrDesc, &m_bErrDesc);
                AddXMLField(pSess, "NbrInTable", m_szNbrInTable, &m_bNbrInTable);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 10; lOccurs++)
                {
                    CCustData[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "WVTRST03");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVTRST03", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MoreInd", m_szMoreInd);
                GetXMLField(pSess, "ErrCode", m_szErrCode);
                GetXMLField(pSess, "ErrDesc", m_szErrDesc);
                GetXMLField(pSess, "NbrInTable", m_szNbrInTable);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "Fill1", m_szFill1);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 10; lOccurs++)
                {
                    CCustData[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "WVTRST03");
            };
        }
        
        //**************** Start AsdCustData Definition ****************
        //                 CUSTOMER DATA
        
        class AsdCustData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bTrlrErrCode;
            char      m_szTrlrErrCode[4+1];
            bool      m_bMstUserNo;
            char      m_szMstUserNo[2+1];
            bool      m_bMstCtl2;
            char      m_szMstCtl2[3+1];
            bool      m_bMstCtl3;
            char      m_szMstCtl3[3+1];
            bool      m_bMstCtl4;
            char      m_szMstCtl4[4+1];
            bool      m_bMstCustNo;
            char      m_szMstCustNo[10+1];
            bool      m_bMstCifName;
            char      m_szMstCifName[40+1];
        
          public:
            long      m_lIndex;

            AsdCustData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bTrlrErrCode = false;
                strcpy(m_szTrlrErrCode, "");
                m_bMstUserNo = false;
                strcpy(m_szMstUserNo, "");
                m_bMstCtl2 = false;
                strcpy(m_szMstCtl2, "");
                m_bMstCtl3 = false;
                strcpy(m_szMstCtl3, "");
                m_bMstCtl4 = false;
                strcpy(m_szMstCtl4, "");
                m_bMstCustNo = false;
                strcpy(m_szMstCustNo, "");
                m_bMstCifName = false;
                strcpy(m_szMstCifName, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    TRAILER ERROR CODE
            long lTrlrErrCode () { return 4; };
            RWCString TrlrErrCode (void)
            {
                return m_szTrlrErrCode;
            }
            long TrlrErrCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrlrErrCode, sizeof(m_szTrlrErrCode), &m_bTrlrErrCode);
            }
            
            //    MASTER USER NUMBER
            long lMstUserNo () { return 2; };
            RWCString MstUserNo (void)
            {
                return m_szMstUserNo;
            }
            long MstUserNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstUserNo, sizeof(m_szMstUserNo), &m_bMstUserNo);
            }
            
            //    MASTER CONTROL 2
            long lMstCtl2 () { return 3; };
            RWCString MstCtl2 (void)
            {
                return m_szMstCtl2;
            }
            long MstCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstCtl2, sizeof(m_szMstCtl2), &m_bMstCtl2);
            }
            
            //    MASTER CONTROL 3
            long lMstCtl3 () { return 3; };
            RWCString MstCtl3 (void)
            {
                return m_szMstCtl3;
            }
            long MstCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstCtl3, sizeof(m_szMstCtl3), &m_bMstCtl3);
            }
            
            //    MASTER CONTROL 4
            long lMstCtl4 () { return 4; };
            RWCString MstCtl4 (void)
            {
                return m_szMstCtl4;
            }
            long MstCtl4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstCtl4, sizeof(m_szMstCtl4), &m_bMstCtl4);
            }
            
            //    MASTER CUSTOMER NUMBER
            long lMstCustNo () { return 10; };
            RWCString MstCustNo (void)
            {
                return m_szMstCustNo;
            }
            long MstCustNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstCustNo, sizeof(m_szMstCustNo), &m_bMstCustNo);
            }
            
            //    CUSTOMER NAME
            long lMstCifName () { return 40; };
            RWCString MstCifName (void)
            {
                return m_szMstCifName;
            }
            long MstCifName (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstCifName, sizeof(m_szMstCifName), &m_bMstCifName);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bTrlrErrCode) return true;
                if (m_bMstUserNo) return true;
                if (m_bMstCtl2) return true;
                if (m_bMstCtl3) return true;
                if (m_bMstCtl4) return true;
                if (m_bMstCustNo) return true;
                if (m_bMstCifName) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "CustData", m_lIndex);
                    AddXMLField(pSess, "TrlrErrCode", m_szTrlrErrCode, &m_bTrlrErrCode);
                    AddXMLField(pSess, "MstUserNo", m_szMstUserNo, &m_bMstUserNo);
                    AddXMLField(pSess, "MstCtl2", m_szMstCtl2, &m_bMstCtl2);
                    AddXMLField(pSess, "MstCtl3", m_szMstCtl3, &m_bMstCtl3);
                    AddXMLField(pSess, "MstCtl4", m_szMstCtl4, &m_bMstCtl4);
                    AddXMLField(pSess, "MstCustNo", m_szMstCustNo, &m_bMstCustNo);
                    AddXMLField(pSess, "MstCifName", m_szMstCifName, &m_bMstCifName);
                    AddXMLCloseRecord(pSess, "CustData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "CustData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "TrlrErrCode", m_szTrlrErrCode);
                    GetXMLField(pSess, "MstUserNo", m_szMstUserNo);
                    GetXMLField(pSess, "MstCtl2", m_szMstCtl2);
                    GetXMLField(pSess, "MstCtl3", m_szMstCtl3);
                    GetXMLField(pSess, "MstCtl4", m_szMstCtl4);
                    GetXMLField(pSess, "MstCustNo", m_szMstCustNo);
                    GetXMLField(pSess, "MstCifName", m_szMstCifName);
                    CloseXMLRecord(pSess, "CustData");
                };
            }
        };

        AsdCustData  CCustData[10];
        AsdCustData *CustData[10];
        
        //**************** End AsdCustData Definition ****************
        
    };

    AsdWVTRST03 CWVTRST03;
    AsdWVTRST03 *WVTRST03;
    
    //**************** End AsdWVTRST03 Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdWVPCIFMSData Definition ****************

typedef AsdWVPCIFMSData *LPWVPCIFMS;
typedef AsdWVPCIFMSData::AsdTSHeader *LPWVPCIFMS_TSHeader;
typedef AsdWVPCIFMSData::AsdWVTRCLPR *LPWVPCIFMS_WVTRCLPR;
typedef AsdWVPCIFMSData::AsdWVTRST01 *LPWVPCIFMS_WVTRST01;
typedef AsdWVPCIFMSData::AsdWVTRST02 *LPWVPCIFMS_WVTRST02;
typedef AsdWVPCIFMSData::AsdWVTRST02::AsdMstNaInfo *LPWVPCIFMS_WVTRST02_MstNaInfo;
typedef AsdWVPCIFMSData::AsdWVTRST02::AsdTrlrData *LPWVPCIFMS_WVTRST02_TrlrData;
typedef AsdWVPCIFMSData::AsdWVTRST03 *LPWVPCIFMS_WVTRST03;
typedef AsdWVPCIFMSData::AsdWVTRST03::AsdCustData *LPWVPCIFMS_WVTRST03_CustData;
typedef AsdWVPCIFMSData::AsdTSMDA *LPWVPCIFMS_TSMDA;
typedef AsdWVPCIFMSData::AsdTSMDA::AsdMdaTrmMsg *LPWVPCIFMS_TSMDA_MdaTrmMsg;
typedef AsdWVPCIFMSData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPWVPCIFMS_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdWVPCIFMSData_H

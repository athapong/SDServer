#ifndef AsdSDPCSP80Data_H
#define AsdSDPCSP80Data_H

#include <stdlib.h>
#ifdef  AsdSDPCSP80_INTEGRITY_STRING
#undef  AsdSDPCSP80_INTEGRITY_STRING
#endif
#define AsdSDPCSP80_INTEGRITY_STRING        ""

#ifdef  AsdSDPCSP80_CRC_STRING
#undef  AsdSDPCSP80_CRC_STRING
#endif
#define AsdSDPCSP80_CRC_STRING "1313200458"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCSP80Data Definition ****************
//                 ST Monetary

//                 SDPCSP80Data.h generated by AceGen2 ver. 2.5.09

class AsdSDPCSP80Data
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCSP80Data ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCSP80.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCSP80_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDSTCMMI = &CSDSTCMMI;
        SDSTMYMI = &CSDSTMYMI;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCSP80Data ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDSTCMMI.Reinit();
            CSDSTMYMI.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCSP80_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSP80_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDSTCMMI.Save(&m_Sess);
        CSDSTMYMI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCSP80", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDSTCMMI.Load(&m_Sess);
                        CSDSTMYMI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCSP80");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSP80_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDSTCMMI.Save(&m_Sess);
        CSDSTMYMI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCSP80", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDSTCMMI.Load(&m_Sess);
                        CSDSTMYMI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCSP80");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSP80_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDSTCMMI Definition ****************
    //                 ST STANDARD COMMUNICATION AREA                              
    
    //    SDSTCMMI.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:20
    class AsdSDSTCMMI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bZ2ndTimeThru;
        char      m_szZ2ndTimeThru[1+1];
        bool      m_bStmastPtr;
        char      m_szStmastPtr[4+1];
        bool      m_bStmCtl1;
        char      m_szStmCtl1[2+1];
        bool      m_bStmCtl2;
        char      m_szStmCtl2[3+1];
        bool      m_bStmCtl3;
        char      m_szStmCtl3[3+1];
        bool      m_bStmCtl4;
        char      m_szStmCtl4[3+1];
        bool      m_bStmAcctNo;
        char      m_szStmAcctNo[14+1];
        bool      m_bCtl1;
        char      m_szCtl1[2+1];
        bool      m_bCtl2;
        char      m_szCtl2[3+1];
        bool      m_bCtl3;
        char      m_szCtl3[3+1];
        bool      m_bCtl4;
        char      m_szCtl4[3+1];
        bool      m_bPkPlanId;
        char      m_szPkPlanId[12+1];
        bool      m_bPkSeqNbr;
        char      m_szPkSeqNbr[3+1];
        bool      m_bPkEmployeeId;
        char      m_szPkEmployeeId[12+1];
        bool      m_bDept;
        char      m_szDept[3+1];
        bool      m_bBatch;
        char      m_szBatch[5+1];
        bool      m_bTranAmount;
        char      m_szTranAmount[15+1];
        bool      m_bTranCode;
        char      m_szTranCode[2+1];
        bool      m_bDrcrFlag;
        char      m_szDrcrFlag[1+1];
        bool      m_bUserTranCode;
        char      m_szUserTranCode[4+1];
        bool      m_bPrevExtlTranCd;
        char      m_szPrevExtlTranCd[8+1];
        bool      m_bCurExtlTranCd;
        char      m_szCurExtlTranCd[8+1];
        bool      m_bNxtExtlTranCd;
        char      m_szNxtExtlTranCd[8+1];
        bool      m_bSimulatedTranCd;
        char      m_szSimulatedTranCd[8+1];
        bool      m_bSmProcCd;
        char      m_szSmProcCd[1+1];
        bool      m_bAddedDt;
        char      m_szAddedDt[8+1];
        bool      m_bCurrDec;
        char      m_szCurrDec[1+1];
        bool      m_bReturnToAlphaFlag;
        char      m_szReturnToAlphaFlag[1+1];
        bool      m_bPrevMaintDt;
        char      m_szPrevMaintDt[8+1];
        bool      m_bPrevMaintTime;
        char      m_szPrevMaintTime[6+1];
        bool      m_bPrevMaintEmpCtl1;
        char      m_szPrevMaintEmpCtl1[2+1];
        bool      m_bPrevMaintEmpCtl2;
        char      m_szPrevMaintEmpCtl2[3+1];
        bool      m_bPrevMaintEmpId;
        char      m_szPrevMaintEmpId[8+1];
        bool      m_bLstLogTrmId;
        char      m_szLstLogTrmId[8+1];
        bool      m_bPrevMenuAcctKey;
        char      m_szPrevMenuAcctKey[25+1];
        bool      m_bPrevMenuTranId;
        char      m_szPrevMenuTranId[8+1];
        bool      m_bPrevMenuBeginKey;
        char      m_szPrevMenuBeginKey[100+1];
        bool      m_bPrevMenuEndKey;
        char      m_szPrevMenuEndKey[100+1];
        bool      m_bPrevMenuSelKey;
        char      m_szPrevMenuSelKey[100+1];
        bool      m_bPassModelDistBal;
        char      m_szPassModelDistBal[15+1];
    
      public:
        long      m_lIndex;

        AsdSDSTCMMI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bZ2ndTimeThru = false;
            strcpy(m_szZ2ndTimeThru, "");
            m_bStmastPtr = false;
            strcpy(m_szStmastPtr, "0000");
            m_bStmCtl1 = false;
            strcpy(m_szStmCtl1, "");
            m_bStmCtl2 = false;
            strcpy(m_szStmCtl2, "");
            m_bStmCtl3 = false;
            strcpy(m_szStmCtl3, "");
            m_bStmCtl4 = false;
            strcpy(m_szStmCtl4, "");
            m_bStmAcctNo = false;
            strcpy(m_szStmAcctNo, "");
            m_bCtl1 = false;
            strcpy(m_szCtl1, "00");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "000");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "000");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "000");
            m_bPkPlanId = false;
            strcpy(m_szPkPlanId, "");
            m_bPkSeqNbr = false;
            strcpy(m_szPkSeqNbr, "");
            m_bPkEmployeeId = false;
            strcpy(m_szPkEmployeeId, "");
            m_bDept = false;
            strcpy(m_szDept, "000");
            m_bBatch = false;
            strcpy(m_szBatch, "00000");
            m_bTranAmount = false;
            strcpy(m_szTranAmount, "000000000000000");
            m_bTranCode = false;
            strcpy(m_szTranCode, "");
            m_bDrcrFlag = false;
            strcpy(m_szDrcrFlag, "");
            m_bUserTranCode = false;
            strcpy(m_szUserTranCode, "0000");
            m_bPrevExtlTranCd = false;
            strcpy(m_szPrevExtlTranCd, "");
            m_bCurExtlTranCd = false;
            strcpy(m_szCurExtlTranCd, "");
            m_bNxtExtlTranCd = false;
            strcpy(m_szNxtExtlTranCd, "");
            m_bSimulatedTranCd = false;
            strcpy(m_szSimulatedTranCd, "0");
            m_bSmProcCd = false;
            strcpy(m_szSmProcCd, "");
            m_bAddedDt = false;
            strcpy(m_szAddedDt, "");
            m_bCurrDec = false;
            strcpy(m_szCurrDec, "");
            m_bReturnToAlphaFlag = false;
            strcpy(m_szReturnToAlphaFlag, "");
            m_bPrevMaintDt = false;
            strcpy(m_szPrevMaintDt, "");
            m_bPrevMaintTime = false;
            strcpy(m_szPrevMaintTime, "");
            m_bPrevMaintEmpCtl1 = false;
            strcpy(m_szPrevMaintEmpCtl1, "");
            m_bPrevMaintEmpCtl2 = false;
            strcpy(m_szPrevMaintEmpCtl2, "");
            m_bPrevMaintEmpId = false;
            strcpy(m_szPrevMaintEmpId, "");
            m_bLstLogTrmId = false;
            strcpy(m_szLstLogTrmId, "");
            m_bPrevMenuAcctKey = false;
            strcpy(m_szPrevMenuAcctKey, "");
            m_bPrevMenuTranId = false;
            strcpy(m_szPrevMenuTranId, "");
            m_bPrevMenuBeginKey = false;
            strcpy(m_szPrevMenuBeginKey, "");
            m_bPrevMenuEndKey = false;
            strcpy(m_szPrevMenuEndKey, "");
            m_bPrevMenuSelKey = false;
            strcpy(m_szPrevMenuSelKey, "");
            m_bPassModelDistBal = false;
            strcpy(m_szPassModelDistBal, "000000000000000");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bZ2ndTimeThru = false;
            strcpy(m_szZ2ndTimeThru, "");
            m_bStmastPtr = false;
            strcpy(m_szStmastPtr, "0000");
            m_bStmCtl1 = false;
            strcpy(m_szStmCtl1, "");
            m_bStmCtl2 = false;
            strcpy(m_szStmCtl2, "");
            m_bStmCtl3 = false;
            strcpy(m_szStmCtl3, "");
            m_bStmCtl4 = false;
            strcpy(m_szStmCtl4, "");
            m_bStmAcctNo = false;
            strcpy(m_szStmAcctNo, "");
            m_bCtl1 = false;
            strcpy(m_szCtl1, "00");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "000");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "000");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "000");
            m_bPkPlanId = false;
            strcpy(m_szPkPlanId, "");
            m_bPkSeqNbr = false;
            strcpy(m_szPkSeqNbr, "");
            m_bPkEmployeeId = false;
            strcpy(m_szPkEmployeeId, "");
            m_bDept = false;
            strcpy(m_szDept, "000");
            m_bBatch = false;
            strcpy(m_szBatch, "00000");
            m_bTranAmount = false;
            strcpy(m_szTranAmount, "000000000000000");
            m_bTranCode = false;
            strcpy(m_szTranCode, "");
            m_bDrcrFlag = false;
            strcpy(m_szDrcrFlag, "");
            m_bUserTranCode = false;
            strcpy(m_szUserTranCode, "0000");
            m_bPrevExtlTranCd = false;
            strcpy(m_szPrevExtlTranCd, "");
            m_bCurExtlTranCd = false;
            strcpy(m_szCurExtlTranCd, "");
            m_bNxtExtlTranCd = false;
            strcpy(m_szNxtExtlTranCd, "");
            m_bSimulatedTranCd = false;
            strcpy(m_szSimulatedTranCd, "0");
            m_bSmProcCd = false;
            strcpy(m_szSmProcCd, "");
            m_bAddedDt = false;
            strcpy(m_szAddedDt, "");
            m_bCurrDec = false;
            strcpy(m_szCurrDec, "");
            m_bReturnToAlphaFlag = false;
            strcpy(m_szReturnToAlphaFlag, "");
            m_bPrevMaintDt = false;
            strcpy(m_szPrevMaintDt, "");
            m_bPrevMaintTime = false;
            strcpy(m_szPrevMaintTime, "");
            m_bPrevMaintEmpCtl1 = false;
            strcpy(m_szPrevMaintEmpCtl1, "");
            m_bPrevMaintEmpCtl2 = false;
            strcpy(m_szPrevMaintEmpCtl2, "");
            m_bPrevMaintEmpId = false;
            strcpy(m_szPrevMaintEmpId, "");
            m_bLstLogTrmId = false;
            strcpy(m_szLstLogTrmId, "");
            m_bPrevMenuAcctKey = false;
            strcpy(m_szPrevMenuAcctKey, "");
            m_bPrevMenuTranId = false;
            strcpy(m_szPrevMenuTranId, "");
            m_bPrevMenuBeginKey = false;
            strcpy(m_szPrevMenuBeginKey, "");
            m_bPrevMenuEndKey = false;
            strcpy(m_szPrevMenuEndKey, "");
            m_bPrevMenuSelKey = false;
            strcpy(m_szPrevMenuSelKey, "");
            m_bPassModelDistBal = false;
            strcpy(m_szPassModelDistBal, "000000000000000");
        }

        
        //    SECOND TIME THROUGH INDICATOR
        long lZ2ndTimeThru () { return 1; };
        RWCString Z2ndTimeThru (void)
        {
            return m_szZ2ndTimeThru;
        }
        long Z2ndTimeThru (const RWCString& rwc)
        {
            return SetString(rwc, m_szZ2ndTimeThru, sizeof(m_szZ2ndTimeThru), &m_bZ2ndTimeThru);
        }
        
        //    ST ACCOUNT MASTER RECORD ADDRESS
        long lStmastPtr () { return 4; };
        RWCString StmastPtr (void)
        {
            return m_szStmastPtr;
        }
        long StmastPtr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmastPtr, sizeof(m_szStmastPtr), &m_bStmastPtr);
        }
        
        //    BANK IDENTIFICATION NUMBER
        long lStmCtl1 () { return 2; };
        RWCString StmCtl1 (void)
        {
            return m_szStmCtl1;
        }
        long StmCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCtl1, sizeof(m_szStmCtl1), &m_bStmCtl1);
        }
        
        //    USER DEFINED SECOND LEVEL OF CONTROL
        long lStmCtl2 () { return 3; };
        RWCString StmCtl2 (void)
        {
            return m_szStmCtl2;
        }
        long StmCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCtl2, sizeof(m_szStmCtl2), &m_bStmCtl2);
        }
        
        //    USER DEFINED THIRD LEVEL OF CONTROL
        long lStmCtl3 () { return 3; };
        RWCString StmCtl3 (void)
        {
            return m_szStmCtl3;
        }
        long StmCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCtl3, sizeof(m_szStmCtl3), &m_bStmCtl3);
        }
        
        //    USER DEFINED FOURTH LEVEL OF CONTROL
        long lStmCtl4 () { return 3; };
        RWCString StmCtl4 (void)
        {
            return m_szStmCtl4;
        }
        long StmCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCtl4, sizeof(m_szStmCtl4), &m_bStmCtl4);
        }
        
        //    ACCOUNT NUMBER
        long lStmAcctNo () { return 14; };
        RWCString StmAcctNo (void)
        {
            return m_szStmAcctNo;
        }
        long StmAcctNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmAcctNo, sizeof(m_szStmAcctNo), &m_bStmAcctNo);
        }
        
        //    CONTROL 1
        long lCtl1 () { return 2; };
        RWCString Ctl1 (void)
        {
            return m_szCtl1;
        }
        long Ctl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl1, sizeof(m_szCtl1), &m_bCtl1);
        }
        
        //    CONTROL 2
        long lCtl2 () { return 3; };
        RWCString Ctl2 (void)
        {
            return m_szCtl2;
        }
        long Ctl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl2, sizeof(m_szCtl2), &m_bCtl2);
        }
        
        //    CONTROL 3
        long lCtl3 () { return 3; };
        RWCString Ctl3 (void)
        {
            return m_szCtl3;
        }
        long Ctl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl3, sizeof(m_szCtl3), &m_bCtl3);
        }
        
        //    CONTROL 4
        long lCtl4 () { return 3; };
        RWCString Ctl4 (void)
        {
            return m_szCtl4;
        }
        long Ctl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl4, sizeof(m_szCtl4), &m_bCtl4);
        }
        
        //    PLAN KEY PLAN ID
        long lPkPlanId () { return 12; };
        RWCString PkPlanId (void)
        {
            return m_szPkPlanId;
        }
        long PkPlanId (const RWCString& rwc)
        {
            return SetString(rwc, m_szPkPlanId, sizeof(m_szPkPlanId), &m_bPkPlanId);
        }
        
        //    PLAN KEY SEQUENCE NUMBER
        long lPkSeqNbr () { return 3; };
        RWCString PkSeqNbr (void)
        {
            return m_szPkSeqNbr;
        }
        long PkSeqNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szPkSeqNbr, sizeof(m_szPkSeqNbr), &m_bPkSeqNbr);
        }
        
        //    PLAN KEY EMPLOYEE ID
        long lPkEmployeeId () { return 12; };
        RWCString PkEmployeeId (void)
        {
            return m_szPkEmployeeId;
        }
        long PkEmployeeId (const RWCString& rwc)
        {
            return SetString(rwc, m_szPkEmployeeId, sizeof(m_szPkEmployeeId), &m_bPkEmployeeId);
        }
        
        //    DEPARTMENT
        long lDept () { return 3; };
        RWCString Dept (void)
        {
            return m_szDept;
        }
        long Dept (const RWCString& rwc)
        {
            return SetString(rwc, m_szDept, sizeof(m_szDept), &m_bDept);
        }
        
        //    BATCH
        long lBatch () { return 5; };
        RWCString Batch (void)
        {
            return m_szBatch;
        }
        long Batch (const RWCString& rwc)
        {
            return SetString(rwc, m_szBatch, sizeof(m_szBatch), &m_bBatch);
        }
        
        //    TRANSACTION AMOUNT
        long lTranAmount () { return 15; };
        RWCString TranAmount (void)
        {
            return m_szTranAmount;
        }
        long TranAmount (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranAmount, sizeof(m_szTranAmount), &m_bTranAmount);
        }
        
        //    TRANSACTION CODE
        long lTranCode () { return 2; };
        RWCString TranCode (void)
        {
            return m_szTranCode;
        }
        long TranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranCode, sizeof(m_szTranCode), &m_bTranCode);
        }
        
        //    TRANSACTION DEBIT/CREDIT FLAG
        long lDrcrFlag () { return 1; };
        RWCString DrcrFlag (void)
        {
            return m_szDrcrFlag;
        }
        long DrcrFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrcrFlag, sizeof(m_szDrcrFlag), &m_bDrcrFlag);
        }
        
        //    USER TRANSACTION CODE
        long lUserTranCode () { return 4; };
        RWCString UserTranCode (void)
        {
            return m_szUserTranCode;
        }
        long UserTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserTranCode, sizeof(m_szUserTranCode), &m_bUserTranCode);
        }
        
        //    PREVIOUS EXTERNAL TRAN CODE
        long lPrevExtlTranCd () { return 8; };
        RWCString PrevExtlTranCd (void)
        {
            return m_szPrevExtlTranCd;
        }
        long PrevExtlTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevExtlTranCd, sizeof(m_szPrevExtlTranCd), &m_bPrevExtlTranCd);
        }
        
        //    CURRENT EXTERNAL TRANSACTION CODE
        long lCurExtlTranCd () { return 8; };
        RWCString CurExtlTranCd (void)
        {
            return m_szCurExtlTranCd;
        }
        long CurExtlTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCurExtlTranCd, sizeof(m_szCurExtlTranCd), &m_bCurExtlTranCd);
        }
        
        //    NEXT EXTERNAL TRAN CODE
        long lNxtExtlTranCd () { return 8; };
        RWCString NxtExtlTranCd (void)
        {
            return m_szNxtExtlTranCd;
        }
        long NxtExtlTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szNxtExtlTranCd, sizeof(m_szNxtExtlTranCd), &m_bNxtExtlTranCd);
        }
        
        //    SIMULATED TRAN CODE
        long lSimulatedTranCd () { return 8; };
        RWCString SimulatedTranCd (void)
        {
            return m_szSimulatedTranCd;
        }
        long SimulatedTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSimulatedTranCd, sizeof(m_szSimulatedTranCd), &m_bSimulatedTranCd);
        }
        
        //    PROCESS CODE FOR SM (CUSTOMER SERVICE)
        long lSmProcCd () { return 1; };
        RWCString SmProcCd (void)
        {
            return m_szSmProcCd;
        }
        long SmProcCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSmProcCd, sizeof(m_szSmProcCd), &m_bSmProcCd);
        }
        
        //    DATE THE ACCOUNT WAS ADDED TO THE FILE
        long lAddedDt () { return 8; };
        RWCString AddedDt (void)
        {
            return m_szAddedDt;
        }
        long AddedDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddedDt, sizeof(m_szAddedDt), &m_bAddedDt);
        }
        
        //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY
        long lCurrDec () { return 1; };
        RWCString CurrDec (void)
        {
            return m_szCurrDec;
        }
        long CurrDec (const RWCString& rwc)
        {
            return SetString(rwc, m_szCurrDec, sizeof(m_szCurrDec), &m_bCurrDec);
        }
        
        //    TS NCA ALPHA FLAG
        long lReturnToAlphaFlag () { return 1; };
        RWCString ReturnToAlphaFlag (void)
        {
            return m_szReturnToAlphaFlag;
        }
        long ReturnToAlphaFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szReturnToAlphaFlag, sizeof(m_szReturnToAlphaFlag), &m_bReturnToAlphaFlag);
        }
        
        //    DATE PREVIOUS LAST UPDATE
        long lPrevMaintDt () { return 8; };
        RWCString PrevMaintDt (void)
        {
            return m_szPrevMaintDt;
        }
        long PrevMaintDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintDt, sizeof(m_szPrevMaintDt), &m_bPrevMaintDt);
        }
        
        //    TIME OF PREVIOUS LAST MAINT
        long lPrevMaintTime () { return 6; };
        RWCString PrevMaintTime (void)
        {
            return m_szPrevMaintTime;
        }
        long PrevMaintTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintTime, sizeof(m_szPrevMaintTime), &m_bPrevMaintTime);
        }
        
        //    PREVIOUS LAST MAINTENANCE EMPLOYEE CONTROL 1
        long lPrevMaintEmpCtl1 () { return 2; };
        RWCString PrevMaintEmpCtl1 (void)
        {
            return m_szPrevMaintEmpCtl1;
        }
        long PrevMaintEmpCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintEmpCtl1, sizeof(m_szPrevMaintEmpCtl1), &m_bPrevMaintEmpCtl1);
        }
        
        //    PREVIOUS LAST MAINTENANCE EMPLOYEE CONTROL 2
        long lPrevMaintEmpCtl2 () { return 3; };
        RWCString PrevMaintEmpCtl2 (void)
        {
            return m_szPrevMaintEmpCtl2;
        }
        long PrevMaintEmpCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintEmpCtl2, sizeof(m_szPrevMaintEmpCtl2), &m_bPrevMaintEmpCtl2);
        }
        
        //    PREVIOUS LAST MAINTENANCE EMPLOYEE IDENTIFICATION
        long lPrevMaintEmpId () { return 8; };
        RWCString PrevMaintEmpId (void)
        {
            return m_szPrevMaintEmpId;
        }
        long PrevMaintEmpId (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintEmpId, sizeof(m_szPrevMaintEmpId), &m_bPrevMaintEmpId);
        }
        
        //    TERMINAL ID OF WHERE THE LAST UPDATE OCCURRED
        long lLstLogTrmId () { return 8; };
        RWCString LstLogTrmId (void)
        {
            return m_szLstLogTrmId;
        }
        long LstLogTrmId (const RWCString& rwc)
        {
            return SetString(rwc, m_szLstLogTrmId, sizeof(m_szLstLogTrmId), &m_bLstLogTrmId);
        }
        
        //    ACCOUNT KEY FOR PREVIOUS MENU
        long lPrevMenuAcctKey () { return 25; };
        RWCString PrevMenuAcctKey (void)
        {
            return m_szPrevMenuAcctKey;
        }
        long PrevMenuAcctKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuAcctKey, sizeof(m_szPrevMenuAcctKey), &m_bPrevMenuAcctKey);
        }
        
        //    PREVIOUS MENU TRANSACTION ID
        long lPrevMenuTranId () { return 8; };
        RWCString PrevMenuTranId (void)
        {
            return m_szPrevMenuTranId;
        }
        long PrevMenuTranId (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuTranId, sizeof(m_szPrevMenuTranId), &m_bPrevMenuTranId);
        }
        
        //    PREVIOUS MENU BEGINNING KEY
        long lPrevMenuBeginKey () { return 100; };
        RWCString PrevMenuBeginKey (void)
        {
            return m_szPrevMenuBeginKey;
        }
        long PrevMenuBeginKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuBeginKey, sizeof(m_szPrevMenuBeginKey), &m_bPrevMenuBeginKey);
        }
        
        //    PREVIOUS MENU ENDING KEY
        long lPrevMenuEndKey () { return 100; };
        RWCString PrevMenuEndKey (void)
        {
            return m_szPrevMenuEndKey;
        }
        long PrevMenuEndKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuEndKey, sizeof(m_szPrevMenuEndKey), &m_bPrevMenuEndKey);
        }
        
        //    PREVIOUS MENU KEY OF ENTRY SELECTED
        long lPrevMenuSelKey () { return 100; };
        RWCString PrevMenuSelKey (void)
        {
            return m_szPrevMenuSelKey;
        }
        long PrevMenuSelKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuSelKey, sizeof(m_szPrevMenuSelKey), &m_bPrevMenuSelKey);
        }
        
        //    COMM AREA PASS DATA AREA - PLAN MODEL DIST BAL
        long lPassModelDistBal () { return 15; };
        RWCString PassModelDistBal (void)
        {
            return m_szPassModelDistBal;
        }
        long PassModelDistBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szPassModelDistBal, sizeof(m_szPassModelDistBal), &m_bPassModelDistBal);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bZ2ndTimeThru) return true;
            if (m_bStmastPtr) return true;
            if (m_bStmCtl1) return true;
            if (m_bStmCtl2) return true;
            if (m_bStmCtl3) return true;
            if (m_bStmCtl4) return true;
            if (m_bStmAcctNo) return true;
            if (m_bCtl1) return true;
            if (m_bCtl2) return true;
            if (m_bCtl3) return true;
            if (m_bCtl4) return true;
            if (m_bPkPlanId) return true;
            if (m_bPkSeqNbr) return true;
            if (m_bPkEmployeeId) return true;
            if (m_bDept) return true;
            if (m_bBatch) return true;
            if (m_bTranAmount) return true;
            if (m_bTranCode) return true;
            if (m_bDrcrFlag) return true;
            if (m_bUserTranCode) return true;
            if (m_bPrevExtlTranCd) return true;
            if (m_bCurExtlTranCd) return true;
            if (m_bNxtExtlTranCd) return true;
            if (m_bSimulatedTranCd) return true;
            if (m_bSmProcCd) return true;
            if (m_bAddedDt) return true;
            if (m_bCurrDec) return true;
            if (m_bReturnToAlphaFlag) return true;
            if (m_bPrevMaintDt) return true;
            if (m_bPrevMaintTime) return true;
            if (m_bPrevMaintEmpCtl1) return true;
            if (m_bPrevMaintEmpCtl2) return true;
            if (m_bPrevMaintEmpId) return true;
            if (m_bLstLogTrmId) return true;
            if (m_bPrevMenuAcctKey) return true;
            if (m_bPrevMenuTranId) return true;
            if (m_bPrevMenuBeginKey) return true;
            if (m_bPrevMenuEndKey) return true;
            if (m_bPrevMenuSelKey) return true;
            if (m_bPassModelDistBal) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDSTCMMI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "Z2ndTimeThru", m_szZ2ndTimeThru, &m_bZ2ndTimeThru);
                AddXMLField(pSess, "StmastPtr", m_szStmastPtr, &m_bStmastPtr);
                AddXMLField(pSess, "StmCtl1", m_szStmCtl1, &m_bStmCtl1);
                AddXMLField(pSess, "StmCtl2", m_szStmCtl2, &m_bStmCtl2);
                AddXMLField(pSess, "StmCtl3", m_szStmCtl3, &m_bStmCtl3);
                AddXMLField(pSess, "StmCtl4", m_szStmCtl4, &m_bStmCtl4);
                AddXMLField(pSess, "StmAcctNo", m_szStmAcctNo, &m_bStmAcctNo);
                AddXMLField(pSess, "Ctl1", m_szCtl1, &m_bCtl1);
                AddXMLField(pSess, "Ctl2", m_szCtl2, &m_bCtl2);
                AddXMLField(pSess, "Ctl3", m_szCtl3, &m_bCtl3);
                AddXMLField(pSess, "Ctl4", m_szCtl4, &m_bCtl4);
                AddXMLField(pSess, "PkPlanId", m_szPkPlanId, &m_bPkPlanId);
                AddXMLField(pSess, "PkSeqNbr", m_szPkSeqNbr, &m_bPkSeqNbr);
                AddXMLField(pSess, "PkEmployeeId", m_szPkEmployeeId, &m_bPkEmployeeId);
                AddXMLField(pSess, "Dept", m_szDept, &m_bDept);
                AddXMLField(pSess, "Batch", m_szBatch, &m_bBatch);
                AddXMLField(pSess, "TranAmount", m_szTranAmount, &m_bTranAmount);
                AddXMLField(pSess, "TranCode", m_szTranCode, &m_bTranCode);
                AddXMLField(pSess, "DrcrFlag", m_szDrcrFlag, &m_bDrcrFlag);
                AddXMLField(pSess, "UserTranCode", m_szUserTranCode, &m_bUserTranCode);
                AddXMLField(pSess, "PrevExtlTranCd", m_szPrevExtlTranCd, &m_bPrevExtlTranCd);
                AddXMLField(pSess, "CurExtlTranCd", m_szCurExtlTranCd, &m_bCurExtlTranCd);
                AddXMLField(pSess, "NxtExtlTranCd", m_szNxtExtlTranCd, &m_bNxtExtlTranCd);
                AddXMLField(pSess, "SimulatedTranCd", m_szSimulatedTranCd, &m_bSimulatedTranCd);
                AddXMLField(pSess, "SmProcCd", m_szSmProcCd, &m_bSmProcCd);
                AddXMLField(pSess, "AddedDt", m_szAddedDt, &m_bAddedDt);
                AddXMLField(pSess, "CurrDec", m_szCurrDec, &m_bCurrDec);
                AddXMLField(pSess, "ReturnToAlphaFlag", m_szReturnToAlphaFlag, &m_bReturnToAlphaFlag);
                AddXMLField(pSess, "PrevMaintDt", m_szPrevMaintDt, &m_bPrevMaintDt);
                AddXMLField(pSess, "PrevMaintTime", m_szPrevMaintTime, &m_bPrevMaintTime);
                AddXMLField(pSess, "PrevMaintEmpCtl1", m_szPrevMaintEmpCtl1, &m_bPrevMaintEmpCtl1);
                AddXMLField(pSess, "PrevMaintEmpCtl2", m_szPrevMaintEmpCtl2, &m_bPrevMaintEmpCtl2);
                AddXMLField(pSess, "PrevMaintEmpId", m_szPrevMaintEmpId, &m_bPrevMaintEmpId);
                AddXMLField(pSess, "LstLogTrmId", m_szLstLogTrmId, &m_bLstLogTrmId);
                AddXMLField(pSess, "PrevMenuAcctKey", m_szPrevMenuAcctKey, &m_bPrevMenuAcctKey);
                AddXMLField(pSess, "PrevMenuTranId", m_szPrevMenuTranId, &m_bPrevMenuTranId);
                AddXMLField(pSess, "PrevMenuBeginKey", m_szPrevMenuBeginKey, &m_bPrevMenuBeginKey);
                AddXMLField(pSess, "PrevMenuEndKey", m_szPrevMenuEndKey, &m_bPrevMenuEndKey);
                AddXMLField(pSess, "PrevMenuSelKey", m_szPrevMenuSelKey, &m_bPrevMenuSelKey);
                AddXMLField(pSess, "PassModelDistBal", m_szPassModelDistBal, &m_bPassModelDistBal);
                AddXMLCloseRecord(pSess, "SDSTCMMI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDSTCMMI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "Z2ndTimeThru", m_szZ2ndTimeThru);
                GetXMLField(pSess, "StmastPtr", m_szStmastPtr);
                GetXMLField(pSess, "StmCtl1", m_szStmCtl1);
                GetXMLField(pSess, "StmCtl2", m_szStmCtl2);
                GetXMLField(pSess, "StmCtl3", m_szStmCtl3);
                GetXMLField(pSess, "StmCtl4", m_szStmCtl4);
                GetXMLField(pSess, "StmAcctNo", m_szStmAcctNo);
                GetXMLField(pSess, "Ctl1", m_szCtl1);
                GetXMLField(pSess, "Ctl2", m_szCtl2);
                GetXMLField(pSess, "Ctl3", m_szCtl3);
                GetXMLField(pSess, "Ctl4", m_szCtl4);
                GetXMLField(pSess, "PkPlanId", m_szPkPlanId);
                GetXMLField(pSess, "PkSeqNbr", m_szPkSeqNbr);
                GetXMLField(pSess, "PkEmployeeId", m_szPkEmployeeId);
                GetXMLField(pSess, "Dept", m_szDept);
                GetXMLField(pSess, "Batch", m_szBatch);
                GetXMLField(pSess, "TranAmount", m_szTranAmount);
                GetXMLField(pSess, "TranCode", m_szTranCode);
                GetXMLField(pSess, "DrcrFlag", m_szDrcrFlag);
                GetXMLField(pSess, "UserTranCode", m_szUserTranCode);
                GetXMLField(pSess, "PrevExtlTranCd", m_szPrevExtlTranCd);
                GetXMLField(pSess, "CurExtlTranCd", m_szCurExtlTranCd);
                GetXMLField(pSess, "NxtExtlTranCd", m_szNxtExtlTranCd);
                GetXMLField(pSess, "SimulatedTranCd", m_szSimulatedTranCd);
                GetXMLField(pSess, "SmProcCd", m_szSmProcCd);
                GetXMLField(pSess, "AddedDt", m_szAddedDt);
                GetXMLField(pSess, "CurrDec", m_szCurrDec);
                GetXMLField(pSess, "ReturnToAlphaFlag", m_szReturnToAlphaFlag);
                GetXMLField(pSess, "PrevMaintDt", m_szPrevMaintDt);
                GetXMLField(pSess, "PrevMaintTime", m_szPrevMaintTime);
                GetXMLField(pSess, "PrevMaintEmpCtl1", m_szPrevMaintEmpCtl1);
                GetXMLField(pSess, "PrevMaintEmpCtl2", m_szPrevMaintEmpCtl2);
                GetXMLField(pSess, "PrevMaintEmpId", m_szPrevMaintEmpId);
                GetXMLField(pSess, "LstLogTrmId", m_szLstLogTrmId);
                GetXMLField(pSess, "PrevMenuAcctKey", m_szPrevMenuAcctKey);
                GetXMLField(pSess, "PrevMenuTranId", m_szPrevMenuTranId);
                GetXMLField(pSess, "PrevMenuBeginKey", m_szPrevMenuBeginKey);
                GetXMLField(pSess, "PrevMenuEndKey", m_szPrevMenuEndKey);
                GetXMLField(pSess, "PrevMenuSelKey", m_szPrevMenuSelKey);
                GetXMLField(pSess, "PassModelDistBal", m_szPassModelDistBal);
                CloseXMLRecord(pSess, "SDSTCMMI");
            };
        }
    };

    AsdSDSTCMMI CSDSTCMMI;
    AsdSDSTCMMI *SDSTCMMI;
    
    //**************** End AsdSDSTCMMI Definition ****************

    
    //**************** Start AsdSDSTMYMI Definition ****************
    //                 ST APPC MONETARY TRANSACTION INPUT DAG                      
    
    //    SDSTMYMI.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:21
    class AsdSDSTMYMI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bTranDateCent;
        char      m_szTranDateCent[2+1];
        bool      m_bTranDateYr;
        char      m_szTranDateYr[2+1];
        bool      m_bTranDateMo;
        char      m_szTranDateMo[2+1];
        bool      m_bTranDateDa;
        char      m_szTranDateDa[2+1];
        bool      m_bBackDateFlg;
        char      m_szBackDateFlg[1+1];
        bool      m_bDesc;
        char      m_szDesc[18+1];
        bool      m_bIraCode;
        char      m_szIraCode[2+1];
        bool      m_bPrevYr;
        char      m_szPrevYr[1+1];
        bool      m_bIndivId;
        char      m_szIndivId[15+1];
        bool      m_bCompName;
        char      m_szCompName[16+1];
        bool      m_bAchDesc;
        char      m_szAchDesc[10+1];
        bool      m_bAddendaType;
        char      m_szAddendaType[2+1];
        bool      m_bCheckNum;
        char      m_szCheckNum[10+1];
        bool      m_bUpdteThruCent;
        char      m_szUpdteThruCent[2+1];
        bool      m_bUpdteThruYr;
        char      m_szUpdteThruYr[2+1];
        bool      m_bUpdteThruMo;
        char      m_szUpdteThruMo[2+1];
        bool      m_bUpdteThruDa;
        char      m_szUpdteThruDa[2+1];
        bool      m_bPassbkBal;
        char      m_szPassbkBal[18+1];
        bool      m_bTermId;
        char      m_szTermId[4+1];
        bool      m_bDescription;
        char      m_szDescription[17+1];
        bool      m_bDepDateCent;
        char      m_szDepDateCent[2+1];
        bool      m_bDepDateYr;
        char      m_szDepDateYr[2+1];
        bool      m_bDepDateMo;
        char      m_szDepDateMo[2+1];
        bool      m_bDepDateDa;
        char      m_szDepDateDa[2+1];
        bool      m_bOrigBal;
        char      m_szOrigBal[18+1];
        bool      m_bOrigUserCd;
        char      m_szOrigUserCd[4+1];
        bool      m_bOrigBatchNum;
        char      m_szOrigBatchNum[5+1];
        bool      m_bOrigSeqNum;
        char      m_szOrigSeqNum[5+1];
        bool      m_bOrigDepDateCent;
        char      m_szOrigDepDateCent[2+1];
        bool      m_bOrigDepDateYr;
        char      m_szOrigDepDateYr[2+1];
        bool      m_bOrigDepDateMo;
        char      m_szOrigDepDateMo[2+1];
        bool      m_bOrigDepDateDa;
        char      m_szOrigDepDateDa[2+1];
        bool      m_bOrig88Bal;
        char      m_szOrig88Bal[18+1];
        bool      m_bSeqNum;
        char      m_szSeqNum[5+1];
        bool      m_bWdType;
        char      m_szWdType[1+1];
        bool      m_bWvPenalty;
        char      m_szWvPenalty[1+1];
        bool      m_bWvFedTax;
        char      m_szWvFedTax[1+1];
        bool      m_bWvStateTax;
        char      m_szWvStateTax[1+1];
        bool      m_bWvLocalTax;
        char      m_szWvLocalTax[1+1];
        bool      m_bWvClsChrg;
        char      m_szWvClsChrg[1+1];
        bool      m_bWvTranChrg;
        char      m_szWvTranChrg[1+1];
        bool      m_bProcessYn;
        char      m_szProcessYn[1+1];
        bool      m_bAddenda1;
        char      m_szAddenda1[40+1];
        bool      m_bAddenda2;
        char      m_szAddenda2[40+1];
        bool      m_bUdtLine[13];
        char      m_szUdtLine[13][60+1];
    
      public:
        long      m_lIndex;

        AsdSDSTMYMI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bTranDateCent = false;
            strcpy(m_szTranDateCent, "");
            m_bTranDateYr = false;
            strcpy(m_szTranDateYr, "");
            m_bTranDateMo = false;
            strcpy(m_szTranDateMo, "");
            m_bTranDateDa = false;
            strcpy(m_szTranDateDa, "");
            m_bBackDateFlg = false;
            strcpy(m_szBackDateFlg, "");
            m_bDesc = false;
            strcpy(m_szDesc, "");
            m_bIraCode = false;
            strcpy(m_szIraCode, "");
            m_bPrevYr = false;
            strcpy(m_szPrevYr, "");
            m_bIndivId = false;
            strcpy(m_szIndivId, "");
            m_bCompName = false;
            strcpy(m_szCompName, "");
            m_bAchDesc = false;
            strcpy(m_szAchDesc, "");
            m_bAddendaType = false;
            strcpy(m_szAddendaType, "");
            m_bCheckNum = false;
            strcpy(m_szCheckNum, "");
            m_bUpdteThruCent = false;
            strcpy(m_szUpdteThruCent, "");
            m_bUpdteThruYr = false;
            strcpy(m_szUpdteThruYr, "");
            m_bUpdteThruMo = false;
            strcpy(m_szUpdteThruMo, "");
            m_bUpdteThruDa = false;
            strcpy(m_szUpdteThruDa, "");
            m_bPassbkBal = false;
            strcpy(m_szPassbkBal, "000000000000000000");
            m_bTermId = false;
            strcpy(m_szTermId, "");
            m_bDescription = false;
            strcpy(m_szDescription, "");
            m_bDepDateCent = false;
            strcpy(m_szDepDateCent, "");
            m_bDepDateYr = false;
            strcpy(m_szDepDateYr, "");
            m_bDepDateMo = false;
            strcpy(m_szDepDateMo, "");
            m_bDepDateDa = false;
            strcpy(m_szDepDateDa, "");
            m_bOrigBal = false;
            strcpy(m_szOrigBal, "000000000000000000");
            m_bOrigUserCd = false;
            strcpy(m_szOrigUserCd, "");
            m_bOrigBatchNum = false;
            strcpy(m_szOrigBatchNum, "00000");
            m_bOrigSeqNum = false;
            strcpy(m_szOrigSeqNum, "00000");
            m_bOrigDepDateCent = false;
            strcpy(m_szOrigDepDateCent, "");
            m_bOrigDepDateYr = false;
            strcpy(m_szOrigDepDateYr, "");
            m_bOrigDepDateMo = false;
            strcpy(m_szOrigDepDateMo, "");
            m_bOrigDepDateDa = false;
            strcpy(m_szOrigDepDateDa, "");
            m_bOrig88Bal = false;
            strcpy(m_szOrig88Bal, "000000000000000000");
            m_bSeqNum = false;
            strcpy(m_szSeqNum, "00000");
            m_bWdType = false;
            strcpy(m_szWdType, "");
            m_bWvPenalty = false;
            strcpy(m_szWvPenalty, "");
            m_bWvFedTax = false;
            strcpy(m_szWvFedTax, "");
            m_bWvStateTax = false;
            strcpy(m_szWvStateTax, "");
            m_bWvLocalTax = false;
            strcpy(m_szWvLocalTax, "");
            m_bWvClsChrg = false;
            strcpy(m_szWvClsChrg, "");
            m_bWvTranChrg = false;
            strcpy(m_szWvTranChrg, "");
            m_bProcessYn = false;
            strcpy(m_szProcessYn, "");
            m_bAddenda1 = false;
            strcpy(m_szAddenda1, "");
            m_bAddenda2 = false;
            strcpy(m_szAddenda2, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 13; lOccurs++)
            {
                m_bUdtLine[lOccurs] = false;
                strcpy(m_szUdtLine[lOccurs], "");
            }
        
            for (lOccurs = 0; lOccurs < 11; lOccurs++)
            {
                ExtAmtInfo[lOccurs]  = &CExtAmtInfo[lOccurs];
                CExtAmtInfo[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bTranDateCent = false;
            strcpy(m_szTranDateCent, "");
            m_bTranDateYr = false;
            strcpy(m_szTranDateYr, "");
            m_bTranDateMo = false;
            strcpy(m_szTranDateMo, "");
            m_bTranDateDa = false;
            strcpy(m_szTranDateDa, "");
            m_bBackDateFlg = false;
            strcpy(m_szBackDateFlg, "");
            m_bDesc = false;
            strcpy(m_szDesc, "");
            m_bIraCode = false;
            strcpy(m_szIraCode, "");
            m_bPrevYr = false;
            strcpy(m_szPrevYr, "");
            m_bIndivId = false;
            strcpy(m_szIndivId, "");
            m_bCompName = false;
            strcpy(m_szCompName, "");
            m_bAchDesc = false;
            strcpy(m_szAchDesc, "");
            m_bAddendaType = false;
            strcpy(m_szAddendaType, "");
            m_bCheckNum = false;
            strcpy(m_szCheckNum, "");
            m_bUpdteThruCent = false;
            strcpy(m_szUpdteThruCent, "");
            m_bUpdteThruYr = false;
            strcpy(m_szUpdteThruYr, "");
            m_bUpdteThruMo = false;
            strcpy(m_szUpdteThruMo, "");
            m_bUpdteThruDa = false;
            strcpy(m_szUpdteThruDa, "");
            m_bPassbkBal = false;
            strcpy(m_szPassbkBal, "000000000000000000");
            m_bTermId = false;
            strcpy(m_szTermId, "");
            m_bDescription = false;
            strcpy(m_szDescription, "");
            m_bDepDateCent = false;
            strcpy(m_szDepDateCent, "");
            m_bDepDateYr = false;
            strcpy(m_szDepDateYr, "");
            m_bDepDateMo = false;
            strcpy(m_szDepDateMo, "");
            m_bDepDateDa = false;
            strcpy(m_szDepDateDa, "");
            m_bOrigBal = false;
            strcpy(m_szOrigBal, "000000000000000000");
            m_bOrigUserCd = false;
            strcpy(m_szOrigUserCd, "");
            m_bOrigBatchNum = false;
            strcpy(m_szOrigBatchNum, "00000");
            m_bOrigSeqNum = false;
            strcpy(m_szOrigSeqNum, "00000");
            m_bOrigDepDateCent = false;
            strcpy(m_szOrigDepDateCent, "");
            m_bOrigDepDateYr = false;
            strcpy(m_szOrigDepDateYr, "");
            m_bOrigDepDateMo = false;
            strcpy(m_szOrigDepDateMo, "");
            m_bOrigDepDateDa = false;
            strcpy(m_szOrigDepDateDa, "");
            m_bOrig88Bal = false;
            strcpy(m_szOrig88Bal, "000000000000000000");
            m_bSeqNum = false;
            strcpy(m_szSeqNum, "00000");
            m_bWdType = false;
            strcpy(m_szWdType, "");
            m_bWvPenalty = false;
            strcpy(m_szWvPenalty, "");
            m_bWvFedTax = false;
            strcpy(m_szWvFedTax, "");
            m_bWvStateTax = false;
            strcpy(m_szWvStateTax, "");
            m_bWvLocalTax = false;
            strcpy(m_szWvLocalTax, "");
            m_bWvClsChrg = false;
            strcpy(m_szWvClsChrg, "");
            m_bWvTranChrg = false;
            strcpy(m_szWvTranChrg, "");
            m_bProcessYn = false;
            strcpy(m_szProcessYn, "");
            m_bAddenda1 = false;
            strcpy(m_szAddenda1, "");
            m_bAddenda2 = false;
            strcpy(m_szAddenda2, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 13; lOccurs++ )
            {
                m_bUdtLine[lOccurs] = false;
                strcpy(m_szUdtLine[lOccurs], "");
            }
        
            for (lOccurs = 0; lOccurs < 11; lOccurs++)
            {
                ExtAmtInfo[lOccurs]  = &CExtAmtInfo[lOccurs];
                CExtAmtInfo[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    TRANSACTION DATE CENTURY
        long lTranDateCent () { return 2; };
        RWCString TranDateCent (void)
        {
            return m_szTranDateCent;
        }
        long TranDateCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranDateCent, sizeof(m_szTranDateCent), &m_bTranDateCent);
        }
        
        //    TRANSACTION DATE YEAR
        long lTranDateYr () { return 2; };
        RWCString TranDateYr (void)
        {
            return m_szTranDateYr;
        }
        long TranDateYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranDateYr, sizeof(m_szTranDateYr), &m_bTranDateYr);
        }
        
        //    TRANSACTION DATE MONTH
        long lTranDateMo () { return 2; };
        RWCString TranDateMo (void)
        {
            return m_szTranDateMo;
        }
        long TranDateMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranDateMo, sizeof(m_szTranDateMo), &m_bTranDateMo);
        }
        
        //    TRANSACTION DATE DAY
        long lTranDateDa () { return 2; };
        RWCString TranDateDa (void)
        {
            return m_szTranDateDa;
        }
        long TranDateDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranDateDa, sizeof(m_szTranDateDa), &m_bTranDateDa);
        }
        
        //    BACK DATE FLAG
        long lBackDateFlg () { return 1; };
        RWCString BackDateFlg (void)
        {
            return m_szBackDateFlg;
        }
        long BackDateFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szBackDateFlg, sizeof(m_szBackDateFlg), &m_bBackDateFlg);
        }
        
        //    DESCRIPTION
        long lDesc () { return 18; };
        RWCString Desc (void)
        {
            return m_szDesc;
        }
        long Desc (const RWCString& rwc)
        {
            return SetString(rwc, m_szDesc, sizeof(m_szDesc), &m_bDesc);
        }
        
        //    IRA CODE
        long lIraCode () { return 2; };
        RWCString IraCode (void)
        {
            return m_szIraCode;
        }
        long IraCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szIraCode, sizeof(m_szIraCode), &m_bIraCode);
        }
        
        //    IRA PREVIOUS YEAR FLAG
        long lPrevYr () { return 1; };
        RWCString PrevYr (void)
        {
            return m_szPrevYr;
        }
        long PrevYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevYr, sizeof(m_szPrevYr), &m_bPrevYr);
        }
        
        //    INDIVIDUAL ID
        long lIndivId () { return 15; };
        RWCString IndivId (void)
        {
            return m_szIndivId;
        }
        long IndivId (const RWCString& rwc)
        {
            return SetString(rwc, m_szIndivId, sizeof(m_szIndivId), &m_bIndivId);
        }
        
        //    ACH COMPANY NAME
        long lCompName () { return 16; };
        RWCString CompName (void)
        {
            return m_szCompName;
        }
        long CompName (const RWCString& rwc)
        {
            return SetString(rwc, m_szCompName, sizeof(m_szCompName), &m_bCompName);
        }
        
        //    ACH DESCRIPTION
        long lAchDesc () { return 10; };
        RWCString AchDesc (void)
        {
            return m_szAchDesc;
        }
        long AchDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szAchDesc, sizeof(m_szAchDesc), &m_bAchDesc);
        }
        
        //    ACH ADDENDA TYPE
        long lAddendaType () { return 2; };
        RWCString AddendaType (void)
        {
            return m_szAddendaType;
        }
        long AddendaType (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddendaType, sizeof(m_szAddendaType), &m_bAddendaType);
        }
        
        //    CHECK NUMBER
        long lCheckNum () { return 10; };
        RWCString CheckNum (void)
        {
            return m_szCheckNum;
        }
        long CheckNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szCheckNum, sizeof(m_szCheckNum), &m_bCheckNum);
        }
        
        //    UPDATE THRU DATE CENTURY
        long lUpdteThruCent () { return 2; };
        RWCString UpdteThruCent (void)
        {
            return m_szUpdteThruCent;
        }
        long UpdteThruCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szUpdteThruCent, sizeof(m_szUpdteThruCent), &m_bUpdteThruCent);
        }
        
        //    UPDATE THRU DATE YEAR
        long lUpdteThruYr () { return 2; };
        RWCString UpdteThruYr (void)
        {
            return m_szUpdteThruYr;
        }
        long UpdteThruYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szUpdteThruYr, sizeof(m_szUpdteThruYr), &m_bUpdteThruYr);
        }
        
        //    UPDATE THRU DATE MONTH
        long lUpdteThruMo () { return 2; };
        RWCString UpdteThruMo (void)
        {
            return m_szUpdteThruMo;
        }
        long UpdteThruMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szUpdteThruMo, sizeof(m_szUpdteThruMo), &m_bUpdteThruMo);
        }
        
        //    UPDATE THRU DATE DAY
        long lUpdteThruDa () { return 2; };
        RWCString UpdteThruDa (void)
        {
            return m_szUpdteThruDa;
        }
        long UpdteThruDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szUpdteThruDa, sizeof(m_szUpdteThruDa), &m_bUpdteThruDa);
        }
        
        //    PASSBOOK BALANCE
        long lPassbkBal () { return 18; };
        RWCString PassbkBal (void)
        {
            return m_szPassbkBal;
        }
        long PassbkBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szPassbkBal, sizeof(m_szPassbkBal), &m_bPassbkBal);
        }
        
        //    TERMINAL ID
        long lTermId () { return 4; };
        RWCString TermId (void)
        {
            return m_szTermId;
        }
        long TermId (const RWCString& rwc)
        {
            return SetString(rwc, m_szTermId, sizeof(m_szTermId), &m_bTermId);
        }
        
        //    DESCRIPTION
        long lDescription () { return 17; };
        RWCString Description (void)
        {
            return m_szDescription;
        }
        long Description (const RWCString& rwc)
        {
            return SetString(rwc, m_szDescription, sizeof(m_szDescription), &m_bDescription);
        }
        
        //    DEPOSIT DATE CENTURY
        long lDepDateCent () { return 2; };
        RWCString DepDateCent (void)
        {
            return m_szDepDateCent;
        }
        long DepDateCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szDepDateCent, sizeof(m_szDepDateCent), &m_bDepDateCent);
        }
        
        //    DEPOSIT DATE YEAR
        long lDepDateYr () { return 2; };
        RWCString DepDateYr (void)
        {
            return m_szDepDateYr;
        }
        long DepDateYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szDepDateYr, sizeof(m_szDepDateYr), &m_bDepDateYr);
        }
        
        //    DEPOSIT DATE MONTH
        long lDepDateMo () { return 2; };
        RWCString DepDateMo (void)
        {
            return m_szDepDateMo;
        }
        long DepDateMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szDepDateMo, sizeof(m_szDepDateMo), &m_bDepDateMo);
        }
        
        //    DEPOSIT DATE DAY
        long lDepDateDa () { return 2; };
        RWCString DepDateDa (void)
        {
            return m_szDepDateDa;
        }
        long DepDateDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szDepDateDa, sizeof(m_szDepDateDa), &m_bDepDateDa);
        }
        
        //    ORIGINAL BALANCE
        long lOrigBal () { return 18; };
        RWCString OrigBal (void)
        {
            return m_szOrigBal;
        }
        long OrigBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigBal, sizeof(m_szOrigBal), &m_bOrigBal);
        }
        
        //    ORIGINAL USER CODE
        long lOrigUserCd () { return 4; };
        RWCString OrigUserCd (void)
        {
            return m_szOrigUserCd;
        }
        long OrigUserCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigUserCd, sizeof(m_szOrigUserCd), &m_bOrigUserCd);
        }
        
        //    ORIGINAL BATCH NUMBER
        long lOrigBatchNum () { return 5; };
        RWCString OrigBatchNum (void)
        {
            return m_szOrigBatchNum;
        }
        long OrigBatchNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigBatchNum, sizeof(m_szOrigBatchNum), &m_bOrigBatchNum);
        }
        
        //    ORIGINAL SEQUENCE NUMBER
        long lOrigSeqNum () { return 5; };
        RWCString OrigSeqNum (void)
        {
            return m_szOrigSeqNum;
        }
        long OrigSeqNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigSeqNum, sizeof(m_szOrigSeqNum), &m_bOrigSeqNum);
        }
        
        //    ORIGINAL DEPOSIT DATE CENTURY
        long lOrigDepDateCent () { return 2; };
        RWCString OrigDepDateCent (void)
        {
            return m_szOrigDepDateCent;
        }
        long OrigDepDateCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigDepDateCent, sizeof(m_szOrigDepDateCent), &m_bOrigDepDateCent);
        }
        
        //    ORIGINAL DEPOSIT DATE YEAR
        long lOrigDepDateYr () { return 2; };
        RWCString OrigDepDateYr (void)
        {
            return m_szOrigDepDateYr;
        }
        long OrigDepDateYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigDepDateYr, sizeof(m_szOrigDepDateYr), &m_bOrigDepDateYr);
        }
        
        //    ORIGINAL DEPOSIT DATE MONTH
        long lOrigDepDateMo () { return 2; };
        RWCString OrigDepDateMo (void)
        {
            return m_szOrigDepDateMo;
        }
        long OrigDepDateMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigDepDateMo, sizeof(m_szOrigDepDateMo), &m_bOrigDepDateMo);
        }
        
        //    ORIGINAL DEPOSIT DATE DAY
        long lOrigDepDateDa () { return 2; };
        RWCString OrigDepDateDa (void)
        {
            return m_szOrigDepDateDa;
        }
        long OrigDepDateDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrigDepDateDa, sizeof(m_szOrigDepDateDa), &m_bOrigDepDateDa);
        }
        
        //    ORIGINAL ST88 BALANCE
        long lOrig88Bal () { return 18; };
        RWCString Orig88Bal (void)
        {
            return m_szOrig88Bal;
        }
        long Orig88Bal (const RWCString& rwc)
        {
            return SetString(rwc, m_szOrig88Bal, sizeof(m_szOrig88Bal), &m_bOrig88Bal);
        }
        
        //    SEQUENCE NUMBER
        long lSeqNum () { return 5; };
        RWCString SeqNum (void)
        {
            return m_szSeqNum;
        }
        long SeqNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szSeqNum, sizeof(m_szSeqNum), &m_bSeqNum);
        }
        
        //    WITHDRAWAL TYPE
        long lWdType () { return 1; };
        RWCString WdType (void)
        {
            return m_szWdType;
        }
        long WdType (const RWCString& rwc)
        {
            return SetString(rwc, m_szWdType, sizeof(m_szWdType), &m_bWdType);
        }
        
        //    WAIVE PENALTY FLAG
        long lWvPenalty () { return 1; };
        RWCString WvPenalty (void)
        {
            return m_szWvPenalty;
        }
        long WvPenalty (const RWCString& rwc)
        {
            return SetString(rwc, m_szWvPenalty, sizeof(m_szWvPenalty), &m_bWvPenalty);
        }
        
        //    WAIVE FEDERAL TAX FLAG
        long lWvFedTax () { return 1; };
        RWCString WvFedTax (void)
        {
            return m_szWvFedTax;
        }
        long WvFedTax (const RWCString& rwc)
        {
            return SetString(rwc, m_szWvFedTax, sizeof(m_szWvFedTax), &m_bWvFedTax);
        }
        
        //    WAIVE STATE TAX FLAG
        long lWvStateTax () { return 1; };
        RWCString WvStateTax (void)
        {
            return m_szWvStateTax;
        }
        long WvStateTax (const RWCString& rwc)
        {
            return SetString(rwc, m_szWvStateTax, sizeof(m_szWvStateTax), &m_bWvStateTax);
        }
        
        //    WAIVE LOCAL TAX FLAG
        long lWvLocalTax () { return 1; };
        RWCString WvLocalTax (void)
        {
            return m_szWvLocalTax;
        }
        long WvLocalTax (const RWCString& rwc)
        {
            return SetString(rwc, m_szWvLocalTax, sizeof(m_szWvLocalTax), &m_bWvLocalTax);
        }
        
        //    WAIVE CLOSING CHARGE FLAG
        long lWvClsChrg () { return 1; };
        RWCString WvClsChrg (void)
        {
            return m_szWvClsChrg;
        }
        long WvClsChrg (const RWCString& rwc)
        {
            return SetString(rwc, m_szWvClsChrg, sizeof(m_szWvClsChrg), &m_bWvClsChrg);
        }
        
        //    WAIVE TRANSACTION CHARGE FLAG
        long lWvTranChrg () { return 1; };
        RWCString WvTranChrg (void)
        {
            return m_szWvTranChrg;
        }
        long WvTranChrg (const RWCString& rwc)
        {
            return SetString(rwc, m_szWvTranChrg, sizeof(m_szWvTranChrg), &m_bWvTranChrg);
        }
        
        //    PROCESS YES/NO FLAG
        long lProcessYn () { return 1; };
        RWCString ProcessYn (void)
        {
            return m_szProcessYn;
        }
        long ProcessYn (const RWCString& rwc)
        {
            return SetString(rwc, m_szProcessYn, sizeof(m_szProcessYn), &m_bProcessYn);
        }
        
        //    ADDENDA DESCRIPTION 1
        long lAddenda1 () { return 40; };
        RWCString Addenda1 (void)
        {
            return m_szAddenda1;
        }
        long Addenda1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddenda1, sizeof(m_szAddenda1), &m_bAddenda1);
        }
        
        //    ADDENDA DESCRIPTION 2
        long lAddenda2 () { return 40; };
        RWCString Addenda2 (void)
        {
            return m_szAddenda2;
        }
        long Addenda2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddenda2, sizeof(m_szAddenda2), &m_bAddenda2);
        }
        
        //    UNIVERSAL DESCRIPTION LINE
        long lUdtLine () { return 60; };
        RWCString UdtLine (long i)
        {
            if (i >= 0 && i < 13)
                return m_szUdtLine[i];
            else
                return "";
        }
        long UdtLine (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 13)
                return SetString(rwc, m_szUdtLine[i], sizeof(m_szUdtLine[i]), &m_bUdtLine[i]);
            else
                return -1;
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bTranDateCent) return true;
            if (m_bTranDateYr) return true;
            if (m_bTranDateMo) return true;
            if (m_bTranDateDa) return true;
            if (m_bBackDateFlg) return true;
            if (m_bDesc) return true;
            if (m_bIraCode) return true;
            if (m_bPrevYr) return true;
            if (m_bIndivId) return true;
            if (m_bCompName) return true;
            if (m_bAchDesc) return true;
            if (m_bAddendaType) return true;
            if (m_bCheckNum) return true;
            if (m_bUpdteThruCent) return true;
            if (m_bUpdteThruYr) return true;
            if (m_bUpdteThruMo) return true;
            if (m_bUpdteThruDa) return true;
            if (m_bPassbkBal) return true;
            if (m_bTermId) return true;
            if (m_bDescription) return true;
            if (m_bDepDateCent) return true;
            if (m_bDepDateYr) return true;
            if (m_bDepDateMo) return true;
            if (m_bDepDateDa) return true;
            if (m_bOrigBal) return true;
            if (m_bOrigUserCd) return true;
            if (m_bOrigBatchNum) return true;
            if (m_bOrigSeqNum) return true;
            if (m_bOrigDepDateCent) return true;
            if (m_bOrigDepDateYr) return true;
            if (m_bOrigDepDateMo) return true;
            if (m_bOrigDepDateDa) return true;
            if (m_bOrig88Bal) return true;
            if (m_bSeqNum) return true;
            if (m_bWdType) return true;
            if (m_bWvPenalty) return true;
            if (m_bWvFedTax) return true;
            if (m_bWvStateTax) return true;
            if (m_bWvLocalTax) return true;
            if (m_bWvClsChrg) return true;
            if (m_bWvTranChrg) return true;
            if (m_bProcessYn) return true;
            if (m_bAddenda1) return true;
            if (m_bAddenda2) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 13; lOccurs++)
                if (m_bUdtLine[lOccurs]) return true;
            for (lOccurs = 0; lOccurs < 11; lOccurs++)
            {
                if(CExtAmtInfo[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDSTMYMI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "TranDateCent", m_szTranDateCent, &m_bTranDateCent);
                AddXMLField(pSess, "TranDateYr", m_szTranDateYr, &m_bTranDateYr);
                AddXMLField(pSess, "TranDateMo", m_szTranDateMo, &m_bTranDateMo);
                AddXMLField(pSess, "TranDateDa", m_szTranDateDa, &m_bTranDateDa);
                AddXMLField(pSess, "BackDateFlg", m_szBackDateFlg, &m_bBackDateFlg);
                AddXMLField(pSess, "Desc", m_szDesc, &m_bDesc);
                AddXMLField(pSess, "IraCode", m_szIraCode, &m_bIraCode);
                AddXMLField(pSess, "PrevYr", m_szPrevYr, &m_bPrevYr);
                AddXMLField(pSess, "IndivId", m_szIndivId, &m_bIndivId);
                AddXMLField(pSess, "CompName", m_szCompName, &m_bCompName);
                AddXMLField(pSess, "AchDesc", m_szAchDesc, &m_bAchDesc);
                AddXMLField(pSess, "AddendaType", m_szAddendaType, &m_bAddendaType);
                AddXMLField(pSess, "CheckNum", m_szCheckNum, &m_bCheckNum);
                AddXMLField(pSess, "UpdteThruCent", m_szUpdteThruCent, &m_bUpdteThruCent);
                AddXMLField(pSess, "UpdteThruYr", m_szUpdteThruYr, &m_bUpdteThruYr);
                AddXMLField(pSess, "UpdteThruMo", m_szUpdteThruMo, &m_bUpdteThruMo);
                AddXMLField(pSess, "UpdteThruDa", m_szUpdteThruDa, &m_bUpdteThruDa);
                AddXMLField(pSess, "PassbkBal", m_szPassbkBal, &m_bPassbkBal);
                AddXMLField(pSess, "TermId", m_szTermId, &m_bTermId);
                AddXMLField(pSess, "Description", m_szDescription, &m_bDescription);
                AddXMLField(pSess, "DepDateCent", m_szDepDateCent, &m_bDepDateCent);
                AddXMLField(pSess, "DepDateYr", m_szDepDateYr, &m_bDepDateYr);
                AddXMLField(pSess, "DepDateMo", m_szDepDateMo, &m_bDepDateMo);
                AddXMLField(pSess, "DepDateDa", m_szDepDateDa, &m_bDepDateDa);
                AddXMLField(pSess, "OrigBal", m_szOrigBal, &m_bOrigBal);
                AddXMLField(pSess, "OrigUserCd", m_szOrigUserCd, &m_bOrigUserCd);
                AddXMLField(pSess, "OrigBatchNum", m_szOrigBatchNum, &m_bOrigBatchNum);
                AddXMLField(pSess, "OrigSeqNum", m_szOrigSeqNum, &m_bOrigSeqNum);
                AddXMLField(pSess, "OrigDepDateCent", m_szOrigDepDateCent, &m_bOrigDepDateCent);
                AddXMLField(pSess, "OrigDepDateYr", m_szOrigDepDateYr, &m_bOrigDepDateYr);
                AddXMLField(pSess, "OrigDepDateMo", m_szOrigDepDateMo, &m_bOrigDepDateMo);
                AddXMLField(pSess, "OrigDepDateDa", m_szOrigDepDateDa, &m_bOrigDepDateDa);
                AddXMLField(pSess, "Orig88Bal", m_szOrig88Bal, &m_bOrig88Bal);
                AddXMLField(pSess, "SeqNum", m_szSeqNum, &m_bSeqNum);
                AddXMLField(pSess, "WdType", m_szWdType, &m_bWdType);
                AddXMLField(pSess, "WvPenalty", m_szWvPenalty, &m_bWvPenalty);
                AddXMLField(pSess, "WvFedTax", m_szWvFedTax, &m_bWvFedTax);
                AddXMLField(pSess, "WvStateTax", m_szWvStateTax, &m_bWvStateTax);
                AddXMLField(pSess, "WvLocalTax", m_szWvLocalTax, &m_bWvLocalTax);
                AddXMLField(pSess, "WvClsChrg", m_szWvClsChrg, &m_bWvClsChrg);
                AddXMLField(pSess, "WvTranChrg", m_szWvTranChrg, &m_bWvTranChrg);
                AddXMLField(pSess, "ProcessYn", m_szProcessYn, &m_bProcessYn);
                AddXMLField(pSess, "Addenda1", m_szAddenda1, &m_bAddenda1);
                AddXMLField(pSess, "Addenda2", m_szAddenda2, &m_bAddenda2);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 13; lOccurs++)
                    AddXMLField(pSess, "UdtLine", m_szUdtLine[lOccurs], &m_bUdtLine[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 11; lOccurs++)
                {
                    CExtAmtInfo[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDSTMYMI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDSTMYMI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "TranDateCent", m_szTranDateCent);
                GetXMLField(pSess, "TranDateYr", m_szTranDateYr);
                GetXMLField(pSess, "TranDateMo", m_szTranDateMo);
                GetXMLField(pSess, "TranDateDa", m_szTranDateDa);
                GetXMLField(pSess, "BackDateFlg", m_szBackDateFlg);
                GetXMLField(pSess, "Desc", m_szDesc);
                GetXMLField(pSess, "IraCode", m_szIraCode);
                GetXMLField(pSess, "PrevYr", m_szPrevYr);
                GetXMLField(pSess, "IndivId", m_szIndivId);
                GetXMLField(pSess, "CompName", m_szCompName);
                GetXMLField(pSess, "AchDesc", m_szAchDesc);
                GetXMLField(pSess, "AddendaType", m_szAddendaType);
                GetXMLField(pSess, "CheckNum", m_szCheckNum);
                GetXMLField(pSess, "UpdteThruCent", m_szUpdteThruCent);
                GetXMLField(pSess, "UpdteThruYr", m_szUpdteThruYr);
                GetXMLField(pSess, "UpdteThruMo", m_szUpdteThruMo);
                GetXMLField(pSess, "UpdteThruDa", m_szUpdteThruDa);
                GetXMLField(pSess, "PassbkBal", m_szPassbkBal);
                GetXMLField(pSess, "TermId", m_szTermId);
                GetXMLField(pSess, "Description", m_szDescription);
                GetXMLField(pSess, "DepDateCent", m_szDepDateCent);
                GetXMLField(pSess, "DepDateYr", m_szDepDateYr);
                GetXMLField(pSess, "DepDateMo", m_szDepDateMo);
                GetXMLField(pSess, "DepDateDa", m_szDepDateDa);
                GetXMLField(pSess, "OrigBal", m_szOrigBal);
                GetXMLField(pSess, "OrigUserCd", m_szOrigUserCd);
                GetXMLField(pSess, "OrigBatchNum", m_szOrigBatchNum);
                GetXMLField(pSess, "OrigSeqNum", m_szOrigSeqNum);
                GetXMLField(pSess, "OrigDepDateCent", m_szOrigDepDateCent);
                GetXMLField(pSess, "OrigDepDateYr", m_szOrigDepDateYr);
                GetXMLField(pSess, "OrigDepDateMo", m_szOrigDepDateMo);
                GetXMLField(pSess, "OrigDepDateDa", m_szOrigDepDateDa);
                GetXMLField(pSess, "Orig88Bal", m_szOrig88Bal);
                GetXMLField(pSess, "SeqNum", m_szSeqNum);
                GetXMLField(pSess, "WdType", m_szWdType);
                GetXMLField(pSess, "WvPenalty", m_szWvPenalty);
                GetXMLField(pSess, "WvFedTax", m_szWvFedTax);
                GetXMLField(pSess, "WvStateTax", m_szWvStateTax);
                GetXMLField(pSess, "WvLocalTax", m_szWvLocalTax);
                GetXMLField(pSess, "WvClsChrg", m_szWvClsChrg);
                GetXMLField(pSess, "WvTranChrg", m_szWvTranChrg);
                GetXMLField(pSess, "ProcessYn", m_szProcessYn);
                GetXMLField(pSess, "Addenda1", m_szAddenda1);
                GetXMLField(pSess, "Addenda2", m_szAddenda2);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 13; lOccurs++)
                    GetXMLField(pSess, "UdtLine", m_szUdtLine[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 11; lOccurs++)
                {
                    CExtAmtInfo[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDSTMYMI");
            };
        }
        
        //**************** Start AsdExtAmtInfo Definition ****************
        //                 EXTENDED AMOUNT INFO
        
        class AsdExtAmtInfo
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bExtAmtLit;
            char      m_szExtAmtLit[8+1];
            bool      m_bExtAmt;
            char      m_szExtAmt[17+1];
        
          public:
            long      m_lIndex;

            AsdExtAmtInfo ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bExtAmtLit = false;
                strcpy(m_szExtAmtLit, "");
                m_bExtAmt = false;
                strcpy(m_szExtAmt, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    EXTENDED AMOUNT LITERAL
            long lExtAmtLit () { return 8; };
            RWCString ExtAmtLit (void)
            {
                return m_szExtAmtLit;
            }
            long ExtAmtLit (const RWCString& rwc)
            {
                return SetString(rwc, m_szExtAmtLit, sizeof(m_szExtAmtLit), &m_bExtAmtLit);
            }
            
            //    EXTENDED AMOUNT
            long lExtAmt () { return 17; };
            RWCString ExtAmt (void)
            {
                return m_szExtAmt;
            }
            long ExtAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szExtAmt, sizeof(m_szExtAmt), &m_bExtAmt);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bExtAmtLit) return true;
                if (m_bExtAmt) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "ExtAmtInfo", m_lIndex);
                    AddXMLField(pSess, "ExtAmtLit", m_szExtAmtLit, &m_bExtAmtLit);
                    AddXMLField(pSess, "ExtAmt", m_szExtAmt, &m_bExtAmt);
                    AddXMLCloseRecord(pSess, "ExtAmtInfo");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "ExtAmtInfo", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "ExtAmtLit", m_szExtAmtLit);
                    GetXMLField(pSess, "ExtAmt", m_szExtAmt);
                    CloseXMLRecord(pSess, "ExtAmtInfo");
                };
            }
        };

        AsdExtAmtInfo  CExtAmtInfo[11];
        AsdExtAmtInfo *ExtAmtInfo[11];
        
        //**************** End AsdExtAmtInfo Definition ****************
        
    };

    AsdSDSTMYMI CSDSTMYMI;
    AsdSDSTMYMI *SDSTMYMI;
    
    //**************** End AsdSDSTMYMI Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCSP80Data Definition ****************

typedef AsdSDPCSP80Data *LPSDPCSP80;
typedef AsdSDPCSP80Data::AsdTSHeader *LPSDPCSP80_TSHeader;
typedef AsdSDPCSP80Data::AsdSDSTCMMI *LPSDPCSP80_SDSTCMMI;
typedef AsdSDPCSP80Data::AsdSDSTMYMI *LPSDPCSP80_SDSTMYMI;
typedef AsdSDPCSP80Data::AsdSDSTMYMI::AsdExtAmtInfo *LPSDPCSP80_SDSTMYMI_ExtAmtInfo;
typedef AsdSDPCSP80Data::AsdTSMDA *LPSDPCSP80_TSMDA;
typedef AsdSDPCSP80Data::AsdTSMDA::AsdMdaTrmMsg *LPSDPCSP80_TSMDA_MdaTrmMsg;
typedef AsdSDPCSP80Data::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCSP80_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCSP80Data_H

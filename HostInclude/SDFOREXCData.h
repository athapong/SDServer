#ifndef AsdSDFOREXCData_H
#define AsdSDFOREXCData_H

#include <stdlib.h>
#ifdef  AsdSDFOREXC_INTEGRITY_STRING
#undef  AsdSDFOREXC_INTEGRITY_STRING
#endif
#define AsdSDFOREXC_INTEGRITY_STRING        ""

#ifdef  AsdSDFOREXC_CRC_STRING
#undef  AsdSDFOREXC_CRC_STRING
#endif
#define AsdSDFOREXC_CRC_STRING "3546562849"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDFOREXCData Definition ****************
//                 Foreign Exchange

//                 SDFOREXCData.h generated by AceGen2 ver. 2.5.09

class AsdSDFOREXCData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDFOREXCData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDFOREXC.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDFOREXC_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDNXRTEI = &CSDNXRTEI;
        SDNXCTLO = &CSDNXCTLO;
        SDNXRTEO = &CSDNXRTEO;
        TSMDA = &CTSMDA;
    }

    ~AsdSDFOREXCData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDNXRTEI.Reinit();
            CSDNXCTLO.Reinit();
            CSDNXRTEO.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDFOREXC_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDFOREXC_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDNXRTEI.Save(&m_Sess);
        CSDNXCTLO.Save(&m_Sess);
        CSDNXRTEO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDFOREXC", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDNXRTEI.Load(&m_Sess);
                        CSDNXCTLO.Load(&m_Sess);
                        CSDNXRTEO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDFOREXC");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDFOREXC_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDNXRTEI.Save(&m_Sess);
        CSDNXCTLO.Save(&m_Sess);
        CSDNXRTEO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDFOREXC", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDNXRTEI.Load(&m_Sess);
                        CSDNXCTLO.Load(&m_Sess);
                        CSDNXRTEO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDFOREXC");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDFOREXC_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDNXRTEI Definition ****************
    //                 NX RATE DOWNLOAD INPUT DAG                                  
    
    //    SDNXRTEI.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:20
    class AsdSDNXRTEI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bKeyAppl;
        char      m_szKeyAppl[2+1];
        bool      m_bKeyCtl1;
        char      m_szKeyCtl1[2+1];
        bool      m_bKeyCtl2;
        char      m_szKeyCtl2[3+1];
        bool      m_bKeyCtl3;
        char      m_szKeyCtl3[3+1];
        bool      m_bKeyCtl4;
        char      m_szKeyCtl4[4+1];
        bool      m_bKeyCurrency;
        char      m_szKeyCurrency[3+1];
        bool      m_bDownloadType;
        char      m_szDownloadType[1+1];
        bool      m_bNbrOfDaysToReturn;
        char      m_szNbrOfDaysToReturn[2+1];
        bool      m_bMoreCtlsFlag;
        char      m_szMoreCtlsFlag[1+1];
        bool      m_bMoreRatesFlag;
        char      m_szMoreRatesFlag[1+1];
        bool      m_bSaveCtlsKey;
        char      m_szSaveCtlsKey[17+1];
        bool      m_bSaveRatesKey;
        char      m_szSaveRatesKey[22+1];
        bool      m_bSaveDaysReturned;
        char      m_szSaveDaysReturned[2+1];
    
      public:
        long      m_lIndex;

        AsdSDNXRTEI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bKeyAppl = false;
            strcpy(m_szKeyAppl, "");
            m_bKeyCtl1 = false;
            strcpy(m_szKeyCtl1, "00");
            m_bKeyCtl2 = false;
            strcpy(m_szKeyCtl2, "000");
            m_bKeyCtl3 = false;
            strcpy(m_szKeyCtl3, "000");
            m_bKeyCtl4 = false;
            strcpy(m_szKeyCtl4, "0000");
            m_bKeyCurrency = false;
            strcpy(m_szKeyCurrency, "");
            m_bDownloadType = false;
            strcpy(m_szDownloadType, "");
            m_bNbrOfDaysToReturn = false;
            strcpy(m_szNbrOfDaysToReturn, "00");
            m_bMoreCtlsFlag = false;
            strcpy(m_szMoreCtlsFlag, "");
            m_bMoreRatesFlag = false;
            strcpy(m_szMoreRatesFlag, "");
            m_bSaveCtlsKey = false;
            strcpy(m_szSaveCtlsKey, "");
            m_bSaveRatesKey = false;
            strcpy(m_szSaveRatesKey, "");
            m_bSaveDaysReturned = false;
            strcpy(m_szSaveDaysReturned, "00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bKeyAppl = false;
            strcpy(m_szKeyAppl, "");
            m_bKeyCtl1 = false;
            strcpy(m_szKeyCtl1, "00");
            m_bKeyCtl2 = false;
            strcpy(m_szKeyCtl2, "000");
            m_bKeyCtl3 = false;
            strcpy(m_szKeyCtl3, "000");
            m_bKeyCtl4 = false;
            strcpy(m_szKeyCtl4, "0000");
            m_bKeyCurrency = false;
            strcpy(m_szKeyCurrency, "");
            m_bDownloadType = false;
            strcpy(m_szDownloadType, "");
            m_bNbrOfDaysToReturn = false;
            strcpy(m_szNbrOfDaysToReturn, "00");
            m_bMoreCtlsFlag = false;
            strcpy(m_szMoreCtlsFlag, "");
            m_bMoreRatesFlag = false;
            strcpy(m_szMoreRatesFlag, "");
            m_bSaveCtlsKey = false;
            strcpy(m_szSaveCtlsKey, "");
            m_bSaveRatesKey = false;
            strcpy(m_szSaveRatesKey, "");
            m_bSaveDaysReturned = false;
            strcpy(m_szSaveDaysReturned, "00");
        }

        
        //    APPLICATION ID
        long lKeyAppl () { return 2; };
        RWCString KeyAppl (void)
        {
            return m_szKeyAppl;
        }
        long KeyAppl (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyAppl, sizeof(m_szKeyAppl), &m_bKeyAppl);
        }
        
        //    CONTROL 1
        long lKeyCtl1 () { return 2; };
        RWCString KeyCtl1 (void)
        {
            return m_szKeyCtl1;
        }
        long KeyCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyCtl1, sizeof(m_szKeyCtl1), &m_bKeyCtl1);
        }
        
        //    CONTROL 2
        long lKeyCtl2 () { return 3; };
        RWCString KeyCtl2 (void)
        {
            return m_szKeyCtl2;
        }
        long KeyCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyCtl2, sizeof(m_szKeyCtl2), &m_bKeyCtl2);
        }
        
        //    CONTROL 3
        long lKeyCtl3 () { return 3; };
        RWCString KeyCtl3 (void)
        {
            return m_szKeyCtl3;
        }
        long KeyCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyCtl3, sizeof(m_szKeyCtl3), &m_bKeyCtl3);
        }
        
        //    CONTROL 4
        long lKeyCtl4 () { return 4; };
        RWCString KeyCtl4 (void)
        {
            return m_szKeyCtl4;
        }
        long KeyCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyCtl4, sizeof(m_szKeyCtl4), &m_bKeyCtl4);
        }
        
        //    CURRENCY CODE FOR KEY
        long lKeyCurrency () { return 3; };
        RWCString KeyCurrency (void)
        {
            return m_szKeyCurrency;
        }
        long KeyCurrency (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyCurrency, sizeof(m_szKeyCurrency), &m_bKeyCurrency);
        }
        
        //    DOWNLOAD TYPE
        long lDownloadType () { return 1; };
        RWCString DownloadType (void)
        {
            return m_szDownloadType;
        }
        long DownloadType (const RWCString& rwc)
        {
            return SetString(rwc, m_szDownloadType, sizeof(m_szDownloadType), &m_bDownloadType);
        }
        
        //    NUMBER OF DAYS OF RATE RECORDS TO RETURN
        long lNbrOfDaysToReturn () { return 2; };
        RWCString NbrOfDaysToReturn (void)
        {
            return m_szNbrOfDaysToReturn;
        }
        long NbrOfDaysToReturn (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrOfDaysToReturn, sizeof(m_szNbrOfDaysToReturn), &m_bNbrOfDaysToReturn);
        }
        
        //    MORE CONTROLS FLAG
        long lMoreCtlsFlag () { return 1; };
        RWCString MoreCtlsFlag (void)
        {
            return m_szMoreCtlsFlag;
        }
        long MoreCtlsFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreCtlsFlag, sizeof(m_szMoreCtlsFlag), &m_bMoreCtlsFlag);
        }
        
        //    MORE RATES FLAG
        long lMoreRatesFlag () { return 1; };
        RWCString MoreRatesFlag (void)
        {
            return m_szMoreRatesFlag;
        }
        long MoreRatesFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreRatesFlag, sizeof(m_szMoreRatesFlag), &m_bMoreRatesFlag);
        }
        
        //    SAVE CONTROLS KEY
        long lSaveCtlsKey () { return 17; };
        RWCString SaveCtlsKey (void)
        {
            return m_szSaveCtlsKey;
        }
        long SaveCtlsKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveCtlsKey, sizeof(m_szSaveCtlsKey), &m_bSaveCtlsKey);
        }
        
        //    SAVE RATES KEY
        long lSaveRatesKey () { return 22; };
        RWCString SaveRatesKey (void)
        {
            return m_szSaveRatesKey;
        }
        long SaveRatesKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveRatesKey, sizeof(m_szSaveRatesKey), &m_bSaveRatesKey);
        }
        
        //    SAVE DAYS OF RATE RECORDS RETURNED
        long lSaveDaysReturned () { return 2; };
        RWCString SaveDaysReturned (void)
        {
            return m_szSaveDaysReturned;
        }
        long SaveDaysReturned (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveDaysReturned, sizeof(m_szSaveDaysReturned), &m_bSaveDaysReturned);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bKeyAppl) return true;
            if (m_bKeyCtl1) return true;
            if (m_bKeyCtl2) return true;
            if (m_bKeyCtl3) return true;
            if (m_bKeyCtl4) return true;
            if (m_bKeyCurrency) return true;
            if (m_bDownloadType) return true;
            if (m_bNbrOfDaysToReturn) return true;
            if (m_bMoreCtlsFlag) return true;
            if (m_bMoreRatesFlag) return true;
            if (m_bSaveCtlsKey) return true;
            if (m_bSaveRatesKey) return true;
            if (m_bSaveDaysReturned) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDNXRTEI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "KeyAppl", m_szKeyAppl, &m_bKeyAppl);
                AddXMLField(pSess, "KeyCtl1", m_szKeyCtl1, &m_bKeyCtl1);
                AddXMLField(pSess, "KeyCtl2", m_szKeyCtl2, &m_bKeyCtl2);
                AddXMLField(pSess, "KeyCtl3", m_szKeyCtl3, &m_bKeyCtl3);
                AddXMLField(pSess, "KeyCtl4", m_szKeyCtl4, &m_bKeyCtl4);
                AddXMLField(pSess, "KeyCurrency", m_szKeyCurrency, &m_bKeyCurrency);
                AddXMLField(pSess, "DownloadType", m_szDownloadType, &m_bDownloadType);
                AddXMLField(pSess, "NbrOfDaysToReturn", m_szNbrOfDaysToReturn, &m_bNbrOfDaysToReturn);
                AddXMLField(pSess, "MoreCtlsFlag", m_szMoreCtlsFlag, &m_bMoreCtlsFlag);
                AddXMLField(pSess, "MoreRatesFlag", m_szMoreRatesFlag, &m_bMoreRatesFlag);
                AddXMLField(pSess, "SaveCtlsKey", m_szSaveCtlsKey, &m_bSaveCtlsKey);
                AddXMLField(pSess, "SaveRatesKey", m_szSaveRatesKey, &m_bSaveRatesKey);
                AddXMLField(pSess, "SaveDaysReturned", m_szSaveDaysReturned, &m_bSaveDaysReturned);
                AddXMLCloseRecord(pSess, "SDNXRTEI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDNXRTEI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "KeyAppl", m_szKeyAppl);
                GetXMLField(pSess, "KeyCtl1", m_szKeyCtl1);
                GetXMLField(pSess, "KeyCtl2", m_szKeyCtl2);
                GetXMLField(pSess, "KeyCtl3", m_szKeyCtl3);
                GetXMLField(pSess, "KeyCtl4", m_szKeyCtl4);
                GetXMLField(pSess, "KeyCurrency", m_szKeyCurrency);
                GetXMLField(pSess, "DownloadType", m_szDownloadType);
                GetXMLField(pSess, "NbrOfDaysToReturn", m_szNbrOfDaysToReturn);
                GetXMLField(pSess, "MoreCtlsFlag", m_szMoreCtlsFlag);
                GetXMLField(pSess, "MoreRatesFlag", m_szMoreRatesFlag);
                GetXMLField(pSess, "SaveCtlsKey", m_szSaveCtlsKey);
                GetXMLField(pSess, "SaveRatesKey", m_szSaveRatesKey);
                GetXMLField(pSess, "SaveDaysReturned", m_szSaveDaysReturned);
                CloseXMLRecord(pSess, "SDNXRTEI");
            };
        }
    };

    AsdSDNXRTEI CSDNXRTEI;
    AsdSDNXRTEI *SDNXRTEI;
    
    //**************** End AsdSDNXRTEI Definition ****************

    
    //**************** Start AsdSDNXCTLO Definition ****************
    //                 NX CONTROLS OUTPUT DAG                                      
    
    //    SDNXCTLO.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:20
    class AsdSDNXCTLO
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMoreCtlsFlag;
        char      m_szMoreCtlsFlag[1+1];
        bool      m_bSaveCtlsKey;
        char      m_szSaveCtlsKey[17+1];
        bool      m_bRecordsReturned;
        char      m_szRecordsReturned[4+1];
    
      public:
        long      m_lIndex;

        AsdSDNXCTLO ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMoreCtlsFlag = false;
            strcpy(m_szMoreCtlsFlag, "");
            m_bSaveCtlsKey = false;
            strcpy(m_szSaveCtlsKey, "");
            m_bRecordsReturned = false;
            strcpy(m_szRecordsReturned, "+000");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 10; lOccurs++)
            {
                ControlsRecord[lOccurs]  = &CControlsRecord[lOccurs];
                CControlsRecord[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMoreCtlsFlag = false;
            strcpy(m_szMoreCtlsFlag, "");
            m_bSaveCtlsKey = false;
            strcpy(m_szSaveCtlsKey, "");
            m_bRecordsReturned = false;
            strcpy(m_szRecordsReturned, "+000");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 10; lOccurs++)
            {
                ControlsRecord[lOccurs]  = &CControlsRecord[lOccurs];
                CControlsRecord[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    MORE CONTROLS FLAG
        long lMoreCtlsFlag () { return 1; };
        RWCString MoreCtlsFlag (void)
        {
            return m_szMoreCtlsFlag;
        }
        long MoreCtlsFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreCtlsFlag, sizeof(m_szMoreCtlsFlag), &m_bMoreCtlsFlag);
        }
        
        //    SAVE CONTROLS KEY
        long lSaveCtlsKey () { return 17; };
        RWCString SaveCtlsKey (void)
        {
            return m_szSaveCtlsKey;
        }
        long SaveCtlsKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveCtlsKey, sizeof(m_szSaveCtlsKey), &m_bSaveCtlsKey);
        }
        
        //    NUMBER OF RECORDS RETURNED
        long lRecordsReturned () { return 4; };
        RWCString RecordsReturned (void)
        {
            return AceZeroSupp(m_szRecordsReturned, &m_szSuppressBuff[0]);
        }
        RWCString RecordsReturnedRaw (void)
        {
            return m_szRecordsReturned;
        }
        long RecordsReturned (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecordsReturned, sizeof(m_szRecordsReturned), &m_bRecordsReturned);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMoreCtlsFlag) return true;
            if (m_bSaveCtlsKey) return true;
            if (m_bRecordsReturned) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 10; lOccurs++)
            {
                if(CControlsRecord[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDNXCTLO", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MoreCtlsFlag", m_szMoreCtlsFlag, &m_bMoreCtlsFlag);
                AddXMLField(pSess, "SaveCtlsKey", m_szSaveCtlsKey, &m_bSaveCtlsKey);
                AddXMLField(pSess, "RecordsReturned", m_szRecordsReturned, &m_bRecordsReturned);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 10; lOccurs++)
                {
                    CControlsRecord[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDNXCTLO");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDNXCTLO", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MoreCtlsFlag", m_szMoreCtlsFlag);
                GetXMLField(pSess, "SaveCtlsKey", m_szSaveCtlsKey);
                GetXMLField(pSess, "RecordsReturned", m_szRecordsReturned);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 10; lOccurs++)
                {
                    CControlsRecord[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDNXCTLO");
            };
        }
        
        //**************** Start AsdControlsRecord Definition ****************
        //                 CONTROLS RECORD
        
        class AsdControlsRecord
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bKeyAppl;
            char      m_szKeyAppl[2+1];
            bool      m_bKeyCtl1;
            char      m_szKeyCtl1[2+1];
            bool      m_bKeyCtl2;
            char      m_szKeyCtl2[3+1];
            bool      m_bKeyCtl3;
            char      m_szKeyCtl3[3+1];
            bool      m_bKeyCtl4;
            char      m_szKeyCtl4[4+1];
            bool      m_bKeyCurrency;
            char      m_szKeyCurrency[3+1];
            bool      m_bCurrency;
            char      m_szCurrency[3+1];
            bool      m_bFmsCustNbr;
            char      m_szFmsCustNbr[4+1];
            bool      m_bBaseCurrFlag;
            char      m_szBaseCurrFlag[1+1];
            bool      m_bDecimal;
            char      m_szDecimal[1+1];
        
          public:
            long      m_lIndex;

            AsdControlsRecord ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bKeyAppl = false;
                strcpy(m_szKeyAppl, "");
                m_bKeyCtl1 = false;
                strcpy(m_szKeyCtl1, "00");
                m_bKeyCtl2 = false;
                strcpy(m_szKeyCtl2, "000");
                m_bKeyCtl3 = false;
                strcpy(m_szKeyCtl3, "000");
                m_bKeyCtl4 = false;
                strcpy(m_szKeyCtl4, "0000");
                m_bKeyCurrency = false;
                strcpy(m_szKeyCurrency, "");
                m_bCurrency = false;
                strcpy(m_szCurrency, "");
                m_bFmsCustNbr = false;
                strcpy(m_szFmsCustNbr, "0000");
                m_bBaseCurrFlag = false;
                strcpy(m_szBaseCurrFlag, "");
                m_bDecimal = false;
                strcpy(m_szDecimal, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    APPLICATION ID
            long lKeyAppl () { return 2; };
            RWCString KeyAppl (void)
            {
                return m_szKeyAppl;
            }
            long KeyAppl (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyAppl, sizeof(m_szKeyAppl), &m_bKeyAppl);
            }
            
            //    CONTROL 1
            long lKeyCtl1 () { return 2; };
            RWCString KeyCtl1 (void)
            {
                return m_szKeyCtl1;
            }
            long KeyCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyCtl1, sizeof(m_szKeyCtl1), &m_bKeyCtl1);
            }
            
            //    CONTROL 2
            long lKeyCtl2 () { return 3; };
            RWCString KeyCtl2 (void)
            {
                return m_szKeyCtl2;
            }
            long KeyCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyCtl2, sizeof(m_szKeyCtl2), &m_bKeyCtl2);
            }
            
            //    CONTROL 3
            long lKeyCtl3 () { return 3; };
            RWCString KeyCtl3 (void)
            {
                return m_szKeyCtl3;
            }
            long KeyCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyCtl3, sizeof(m_szKeyCtl3), &m_bKeyCtl3);
            }
            
            //    CONTROL 4
            long lKeyCtl4 () { return 4; };
            RWCString KeyCtl4 (void)
            {
                return m_szKeyCtl4;
            }
            long KeyCtl4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyCtl4, sizeof(m_szKeyCtl4), &m_bKeyCtl4);
            }
            
            //    CURRENCY CODE FOR KEY
            long lKeyCurrency () { return 3; };
            RWCString KeyCurrency (void)
            {
                return m_szKeyCurrency;
            }
            long KeyCurrency (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyCurrency, sizeof(m_szKeyCurrency), &m_bKeyCurrency);
            }
            
            //    CURRENCY CODE
            long lCurrency () { return 3; };
            RWCString Currency (void)
            {
                return m_szCurrency;
            }
            long Currency (const RWCString& rwc)
            {
                return SetString(rwc, m_szCurrency, sizeof(m_szCurrency), &m_bCurrency);
            }
            
            //    FMS CUSTOMER NUMBER
            long lFmsCustNbr () { return 4; };
            RWCString FmsCustNbr (void)
            {
                return m_szFmsCustNbr;
            }
            long FmsCustNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szFmsCustNbr, sizeof(m_szFmsCustNbr), &m_bFmsCustNbr);
            }
            
            //    BASE CURRENCY FLAG
            long lBaseCurrFlag () { return 1; };
            RWCString BaseCurrFlag (void)
            {
                return m_szBaseCurrFlag;
            }
            long BaseCurrFlag (const RWCString& rwc)
            {
                return SetString(rwc, m_szBaseCurrFlag, sizeof(m_szBaseCurrFlag), &m_bBaseCurrFlag);
            }
            
            //    NBR OF DECIMAL POSITIONS
            long lDecimal () { return 1; };
            RWCString Decimal (void)
            {
                return m_szDecimal;
            }
            long Decimal (const RWCString& rwc)
            {
                return SetString(rwc, m_szDecimal, sizeof(m_szDecimal), &m_bDecimal);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bKeyAppl) return true;
                if (m_bKeyCtl1) return true;
                if (m_bKeyCtl2) return true;
                if (m_bKeyCtl3) return true;
                if (m_bKeyCtl4) return true;
                if (m_bKeyCurrency) return true;
                if (m_bCurrency) return true;
                if (m_bFmsCustNbr) return true;
                if (m_bBaseCurrFlag) return true;
                if (m_bDecimal) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "ControlsRecord", m_lIndex);
                    AddXMLField(pSess, "KeyAppl", m_szKeyAppl, &m_bKeyAppl);
                    AddXMLField(pSess, "KeyCtl1", m_szKeyCtl1, &m_bKeyCtl1);
                    AddXMLField(pSess, "KeyCtl2", m_szKeyCtl2, &m_bKeyCtl2);
                    AddXMLField(pSess, "KeyCtl3", m_szKeyCtl3, &m_bKeyCtl3);
                    AddXMLField(pSess, "KeyCtl4", m_szKeyCtl4, &m_bKeyCtl4);
                    AddXMLField(pSess, "KeyCurrency", m_szKeyCurrency, &m_bKeyCurrency);
                    AddXMLField(pSess, "Currency", m_szCurrency, &m_bCurrency);
                    AddXMLField(pSess, "FmsCustNbr", m_szFmsCustNbr, &m_bFmsCustNbr);
                    AddXMLField(pSess, "BaseCurrFlag", m_szBaseCurrFlag, &m_bBaseCurrFlag);
                    AddXMLField(pSess, "Decimal", m_szDecimal, &m_bDecimal);
                    AddXMLCloseRecord(pSess, "ControlsRecord");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "ControlsRecord", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "KeyAppl", m_szKeyAppl);
                    GetXMLField(pSess, "KeyCtl1", m_szKeyCtl1);
                    GetXMLField(pSess, "KeyCtl2", m_szKeyCtl2);
                    GetXMLField(pSess, "KeyCtl3", m_szKeyCtl3);
                    GetXMLField(pSess, "KeyCtl4", m_szKeyCtl4);
                    GetXMLField(pSess, "KeyCurrency", m_szKeyCurrency);
                    GetXMLField(pSess, "Currency", m_szCurrency);
                    GetXMLField(pSess, "FmsCustNbr", m_szFmsCustNbr);
                    GetXMLField(pSess, "BaseCurrFlag", m_szBaseCurrFlag);
                    GetXMLField(pSess, "Decimal", m_szDecimal);
                    CloseXMLRecord(pSess, "ControlsRecord");
                };
            }
        };

        AsdControlsRecord  CControlsRecord[10];
        AsdControlsRecord *ControlsRecord[10];
        
        //**************** End AsdControlsRecord Definition ****************
        
    };

    AsdSDNXCTLO CSDNXCTLO;
    AsdSDNXCTLO *SDNXCTLO;
    
    //**************** End AsdSDNXCTLO Definition ****************

    
    //**************** Start AsdSDNXRTEO Definition ****************
    //                 NX RATE OUTPUT DAG                                          
    
    //    SDNXRTEO.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:20
    class AsdSDNXRTEO
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMoreRatesFlag;
        char      m_szMoreRatesFlag[1+1];
        bool      m_bSaveRatesKey;
        char      m_szSaveRatesKey[22+1];
        bool      m_bSaveDaysReturned;
        char      m_szSaveDaysReturned[2+1];
        bool      m_bRecordsReturned;
        char      m_szRecordsReturned[4+1];
    
      public:
        long      m_lIndex;

        AsdSDNXRTEO ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMoreRatesFlag = false;
            strcpy(m_szMoreRatesFlag, "");
            m_bSaveRatesKey = false;
            strcpy(m_szSaveRatesKey, "");
            m_bSaveDaysReturned = false;
            strcpy(m_szSaveDaysReturned, "00");
            m_bRecordsReturned = false;
            strcpy(m_szRecordsReturned, "+000");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 100; lOccurs++)
            {
                RateRecord[lOccurs]  = &CRateRecord[lOccurs];
                CRateRecord[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMoreRatesFlag = false;
            strcpy(m_szMoreRatesFlag, "");
            m_bSaveRatesKey = false;
            strcpy(m_szSaveRatesKey, "");
            m_bSaveDaysReturned = false;
            strcpy(m_szSaveDaysReturned, "00");
            m_bRecordsReturned = false;
            strcpy(m_szRecordsReturned, "+000");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 100; lOccurs++)
            {
                RateRecord[lOccurs]  = &CRateRecord[lOccurs];
                CRateRecord[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    MORE RATES FLAG
        long lMoreRatesFlag () { return 1; };
        RWCString MoreRatesFlag (void)
        {
            return m_szMoreRatesFlag;
        }
        long MoreRatesFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreRatesFlag, sizeof(m_szMoreRatesFlag), &m_bMoreRatesFlag);
        }
        
        //    SAVE RATES KEY
        long lSaveRatesKey () { return 22; };
        RWCString SaveRatesKey (void)
        {
            return m_szSaveRatesKey;
        }
        long SaveRatesKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveRatesKey, sizeof(m_szSaveRatesKey), &m_bSaveRatesKey);
        }
        
        //    SAVE DAYS OF RATE RECORDS RETURNED
        long lSaveDaysReturned () { return 2; };
        RWCString SaveDaysReturned (void)
        {
            return m_szSaveDaysReturned;
        }
        long SaveDaysReturned (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveDaysReturned, sizeof(m_szSaveDaysReturned), &m_bSaveDaysReturned);
        }
        
        //    NUMBER OF RECORDS RETURNED
        long lRecordsReturned () { return 4; };
        RWCString RecordsReturned (void)
        {
            return AceZeroSupp(m_szRecordsReturned, &m_szSuppressBuff[0]);
        }
        RWCString RecordsReturnedRaw (void)
        {
            return m_szRecordsReturned;
        }
        long RecordsReturned (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecordsReturned, sizeof(m_szRecordsReturned), &m_bRecordsReturned);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMoreRatesFlag) return true;
            if (m_bSaveRatesKey) return true;
            if (m_bSaveDaysReturned) return true;
            if (m_bRecordsReturned) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 100; lOccurs++)
            {
                if(CRateRecord[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDNXRTEO", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MoreRatesFlag", m_szMoreRatesFlag, &m_bMoreRatesFlag);
                AddXMLField(pSess, "SaveRatesKey", m_szSaveRatesKey, &m_bSaveRatesKey);
                AddXMLField(pSess, "SaveDaysReturned", m_szSaveDaysReturned, &m_bSaveDaysReturned);
                AddXMLField(pSess, "RecordsReturned", m_szRecordsReturned, &m_bRecordsReturned);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 100; lOccurs++)
                {
                    CRateRecord[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDNXRTEO");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDNXRTEO", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MoreRatesFlag", m_szMoreRatesFlag);
                GetXMLField(pSess, "SaveRatesKey", m_szSaveRatesKey);
                GetXMLField(pSess, "SaveDaysReturned", m_szSaveDaysReturned);
                GetXMLField(pSess, "RecordsReturned", m_szRecordsReturned);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 100; lOccurs++)
                {
                    CRateRecord[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDNXRTEO");
            };
        }
        
        //**************** Start AsdRateRecord Definition ****************
        //                 RATE RECORD
        
        class AsdRateRecord
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bKeyFmsCustNbr;
            char      m_szKeyFmsCustNbr[4+1];
            bool      m_bKeyBaseCurrency;
            char      m_szKeyBaseCurrency[3+1];
            bool      m_bKeyCurrency;
            char      m_szKeyCurrency[3+1];
            bool      m_bKeyQualifier;
            char      m_szKeyQualifier[4+1];
            bool      m_bKey9sComplDate;
            char      m_szKey9sComplDate[8+1];
            bool      m_bEffectiveDate;
            char      m_szEffectiveDate[8+1];
            bool      m_bBuyRate;
            char      m_szBuyRate[13+1];
            bool      m_bSellRate;
            char      m_szSellRate[13+1];
            bool      m_bFactor;
            char      m_szFactor[2+1];
            bool      m_bMultDivide;
            char      m_szMultDivide[1+1];
            bool      m_bOvrVariance;
            char      m_szOvrVariance[2+1];
        
          public:
            long      m_lIndex;

            AsdRateRecord ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bKeyFmsCustNbr = false;
                strcpy(m_szKeyFmsCustNbr, "0000");
                m_bKeyBaseCurrency = false;
                strcpy(m_szKeyBaseCurrency, "");
                m_bKeyCurrency = false;
                strcpy(m_szKeyCurrency, "");
                m_bKeyQualifier = false;
                strcpy(m_szKeyQualifier, "");
                m_bKey9sComplDate = false;
                strcpy(m_szKey9sComplDate, "00000000");
                m_bEffectiveDate = false;
                strcpy(m_szEffectiveDate, "00000000");
                m_bBuyRate = false;
                strcpy(m_szBuyRate, "+00000.000000");
                m_bSellRate = false;
                strcpy(m_szSellRate, "+00000.000000");
                m_bFactor = false;
                strcpy(m_szFactor, "+0");
                m_bMultDivide = false;
                strcpy(m_szMultDivide, "");
                m_bOvrVariance = false;
                strcpy(m_szOvrVariance, "00");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    KEY FMS CUSTOMER NUMBER
            long lKeyFmsCustNbr () { return 4; };
            RWCString KeyFmsCustNbr (void)
            {
                return m_szKeyFmsCustNbr;
            }
            long KeyFmsCustNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyFmsCustNbr, sizeof(m_szKeyFmsCustNbr), &m_bKeyFmsCustNbr);
            }
            
            //    KEY BASE CURRENCY CODE
            long lKeyBaseCurrency () { return 3; };
            RWCString KeyBaseCurrency (void)
            {
                return m_szKeyBaseCurrency;
            }
            long KeyBaseCurrency (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyBaseCurrency, sizeof(m_szKeyBaseCurrency), &m_bKeyBaseCurrency);
            }
            
            //    KEY CURRENCY CODE
            long lKeyCurrency () { return 3; };
            RWCString KeyCurrency (void)
            {
                return m_szKeyCurrency;
            }
            long KeyCurrency (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyCurrency, sizeof(m_szKeyCurrency), &m_bKeyCurrency);
            }
            
            //    KEY QUALIFIER
            long lKeyQualifier () { return 4; };
            RWCString KeyQualifier (void)
            {
                return m_szKeyQualifier;
            }
            long KeyQualifier (const RWCString& rwc)
            {
                return SetString(rwc, m_szKeyQualifier, sizeof(m_szKeyQualifier), &m_bKeyQualifier);
            }
            
            //    KEY NINES COMPLEMENT DATE
            long lKey9sComplDate () { return 8; };
            RWCString Key9sComplDate (void)
            {
                return m_szKey9sComplDate;
            }
            long Key9sComplDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szKey9sComplDate, sizeof(m_szKey9sComplDate), &m_bKey9sComplDate);
            }
            
            //    EFFECTIVE DATE
            long lEffectiveDate () { return 8; };
            RWCString EffectiveDate (void)
            {
                return m_szEffectiveDate;
            }
            long EffectiveDate (const RWCString& rwc)
            {
                return SetString(rwc, m_szEffectiveDate, sizeof(m_szEffectiveDate), &m_bEffectiveDate);
            }
            
            //    BUY RATE
            long lBuyRate () { return 13; };
            RWCString BuyRate (void)
            {
                return AceZeroSupp(m_szBuyRate, &m_szSuppressBuff[0]);
            }
            RWCString BuyRateRaw (void)
            {
                return m_szBuyRate;
            }
            long BuyRate (const RWCString& rwc)
            {
                return SetString(rwc, m_szBuyRate, sizeof(m_szBuyRate), &m_bBuyRate);
            }
            
            //    SELL RATE
            long lSellRate () { return 13; };
            RWCString SellRate (void)
            {
                return AceZeroSupp(m_szSellRate, &m_szSuppressBuff[0]);
            }
            RWCString SellRateRaw (void)
            {
                return m_szSellRate;
            }
            long SellRate (const RWCString& rwc)
            {
                return SetString(rwc, m_szSellRate, sizeof(m_szSellRate), &m_bSellRate);
            }
            
            //    CALCULATION FACTOR
            long lFactor () { return 2; };
            RWCString Factor (void)
            {
                return AceZeroSupp(m_szFactor, &m_szSuppressBuff[0]);
            }
            RWCString FactorRaw (void)
            {
                return m_szFactor;
            }
            long Factor (const RWCString& rwc)
            {
                return SetString(rwc, m_szFactor, sizeof(m_szFactor), &m_bFactor);
            }
            
            //    MULTIPLY/DIVIDE INDICATOR
            long lMultDivide () { return 1; };
            RWCString MultDivide (void)
            {
                return m_szMultDivide;
            }
            long MultDivide (const RWCString& rwc)
            {
                return SetString(rwc, m_szMultDivide, sizeof(m_szMultDivide), &m_bMultDivide);
            }
            
            //    OVERRIDE PERCENT VARIANCE
            long lOvrVariance () { return 2; };
            RWCString OvrVariance (void)
            {
                return m_szOvrVariance;
            }
            long OvrVariance (const RWCString& rwc)
            {
                return SetString(rwc, m_szOvrVariance, sizeof(m_szOvrVariance), &m_bOvrVariance);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bKeyFmsCustNbr) return true;
                if (m_bKeyBaseCurrency) return true;
                if (m_bKeyCurrency) return true;
                if (m_bKeyQualifier) return true;
                if (m_bKey9sComplDate) return true;
                if (m_bEffectiveDate) return true;
                if (m_bBuyRate) return true;
                if (m_bSellRate) return true;
                if (m_bFactor) return true;
                if (m_bMultDivide) return true;
                if (m_bOvrVariance) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "RateRecord", m_lIndex);
                    AddXMLField(pSess, "KeyFmsCustNbr", m_szKeyFmsCustNbr, &m_bKeyFmsCustNbr);
                    AddXMLField(pSess, "KeyBaseCurrency", m_szKeyBaseCurrency, &m_bKeyBaseCurrency);
                    AddXMLField(pSess, "KeyCurrency", m_szKeyCurrency, &m_bKeyCurrency);
                    AddXMLField(pSess, "KeyQualifier", m_szKeyQualifier, &m_bKeyQualifier);
                    AddXMLField(pSess, "Key9sComplDate", m_szKey9sComplDate, &m_bKey9sComplDate);
                    AddXMLField(pSess, "EffectiveDate", m_szEffectiveDate, &m_bEffectiveDate);
                    AddXMLField(pSess, "BuyRate", m_szBuyRate, &m_bBuyRate);
                    AddXMLField(pSess, "SellRate", m_szSellRate, &m_bSellRate);
                    AddXMLField(pSess, "Factor", m_szFactor, &m_bFactor);
                    AddXMLField(pSess, "MultDivide", m_szMultDivide, &m_bMultDivide);
                    AddXMLField(pSess, "OvrVariance", m_szOvrVariance, &m_bOvrVariance);
                    AddXMLCloseRecord(pSess, "RateRecord");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "RateRecord", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "KeyFmsCustNbr", m_szKeyFmsCustNbr);
                    GetXMLField(pSess, "KeyBaseCurrency", m_szKeyBaseCurrency);
                    GetXMLField(pSess, "KeyCurrency", m_szKeyCurrency);
                    GetXMLField(pSess, "KeyQualifier", m_szKeyQualifier);
                    GetXMLField(pSess, "Key9sComplDate", m_szKey9sComplDate);
                    GetXMLField(pSess, "EffectiveDate", m_szEffectiveDate);
                    GetXMLField(pSess, "BuyRate", m_szBuyRate);
                    GetXMLField(pSess, "SellRate", m_szSellRate);
                    GetXMLField(pSess, "Factor", m_szFactor);
                    GetXMLField(pSess, "MultDivide", m_szMultDivide);
                    GetXMLField(pSess, "OvrVariance", m_szOvrVariance);
                    CloseXMLRecord(pSess, "RateRecord");
                };
            }
        };

        AsdRateRecord  CRateRecord[100];
        AsdRateRecord *RateRecord[100];
        
        //**************** End AsdRateRecord Definition ****************
        
    };

    AsdSDNXRTEO CSDNXRTEO;
    AsdSDNXRTEO *SDNXRTEO;
    
    //**************** End AsdSDNXRTEO Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDFOREXCData Definition ****************

typedef AsdSDFOREXCData *LPSDFOREXC;
typedef AsdSDFOREXCData::AsdTSHeader *LPSDFOREXC_TSHeader;
typedef AsdSDFOREXCData::AsdSDNXRTEI *LPSDFOREXC_SDNXRTEI;
typedef AsdSDFOREXCData::AsdSDNXCTLO *LPSDFOREXC_SDNXCTLO;
typedef AsdSDFOREXCData::AsdSDNXCTLO::AsdControlsRecord *LPSDFOREXC_SDNXCTLO_ControlsRecord;
typedef AsdSDFOREXCData::AsdSDNXRTEO *LPSDFOREXC_SDNXRTEO;
typedef AsdSDFOREXCData::AsdSDNXRTEO::AsdRateRecord *LPSDFOREXC_SDNXRTEO_RateRecord;
typedef AsdSDFOREXCData::AsdTSMDA *LPSDFOREXC_TSMDA;
typedef AsdSDFOREXCData::AsdTSMDA::AsdMdaTrmMsg *LPSDFOREXC_TSMDA_MdaTrmMsg;
typedef AsdSDFOREXCData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDFOREXC_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDFOREXCData_H

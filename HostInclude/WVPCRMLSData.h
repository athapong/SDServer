#ifndef AsdWVPCRMLSData_H
#define AsdWVPCRMLSData_H

#include <stdlib.h>
#ifdef  AsdWVPCRMLS_INTEGRITY_STRING
#undef  AsdWVPCRMLS_INTEGRITY_STRING
#endif
#define AsdWVPCRMLS_INTEGRITY_STRING ""

#ifdef  AsdWVPCRMLS_CRC_STRING
#undef  AsdWVPCRMLS_CRC_STRING
#endif
#define AsdWVPCRMLS_CRC_STRING "2110371264"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdWVPCRMLSData Definition ****************
//                 RM Customer Account List Inquiry

//                 WVPCRMLSData.h generated by AceGen ver. 4.2.11

class AsdWVPCRMLSData
{
  public:
    #include <AceUserExit.h>

  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdWVPCRMLSData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in AceCppClient.h
        m_Sess.pFileName = "WVPCRMLS.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdWVPCRMLS_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time
        TSHeader = &CTSHeader;
        RMTRAIOT = &CRMTRAIOT;
        WVRMOWNI = &CWVRMOWNI;
        TSMDA = &CTSMDA;
    }

    ~AsdWVPCRMLSData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            m_Sess.szHostLUName[0] = '\0';
            m_Sess.bPassedIntegrityCheck = false;
            m_Sess.lAuthCode = 0;
            m_Sess.lHandle = 0;
            m_Sess.szRetMessage[0] = '\0';
            m_Sess.szRetVal[0] = '\0';
            CTSHeader.Reinit();
            CRMTRAIOT.Reinit();
            CWVRMOWNI.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    RWCString DebugToScreen (void)
    {
        return m_Sess.szDebugToScreen;
    }
    long DebugToScreen (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szDebugToScreen, sizeof(m_Sess.szDebugToScreen));
    }

    RWCString DebugToFile (void)
    {
        return m_Sess.szDebugToFile;
    }
    long DebugToFile (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szDebugToFile, sizeof(m_Sess.szDebugToFile));
    }

    RWCString DebugFile (void)
    {
        return m_Sess.szDebugFile;
    }
    long DebugFile (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szDebugFile, sizeof(m_Sess.szDebugFile));
    }

    RWCString ExpandedDebugFormat (void)
    {
        return m_Sess.szExpandedDebugFormat;
    }
    long ExpandedDebugFormat (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szExpandedDebugFormat, sizeof(m_Sess.szExpandedDebugFormat));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }

    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }

    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }

    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdWVPCRMLS_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    RWCString GetExecuteXML (void)
    {
        return m_Sess.abRecv.Get();
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCRMLS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CRMTRAIOT.Save(&m_Sess);
        CWVRMOWNI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCRMLS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CRMTRAIOT.Load(&m_Sess);
                        CWVRMOWNI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCRMLS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        else
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
    
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCRMLS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CRMTRAIOT.Save(&m_Sess);
        CWVRMOWNI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCRMLS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CRMTRAIOT.Load(&m_Sess);
                        CWVRMOWNI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCRMLS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        else
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
    
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCRMLS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        ret = ExecuteXMLTransaction(&m_Sess);
    
        if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
        {
            GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
            GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
            GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
            GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
            GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
            GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

            CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
        }
    
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
                m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
                m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        long CountTranStatus () { return 3; };
        void TouchTranStatus()
        {
            long lTOccurs;
        
            for ( lTOccurs = 0; lTOccurs < 3; lTOccurs++ )
            {
                m_bTranStatus[lTOccurs] = true;
            }
        }
        long GetByteArrayTranStatus( unsigned char *ucBlob )
        {
            long lTOccurs;
        
            for ( lTOccurs = 0; lTOccurs < 3; lTOccurs++ )
            {
                ucBlob[lTOccurs] = m_nTranStatus[lTOccurs];
            }
            return 3;
        }
        long SetByteArrayTranStatus( unsigned char *ucBlob )
        {
            long lTOccurs;
            short nValue;
        
            for ( lTOccurs = 0; lTOccurs < 3; lTOccurs++ )
            {
                nValue = ucBlob[lTOccurs];
                SetShort(nValue, &m_nTranStatus[lTOccurs], &m_bTranStatus[lTOccurs]);
            }
            return 3;
        }
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdRMTRAIOT Definition ****************
    //                 APPLICATION ACCOUNT INTERFACE AREA                          
    
    //    RMTRAIOT.map
    //    generated by Dsm2Ace ver. 4.2.00
    //    on 05/08/14 14:24:45
    class AsdRMTRAIOT
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bAcctTblMax;
        short     m_nAcctTblMax;
        bool      m_bAcctTblUsed;
        short     m_nAcctTblUsed;
    
      public:
        long      m_lIndex;

        AsdRMTRAIOT ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bAcctTblMax = false;
            m_nAcctTblMax = 16;
            m_bAcctTblUsed = false;
            m_nAcctTblUsed = 0;
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                ApplData[lOccurs]  = &CApplData[lOccurs];
                CApplData[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bAcctTblMax = false;
            m_nAcctTblMax = 16;
            m_bAcctTblUsed = false;
            m_nAcctTblUsed = 0;
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                ApplData[lOccurs]  = &CApplData[lOccurs];
                CApplData[lOccurs].Reinit();
                CApplData[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    MAXIMUM ALLOWED IN TABLE
        short AcctTblMax (void)
        {
            return m_nAcctTblMax;
        }
        long AcctTblMax (const short nValue)
        {
            return SetShort(nValue, &m_nAcctTblMax, &m_bAcctTblMax);
        }
        
        //    NUMBER IN THE TABLE
        short AcctTblUsed (void)
        {
            return m_nAcctTblUsed;
        }
        long AcctTblUsed (const short nValue)
        {
            return SetShort(nValue, &m_nAcctTblUsed, &m_bAcctTblUsed);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bAcctTblMax) return true;
            if (m_bAcctTblUsed) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                if(CApplData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "RMTRAIOT", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "AcctTblMax", m_nAcctTblMax, &m_bAcctTblMax);
                AddXMLField(pSess, "AcctTblUsed", m_nAcctTblUsed, &m_bAcctTblUsed);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CApplData[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "RMTRAIOT");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "RMTRAIOT", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "AcctTblMax", &m_nAcctTblMax);
                GetXMLField(pSess, "AcctTblUsed", &m_nAcctTblUsed);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CApplData[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "RMTRAIOT");
            };
        }
        
        //**************** Start AsdApplData Definition ****************
        //                 GROUP LEVEL OF ACCOUNT DATA
        
        class AsdApplData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bApplAcctFndInd;
            char      m_szApplAcctFndInd[1+1];
            bool      m_bApplProcInd;
            char      m_szApplProcInd[1+1];
            bool      m_bApplId;
            char      m_szApplId[2+1];
            bool      m_bApplCtl1;
            char      m_szApplCtl1[4+1];
            bool      m_bApplCtl2;
            char      m_szApplCtl2[4+1];
            bool      m_bApplCtl3;
            char      m_szApplCtl3[4+1];
            bool      m_bApplCtl4;
            char      m_szApplCtl4[4+1];
            bool      m_bApplAcctNbr;
            char      m_szApplAcctNbr[27+1];
            bool      m_bApplKey;
            char      m_szApplKey[43+1];
            bool      m_bCurrCd;
            char      m_szCurrCd[3+1];
            bool      m_bApplProdCd;
            char      m_szApplProdCd[4+1];
            bool      m_bApplStatCd;
            char      m_szApplStatCd[6+1];
            bool      m_bApplOffEmpDirCd;
            char      m_szApplOffEmpDirCd[1+1];
            bool      m_bApplIraCd;
            char      m_szApplIraCd[1+1];
            bool      m_bApplTrlrTypCd;
            char      m_szApplTrlrTypCd[2+1];
            bool      m_bApplTypCd;
            char      m_szApplTypCd[2+1];
            bool      m_bApplCommitCd;
            char      m_szApplCommitCd[1+1];
            bool      m_bAcctYtdTimesNsf;
            char      m_szAcctYtdTimesNsf[6+1];
            bool      m_bAcctYtdTimesOd;
            char      m_szAcctYtdTimesOd[6+1];
            bool      m_bAcctBkcyCd;
            char      m_szAcctBkcyCd[1+1];
            bool      m_bAcctFrclCd;
            char      m_szAcctFrclCd[1+1];
            bool      m_bApplBal1;
            char      m_szApplBal1[19+1];
            bool      m_bApplBal1Desc;
            char      m_szApplBal1Desc[8+1];
            bool      m_bApplBal2;
            char      m_szApplBal2[19+1];
            bool      m_bApplBal2Desc;
            char      m_szApplBal2Desc[8+1];
            bool      m_bApplBal3;
            char      m_szApplBal3[19+1];
            bool      m_bApplBal3Desc;
            char      m_szApplBal3Desc[8+1];
            bool      m_bApplBal4;
            char      m_szApplBal4[19+1];
            bool      m_bApplBal4Desc;
            char      m_szApplBal4Desc[8+1];
            bool      m_bApplBal5;
            char      m_szApplBal5[19+1];
            bool      m_bApplBal5Desc;
            char      m_szApplBal5Desc[8+1];
            bool      m_bHierLnNetOutstd;
            char      m_szHierLnNetOutstd[19+1];
            bool      m_bHierLnGrsOutstd;
            char      m_szHierLnGrsOutstd[19+1];
            bool      m_bHierLnAvailCommit;
            char      m_szHierLnAvailCommit[19+1];
            bool      m_bParticSld;
            char      m_szParticSld[19+1];
            bool      m_bCrAvail;
            char      m_szCrAvail[19+1];
            bool      m_bApplGlMaxOdAmt;
            char      m_szApplGlMaxOdAmt[19+1];
            bool      m_bApplGlOdBal;
            char      m_szApplGlOdBal[19+1];
            bool      m_bApplGlMaxLnAmt;
            char      m_szApplGlMaxLnAmt[19+1];
            bool      m_bApplGlLnBal;
            char      m_szApplGlLnBal[19+1];
            bool      m_bApplGlLnBalDesc;
            char      m_szApplGlLnBalDesc[8+1];
            bool      m_bApplDt1;
            char      m_szApplDt1[8+1];
            bool      m_bApplDt1Desc;
            char      m_szApplDt1Desc[8+1];
            bool      m_bApplDt2;
            char      m_szApplDt2[8+1];
            bool      m_bApplDt2Desc;
            char      m_szApplDt2Desc[8+1];
            bool      m_bApplDt3;
            char      m_szApplDt3[8+1];
            bool      m_bApplDt3Desc;
            char      m_szApplDt3Desc[8+1];
            bool      m_bApplDt4;
            char      m_szApplDt4[8+1];
            bool      m_bApplDt4Desc;
            char      m_szApplDt4Desc[8+1];
            bool      m_bApplDt5;
            char      m_szApplDt5[8+1];
            bool      m_bApplDt5Desc;
            char      m_szApplDt5Desc[8+1];
            bool      m_bOwnerLiabCd;
            char      m_szOwnerLiabCd[1+1];
            bool      m_bApplSmAlertInd;
            char      m_szApplSmAlertInd[1+1];
            bool      m_bApplErrCd;
            char      m_szApplErrCd[3+1];
            bool      m_bApplErrText;
            char      m_szApplErrText[25+1];
            bool      m_bAcctCorrLangCd;
            char      m_szAcctCorrLangCd[2+1];
            bool      m_bAcctCorrLangGrpCd;
            char      m_szAcctCorrLangGrpCd[1+1];
        
          public:
            long      m_lIndex;

            AsdApplData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bApplAcctFndInd = false;
                strcpy(m_szApplAcctFndInd, "Y");
                m_bApplProcInd = false;
                strcpy(m_szApplProcInd, "Y");
                m_bApplId = false;
                strcpy(m_szApplId, "");
                m_bApplCtl1 = false;
                strcpy(m_szApplCtl1, "0000");
                m_bApplCtl2 = false;
                strcpy(m_szApplCtl2, "0000");
                m_bApplCtl3 = false;
                strcpy(m_szApplCtl3, "0000");
                m_bApplCtl4 = false;
                strcpy(m_szApplCtl4, "0000");
                m_bApplAcctNbr = false;
                strcpy(m_szApplAcctNbr, "");
                m_bApplKey = false;
                strcpy(m_szApplKey, "");
                m_bCurrCd = false;
                strcpy(m_szCurrCd, "");
                m_bApplProdCd = false;
                strcpy(m_szApplProdCd, "");
                m_bApplStatCd = false;
                strcpy(m_szApplStatCd, "");
                m_bApplOffEmpDirCd = false;
                strcpy(m_szApplOffEmpDirCd, "");
                m_bApplIraCd = false;
                strcpy(m_szApplIraCd, "");
                m_bApplTrlrTypCd = false;
                strcpy(m_szApplTrlrTypCd, "");
                m_bApplTypCd = false;
                strcpy(m_szApplTypCd, "");
                m_bApplCommitCd = false;
                strcpy(m_szApplCommitCd, "");
                m_bAcctYtdTimesNsf = false;
                strcpy(m_szAcctYtdTimesNsf, "+00000");
                m_bAcctYtdTimesOd = false;
                strcpy(m_szAcctYtdTimesOd, "+00000");
                m_bAcctBkcyCd = false;
                strcpy(m_szAcctBkcyCd, "");
                m_bAcctFrclCd = false;
                strcpy(m_szAcctFrclCd, "");
                m_bApplBal1 = false;
                strcpy(m_szApplBal1, "+000000000000000.00");
                m_bApplBal1Desc = false;
                strcpy(m_szApplBal1Desc, "");
                m_bApplBal2 = false;
                strcpy(m_szApplBal2, "+000000000000000.00");
                m_bApplBal2Desc = false;
                strcpy(m_szApplBal2Desc, "");
                m_bApplBal3 = false;
                strcpy(m_szApplBal3, "+000000000000000.00");
                m_bApplBal3Desc = false;
                strcpy(m_szApplBal3Desc, "");
                m_bApplBal4 = false;
                strcpy(m_szApplBal4, "+000000000000000.00");
                m_bApplBal4Desc = false;
                strcpy(m_szApplBal4Desc, "");
                m_bApplBal5 = false;
                strcpy(m_szApplBal5, "+000000000000000.00");
                m_bApplBal5Desc = false;
                strcpy(m_szApplBal5Desc, "");
                m_bHierLnNetOutstd = false;
                strcpy(m_szHierLnNetOutstd, "+000000000000000.00");
                m_bHierLnGrsOutstd = false;
                strcpy(m_szHierLnGrsOutstd, "+000000000000000.00");
                m_bHierLnAvailCommit = false;
                strcpy(m_szHierLnAvailCommit, "+000000000000000.00");
                m_bParticSld = false;
                strcpy(m_szParticSld, "+000000000000000.00");
                m_bCrAvail = false;
                strcpy(m_szCrAvail, "+000000000000000.00");
                m_bApplGlMaxOdAmt = false;
                strcpy(m_szApplGlMaxOdAmt, "+000000000000000.00");
                m_bApplGlOdBal = false;
                strcpy(m_szApplGlOdBal, "+000000000000000.00");
                m_bApplGlMaxLnAmt = false;
                strcpy(m_szApplGlMaxLnAmt, "+000000000000000.00");
                m_bApplGlLnBal = false;
                strcpy(m_szApplGlLnBal, "+000000000000000.00");
                m_bApplGlLnBalDesc = false;
                strcpy(m_szApplGlLnBalDesc, "");
                m_bApplDt1 = false;
                strcpy(m_szApplDt1, "0");
                m_bApplDt1Desc = false;
                strcpy(m_szApplDt1Desc, "");
                m_bApplDt2 = false;
                strcpy(m_szApplDt2, "0");
                m_bApplDt2Desc = false;
                strcpy(m_szApplDt2Desc, "");
                m_bApplDt3 = false;
                strcpy(m_szApplDt3, "0");
                m_bApplDt3Desc = false;
                strcpy(m_szApplDt3Desc, "");
                m_bApplDt4 = false;
                strcpy(m_szApplDt4, "0");
                m_bApplDt4Desc = false;
                strcpy(m_szApplDt4Desc, "");
                m_bApplDt5 = false;
                strcpy(m_szApplDt5, "0");
                m_bApplDt5Desc = false;
                strcpy(m_szApplDt5Desc, "");
                m_bOwnerLiabCd = false;
                strcpy(m_szOwnerLiabCd, "");
                m_bApplSmAlertInd = false;
                strcpy(m_szApplSmAlertInd, "N");
                m_bApplErrCd = false;
                strcpy(m_szApplErrCd, "");
                m_bApplErrText = false;
                strcpy(m_szApplErrText, "");
                m_bAcctCorrLangCd = false;
                strcpy(m_szAcctCorrLangCd, "");
                m_bAcctCorrLangGrpCd = false;
                strcpy(m_szAcctCorrLangGrpCd, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                {
                    ApplPstDueInfo[lOccurs] = &CApplPstDueInfo[lOccurs];

                    CApplPstDueInfo[lOccurs].m_lIndex = lOccurs;
                }
            
                for (lOccurs = 0; lOccurs < 8; lOccurs++)
                {
                    ApplNaLine[lOccurs] = &CApplNaLine[lOccurs];

                    CApplNaLine[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            void Reinit()
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bApplAcctFndInd = false;
                strcpy(m_szApplAcctFndInd, "Y");
                m_bApplProcInd = false;
                strcpy(m_szApplProcInd, "Y");
                m_bApplId = false;
                strcpy(m_szApplId, "");
                m_bApplCtl1 = false;
                strcpy(m_szApplCtl1, "0000");
                m_bApplCtl2 = false;
                strcpy(m_szApplCtl2, "0000");
                m_bApplCtl3 = false;
                strcpy(m_szApplCtl3, "0000");
                m_bApplCtl4 = false;
                strcpy(m_szApplCtl4, "0000");
                m_bApplAcctNbr = false;
                strcpy(m_szApplAcctNbr, "");
                m_bApplKey = false;
                strcpy(m_szApplKey, "");
                m_bCurrCd = false;
                strcpy(m_szCurrCd, "");
                m_bApplProdCd = false;
                strcpy(m_szApplProdCd, "");
                m_bApplStatCd = false;
                strcpy(m_szApplStatCd, "");
                m_bApplOffEmpDirCd = false;
                strcpy(m_szApplOffEmpDirCd, "");
                m_bApplIraCd = false;
                strcpy(m_szApplIraCd, "");
                m_bApplTrlrTypCd = false;
                strcpy(m_szApplTrlrTypCd, "");
                m_bApplTypCd = false;
                strcpy(m_szApplTypCd, "");
                m_bApplCommitCd = false;
                strcpy(m_szApplCommitCd, "");
                m_bAcctYtdTimesNsf = false;
                strcpy(m_szAcctYtdTimesNsf, "+00000");
                m_bAcctYtdTimesOd = false;
                strcpy(m_szAcctYtdTimesOd, "+00000");
                m_bAcctBkcyCd = false;
                strcpy(m_szAcctBkcyCd, "");
                m_bAcctFrclCd = false;
                strcpy(m_szAcctFrclCd, "");
                m_bApplBal1 = false;
                strcpy(m_szApplBal1, "+000000000000000.00");
                m_bApplBal1Desc = false;
                strcpy(m_szApplBal1Desc, "");
                m_bApplBal2 = false;
                strcpy(m_szApplBal2, "+000000000000000.00");
                m_bApplBal2Desc = false;
                strcpy(m_szApplBal2Desc, "");
                m_bApplBal3 = false;
                strcpy(m_szApplBal3, "+000000000000000.00");
                m_bApplBal3Desc = false;
                strcpy(m_szApplBal3Desc, "");
                m_bApplBal4 = false;
                strcpy(m_szApplBal4, "+000000000000000.00");
                m_bApplBal4Desc = false;
                strcpy(m_szApplBal4Desc, "");
                m_bApplBal5 = false;
                strcpy(m_szApplBal5, "+000000000000000.00");
                m_bApplBal5Desc = false;
                strcpy(m_szApplBal5Desc, "");
                m_bHierLnNetOutstd = false;
                strcpy(m_szHierLnNetOutstd, "+000000000000000.00");
                m_bHierLnGrsOutstd = false;
                strcpy(m_szHierLnGrsOutstd, "+000000000000000.00");
                m_bHierLnAvailCommit = false;
                strcpy(m_szHierLnAvailCommit, "+000000000000000.00");
                m_bParticSld = false;
                strcpy(m_szParticSld, "+000000000000000.00");
                m_bCrAvail = false;
                strcpy(m_szCrAvail, "+000000000000000.00");
                m_bApplGlMaxOdAmt = false;
                strcpy(m_szApplGlMaxOdAmt, "+000000000000000.00");
                m_bApplGlOdBal = false;
                strcpy(m_szApplGlOdBal, "+000000000000000.00");
                m_bApplGlMaxLnAmt = false;
                strcpy(m_szApplGlMaxLnAmt, "+000000000000000.00");
                m_bApplGlLnBal = false;
                strcpy(m_szApplGlLnBal, "+000000000000000.00");
                m_bApplGlLnBalDesc = false;
                strcpy(m_szApplGlLnBalDesc, "");
                m_bApplDt1 = false;
                strcpy(m_szApplDt1, "0");
                m_bApplDt1Desc = false;
                strcpy(m_szApplDt1Desc, "");
                m_bApplDt2 = false;
                strcpy(m_szApplDt2, "0");
                m_bApplDt2Desc = false;
                strcpy(m_szApplDt2Desc, "");
                m_bApplDt3 = false;
                strcpy(m_szApplDt3, "0");
                m_bApplDt3Desc = false;
                strcpy(m_szApplDt3Desc, "");
                m_bApplDt4 = false;
                strcpy(m_szApplDt4, "0");
                m_bApplDt4Desc = false;
                strcpy(m_szApplDt4Desc, "");
                m_bApplDt5 = false;
                strcpy(m_szApplDt5, "0");
                m_bApplDt5Desc = false;
                strcpy(m_szApplDt5Desc, "");
                m_bOwnerLiabCd = false;
                strcpy(m_szOwnerLiabCd, "");
                m_bApplSmAlertInd = false;
                strcpy(m_szApplSmAlertInd, "N");
                m_bApplErrCd = false;
                strcpy(m_szApplErrCd, "");
                m_bApplErrText = false;
                strcpy(m_szApplErrText, "");
                m_bAcctCorrLangCd = false;
                strcpy(m_szAcctCorrLangCd, "");
                m_bAcctCorrLangGrpCd = false;
                strcpy(m_szAcctCorrLangGrpCd, "");
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                {
                    ApplPstDueInfo[lOccurs]  = &CApplPstDueInfo[lOccurs];
                CApplPstDueInfo[lOccurs].Reinit();
                    CApplPstDueInfo[lOccurs].m_lIndex = lOccurs;
                }
            
                for (lOccurs = 0; lOccurs < 8; lOccurs++)
                {
                    ApplNaLine[lOccurs]  = &CApplNaLine[lOccurs];
                CApplNaLine[lOccurs].Reinit();
                    CApplNaLine[lOccurs].m_lIndex = lOccurs;
                }
            }

            
            //    WAS APPL ACCT ON FILE?
            long lApplAcctFndInd () { return 1; };
            RWCString ApplAcctFndInd (void)
            {
                return m_szApplAcctFndInd;
            }
            long ApplAcctFndInd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplAcctFndInd, sizeof(m_szApplAcctFndInd), &m_bApplAcctFndInd);
            }
            
            //    DOES ACCT MEET DISPLAY CRITERIA?
            long lApplProcInd () { return 1; };
            RWCString ApplProcInd (void)
            {
                return m_szApplProcInd;
            }
            long ApplProcInd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplProcInd, sizeof(m_szApplProcInd), &m_bApplProcInd);
            }
            
            //    APPLICATION IDENTIFICATION CODE
            long lApplId () { return 2; };
            RWCString ApplId (void)
            {
                return m_szApplId;
            }
            long ApplId (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplId, sizeof(m_szApplId), &m_bApplId);
            }
            
            //    HIGHEST LEVEL OF CUSTOMER CONTROL
            long lApplCtl1 () { return 4; };
            RWCString ApplCtl1 (void)
            {
                return m_szApplCtl1;
            }
            long ApplCtl1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplCtl1, sizeof(m_szApplCtl1), &m_bApplCtl1);
            }
            
            //    SECOND LEVEL OF CUSTOMER CONTROL
            long lApplCtl2 () { return 4; };
            RWCString ApplCtl2 (void)
            {
                return m_szApplCtl2;
            }
            long ApplCtl2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplCtl2, sizeof(m_szApplCtl2), &m_bApplCtl2);
            }
            
            //    THIRD LEVEL OF CUSTOMER CONTROL
            long lApplCtl3 () { return 4; };
            RWCString ApplCtl3 (void)
            {
                return m_szApplCtl3;
            }
            long ApplCtl3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplCtl3, sizeof(m_szApplCtl3), &m_bApplCtl3);
            }
            
            //    FOURTH LEVEL OF CUSTOMER CONTROL
            long lApplCtl4 () { return 4; };
            RWCString ApplCtl4 (void)
            {
                return m_szApplCtl4;
            }
            long ApplCtl4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplCtl4, sizeof(m_szApplCtl4), &m_bApplCtl4);
            }
            
            //    APPLICATION ACCOUNT NUMBER (WITHOUT CONTROLS)
            long lApplAcctNbr () { return 27; };
            RWCString ApplAcctNbr (void)
            {
                return m_szApplAcctNbr;
            }
            long ApplAcctNbr (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplAcctNbr, sizeof(m_szApplAcctNbr), &m_bApplAcctNbr);
            }
            
            //    APPLICATION KEY (INCLUDING CONTROLS)
            long lApplKey () { return 43; };
            RWCString ApplKey (void)
            {
                return m_szApplKey;
            }
            long ApplKey (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplKey, sizeof(m_szApplKey), &m_bApplKey);
            }
            
            //    CURRENCY CODE (FOR MONETARY PURPOSES)
            long lCurrCd () { return 3; };
            RWCString CurrCd (void)
            {
                return m_szCurrCd;
            }
            long CurrCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCurrCd, sizeof(m_szCurrCd), &m_bCurrCd);
            }
            
            //    APPL PROD CODE FROM THE APPL OF THE ACCT SOLD
            long lApplProdCd () { return 4; };
            RWCString ApplProdCd (void)
            {
                return m_szApplProdCd;
            }
            long ApplProdCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplProdCd, sizeof(m_szApplProdCd), &m_bApplProdCd);
            }
            
            //    APPLICATION STATUS CODE
            long lApplStatCd () { return 6; };
            RWCString ApplStatCd (void)
            {
                return m_szApplStatCd;
            }
            long ApplStatCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplStatCd, sizeof(m_szApplStatCd), &m_bApplStatCd);
            }
            
            //    ACCOUNT OFFICER, EMPLOYEE, OR DIRECTOR CODE
            long lApplOffEmpDirCd () { return 1; };
            RWCString ApplOffEmpDirCd (void)
            {
                return m_szApplOffEmpDirCd;
            }
            long ApplOffEmpDirCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplOffEmpDirCd, sizeof(m_szApplOffEmpDirCd), &m_bApplOffEmpDirCd);
            }
            
            //    ACCOUNT IRA CODE
            long lApplIraCd () { return 1; };
            RWCString ApplIraCd (void)
            {
                return m_szApplIraCd;
            }
            long ApplIraCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplIraCd, sizeof(m_szApplIraCd), &m_bApplIraCd);
            }
            
            //    ACCOUNT SAVINGS-LOAN CODE
            long lApplTrlrTypCd () { return 2; };
            RWCString ApplTrlrTypCd (void)
            {
                return m_szApplTrlrTypCd;
            }
            long ApplTrlrTypCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplTrlrTypCd, sizeof(m_szApplTrlrTypCd), &m_bApplTrlrTypCd);
            }
            
            //    ACCOUNT TYP CODE
            long lApplTypCd () { return 2; };
            RWCString ApplTypCd (void)
            {
                return m_szApplTypCd;
            }
            long ApplTypCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplTypCd, sizeof(m_szApplTypCd), &m_bApplTypCd);
            }
            
            //    ACCOUNT COMMITTMENT CODE
            long lApplCommitCd () { return 1; };
            RWCString ApplCommitCd (void)
            {
                return m_szApplCommitCd;
            }
            long ApplCommitCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplCommitCd, sizeof(m_szApplCommitCd), &m_bApplCommitCd);
            }
            
            //    YTD NSF
            long lAcctYtdTimesNsf () { return 6; };
            RWCString AcctYtdTimesNsf (void)
            {
                return AceZeroSupp(m_szAcctYtdTimesNsf, &m_szSuppressBuff[0]);
            }
            RWCString AcctYtdTimesNsfRaw (void)
            {
                return m_szAcctYtdTimesNsf;
            }
            long AcctYtdTimesNsf (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szAcctYtdTimesNsf, sizeof(m_szAcctYtdTimesNsf), &m_bAcctYtdTimesNsf);
            }
            
            //    YTD OD
            long lAcctYtdTimesOd () { return 6; };
            RWCString AcctYtdTimesOd (void)
            {
                return AceZeroSupp(m_szAcctYtdTimesOd, &m_szSuppressBuff[0]);
            }
            RWCString AcctYtdTimesOdRaw (void)
            {
                return m_szAcctYtdTimesOd;
            }
            long AcctYtdTimesOd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szAcctYtdTimesOd, sizeof(m_szAcctYtdTimesOd), &m_bAcctYtdTimesOd);
            }
            
            //    BANKRUPTCY/FORECLOSURE CODE
            long lAcctBkcyCd () { return 1; };
            RWCString AcctBkcyCd (void)
            {
                return m_szAcctBkcyCd;
            }
            long AcctBkcyCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szAcctBkcyCd, sizeof(m_szAcctBkcyCd), &m_bAcctBkcyCd);
            }
            
            //    BANKRUPTCY/FORECLOSURE CODE
            long lAcctFrclCd () { return 1; };
            RWCString AcctFrclCd (void)
            {
                return m_szAcctFrclCd;
            }
            long AcctFrclCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szAcctFrclCd, sizeof(m_szAcctFrclCd), &m_bAcctFrclCd);
            }
            
            //    APPLICATION BALANCE
            long lApplBal1 () { return 19; };
            RWCString ApplBal1 (void)
            {
                return AceZeroSupp(m_szApplBal1, &m_szSuppressBuff[0]);
            }
            RWCString ApplBal1Raw (void)
            {
                return m_szApplBal1;
            }
            long ApplBal1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal1, sizeof(m_szApplBal1), &m_bApplBal1);
            }
            
            //    APPLICATION BALANCE DESCRIPTION
            long lApplBal1Desc () { return 8; };
            RWCString ApplBal1Desc (void)
            {
                return m_szApplBal1Desc;
            }
            long ApplBal1Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal1Desc, sizeof(m_szApplBal1Desc), &m_bApplBal1Desc);
            }
            
            //    APPLICATION BALANCE
            long lApplBal2 () { return 19; };
            RWCString ApplBal2 (void)
            {
                return AceZeroSupp(m_szApplBal2, &m_szSuppressBuff[0]);
            }
            RWCString ApplBal2Raw (void)
            {
                return m_szApplBal2;
            }
            long ApplBal2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal2, sizeof(m_szApplBal2), &m_bApplBal2);
            }
            
            //    APPLICATION BALANCE DESCRIPTION
            long lApplBal2Desc () { return 8; };
            RWCString ApplBal2Desc (void)
            {
                return m_szApplBal2Desc;
            }
            long ApplBal2Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal2Desc, sizeof(m_szApplBal2Desc), &m_bApplBal2Desc);
            }
            
            //    APPLICATION BALANCE
            long lApplBal3 () { return 19; };
            RWCString ApplBal3 (void)
            {
                return AceZeroSupp(m_szApplBal3, &m_szSuppressBuff[0]);
            }
            RWCString ApplBal3Raw (void)
            {
                return m_szApplBal3;
            }
            long ApplBal3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal3, sizeof(m_szApplBal3), &m_bApplBal3);
            }
            
            //    APPLICATION BALANCE DESCRIPTION
            long lApplBal3Desc () { return 8; };
            RWCString ApplBal3Desc (void)
            {
                return m_szApplBal3Desc;
            }
            long ApplBal3Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal3Desc, sizeof(m_szApplBal3Desc), &m_bApplBal3Desc);
            }
            
            //    APPLICATION BALANCE
            long lApplBal4 () { return 19; };
            RWCString ApplBal4 (void)
            {
                return AceZeroSupp(m_szApplBal4, &m_szSuppressBuff[0]);
            }
            RWCString ApplBal4Raw (void)
            {
                return m_szApplBal4;
            }
            long ApplBal4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal4, sizeof(m_szApplBal4), &m_bApplBal4);
            }
            
            //    APPLICATION BALANCE DESCRIPTION
            long lApplBal4Desc () { return 8; };
            RWCString ApplBal4Desc (void)
            {
                return m_szApplBal4Desc;
            }
            long ApplBal4Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal4Desc, sizeof(m_szApplBal4Desc), &m_bApplBal4Desc);
            }
            
            //    APPLICATION BALANCE
            long lApplBal5 () { return 19; };
            RWCString ApplBal5 (void)
            {
                return AceZeroSupp(m_szApplBal5, &m_szSuppressBuff[0]);
            }
            RWCString ApplBal5Raw (void)
            {
                return m_szApplBal5;
            }
            long ApplBal5 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal5, sizeof(m_szApplBal5), &m_bApplBal5);
            }
            
            //    APPLICATION BALANCE DESCRIPTION
            long lApplBal5Desc () { return 8; };
            RWCString ApplBal5Desc (void)
            {
                return m_szApplBal5Desc;
            }
            long ApplBal5Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplBal5Desc, sizeof(m_szApplBal5Desc), &m_bApplBal5Desc);
            }
            
            //    HIERARCHY LOAN NET OUTSTANDING
            long lHierLnNetOutstd () { return 19; };
            RWCString HierLnNetOutstd (void)
            {
                return AceZeroSupp(m_szHierLnNetOutstd, &m_szSuppressBuff[0]);
            }
            RWCString HierLnNetOutstdRaw (void)
            {
                return m_szHierLnNetOutstd;
            }
            long HierLnNetOutstd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szHierLnNetOutstd, sizeof(m_szHierLnNetOutstd), &m_bHierLnNetOutstd);
            }
            
            //    HIERARCHY LOAN GROSS OUTSTANDING
            long lHierLnGrsOutstd () { return 19; };
            RWCString HierLnGrsOutstd (void)
            {
                return AceZeroSupp(m_szHierLnGrsOutstd, &m_szSuppressBuff[0]);
            }
            RWCString HierLnGrsOutstdRaw (void)
            {
                return m_szHierLnGrsOutstd;
            }
            long HierLnGrsOutstd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szHierLnGrsOutstd, sizeof(m_szHierLnGrsOutstd), &m_bHierLnGrsOutstd);
            }
            
            //    HIERARCHY LOAN AVAILABLE COMMITTMENT
            long lHierLnAvailCommit () { return 19; };
            RWCString HierLnAvailCommit (void)
            {
                return AceZeroSupp(m_szHierLnAvailCommit, &m_szSuppressBuff[0]);
            }
            RWCString HierLnAvailCommitRaw (void)
            {
                return m_szHierLnAvailCommit;
            }
            long HierLnAvailCommit (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szHierLnAvailCommit, sizeof(m_szHierLnAvailCommit), &m_bHierLnAvailCommit);
            }
            
            //    PARTICIPATIONS SOLD
            long lParticSld () { return 19; };
            RWCString ParticSld (void)
            {
                return AceZeroSupp(m_szParticSld, &m_szSuppressBuff[0]);
            }
            RWCString ParticSldRaw (void)
            {
                return m_szParticSld;
            }
            long ParticSld (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szParticSld, sizeof(m_szParticSld), &m_bParticSld);
            }
            
            //    CREDIT AVAILABLE
            long lCrAvail () { return 19; };
            RWCString CrAvail (void)
            {
                return AceZeroSupp(m_szCrAvail, &m_szSuppressBuff[0]);
            }
            RWCString CrAvailRaw (void)
            {
                return m_szCrAvail;
            }
            long CrAvail (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrAvail, sizeof(m_szCrAvail), &m_bCrAvail);
            }
            
            //    APPLICATION OVERDRAFT LIMIT
            long lApplGlMaxOdAmt () { return 19; };
            RWCString ApplGlMaxOdAmt (void)
            {
                return AceZeroSupp(m_szApplGlMaxOdAmt, &m_szSuppressBuff[0]);
            }
            RWCString ApplGlMaxOdAmtRaw (void)
            {
                return m_szApplGlMaxOdAmt;
            }
            long ApplGlMaxOdAmt (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplGlMaxOdAmt, sizeof(m_szApplGlMaxOdAmt), &m_bApplGlMaxOdAmt);
            }
            
            //    APPLICATION OVERDRAFT AMOUNT
            long lApplGlOdBal () { return 19; };
            RWCString ApplGlOdBal (void)
            {
                return AceZeroSupp(m_szApplGlOdBal, &m_szSuppressBuff[0]);
            }
            RWCString ApplGlOdBalRaw (void)
            {
                return m_szApplGlOdBal;
            }
            long ApplGlOdBal (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplGlOdBal, sizeof(m_szApplGlOdBal), &m_bApplGlOdBal);
            }
            
            //    APPLICATION MAX AMOUNT TO LOAN
            long lApplGlMaxLnAmt () { return 19; };
            RWCString ApplGlMaxLnAmt (void)
            {
                return AceZeroSupp(m_szApplGlMaxLnAmt, &m_szSuppressBuff[0]);
            }
            RWCString ApplGlMaxLnAmtRaw (void)
            {
                return m_szApplGlMaxLnAmt;
            }
            long ApplGlMaxLnAmt (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplGlMaxLnAmt, sizeof(m_szApplGlMaxLnAmt), &m_bApplGlMaxLnAmt);
            }
            
            //    APPLICATION LOAN LMT BALANCE
            long lApplGlLnBal () { return 19; };
            RWCString ApplGlLnBal (void)
            {
                return AceZeroSupp(m_szApplGlLnBal, &m_szSuppressBuff[0]);
            }
            RWCString ApplGlLnBalRaw (void)
            {
                return m_szApplGlLnBal;
            }
            long ApplGlLnBal (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplGlLnBal, sizeof(m_szApplGlLnBal), &m_bApplGlLnBal);
            }
            
            //    GUIDANCE LIMIT APPL LOAN BALANCE DESCRIPTION
            long lApplGlLnBalDesc () { return 8; };
            RWCString ApplGlLnBalDesc (void)
            {
                return m_szApplGlLnBalDesc;
            }
            long ApplGlLnBalDesc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplGlLnBalDesc, sizeof(m_szApplGlLnBalDesc), &m_bApplGlLnBalDesc);
            }
            
            //    APPLICATION DATE
            long lApplDt1 () { return 8; };
            RWCString ApplDt1 (void)
            {
                return m_szApplDt1;
            }
            long ApplDt1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt1, sizeof(m_szApplDt1), &m_bApplDt1);
            }
            
            //    APPLICATION DATE DESCRIPTION
            long lApplDt1Desc () { return 8; };
            RWCString ApplDt1Desc (void)
            {
                return m_szApplDt1Desc;
            }
            long ApplDt1Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt1Desc, sizeof(m_szApplDt1Desc), &m_bApplDt1Desc);
            }
            
            //    APPLICATION DATE
            long lApplDt2 () { return 8; };
            RWCString ApplDt2 (void)
            {
                return m_szApplDt2;
            }
            long ApplDt2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt2, sizeof(m_szApplDt2), &m_bApplDt2);
            }
            
            //    APPLICATION DATE DESCRIPTION
            long lApplDt2Desc () { return 8; };
            RWCString ApplDt2Desc (void)
            {
                return m_szApplDt2Desc;
            }
            long ApplDt2Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt2Desc, sizeof(m_szApplDt2Desc), &m_bApplDt2Desc);
            }
            
            //    APPLICATION DATE
            long lApplDt3 () { return 8; };
            RWCString ApplDt3 (void)
            {
                return m_szApplDt3;
            }
            long ApplDt3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt3, sizeof(m_szApplDt3), &m_bApplDt3);
            }
            
            //    APPLICATION DATE DESCRIPTION
            long lApplDt3Desc () { return 8; };
            RWCString ApplDt3Desc (void)
            {
                return m_szApplDt3Desc;
            }
            long ApplDt3Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt3Desc, sizeof(m_szApplDt3Desc), &m_bApplDt3Desc);
            }
            
            //    APPLICATION DATE
            long lApplDt4 () { return 8; };
            RWCString ApplDt4 (void)
            {
                return m_szApplDt4;
            }
            long ApplDt4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt4, sizeof(m_szApplDt4), &m_bApplDt4);
            }
            
            //    APPLICATION DATE DESCRIPTION
            long lApplDt4Desc () { return 8; };
            RWCString ApplDt4Desc (void)
            {
                return m_szApplDt4Desc;
            }
            long ApplDt4Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt4Desc, sizeof(m_szApplDt4Desc), &m_bApplDt4Desc);
            }
            
            //    APPLICATION DATE
            long lApplDt5 () { return 8; };
            RWCString ApplDt5 (void)
            {
                return m_szApplDt5;
            }
            long ApplDt5 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt5, sizeof(m_szApplDt5), &m_bApplDt5);
            }
            
            //    APPLICATION DATE DESCRIPTION
            long lApplDt5Desc () { return 8; };
            RWCString ApplDt5Desc (void)
            {
                return m_szApplDt5Desc;
            }
            long ApplDt5Desc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplDt5Desc, sizeof(m_szApplDt5Desc), &m_bApplDt5Desc);
            }
            
            //    ACCOUNT LIABILITY CODE (CARRIED ON RELATIONSHIP)
            long lOwnerLiabCd () { return 1; };
            RWCString OwnerLiabCd (void)
            {
                return m_szOwnerLiabCd;
            }
            long OwnerLiabCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szOwnerLiabCd, sizeof(m_szOwnerLiabCd), &m_bOwnerLiabCd);
            }
            
            //    SM ALERT FLAG FOR APPLS
            long lApplSmAlertInd () { return 1; };
            RWCString ApplSmAlertInd (void)
            {
                return m_szApplSmAlertInd;
            }
            long ApplSmAlertInd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplSmAlertInd, sizeof(m_szApplSmAlertInd), &m_bApplSmAlertInd);
            }
            
            //    APPLICATION ERROR CODE
            long lApplErrCd () { return 3; };
            RWCString ApplErrCd (void)
            {
                return m_szApplErrCd;
            }
            long ApplErrCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplErrCd, sizeof(m_szApplErrCd), &m_bApplErrCd);
            }
            
            //    SECURITY  ERROR MSG FROM MSE1
            long lApplErrText () { return 25; };
            RWCString ApplErrText (void)
            {
                return m_szApplErrText;
            }
            long ApplErrText (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szApplErrText, sizeof(m_szApplErrText), &m_bApplErrText);
            }
            
            //    ISO ACCT CORR LANG CODE
            long lAcctCorrLangCd () { return 2; };
            RWCString AcctCorrLangCd (void)
            {
                return m_szAcctCorrLangCd;
            }
            long AcctCorrLangCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szAcctCorrLangCd, sizeof(m_szAcctCorrLangCd), &m_bAcctCorrLangCd);
            }
            
            //    ACCT CORR LANGUAGE GROUP
            long lAcctCorrLangGrpCd () { return 1; };
            RWCString AcctCorrLangGrpCd (void)
            {
                return m_szAcctCorrLangGrpCd;
            }
            long AcctCorrLangGrpCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szAcctCorrLangGrpCd, sizeof(m_szAcctCorrLangGrpCd), &m_bAcctCorrLangGrpCd);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bApplAcctFndInd) return true;
                if (m_bApplProcInd) return true;
                if (m_bApplId) return true;
                if (m_bApplCtl1) return true;
                if (m_bApplCtl2) return true;
                if (m_bApplCtl3) return true;
                if (m_bApplCtl4) return true;
                if (m_bApplAcctNbr) return true;
                if (m_bApplKey) return true;
                if (m_bCurrCd) return true;
                if (m_bApplProdCd) return true;
                if (m_bApplStatCd) return true;
                if (m_bApplOffEmpDirCd) return true;
                if (m_bApplIraCd) return true;
                if (m_bApplTrlrTypCd) return true;
                if (m_bApplTypCd) return true;
                if (m_bApplCommitCd) return true;
                if (m_bAcctYtdTimesNsf) return true;
                if (m_bAcctYtdTimesOd) return true;
                if (m_bAcctBkcyCd) return true;
                if (m_bAcctFrclCd) return true;
                if (m_bApplBal1) return true;
                if (m_bApplBal1Desc) return true;
                if (m_bApplBal2) return true;
                if (m_bApplBal2Desc) return true;
                if (m_bApplBal3) return true;
                if (m_bApplBal3Desc) return true;
                if (m_bApplBal4) return true;
                if (m_bApplBal4Desc) return true;
                if (m_bApplBal5) return true;
                if (m_bApplBal5Desc) return true;
                if (m_bHierLnNetOutstd) return true;
                if (m_bHierLnGrsOutstd) return true;
                if (m_bHierLnAvailCommit) return true;
                if (m_bParticSld) return true;
                if (m_bCrAvail) return true;
                if (m_bApplGlMaxOdAmt) return true;
                if (m_bApplGlOdBal) return true;
                if (m_bApplGlMaxLnAmt) return true;
                if (m_bApplGlLnBal) return true;
                if (m_bApplGlLnBalDesc) return true;
                if (m_bApplDt1) return true;
                if (m_bApplDt1Desc) return true;
                if (m_bApplDt2) return true;
                if (m_bApplDt2Desc) return true;
                if (m_bApplDt3) return true;
                if (m_bApplDt3Desc) return true;
                if (m_bApplDt4) return true;
                if (m_bApplDt4Desc) return true;
                if (m_bApplDt5) return true;
                if (m_bApplDt5Desc) return true;
                if (m_bOwnerLiabCd) return true;
                if (m_bApplSmAlertInd) return true;
                if (m_bApplErrCd) return true;
                if (m_bApplErrText) return true;
                if (m_bAcctCorrLangCd) return true;
                if (m_bAcctCorrLangGrpCd) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                {
                    if(CApplPstDueInfo[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                for (lOccurs = 0; lOccurs < 8; lOccurs++)
                {
                    if(CApplNaLine[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "ApplData", m_lIndex);
                    AddXMLField(pSess, "ApplAcctFndInd", m_szApplAcctFndInd, &m_bApplAcctFndInd);
                    AddXMLField(pSess, "ApplProcInd", m_szApplProcInd, &m_bApplProcInd);
                    AddXMLField(pSess, "ApplId", m_szApplId, &m_bApplId);
                    AddXMLField(pSess, "ApplCtl1", m_szApplCtl1, &m_bApplCtl1);
                    AddXMLField(pSess, "ApplCtl2", m_szApplCtl2, &m_bApplCtl2);
                    AddXMLField(pSess, "ApplCtl3", m_szApplCtl3, &m_bApplCtl3);
                    AddXMLField(pSess, "ApplCtl4", m_szApplCtl4, &m_bApplCtl4);
                    AddXMLField(pSess, "ApplAcctNbr", m_szApplAcctNbr, &m_bApplAcctNbr);
                    AddXMLField(pSess, "ApplKey", m_szApplKey, &m_bApplKey);
                    AddXMLField(pSess, "CurrCd", m_szCurrCd, &m_bCurrCd);
                    AddXMLField(pSess, "ApplProdCd", m_szApplProdCd, &m_bApplProdCd);
                    AddXMLField(pSess, "ApplStatCd", m_szApplStatCd, &m_bApplStatCd);
                    AddXMLField(pSess, "ApplOffEmpDirCd", m_szApplOffEmpDirCd, &m_bApplOffEmpDirCd);
                    AddXMLField(pSess, "ApplIraCd", m_szApplIraCd, &m_bApplIraCd);
                    AddXMLField(pSess, "ApplTrlrTypCd", m_szApplTrlrTypCd, &m_bApplTrlrTypCd);
                    AddXMLField(pSess, "ApplTypCd", m_szApplTypCd, &m_bApplTypCd);
                    AddXMLField(pSess, "ApplCommitCd", m_szApplCommitCd, &m_bApplCommitCd);
                    AddXMLField(pSess, "AcctYtdTimesNsf", m_szAcctYtdTimesNsf, &m_bAcctYtdTimesNsf);
                    AddXMLField(pSess, "AcctYtdTimesOd", m_szAcctYtdTimesOd, &m_bAcctYtdTimesOd);
                    AddXMLField(pSess, "AcctBkcyCd", m_szAcctBkcyCd, &m_bAcctBkcyCd);
                    AddXMLField(pSess, "AcctFrclCd", m_szAcctFrclCd, &m_bAcctFrclCd);
                    AddXMLField(pSess, "ApplBal1", m_szApplBal1, &m_bApplBal1);
                    AddXMLField(pSess, "ApplBal1Desc", m_szApplBal1Desc, &m_bApplBal1Desc);
                    AddXMLField(pSess, "ApplBal2", m_szApplBal2, &m_bApplBal2);
                    AddXMLField(pSess, "ApplBal2Desc", m_szApplBal2Desc, &m_bApplBal2Desc);
                    AddXMLField(pSess, "ApplBal3", m_szApplBal3, &m_bApplBal3);
                    AddXMLField(pSess, "ApplBal3Desc", m_szApplBal3Desc, &m_bApplBal3Desc);
                    AddXMLField(pSess, "ApplBal4", m_szApplBal4, &m_bApplBal4);
                    AddXMLField(pSess, "ApplBal4Desc", m_szApplBal4Desc, &m_bApplBal4Desc);
                    AddXMLField(pSess, "ApplBal5", m_szApplBal5, &m_bApplBal5);
                    AddXMLField(pSess, "ApplBal5Desc", m_szApplBal5Desc, &m_bApplBal5Desc);
                    AddXMLField(pSess, "HierLnNetOutstd", m_szHierLnNetOutstd, &m_bHierLnNetOutstd);
                    AddXMLField(pSess, "HierLnGrsOutstd", m_szHierLnGrsOutstd, &m_bHierLnGrsOutstd);
                    AddXMLField(pSess, "HierLnAvailCommit", m_szHierLnAvailCommit, &m_bHierLnAvailCommit);
                    AddXMLField(pSess, "ParticSld", m_szParticSld, &m_bParticSld);
                    AddXMLField(pSess, "CrAvail", m_szCrAvail, &m_bCrAvail);
                    AddXMLField(pSess, "ApplGlMaxOdAmt", m_szApplGlMaxOdAmt, &m_bApplGlMaxOdAmt);
                    AddXMLField(pSess, "ApplGlOdBal", m_szApplGlOdBal, &m_bApplGlOdBal);
                    AddXMLField(pSess, "ApplGlMaxLnAmt", m_szApplGlMaxLnAmt, &m_bApplGlMaxLnAmt);
                    AddXMLField(pSess, "ApplGlLnBal", m_szApplGlLnBal, &m_bApplGlLnBal);
                    AddXMLField(pSess, "ApplGlLnBalDesc", m_szApplGlLnBalDesc, &m_bApplGlLnBalDesc);
                    AddXMLField(pSess, "ApplDt1", m_szApplDt1, &m_bApplDt1);
                    AddXMLField(pSess, "ApplDt1Desc", m_szApplDt1Desc, &m_bApplDt1Desc);
                    AddXMLField(pSess, "ApplDt2", m_szApplDt2, &m_bApplDt2);
                    AddXMLField(pSess, "ApplDt2Desc", m_szApplDt2Desc, &m_bApplDt2Desc);
                    AddXMLField(pSess, "ApplDt3", m_szApplDt3, &m_bApplDt3);
                    AddXMLField(pSess, "ApplDt3Desc", m_szApplDt3Desc, &m_bApplDt3Desc);
                    AddXMLField(pSess, "ApplDt4", m_szApplDt4, &m_bApplDt4);
                    AddXMLField(pSess, "ApplDt4Desc", m_szApplDt4Desc, &m_bApplDt4Desc);
                    AddXMLField(pSess, "ApplDt5", m_szApplDt5, &m_bApplDt5);
                    AddXMLField(pSess, "ApplDt5Desc", m_szApplDt5Desc, &m_bApplDt5Desc);
                    AddXMLField(pSess, "OwnerLiabCd", m_szOwnerLiabCd, &m_bOwnerLiabCd);
                    AddXMLField(pSess, "ApplSmAlertInd", m_szApplSmAlertInd, &m_bApplSmAlertInd);
                    AddXMLField(pSess, "ApplErrCd", m_szApplErrCd, &m_bApplErrCd);
                    AddXMLField(pSess, "ApplErrText", m_szApplErrText, &m_bApplErrText);
                    AddXMLField(pSess, "AcctCorrLangCd", m_szAcctCorrLangCd, &m_bAcctCorrLangCd);
                    AddXMLField(pSess, "AcctCorrLangGrpCd", m_szAcctCorrLangGrpCd, &m_bAcctCorrLangGrpCd);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    {
                        CApplPstDueInfo[lOccurs].Save(pSess);
                    }
                    for (lOccurs = 0; lOccurs < 8; lOccurs++)
                    {
                        CApplNaLine[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "ApplData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "ApplData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "ApplAcctFndInd", m_szApplAcctFndInd);
                    GetXMLField(pSess, "ApplProcInd", m_szApplProcInd);
                    GetXMLField(pSess, "ApplId", m_szApplId);
                    GetXMLField(pSess, "ApplCtl1", m_szApplCtl1);
                    GetXMLField(pSess, "ApplCtl2", m_szApplCtl2);
                    GetXMLField(pSess, "ApplCtl3", m_szApplCtl3);
                    GetXMLField(pSess, "ApplCtl4", m_szApplCtl4);
                    GetXMLField(pSess, "ApplAcctNbr", m_szApplAcctNbr);
                    GetXMLField(pSess, "ApplKey", m_szApplKey);
                    GetXMLField(pSess, "CurrCd", m_szCurrCd);
                    GetXMLField(pSess, "ApplProdCd", m_szApplProdCd);
                    GetXMLField(pSess, "ApplStatCd", m_szApplStatCd);
                    GetXMLField(pSess, "ApplOffEmpDirCd", m_szApplOffEmpDirCd);
                    GetXMLField(pSess, "ApplIraCd", m_szApplIraCd);
                    GetXMLField(pSess, "ApplTrlrTypCd", m_szApplTrlrTypCd);
                    GetXMLField(pSess, "ApplTypCd", m_szApplTypCd);
                    GetXMLField(pSess, "ApplCommitCd", m_szApplCommitCd);
                    GetXMLField(pSess, "AcctYtdTimesNsf", m_szAcctYtdTimesNsf);
                    GetXMLField(pSess, "AcctYtdTimesOd", m_szAcctYtdTimesOd);
                    GetXMLField(pSess, "AcctBkcyCd", m_szAcctBkcyCd);
                    GetXMLField(pSess, "AcctFrclCd", m_szAcctFrclCd);
                    GetXMLField(pSess, "ApplBal1", m_szApplBal1);
                    GetXMLField(pSess, "ApplBal1Desc", m_szApplBal1Desc);
                    GetXMLField(pSess, "ApplBal2", m_szApplBal2);
                    GetXMLField(pSess, "ApplBal2Desc", m_szApplBal2Desc);
                    GetXMLField(pSess, "ApplBal3", m_szApplBal3);
                    GetXMLField(pSess, "ApplBal3Desc", m_szApplBal3Desc);
                    GetXMLField(pSess, "ApplBal4", m_szApplBal4);
                    GetXMLField(pSess, "ApplBal4Desc", m_szApplBal4Desc);
                    GetXMLField(pSess, "ApplBal5", m_szApplBal5);
                    GetXMLField(pSess, "ApplBal5Desc", m_szApplBal5Desc);
                    GetXMLField(pSess, "HierLnNetOutstd", m_szHierLnNetOutstd);
                    GetXMLField(pSess, "HierLnGrsOutstd", m_szHierLnGrsOutstd);
                    GetXMLField(pSess, "HierLnAvailCommit", m_szHierLnAvailCommit);
                    GetXMLField(pSess, "ParticSld", m_szParticSld);
                    GetXMLField(pSess, "CrAvail", m_szCrAvail);
                    GetXMLField(pSess, "ApplGlMaxOdAmt", m_szApplGlMaxOdAmt);
                    GetXMLField(pSess, "ApplGlOdBal", m_szApplGlOdBal);
                    GetXMLField(pSess, "ApplGlMaxLnAmt", m_szApplGlMaxLnAmt);
                    GetXMLField(pSess, "ApplGlLnBal", m_szApplGlLnBal);
                    GetXMLField(pSess, "ApplGlLnBalDesc", m_szApplGlLnBalDesc);
                    GetXMLField(pSess, "ApplDt1", m_szApplDt1);
                    GetXMLField(pSess, "ApplDt1Desc", m_szApplDt1Desc);
                    GetXMLField(pSess, "ApplDt2", m_szApplDt2);
                    GetXMLField(pSess, "ApplDt2Desc", m_szApplDt2Desc);
                    GetXMLField(pSess, "ApplDt3", m_szApplDt3);
                    GetXMLField(pSess, "ApplDt3Desc", m_szApplDt3Desc);
                    GetXMLField(pSess, "ApplDt4", m_szApplDt4);
                    GetXMLField(pSess, "ApplDt4Desc", m_szApplDt4Desc);
                    GetXMLField(pSess, "ApplDt5", m_szApplDt5);
                    GetXMLField(pSess, "ApplDt5Desc", m_szApplDt5Desc);
                    GetXMLField(pSess, "OwnerLiabCd", m_szOwnerLiabCd);
                    GetXMLField(pSess, "ApplSmAlertInd", m_szApplSmAlertInd);
                    GetXMLField(pSess, "ApplErrCd", m_szApplErrCd);
                    GetXMLField(pSess, "ApplErrText", m_szApplErrText);
                    GetXMLField(pSess, "AcctCorrLangCd", m_szAcctCorrLangCd);
                    GetXMLField(pSess, "AcctCorrLangGrpCd", m_szAcctCorrLangGrpCd);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    {
                        CApplPstDueInfo[lOccurs].Load(pSess);
                    }
                    for (lOccurs = 0; lOccurs < 8; lOccurs++)
                    {
                        CApplNaLine[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "ApplData");
                };
            }
            
            //**************** Start AsdApplPstDueInfo Definition ****************
            //                 GROUP LEVEL PAST DUE INFO
            
            class AsdApplPstDueInfo
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bAcctDaysPstDue;
                char      m_szAcctDaysPstDue[4+1];
                bool      m_bAcctTimesPstDue;
                char      m_szAcctTimesPstDue[4+1];
            
              public:
                long      m_lIndex;

                AsdApplPstDueInfo ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bAcctDaysPstDue = false;
                    strcpy(m_szAcctDaysPstDue, "+000");
                    m_bAcctTimesPstDue = false;
                    strcpy(m_szAcctTimesPstDue, "+000");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                void Reinit()
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bAcctDaysPstDue = false;
                    strcpy(m_szAcctDaysPstDue, "+000");
                    m_bAcctTimesPstDue = false;
                    strcpy(m_szAcctTimesPstDue, "+000");
                }

                
                //    NUMBER OF DAYS PAST DUE
                long lAcctDaysPstDue () { return 4; };
                RWCString AcctDaysPstDue (void)
                {
                    return AceZeroSupp(m_szAcctDaysPstDue, &m_szSuppressBuff[0]);
                }
                RWCString AcctDaysPstDueRaw (void)
                {
                    return m_szAcctDaysPstDue;
                }
                long AcctDaysPstDue (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szAcctDaysPstDue, sizeof(m_szAcctDaysPstDue), &m_bAcctDaysPstDue);
                }
                
                //    # TIMES PAST DUE
                long lAcctTimesPstDue () { return 4; };
                RWCString AcctTimesPstDue (void)
                {
                    return AceZeroSupp(m_szAcctTimesPstDue, &m_szSuppressBuff[0]);
                }
                RWCString AcctTimesPstDueRaw (void)
                {
                    return m_szAcctTimesPstDue;
                }
                long AcctTimesPstDue (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szAcctTimesPstDue, sizeof(m_szAcctTimesPstDue), &m_bAcctTimesPstDue);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bAcctDaysPstDue) return true;
                    if (m_bAcctTimesPstDue) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "ApplPstDueInfo", m_lIndex);
                        AddXMLField(pSess, "AcctDaysPstDue", m_szAcctDaysPstDue, &m_bAcctDaysPstDue);
                        AddXMLField(pSess, "AcctTimesPstDue", m_szAcctTimesPstDue, &m_bAcctTimesPstDue);
                        AddXMLCloseRecord(pSess, "ApplPstDueInfo");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "ApplPstDueInfo", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "AcctDaysPstDue", m_szAcctDaysPstDue);
                        GetXMLField(pSess, "AcctTimesPstDue", m_szAcctTimesPstDue);
                        CloseXMLRecord(pSess, "ApplPstDueInfo");
                    };
                }
            };

            AsdApplPstDueInfo  CApplPstDueInfo[6];
            AsdApplPstDueInfo *ApplPstDueInfo[6];
            
            //**************** End AsdApplPstDueInfo Definition ****************
            
            
            //**************** Start AsdApplNaLine Definition ****************
            //                 GROUP LEVEL OF APPLICATON NAME AND ADDRESS LINES
            
            class AsdApplNaLine
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bApplNaTypCd;
                char      m_szApplNaTypCd[1+1];
                bool      m_bApplNaSeqNbr;
                char      m_szApplNaSeqNbr[1+1];
                bool      m_bApplNameAddr;
                char      m_szApplNameAddr[40+1];
            
              public:
                long      m_lIndex;

                AsdApplNaLine ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bApplNaTypCd = false;
                    strcpy(m_szApplNaTypCd, "");
                    m_bApplNaSeqNbr = false;
                    strcpy(m_szApplNaSeqNbr, "");
                    m_bApplNameAddr = false;
                    strcpy(m_szApplNameAddr, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                void Reinit()
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bApplNaTypCd = false;
                    strcpy(m_szApplNaTypCd, "");
                    m_bApplNaSeqNbr = false;
                    strcpy(m_szApplNaSeqNbr, "");
                    m_bApplNameAddr = false;
                }

                
                //    APPL NAME/ADDR TYPE CODE
                long lApplNaTypCd () { return 1; };
                RWCString ApplNaTypCd (void)
                {
                    return m_szApplNaTypCd;
                }
                long ApplNaTypCd (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szApplNaTypCd, sizeof(m_szApplNaTypCd), &m_bApplNaTypCd);
                }
                
                //    APPL NAME/ADDR LINE SEQUENCE NUMBER
                long lApplNaSeqNbr () { return 1; };
                RWCString ApplNaSeqNbr (void)
                {
                    return m_szApplNaSeqNbr;
                }
                long ApplNaSeqNbr (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szApplNaSeqNbr, sizeof(m_szApplNaSeqNbr), &m_bApplNaSeqNbr);
                }
                
                //    NAME LINE
                long lApplNameAddr () { return 40; };
                RWCString ApplNameAddr (void)
                {
                    return m_szApplNameAddr;
                }
                long ApplNameAddr (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szApplNameAddr, sizeof(m_szApplNameAddr), &m_bApplNameAddr);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bApplNaTypCd) return true;
                    if (m_bApplNaSeqNbr) return true;
                    if (m_bApplNameAddr) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "ApplNaLine", m_lIndex);
                        AddXMLField(pSess, "ApplNaTypCd", m_szApplNaTypCd, &m_bApplNaTypCd);
                        AddXMLField(pSess, "ApplNaSeqNbr", m_szApplNaSeqNbr, &m_bApplNaSeqNbr);
                        AddXMLField(pSess, "ApplNameAddr", m_szApplNameAddr, &m_bApplNameAddr);
                        AddXMLCloseRecord(pSess, "ApplNaLine");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "ApplNaLine", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "ApplNaTypCd", m_szApplNaTypCd);
                        GetXMLField(pSess, "ApplNaSeqNbr", m_szApplNaSeqNbr);
                        GetXMLField(pSess, "ApplNameAddr", m_szApplNameAddr);
                        CloseXMLRecord(pSess, "ApplNaLine");
                    };
                }
            };

            AsdApplNaLine  CApplNaLine[8];
            AsdApplNaLine *ApplNaLine[8];
            
            //**************** End AsdApplNaLine Definition ****************
            
        };

        AsdApplData  CApplData[16];
        AsdApplData *ApplData[16];
        
        //**************** End AsdApplData Definition ****************
        
    };

    AsdRMTRAIOT CRMTRAIOT;
    AsdRMTRAIOT *RMTRAIOT;
    
    //**************** End AsdRMTRAIOT Definition ****************

    
    //**************** Start AsdWVRMOWNI Definition ****************
    //                 CUSTOMER LOCATE LIST TRAN DAG                               
    
    //    WVRMOWNI.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/18/02 08:50:40
    class AsdWVRMOWNI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bActvCustOnlyInd;
        char      m_szActvCustOnlyInd[1+1];
        bool      m_bNbrReq;
        char      m_szNbrReq[4+1];
        bool      m_bMoreInd;
        char      m_szMoreInd[1+1];
        bool      m_bPgDirCd;
        char      m_szPgDirCd[1+1];
        bool      m_bTblMax;
        short     m_nTblMax;
        bool      m_bTblUsed;
        short     m_nTblUsed;
        bool      m_bCustCtl1;
        char      m_szCustCtl1[4+1];
        bool      m_bCustCtl2;
        char      m_szCustCtl2[4+1];
        bool      m_bCustCtl3;
        char      m_szCustCtl3[4+1];
        bool      m_bCustCtl4;
        char      m_szCustCtl4[4+1];
        bool      m_bCustNbr;
        char      m_szCustNbr[14+1];
        bool      m_bNameSeqNbr;
        char      m_szNameSeqNbr[3+1];
        bool      m_bAddrSeqNbr;
        char      m_szAddrSeqNbr[3+1];
        bool      m_bCurExtlTranCd;
        char      m_szCurExtlTranCd[8+1];
        bool      m_bSrchComdLine;
        char      m_szSrchComdLine[75+1];
        bool      m_bReqFromEntCd;
        char      m_szReqFromEntCd[2+1];
        bool      m_bReqFromApplCd;
        char      m_szReqFromApplCd[2+1];
        bool      m_bReqFromApplId;
        char      m_szReqFromApplId[2+1];
        bool      m_bReqFromEntKey;
        char      m_szReqFromEntKey[43+1];
        bool      m_bReqToEntCd;
        char      m_szReqToEntCd[2+1];
        bool      m_bReqPriSecPInd;
        char      m_szReqPriSecPInd[1+1];
        bool      m_bReqSpecFromRelCd;
        char      m_szReqSpecFromRelCd[3+1];
        bool      m_bReqSpecToRelCd;
        char      m_szReqSpecToRelCd[3+1];
        bool      m_bActCd1;
        char      m_szActCd1[1+1];
        bool      m_bActSubCd1;
        char      m_szActSubCd1[1+1];
        bool      m_bActCd2;
        char      m_szActCd2[1+1];
        bool      m_bActSubCd2;
        char      m_szActSubCd2[1+1];
        bool      m_bPhDataInd;
        char      m_szPhDataInd[1+1];
        bool      m_bPersDataInd;
        char      m_szPersDataInd[1+1];
        bool      m_bComlDataInd;
        char      m_szComlDataInd[1+1];
        bool      m_bContactDataInd;
        char      m_szContactDataInd[1+1];
        bool      m_bEmplHistDataInd;
        char      m_szEmplHistDataInd[1+1];
        bool      m_bCenDataInd;
        char      m_szCenDataInd[1+1];
        bool      m_bCrDataInd;
        char      m_szCrDataInd[1+1];
        bool      m_bRmksDataInd;
        char      m_szRmksDataInd[1+1];
        bool      m_bBegKey;
        char      m_szBegKey[100+1];
        bool      m_bEndKey;
        char      m_szEndKey[100+1];
    
      public:
        long      m_lIndex;

        AsdWVRMOWNI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bActvCustOnlyInd = false;
            strcpy(m_szActvCustOnlyInd, "");
            m_bNbrReq = false;
            strcpy(m_szNbrReq, "+000");
            m_bMoreInd = false;
            strcpy(m_szMoreInd, "");
            m_bPgDirCd = false;
            strcpy(m_szPgDirCd, "");
            m_bTblMax = false;
            m_nTblMax = 0;
            m_bTblUsed = false;
            m_nTblUsed = 0;
            m_bCustCtl1 = false;
            strcpy(m_szCustCtl1, "");
            m_bCustCtl2 = false;
            strcpy(m_szCustCtl2, "");
            m_bCustCtl3 = false;
            strcpy(m_szCustCtl3, "");
            m_bCustCtl4 = false;
            strcpy(m_szCustCtl4, "");
            m_bCustNbr = false;
            strcpy(m_szCustNbr, "00000000000000");
            m_bNameSeqNbr = false;
            strcpy(m_szNameSeqNbr, "000");
            m_bAddrSeqNbr = false;
            strcpy(m_szAddrSeqNbr, "000");
            m_bCurExtlTranCd = false;
            strcpy(m_szCurExtlTranCd, "");
            m_bSrchComdLine = false;
            strcpy(m_szSrchComdLine, "");
            m_bReqFromEntCd = false;
            strcpy(m_szReqFromEntCd, "");
            m_bReqFromApplCd = false;
            strcpy(m_szReqFromApplCd, "");
            m_bReqFromApplId = false;
            strcpy(m_szReqFromApplId, "");
            m_bReqFromEntKey = false;
            strcpy(m_szReqFromEntKey, "");
            m_bReqToEntCd = false;
            strcpy(m_szReqToEntCd, "");
            m_bReqPriSecPInd = false;
            strcpy(m_szReqPriSecPInd, "");
            m_bReqSpecFromRelCd = false;
            strcpy(m_szReqSpecFromRelCd, "");
            m_bReqSpecToRelCd = false;
            strcpy(m_szReqSpecToRelCd, "");
            m_bActCd1 = false;
            strcpy(m_szActCd1, "");
            m_bActSubCd1 = false;
            strcpy(m_szActSubCd1, "");
            m_bActCd2 = false;
            strcpy(m_szActCd2, "");
            m_bActSubCd2 = false;
            strcpy(m_szActSubCd2, "");
            m_bPhDataInd = false;
            strcpy(m_szPhDataInd, "");
            m_bPersDataInd = false;
            strcpy(m_szPersDataInd, "");
            m_bComlDataInd = false;
            strcpy(m_szComlDataInd, "");
            m_bContactDataInd = false;
            strcpy(m_szContactDataInd, "");
            m_bEmplHistDataInd = false;
            strcpy(m_szEmplHistDataInd, "");
            m_bCenDataInd = false;
            strcpy(m_szCenDataInd, "");
            m_bCrDataInd = false;
            strcpy(m_szCrDataInd, "");
            m_bRmksDataInd = false;
            strcpy(m_szRmksDataInd, "");
            m_bBegKey = false;
            strcpy(m_szBegKey, "");
            m_bEndKey = false;
            strcpy(m_szEndKey, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bActvCustOnlyInd = false;
            strcpy(m_szActvCustOnlyInd, "");
            m_bNbrReq = false;
            strcpy(m_szNbrReq, "+000");
            m_bMoreInd = false;
            strcpy(m_szMoreInd, "");
            m_bPgDirCd = false;
            strcpy(m_szPgDirCd, "");
            m_bTblMax = false;
            m_nTblMax = 0;
            m_bTblUsed = false;
            m_nTblUsed = 0;
            m_bCustCtl1 = false;
            strcpy(m_szCustCtl1, "");
            m_bCustCtl2 = false;
            strcpy(m_szCustCtl2, "");
            m_bCustCtl3 = false;
            strcpy(m_szCustCtl3, "");
            m_bCustCtl4 = false;
            strcpy(m_szCustCtl4, "");
            m_bCustNbr = false;
            strcpy(m_szCustNbr, "00000000000000");
            m_bNameSeqNbr = false;
            strcpy(m_szNameSeqNbr, "000");
            m_bAddrSeqNbr = false;
            strcpy(m_szAddrSeqNbr, "000");
            m_bCurExtlTranCd = false;
            strcpy(m_szCurExtlTranCd, "");
            m_bSrchComdLine = false;
            strcpy(m_szSrchComdLine, "");
            m_bReqFromEntCd = false;
            strcpy(m_szReqFromEntCd, "");
            m_bReqFromApplCd = false;
            strcpy(m_szReqFromApplCd, "");
            m_bReqFromApplId = false;
            strcpy(m_szReqFromApplId, "");
            m_bReqFromEntKey = false;
            strcpy(m_szReqFromEntKey, "");
            m_bReqToEntCd = false;
            strcpy(m_szReqToEntCd, "");
            m_bReqPriSecPInd = false;
            strcpy(m_szReqPriSecPInd, "");
            m_bReqSpecFromRelCd = false;
            strcpy(m_szReqSpecFromRelCd, "");
            m_bReqSpecToRelCd = false;
            strcpy(m_szReqSpecToRelCd, "");
            m_bActCd1 = false;
            strcpy(m_szActCd1, "");
            m_bActSubCd1 = false;
            strcpy(m_szActSubCd1, "");
            m_bActCd2 = false;
            strcpy(m_szActCd2, "");
            m_bActSubCd2 = false;
            strcpy(m_szActSubCd2, "");
            m_bPhDataInd = false;
            strcpy(m_szPhDataInd, "");
            m_bPersDataInd = false;
            strcpy(m_szPersDataInd, "");
            m_bComlDataInd = false;
            strcpy(m_szComlDataInd, "");
            m_bContactDataInd = false;
            strcpy(m_szContactDataInd, "");
            m_bEmplHistDataInd = false;
            strcpy(m_szEmplHistDataInd, "");
            m_bCenDataInd = false;
            strcpy(m_szCenDataInd, "");
            m_bCrDataInd = false;
            strcpy(m_szCrDataInd, "");
            m_bRmksDataInd = false;
            strcpy(m_szRmksDataInd, "");
            m_bBegKey = false;
            strcpy(m_szBegKey, "");
            m_bEndKey = false;
            strcpy(m_szEndKey, "");
        }

        
        //    INDICATES WHETHER TO SEARCH FOR ACTIVE CUSTOMERS ONLY.
        long lActvCustOnlyInd () { return 1; };
        RWCString ActvCustOnlyInd (void)
        {
            return m_szActvCustOnlyInd;
        }
        long ActvCustOnlyInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szActvCustOnlyInd, sizeof(m_szActvCustOnlyInd), &m_bActvCustOnlyInd);
        }
        
        //    NUMBER OF SEGMENTS TO SEND TO THE SCREEN FOR VIEWING.
        long lNbrReq () { return 4; };
        RWCString NbrReq (void)
        {
            return AceZeroSupp(m_szNbrReq, &m_szSuppressBuff[0]);
        }
        RWCString NbrReqRaw (void)
        {
            return m_szNbrReq;
        }
        long NbrReq (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szNbrReq, sizeof(m_szNbrReq), &m_bNbrReq);
        }
        
        //    INDICATES WHETHER ADDITIONAL SEGMENTS OR RECORDS EXIST.
        long lMoreInd () { return 1; };
        RWCString MoreInd (void)
        {
            return m_szMoreInd;
        }
        long MoreInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMoreInd, sizeof(m_szMoreInd), &m_bMoreInd);
        }
        
        //    DIRECTION IN WHICH PAGING OCCURRED (F-FORWARD, B-BACKWARD).
        long lPgDirCd () { return 1; };
        RWCString PgDirCd (void)
        {
            return m_szPgDirCd;
        }
        long PgDirCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPgDirCd, sizeof(m_szPgDirCd), &m_bPgDirCd);
        }
        
        //    MAXIMUM NUMBER OF RECORDS THAT CAN BE IN THE TRAN DAG.
        short TblMax (void)
        {
            return m_nTblMax;
        }
        long TblMax (const short nValue)
        {
            return SetShort(nValue, &m_nTblMax, &m_bTblMax);
        }
        
        //    NUMBER OF RECORDS ACTUALLY STORED IN THE TRANSACTION DAG.
        short TblUsed (void)
        {
            return m_nTblUsed;
        }
        long TblUsed (const short nValue)
        {
            return SetShort(nValue, &m_nTblUsed, &m_bTblUsed);
        }
        
        //    INSTITUTION-DEFINED FIRST LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl1 () { return 4; };
        RWCString CustCtl1 (void)
        {
            return m_szCustCtl1;
        }
        long CustCtl1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCustCtl1, sizeof(m_szCustCtl1), &m_bCustCtl1);
        }
        
        //    INSTITUTION-DEFINED SECOND LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl2 () { return 4; };
        RWCString CustCtl2 (void)
        {
            return m_szCustCtl2;
        }
        long CustCtl2 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCustCtl2, sizeof(m_szCustCtl2), &m_bCustCtl2);
        }
        
        //    INSTITUTION-DEFINED THIRD LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl3 () { return 4; };
        RWCString CustCtl3 (void)
        {
            return m_szCustCtl3;
        }
        long CustCtl3 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCustCtl3, sizeof(m_szCustCtl3), &m_bCustCtl3);
        }
        
        //    INSTITUTION-DEFINED FOURTH LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl4 () { return 4; };
        RWCString CustCtl4 (void)
        {
            return m_szCustCtl4;
        }
        long CustCtl4 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCustCtl4, sizeof(m_szCustCtl4), &m_bCustCtl4);
        }
        
        //    UNIQUE NUMBER IDENTIFYING THE CUSTOMER.
        long lCustNbr () { return 14; };
        RWCString CustNbr (void)
        {
            return m_szCustNbr;
        }
        long CustNbr (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCustNbr, sizeof(m_szCustNbr), &m_bCustNbr);
        }
        
        //    SEQ NUMBER THAT IDENTIFIES EACH NAME SET THE CUSTOMER HAS.
        long lNameSeqNbr () { return 3; };
        RWCString NameSeqNbr (void)
        {
            return m_szNameSeqNbr;
        }
        long NameSeqNbr (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szNameSeqNbr, sizeof(m_szNameSeqNbr), &m_bNameSeqNbr);
        }
        
        //    SEQ NUM THAT IDENTIFIES EACH ADDRESS SET THE CUSTOMER HAS.
        long lAddrSeqNbr () { return 3; };
        RWCString AddrSeqNbr (void)
        {
            return m_szAddrSeqNbr;
        }
        long AddrSeqNbr (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szAddrSeqNbr, sizeof(m_szAddrSeqNbr), &m_bAddrSeqNbr);
        }
        
        //    CURRENT TRANSACTION IDENTIFIER.
        long lCurExtlTranCd () { return 8; };
        RWCString CurExtlTranCd (void)
        {
            return m_szCurExtlTranCd;
        }
        long CurExtlTranCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCurExtlTranCd, sizeof(m_szCurExtlTranCd), &m_bCurExtlTranCd);
        }
        
        //    COMMAND LINE & FREE FORM DATA SEARCH INFORMATION.
        long lSrchComdLine () { return 75; };
        RWCString SrchComdLine (void)
        {
            return m_szSrchComdLine;
        }
        long SrchComdLine (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szSrchComdLine, sizeof(m_szSrchComdLine), &m_bSrchComdLine);
        }
        
        //    CODE IDENTIFYING THE FROM ENTITY (ACCOUNT, ADDRESS, ETC.).
        long lReqFromEntCd () { return 2; };
        RWCString ReqFromEntCd (void)
        {
            return m_szReqFromEntCd;
        }
        long ReqFromEntCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReqFromEntCd, sizeof(m_szReqFromEntCd), &m_bReqFromEntCd);
        }
        
        //    INSTITUTION-DEFINED CODE FOR THE FROM APPLICATION.
        long lReqFromApplCd () { return 2; };
        RWCString ReqFromApplCd (void)
        {
            return m_szReqFromApplCd;
        }
        long ReqFromApplCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReqFromApplCd, sizeof(m_szReqFromApplCd), &m_bReqFromApplCd);
        }
        
        //    APPL ID FOR ACCT INCLUDED IN AN ACCT RELATIONSHIP INQUIRY.
        long lReqFromApplId () { return 2; };
        RWCString ReqFromApplId (void)
        {
            return m_szReqFromApplId;
        }
        long ReqFromApplId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReqFromApplId, sizeof(m_szReqFromApplId), &m_bReqFromApplId);
        }
        
        //    KEY TO THE FROM ENTITY.
        long lReqFromEntKey () { return 43; };
        RWCString ReqFromEntKey (void)
        {
            return m_szReqFromEntKey;
        }
        long ReqFromEntKey (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReqFromEntKey, sizeof(m_szReqFromEntKey), &m_bReqFromEntKey);
        }
        
        //    CODE IDENTIFYING THE TO ENTITY (ACCOUNT, ADDRESS, ETC.).
        long lReqToEntCd () { return 2; };
        RWCString ReqToEntCd (void)
        {
            return m_szReqToEntCd;
        }
        long ReqToEntCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReqToEntCd, sizeof(m_szReqToEntCd), &m_bReqToEntCd);
        }
        
        //    INDICATES WHETHER TO SHOW ACCTS OF WHICH CUST IS PRIM OWNER.
        long lReqPriSecPInd () { return 1; };
        RWCString ReqPriSecPInd (void)
        {
            return m_szReqPriSecPInd;
        }
        long ReqPriSecPInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReqPriSecPInd, sizeof(m_szReqPriSecPInd), &m_bReqPriSecPInd);
        }
        
        //    INSTITUTION-DEF CODE FOR THE FROM RELATIONSHIP REQUESTED.
        long lReqSpecFromRelCd () { return 3; };
        RWCString ReqSpecFromRelCd (void)
        {
            return m_szReqSpecFromRelCd;
        }
        long ReqSpecFromRelCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReqSpecFromRelCd, sizeof(m_szReqSpecFromRelCd), &m_bReqSpecFromRelCd);
        }
        
        //    INSTITUTION-DEFINED CODE FOR THE TO RELATIONSHIP REQUESTED.
        long lReqSpecToRelCd () { return 3; };
        RWCString ReqSpecToRelCd (void)
        {
            return m_szReqSpecToRelCd;
        }
        long ReqSpecToRelCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReqSpecToRelCd, sizeof(m_szReqSpecToRelCd), &m_bReqSpecToRelCd);
        }
        
        //    FIRST ACTION CODE ENTERED FOR THE TRANSACTION.
        long lActCd1 () { return 1; };
        RWCString ActCd1 (void)
        {
            return m_szActCd1;
        }
        long ActCd1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szActCd1, sizeof(m_szActCd1), &m_bActCd1);
        }
        
        //    INDICATES WHETHER YOU WANT TO DELETE THE PROCESS CTRL REC.
        long lActSubCd1 () { return 1; };
        RWCString ActSubCd1 (void)
        {
            return m_szActSubCd1;
        }
        long ActSubCd1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szActSubCd1, sizeof(m_szActSubCd1), &m_bActSubCd1);
        }
        
        //    SECOND ACTION CODE ENTERED FOR THE TRANSACTION.
        long lActCd2 () { return 1; };
        RWCString ActCd2 (void)
        {
            return m_szActCd2;
        }
        long ActCd2 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szActCd2, sizeof(m_szActCd2), &m_bActCd2);
        }
        
        //    INDICATES THE TYPE OF NAME OR ADDRESS USE.
        long lActSubCd2 () { return 1; };
        RWCString ActSubCd2 (void)
        {
            return m_szActSubCd2;
        }
        long ActSubCd2 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szActSubCd2, sizeof(m_szActSubCd2), &m_bActSubCd2);
        }
        
        //    INDICATES WHETHER TELEPHONE INFORMATION EXISTS FOR CUSTOMER.
        long lPhDataInd () { return 1; };
        RWCString PhDataInd (void)
        {
            return m_szPhDataInd;
        }
        long PhDataInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPhDataInd, sizeof(m_szPhDataInd), &m_bPhDataInd);
        }
        
        //    INDICATES WHETHER PERSONAL DEMOGRAPHIC INFO EXISTS FOR CUST.
        long lPersDataInd () { return 1; };
        RWCString PersDataInd (void)
        {
            return m_szPersDataInd;
        }
        long PersDataInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPersDataInd, sizeof(m_szPersDataInd), &m_bPersDataInd);
        }
        
        //    INDICATES WHETHER COMMERCIAL DEMOGRAPH INFO EXISTS FOR CUST.
        long lComlDataInd () { return 1; };
        RWCString ComlDataInd (void)
        {
            return m_szComlDataInd;
        }
        long ComlDataInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szComlDataInd, sizeof(m_szComlDataInd), &m_bComlDataInd);
        }
        
        //    INDICATES WHETHER COMMERCIAL CONTACT INFO EXISTS FOR CUST.
        long lContactDataInd () { return 1; };
        RWCString ContactDataInd (void)
        {
            return m_szContactDataInd;
        }
        long ContactDataInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szContactDataInd, sizeof(m_szContactDataInd), &m_bContactDataInd);
        }
        
        //    INDICATES WHETHER EMPLOYMENT HIST INFO EXISTS FOR CUSTOMER.
        long lEmplHistDataInd () { return 1; };
        RWCString EmplHistDataInd (void)
        {
            return m_szEmplHistDataInd;
        }
        long EmplHistDataInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szEmplHistDataInd, sizeof(m_szEmplHistDataInd), &m_bEmplHistDataInd);
        }
        
        //    INDICATES WHETHER CENSUS INFO EXISTS FOR THE CUSTOMER.
        long lCenDataInd () { return 1; };
        RWCString CenDataInd (void)
        {
            return m_szCenDataInd;
        }
        long CenDataInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCenDataInd, sizeof(m_szCenDataInd), &m_bCenDataInd);
        }
        
        //    INDICATES WHETHER CREDIT INFORMATION EXISTS FOR CUSTOMER.
        long lCrDataInd () { return 1; };
        RWCString CrDataInd (void)
        {
            return m_szCrDataInd;
        }
        long CrDataInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCrDataInd, sizeof(m_szCrDataInd), &m_bCrDataInd);
        }
        
        //    INDICATES WHETHER REMARKS EXIST FOR THE CUSTOMER.
        long lRmksDataInd () { return 1; };
        RWCString RmksDataInd (void)
        {
            return m_szRmksDataInd;
        }
        long RmksDataInd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szRmksDataInd, sizeof(m_szRmksDataInd), &m_bRmksDataInd);
        }
        
        //    KEY TO THE FIRST ENTRY ON A LIST SCREEN.
        long lBegKey () { return 100; };
        RWCString BegKey (void)
        {
            return m_szBegKey;
        }
        long BegKey (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBegKey, sizeof(m_szBegKey), &m_bBegKey);
        }
        
        //    KEY TO THE LAST ENTRY ON A LIST SCREEN.
        long lEndKey () { return 100; };
        RWCString EndKey (void)
        {
            return m_szEndKey;
        }
        long EndKey (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szEndKey, sizeof(m_szEndKey), &m_bEndKey);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bActvCustOnlyInd) return true;
            if (m_bNbrReq) return true;
            if (m_bMoreInd) return true;
            if (m_bPgDirCd) return true;
            if (m_bTblMax) return true;
            if (m_bTblUsed) return true;
            if (m_bCustCtl1) return true;
            if (m_bCustCtl2) return true;
            if (m_bCustCtl3) return true;
            if (m_bCustCtl4) return true;
            if (m_bCustNbr) return true;
            if (m_bNameSeqNbr) return true;
            if (m_bAddrSeqNbr) return true;
            if (m_bCurExtlTranCd) return true;
            if (m_bSrchComdLine) return true;
            if (m_bReqFromEntCd) return true;
            if (m_bReqFromApplCd) return true;
            if (m_bReqFromApplId) return true;
            if (m_bReqFromEntKey) return true;
            if (m_bReqToEntCd) return true;
            if (m_bReqPriSecPInd) return true;
            if (m_bReqSpecFromRelCd) return true;
            if (m_bReqSpecToRelCd) return true;
            if (m_bActCd1) return true;
            if (m_bActSubCd1) return true;
            if (m_bActCd2) return true;
            if (m_bActSubCd2) return true;
            if (m_bPhDataInd) return true;
            if (m_bPersDataInd) return true;
            if (m_bComlDataInd) return true;
            if (m_bContactDataInd) return true;
            if (m_bEmplHistDataInd) return true;
            if (m_bCenDataInd) return true;
            if (m_bCrDataInd) return true;
            if (m_bRmksDataInd) return true;
            if (m_bBegKey) return true;
            if (m_bEndKey) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVRMOWNI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "ActvCustOnlyInd", m_szActvCustOnlyInd, &m_bActvCustOnlyInd);
                AddXMLField(pSess, "NbrReq", m_szNbrReq, &m_bNbrReq);
                AddXMLField(pSess, "MoreInd", m_szMoreInd, &m_bMoreInd);
                AddXMLField(pSess, "PgDirCd", m_szPgDirCd, &m_bPgDirCd);
                AddXMLField(pSess, "TblMax", m_nTblMax, &m_bTblMax);
                AddXMLField(pSess, "TblUsed", m_nTblUsed, &m_bTblUsed);
                AddXMLField(pSess, "CustCtl1", m_szCustCtl1, &m_bCustCtl1);
                AddXMLField(pSess, "CustCtl2", m_szCustCtl2, &m_bCustCtl2);
                AddXMLField(pSess, "CustCtl3", m_szCustCtl3, &m_bCustCtl3);
                AddXMLField(pSess, "CustCtl4", m_szCustCtl4, &m_bCustCtl4);
                AddXMLField(pSess, "CustNbr", m_szCustNbr, &m_bCustNbr);
                AddXMLField(pSess, "NameSeqNbr", m_szNameSeqNbr, &m_bNameSeqNbr);
                AddXMLField(pSess, "AddrSeqNbr", m_szAddrSeqNbr, &m_bAddrSeqNbr);
                AddXMLField(pSess, "CurExtlTranCd", m_szCurExtlTranCd, &m_bCurExtlTranCd);
                AddXMLField(pSess, "SrchComdLine", m_szSrchComdLine, &m_bSrchComdLine);
                AddXMLField(pSess, "ReqFromEntCd", m_szReqFromEntCd, &m_bReqFromEntCd);
                AddXMLField(pSess, "ReqFromApplCd", m_szReqFromApplCd, &m_bReqFromApplCd);
                AddXMLField(pSess, "ReqFromApplId", m_szReqFromApplId, &m_bReqFromApplId);
                AddXMLField(pSess, "ReqFromEntKey", m_szReqFromEntKey, &m_bReqFromEntKey);
                AddXMLField(pSess, "ReqToEntCd", m_szReqToEntCd, &m_bReqToEntCd);
                AddXMLField(pSess, "ReqPriSecPInd", m_szReqPriSecPInd, &m_bReqPriSecPInd);
                AddXMLField(pSess, "ReqSpecFromRelCd", m_szReqSpecFromRelCd, &m_bReqSpecFromRelCd);
                AddXMLField(pSess, "ReqSpecToRelCd", m_szReqSpecToRelCd, &m_bReqSpecToRelCd);
                AddXMLField(pSess, "ActCd1", m_szActCd1, &m_bActCd1);
                AddXMLField(pSess, "ActSubCd1", m_szActSubCd1, &m_bActSubCd1);
                AddXMLField(pSess, "ActCd2", m_szActCd2, &m_bActCd2);
                AddXMLField(pSess, "ActSubCd2", m_szActSubCd2, &m_bActSubCd2);
                AddXMLField(pSess, "PhDataInd", m_szPhDataInd, &m_bPhDataInd);
                AddXMLField(pSess, "PersDataInd", m_szPersDataInd, &m_bPersDataInd);
                AddXMLField(pSess, "ComlDataInd", m_szComlDataInd, &m_bComlDataInd);
                AddXMLField(pSess, "ContactDataInd", m_szContactDataInd, &m_bContactDataInd);
                AddXMLField(pSess, "EmplHistDataInd", m_szEmplHistDataInd, &m_bEmplHistDataInd);
                AddXMLField(pSess, "CenDataInd", m_szCenDataInd, &m_bCenDataInd);
                AddXMLField(pSess, "CrDataInd", m_szCrDataInd, &m_bCrDataInd);
                AddXMLField(pSess, "RmksDataInd", m_szRmksDataInd, &m_bRmksDataInd);
                AddXMLField(pSess, "BegKey", m_szBegKey, &m_bBegKey);
                AddXMLField(pSess, "EndKey", m_szEndKey, &m_bEndKey);
                AddXMLCloseRecord(pSess, "WVRMOWNI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVRMOWNI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "ActvCustOnlyInd", m_szActvCustOnlyInd);
                GetXMLField(pSess, "NbrReq", m_szNbrReq);
                GetXMLField(pSess, "MoreInd", m_szMoreInd);
                GetXMLField(pSess, "PgDirCd", m_szPgDirCd);
                GetXMLField(pSess, "TblMax", &m_nTblMax);
                GetXMLField(pSess, "TblUsed", &m_nTblUsed);
                GetXMLField(pSess, "CustCtl1", m_szCustCtl1);
                GetXMLField(pSess, "CustCtl2", m_szCustCtl2);
                GetXMLField(pSess, "CustCtl3", m_szCustCtl3);
                GetXMLField(pSess, "CustCtl4", m_szCustCtl4);
                GetXMLField(pSess, "CustNbr", m_szCustNbr);
                GetXMLField(pSess, "NameSeqNbr", m_szNameSeqNbr);
                GetXMLField(pSess, "AddrSeqNbr", m_szAddrSeqNbr);
                GetXMLField(pSess, "CurExtlTranCd", m_szCurExtlTranCd);
                GetXMLField(pSess, "SrchComdLine", m_szSrchComdLine);
                GetXMLField(pSess, "ReqFromEntCd", m_szReqFromEntCd);
                GetXMLField(pSess, "ReqFromApplCd", m_szReqFromApplCd);
                GetXMLField(pSess, "ReqFromApplId", m_szReqFromApplId);
                GetXMLField(pSess, "ReqFromEntKey", m_szReqFromEntKey);
                GetXMLField(pSess, "ReqToEntCd", m_szReqToEntCd);
                GetXMLField(pSess, "ReqPriSecPInd", m_szReqPriSecPInd);
                GetXMLField(pSess, "ReqSpecFromRelCd", m_szReqSpecFromRelCd);
                GetXMLField(pSess, "ReqSpecToRelCd", m_szReqSpecToRelCd);
                GetXMLField(pSess, "ActCd1", m_szActCd1);
                GetXMLField(pSess, "ActSubCd1", m_szActSubCd1);
                GetXMLField(pSess, "ActCd2", m_szActCd2);
                GetXMLField(pSess, "ActSubCd2", m_szActSubCd2);
                GetXMLField(pSess, "PhDataInd", m_szPhDataInd);
                GetXMLField(pSess, "PersDataInd", m_szPersDataInd);
                GetXMLField(pSess, "ComlDataInd", m_szComlDataInd);
                GetXMLField(pSess, "ContactDataInd", m_szContactDataInd);
                GetXMLField(pSess, "EmplHistDataInd", m_szEmplHistDataInd);
                GetXMLField(pSess, "CenDataInd", m_szCenDataInd);
                GetXMLField(pSess, "CrDataInd", m_szCrDataInd);
                GetXMLField(pSess, "RmksDataInd", m_szRmksDataInd);
                GetXMLField(pSess, "BegKey", m_szBegKey);
                GetXMLField(pSess, "EndKey", m_szEndKey);
                CloseXMLRecord(pSess, "WVRMOWNI");
            };
        }
    };

    AsdWVRMOWNI CWVRMOWNI;
    AsdWVRMOWNI *WVRMOWNI;
    
    //**************** End AsdWVRMOWNI Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
            CMdaTrmMsg.Reinit();
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            void Reinit()
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs]  = &CMdaMsg[lOccurs];
                CMdaMsg[lOccurs].Reinit();
                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                void Reinit()
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdWVPCRMLSData Definition ****************

typedef AsdWVPCRMLSData *LPWVPCRMLS;
typedef AsdWVPCRMLSData::AsdTSHeader *LPWVPCRMLS_TSHeader;
typedef AsdWVPCRMLSData::AsdRMTRAIOT *LPWVPCRMLS_RMTRAIOT;
typedef AsdWVPCRMLSData::AsdRMTRAIOT::AsdApplData *LPWVPCRMLS_RMTRAIOT_ApplData;
typedef AsdWVPCRMLSData::AsdRMTRAIOT::AsdApplData::AsdApplPstDueInfo *LPWVPCRMLS_RMTRAIOT_ApplData_ApplPstDueInfo;
typedef AsdWVPCRMLSData::AsdRMTRAIOT::AsdApplData::AsdApplNaLine *LPWVPCRMLS_RMTRAIOT_ApplData_ApplNaLine;
typedef AsdWVPCRMLSData::AsdWVRMOWNI *LPWVPCRMLS_WVRMOWNI;
typedef AsdWVPCRMLSData::AsdTSMDA *LPWVPCRMLS_TSMDA;
typedef AsdWVPCRMLSData::AsdTSMDA::AsdMdaTrmMsg *LPWVPCRMLS_TSMDA_MdaTrmMsg;
typedef AsdWVPCRMLSData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPWVPCRMLS_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdWVPCRMLSData_H

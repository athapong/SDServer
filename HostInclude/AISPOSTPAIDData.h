#ifndef AsdAISPOSTPAIDData_H
#define AsdAISPOSTPAIDData_H

#include <stdlib.h>
#ifdef  AsdAISPOSTPAID_INTEGRITY_STRING
#undef  AsdAISPOSTPAID_INTEGRITY_STRING
#endif
#define AsdAISPOSTPAID_INTEGRITY_STRING        ""

#ifdef  AsdAISPOSTPAID_CRC_STRING
#undef  AsdAISPOSTPAID_CRC_STRING
#endif
#define AsdAISPOSTPAID_CRC_STRING "34981006066"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcBpGateway.h>

//**************** Start AsdAISPOSTPAIDData Definition ****************
//                 AIS Post Paid payment

//                 AISPOSTPAIDData.h generated by Ping #June 5, 2009

class AsdAISPOSTPAIDData
{
  public:
    //#include <AceUserExit.h>
  private:
    BPGATEWAYSESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdAISPOSTPAIDData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeBPSessionData declared in bcBpGateway.h
        m_Sess.pFileName = "BPGateway";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdAISPOSTPAID_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
    }

    ~AsdAISPOSTPAIDData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
        }
    }

    RWCString BpGatewayServerIP (void)
    {
        return m_Sess.szBpGatewayServerIP;
    }
    long BpGatewayServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szBpGatewayServerIP, sizeof(m_Sess.szBpGatewayServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }
    
    RWCString Provider (void)
    {
        return m_Sess.szProvider;
    }
    long Provider (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szProvider, sizeof(m_Sess.szProvider));
    }    
//
	 RWCString PayChannel (void)
    {
        return m_Sess.szPayChannel;
    }
    long PayChannel (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szPayChannel, sizeof(m_Sess.szPayChannel));
    }
	 
	 RWCString HeadType (void)
    {
        return m_Sess.szHeadType;
    }
    long HeadType (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szHeadType, sizeof(m_Sess.szHeadType));
    }    
    
	//Banyut CRT#289942 New Gateway
	 RWCString ProfileLU (void)
    {
        return m_Sess.szProfile;
    }
    long ProfileLU (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szProfile, sizeof(m_Sess.szProfile));
    }    
	//Banyut CRT#289942 New Gateway
    
    RWCString PayType (void)
    {
        return m_Sess.szPayType;
    }
    long PayType (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szPayType, sizeof(m_Sess.szPayType));
    }
    
    RWCString Command (void)
    {
        return m_Sess.szCommand;
    }
    long Command (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szCommand, sizeof(m_Sess.szCommand));
    }
    
    RWCString TransactionID (void)
    {
        return m_Sess.szTransactionID;
    }
    long TransactionID (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTransactionID, sizeof(m_Sess.szTransactionID));
    }
    
    RWCString BankReference (void)
    {
        return m_Sess.szBankReference;
    }
    long BankReference (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szBankReference, sizeof(m_Sess.szBankReference));
    }
    
    RWCString MobileNo (void)
    {
        return m_Sess.szMobileNo;
    }
    long MobileNo (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szMobileNo, sizeof(m_Sess.szMobileNo));
    }
    
    RWCString Amount (void)
    {
        return m_Sess.szAmount;
    }
    long Amount (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAmount, sizeof(m_Sess.szAmount));
    }
    
    RWCString Reference1 (void)
    {
        return m_Sess.szReference1;
    }
    long Reference1 (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szReference1, sizeof(m_Sess.szReference1));
    }

    RWCString Reference2 (void)
    {
        return m_Sess.szReference2;
    }
    long Reference2 (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szReference2, sizeof(m_Sess.szReference2));
    }
    
    RWCString Reference3 (void)
    {
        return m_Sess.szReference3;
    }
    long Reference3 (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szReference3, sizeof(m_Sess.szReference3));
    }
    
    RWCString Reference4 (void)
    {
        return m_Sess.szReference4;
    }
    long Reference4 (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szReference4, sizeof(m_Sess.szReference4));
    }
    
    RWCString TransDate (void)
    {
        return m_Sess.szTransDate;
    }
    long TransDate (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTransDate, sizeof(m_Sess.szTransDate));
    }
    
    RWCString TransTime (void)
    {
        return m_Sess.szTransTime;
    }
    long TransTime (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTransTime, sizeof(m_Sess.szTransTime));
    }
    
    RWCString BankCode (void)
    {
        return m_Sess.szBankCode;
    }
    long BankCode (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szBankCode, sizeof(m_Sess.szBankCode));
    }
    
    RWCString BranchCode (void)
    {
        return m_Sess.szBranchCode;
    }
    long BranchCode (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szBranchCode, sizeof(m_Sess.szBranchCode));
    }
    
    RWCString TellerID (void)
    {
        return m_Sess.szTellerID;
    }
    long TellerID (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTellerID, sizeof(m_Sess.szTellerID));
    }
    
    RWCString CustReference (void)
    {
        return m_Sess.szCustReference;
    }
    long CustReference (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szCustReference, sizeof(m_Sess.szCustReference));
    }

    RWCString Status (void)
    {
        return m_Sess.szStatus;
    }
    long Status (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szStatus, sizeof(m_Sess.szStatus));
    }

//
    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szMessage;
    }
    long Message (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szMessage, sizeof(m_Sess.szMessage));
    }    

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pBpGatewayRequestTag, -1);  // BP Gateway
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdAISPOSTPAID_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pBpGatewayRequestTag);  // BP Gateway
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;
        #ifdef SERVER_TRACE 
		  	//cout << "AISPOSTPAIDData.Execute() start" << endl;
		  #endif
        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pHeaderTag, -1);        // Header
        AddXMLRecord(&m_Sess, m_Sess.pBpGatewayRequestTag, -1);        // WEB_EPayment_Request
        AddXMLField(&m_Sess, m_Sess.pProviderTag, m_Sess.szProvider, NULL);
        AddXMLField(&m_Sess, m_Sess.pPayChannelTag, m_Sess.szPayChannel, NULL);
        AddXMLField(&m_Sess, m_Sess.pHeadTypeTag, m_Sess.szHeadType, NULL);
        AddXMLField(&m_Sess, m_Sess.pPayTypeTag, m_Sess.szPayType, NULL);
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.szCommand, NULL);
        AddXMLField(&m_Sess, m_Sess.pTransactionIDTag, m_Sess.szTransactionID, NULL);
        AddXMLField(&m_Sess, m_Sess.pBankReferenceTag, m_Sess.szBankReference, NULL);
        AddXMLField(&m_Sess, m_Sess.pMobileNoTag, m_Sess.szMobileNo, NULL);
        AddXMLField(&m_Sess, m_Sess.pAmountTag, m_Sess.szAmount, NULL);
        AddXMLField(&m_Sess, m_Sess.pReference1Tag, m_Sess.szReference1, NULL);
        AddXMLField(&m_Sess, m_Sess.pReference2Tag, m_Sess.szReference2, NULL);
        AddXMLField(&m_Sess, m_Sess.pReference3Tag, m_Sess.szReference3, NULL);
        AddXMLField(&m_Sess, m_Sess.pReference4Tag, m_Sess.szReference4, NULL);
        AddXMLField(&m_Sess, m_Sess.pTransDateTag, m_Sess.szTransDate, NULL);
        AddXMLField(&m_Sess, m_Sess.pTransTimeTag, m_Sess.szTransTime, NULL);
        AddXMLField(&m_Sess, m_Sess.pBankCodeTag, m_Sess.szBankCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pBranchCodeTag, m_Sess.szBranchCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pTellerIDTag, m_Sess.szTellerID, NULL);

        AddXMLCloseRecord(&m_Sess, m_Sess.pBpGatewayRequestTag); // WEB_EPayment_Request

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
        		#ifdef SERVER_TRACE 
        			//cout << "m_Sess: " << &m_Sess << endl;
        			//cout << "GetXMLRecord(m_Sess): " << GetXMLRecord(&m_Sess, m_Sess.pMobileNoTag, NULL, NULL) << endl;
        		#endif
        		
        		GetXMLField(&m_Sess, m_Sess.pTransactionIDTag, m_Sess.szTransactionID);
            GetXMLField(&m_Sess, m_Sess.pMobileNoTag, m_Sess.szMobileNo);
            GetXMLField(&m_Sess, m_Sess.pStatusTag, m_Sess.szStatus);
            GetXMLField(&m_Sess, m_Sess.pAmountTag, m_Sess.szAmount);
            GetXMLField(&m_Sess, m_Sess.pReference1Tag, m_Sess.szReference1);
            GetXMLField(&m_Sess, m_Sess.pReference2Tag, m_Sess.szReference2);
            GetXMLField(&m_Sess, m_Sess.pReference3Tag, m_Sess.szReference3);
            GetXMLField(&m_Sess, m_Sess.pReference4Tag, m_Sess.szReference4);
            GetXMLField(&m_Sess, m_Sess.pTransDateTag, m_Sess.szTransDate);
            GetXMLField(&m_Sess, m_Sess.pTransTimeTag, m_Sess.szTransTime);
            GetXMLField(&m_Sess, m_Sess.pMessageTag, m_Sess.szMessage);
			
			//start Banyut CRT#289942 New Gateway
			GetXMLField(&m_Sess, m_Sess.pBankReferenceTag, m_Sess.szBankReference);
			GetXMLField(&m_Sess, m_Sess.pCustReferenceTag, m_Sess.szCustReference);
			//end Banyut CRT#289942 New Gateway
            
            //Debug
            #ifdef SERVER_TRACE 
	            char* a = m_Sess.szMobileNo; 
	            char* b = m_Sess.szStatus; 
	            char* c = m_Sess.szMessage; 
	            char* d = m_Sess.szAmount; 
	            char* e = m_Sess.szReference1;
				
				char* f = m_Sess.szBankReference;
				char* g = m_Sess.szCustReference;
	            //cout << "m_Sess.szMobileNo: " << a << endl;
	            //printf("%s\n", m_Sess.szMobileNo);
	            //cout << "m_Sess.szStatus: " << b << endl;
	            //cout << "m_Sess.szMessage: " << c << endl;
	            //cout << "m_Sess.szAmount: " << d << endl;
	            //cout << "m_Sess.szReference1: " << e << endl;
				
				cout << "m_Sess.szBankReference: " << f << endl;
				cout << "m_Sess.szCustReference: " << g << endl;
	         #endif
        }
        #ifdef SERVER_TRACE 
        	//cout << "AISPOSTPAIDData.Execute() end" << endl;
        #endif
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;
		  #ifdef SERVER_TRACE 
		  	//cout << "AISPOSTPAIDData.SessionExecute() start" << endl;
		  #endif
        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pHeaderTag, -1);        // Header
        AddXMLRecord(&m_Sess, m_Sess.pBpGatewayRequestTag, -1);        // WEB_EPayment_Request
        AddXMLField(&m_Sess, m_Sess.pProviderTag, m_Sess.szProvider, NULL);
        AddXMLField(&m_Sess, m_Sess.pPayChannelTag, m_Sess.szPayChannel, NULL);
        AddXMLField(&m_Sess, m_Sess.pHeadTypeTag, m_Sess.szHeadType, NULL);
        AddXMLField(&m_Sess, m_Sess.pPayTypeTag, m_Sess.szPayType, NULL);
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.szCommand, NULL);
        AddXMLField(&m_Sess, m_Sess.pTransactionIDTag, m_Sess.szTransactionID, NULL);
        AddXMLField(&m_Sess, m_Sess.pBankReferenceTag, m_Sess.szBankReference, NULL);
        AddXMLField(&m_Sess, m_Sess.pMobileNoTag, m_Sess.szMobileNo, NULL);
        AddXMLField(&m_Sess, m_Sess.pAmountTag, m_Sess.szAmount, NULL);
        AddXMLField(&m_Sess, m_Sess.pReference1Tag, m_Sess.szReference1, NULL);
        AddXMLField(&m_Sess, m_Sess.pReference2Tag, m_Sess.szReference2, NULL);
        AddXMLField(&m_Sess, m_Sess.pReference3Tag, m_Sess.szReference3, NULL);
        AddXMLField(&m_Sess, m_Sess.pReference4Tag, m_Sess.szReference4, NULL);
        AddXMLField(&m_Sess, m_Sess.pTransDateTag, m_Sess.szTransDate, NULL);
        AddXMLField(&m_Sess, m_Sess.pTransTimeTag, m_Sess.szTransTime, NULL);
        AddXMLField(&m_Sess, m_Sess.pBankCodeTag, m_Sess.szBankCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pBranchCodeTag, m_Sess.szBranchCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pTellerIDTag, m_Sess.szTellerID, NULL);

        AddXMLCloseRecord(&m_Sess, m_Sess.pBpGatewayRequestTag); // WEB_EPayment_Request

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
        		#ifdef SERVER_TRACE 
        			//cout << "m_Sess: " << &m_Sess << endl;
        			//cout << "GetXMLRecord(m_Sess): " << GetXMLRecord(&m_Sess, m_Sess.pMobileNoTag, NULL, NULL) << endl;
        		#endif
        		
        		GetXMLField(&m_Sess, m_Sess.pTransactionIDTag, m_Sess.szTransactionID);
            GetXMLField(&m_Sess, m_Sess.pMobileNoTag, m_Sess.szMobileNo);
            GetXMLField(&m_Sess, m_Sess.pStatusTag, m_Sess.szStatus);
            GetXMLField(&m_Sess, m_Sess.pAmountTag, m_Sess.szAmount);
            GetXMLField(&m_Sess, m_Sess.pReference1Tag, m_Sess.szReference1);
            GetXMLField(&m_Sess, m_Sess.pReference2Tag, m_Sess.szReference2);
            GetXMLField(&m_Sess, m_Sess.pReference3Tag, m_Sess.szReference3);
            GetXMLField(&m_Sess, m_Sess.pReference4Tag, m_Sess.szReference4);
            GetXMLField(&m_Sess, m_Sess.pTransDateTag, m_Sess.szTransDate);
            GetXMLField(&m_Sess, m_Sess.pTransTimeTag, m_Sess.szTransTime);
            GetXMLField(&m_Sess, m_Sess.pMessageTag, m_Sess.szMessage);
			
			//start Banyut CRT#289942 New Gateway
			GetXMLField(&m_Sess, m_Sess.pBankReferenceTag, m_Sess.szBankReference);
			GetXMLField(&m_Sess, m_Sess.pCustReferenceTag, m_Sess.szCustReference);
			//end Banyut CRT#289942 New Gateway
            
            //Debug
            #ifdef SERVER_TRACE 
	            char* a = m_Sess.szMobileNo; 
	            char* b = m_Sess.szStatus; 
	            char* c = m_Sess.szMessage; 
	            char* d = m_Sess.szAmount; 
				
				char* f = m_Sess.szBankReference;
				char* g = m_Sess.szCustReference;
	            //cout << "m_Sess.szMobileNo: " << a << endl;
	            //printf("%s\n", m_Sess.szMobileNo);
	            //cout << "m_Sess.szStatus: " << b << endl;
	            //cout << "m_Sess.szMessage: " << c << endl;
	            //cout << "m_Sess.szAmount: " << d << endl;
				
				cout << "m_Sess.szBankReference: " << f << endl;
				cout << "m_Sess.szCustReference: " << g << endl;

            #endif
        }
        #ifdef SERVER_TRACE 
        	//cout << "AISPOSTPAIDData.SessionExecute() end" << endl;
        #endif
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pBpGatewayRequestTag, -1);        // BP Gateway
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdAISPOSTPAID_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pBpGatewayRequestTag);            // BP Gateway

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pBpGatewayResponseTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pBpGatewayResponseTag);                                     // BP Gateway
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
            
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitBPValue iv, short custom = 0)
        {
            BpGatewayHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (BPGATEWAYSESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // BP Gateway
            };
        }

        void Load (BPGATEWAYSESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

};

typedef AsdAISPOSTPAIDData *LPAISPOSTPAID;
typedef AsdAISPOSTPAIDData::AsdTSHeader *LPAISPOSTPAID_TSHeader;
#endif    // AsdAISPOSTPAIDData_H

#ifndef AsdTWBLLPAYData_H
#define AsdTWBLLPAYData_H

#include <stdlib.h>
#ifdef  AsdTWBLLPAY_INTEGRITY_STRING
#undef  AsdTWBLLPAY_INTEGRITY_STRING
#endif
#define AsdTWBLLPAY_INTEGRITY_STRING ""

#ifdef  AsdTWBLLPAY_CRC_STRING
#undef  AsdTWBLLPAY_CRC_STRING
#endif
#define AsdTWBLLPAY_CRC_STRING "2334831877"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdTWBLLPAYData Definition ****************
//                 Bill Payment

//                 TWBLLPAYData.h generated by AceGen ver. 4.2.11

class AsdTWBLLPAYData
{
  public:
    #include <AceUserExit.h>

  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdTWBLLPAYData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in AceCppClient.h
        m_Sess.pFileName = "TWBLLPAY.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdTWBLLPAY_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time
        TSHeader = &CTSHeader;
        TWMEGAIN = &CTWMEGAIN;
        TWMEGFEE = &CTWMEGFEE;
        TWBPTRN = &CTWBPTRN;
        TSMDA = &CTSMDA;
    }

    ~AsdTWBLLPAYData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            m_Sess.szHostLUName[0] = '\0';
            m_Sess.bPassedIntegrityCheck = false;
            m_Sess.lAuthCode = 0;
            m_Sess.lHandle = 0;
            m_Sess.szRetMessage[0] = '\0';
            m_Sess.szRetVal[0] = '\0';
            CTSHeader.Reinit();
            CTWMEGAIN.Reinit();
            CTWMEGFEE.Reinit();
            CTWBPTRN.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    RWCString DebugToScreen (void)
    {
        return m_Sess.szDebugToScreen;
    }
    long DebugToScreen (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szDebugToScreen, sizeof(m_Sess.szDebugToScreen));
    }

    RWCString DebugToFile (void)
    {
        return m_Sess.szDebugToFile;
    }
    long DebugToFile (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szDebugToFile, sizeof(m_Sess.szDebugToFile));
    }

    RWCString DebugFile (void)
    {
        return m_Sess.szDebugFile;
    }
    long DebugFile (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szDebugFile, sizeof(m_Sess.szDebugFile));
    }

    RWCString ExpandedDebugFormat (void)
    {
        return m_Sess.szExpandedDebugFormat;
    }
    long ExpandedDebugFormat (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szExpandedDebugFormat, sizeof(m_Sess.szExpandedDebugFormat));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }

    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }

    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc.data(), m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }

    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdTWBLLPAY_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    RWCString GetExecuteXML (void)
    {
        return m_Sess.abRecv.Get();
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdTWBLLPAY_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CTWMEGAIN.Save(&m_Sess);
        CTWMEGFEE.Save(&m_Sess);
        CTWBPTRN.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "TWBLLPAY", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CTWMEGAIN.Load(&m_Sess);
                        CTWMEGFEE.Load(&m_Sess);
                        CTWBPTRN.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "TWBLLPAY");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        else
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
    
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdTWBLLPAY_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CTWMEGAIN.Save(&m_Sess);
        CTWMEGFEE.Save(&m_Sess);
        CTWBPTRN.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "TWBLLPAY", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CTWMEGAIN.Load(&m_Sess);
                        CTWMEGFEE.Load(&m_Sess);
                        CTWBPTRN.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "TWBLLPAY");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        else
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
    
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdTWBLLPAY_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        ret = ExecuteXMLTransaction(&m_Sess);
    
        if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
        {
            GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
            GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
            GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
            GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
            GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
            GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

            CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
        }
    
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
                m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
                m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        long CountTranStatus () { return 3; };
        void TouchTranStatus()
        {
            long lTOccurs;
        
            for ( lTOccurs = 0; lTOccurs < 3; lTOccurs++ )
            {
                m_bTranStatus[lTOccurs] = true;
            }
        }
        long GetByteArrayTranStatus( unsigned char *ucBlob )
        {
            long lTOccurs;
        
            for ( lTOccurs = 0; lTOccurs < 3; lTOccurs++ )
            {
                ucBlob[lTOccurs] = m_nTranStatus[lTOccurs];
            }
            return 3;
        }
        long SetByteArrayTranStatus( unsigned char *ucBlob )
        {
            long lTOccurs;
            short nValue;
        
            for ( lTOccurs = 0; lTOccurs < 3; lTOccurs++ )
            {
                nValue = ucBlob[lTOccurs];
                SetShort(nValue, &m_nTranStatus[lTOccurs], &m_bTranStatus[lTOccurs]);
            }
            return 3;
        }
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdTWMEGAIN Definition ****************
    //                 MEGA TRAN MONETARY DAG FOR CLIENT/SERVER APPLICATIONS       
    
    //    TWMEGAIN.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 10/10/02 10:48:43
    class AsdTWMEGAIN
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bDrawerNumber;
        char      m_szDrawerNumber[5+1];
        bool      m_bCashIn;
        char      m_szCashIn[21+1];
        bool      m_bCashOut;
        char      m_szCashOut[21+1];
        bool      m_bNoOfDrItems;
        char      m_szNoOfDrItems[2+1];
        bool      m_bNoOfCrItems;
        char      m_szNoOfCrItems[2+1];
        bool      m_bCarryIn;
        char      m_szCarryIn[21+1];
        bool      m_bCarryOut;
        char      m_szCarryOut[21+1];
        bool      m_bCtrCheckExemption;
        char      m_szCtrCheckExemption[1+1];
        bool      m_bCtrExemptStatus;
        char      m_szCtrExemptStatus[1+1];
        bool      m_bCtrInst;
        char      m_szCtrInst[4+1];
        bool      m_bCtrTin;
        char      m_szCtrTin[9+1];
        bool      m_bClosingTransFlag;
        char      m_szClosingTransFlag[1+1];
        bool      m_bBankPaysClosingInt;
        char      m_szBankPaysClosingInt[1+1];
        bool      m_bOutstandingChksFlag;
        char      m_szOutstandingChksFlag[1+1];
        bool      m_bSavUserTranCd;
        char      m_szSavUserTranCd[4+1];
        bool      m_bLoanUserTranCd;
        char      m_szLoanUserTranCd[4+1];
        bool      m_bWdType;
        char      m_szWdType[1+1];
        bool      m_bWvPenalty;
        char      m_szWvPenalty[1+1];
        bool      m_bWvFedTax;
        char      m_szWvFedTax[1+1];
        bool      m_bWvStateTax;
        char      m_szWvStateTax[1+1];
        bool      m_bWvLocalTax;
        char      m_szWvLocalTax[1+1];
        bool      m_bWvClsChrg;
        char      m_szWvClsChrg[1+1];
        bool      m_bWvTranChrg;
        char      m_szWvTranChrg[1+1];
        bool      m_bInterestTypeFlag;
        char      m_szInterestTypeFlag[1+1];
        bool      m_bOutstandingChkAmt;
        char      m_szOutstandingChkAmt[21+1];
        bool      m_bBackdateFlag;
        char      m_szBackdateFlag[1+1];
        bool      m_bBackdateEffectiveDate;
        char      m_szBackdateEffectiveDate[8+1];
        bool      m_bMegaComExpandArea;
        char      m_szMegaComExpandArea[67+1];
    
      public:
        long      m_lIndex;

        AsdTWMEGAIN ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bDrawerNumber = false;
            strcpy(m_szDrawerNumber, "00000");
            m_bCashIn = false;
            strcpy(m_szCashIn, "+0000000000000000.000");
            m_bCashOut = false;
            strcpy(m_szCashOut, "+0000000000000000.000");
            m_bNoOfDrItems = false;
            strcpy(m_szNoOfDrItems, "00");
            m_bNoOfCrItems = false;
            strcpy(m_szNoOfCrItems, "00");
            m_bCarryIn = false;
            strcpy(m_szCarryIn, "+0000000000000000.000");
            m_bCarryOut = false;
            strcpy(m_szCarryOut, "+0000000000000000.000");
            m_bCtrCheckExemption = false;
            strcpy(m_szCtrCheckExemption, "");
            m_bCtrExemptStatus = false;
            strcpy(m_szCtrExemptStatus, "");
            m_bCtrInst = false;
            strcpy(m_szCtrInst, "");
            m_bCtrTin = false;
            strcpy(m_szCtrTin, "");
            m_bClosingTransFlag = false;
            strcpy(m_szClosingTransFlag, "");
            m_bBankPaysClosingInt = false;
            strcpy(m_szBankPaysClosingInt, "");
            m_bOutstandingChksFlag = false;
            strcpy(m_szOutstandingChksFlag, "");
            m_bSavUserTranCd = false;
            strcpy(m_szSavUserTranCd, "");
            m_bLoanUserTranCd = false;
            strcpy(m_szLoanUserTranCd, "");
            m_bWdType = false;
            strcpy(m_szWdType, "");
            m_bWvPenalty = false;
            strcpy(m_szWvPenalty, "");
            m_bWvFedTax = false;
            strcpy(m_szWvFedTax, "");
            m_bWvStateTax = false;
            strcpy(m_szWvStateTax, "");
            m_bWvLocalTax = false;
            strcpy(m_szWvLocalTax, "");
            m_bWvClsChrg = false;
            strcpy(m_szWvClsChrg, "");
            m_bWvTranChrg = false;
            strcpy(m_szWvTranChrg, "");
            m_bInterestTypeFlag = false;
            strcpy(m_szInterestTypeFlag, "");
            m_bOutstandingChkAmt = false;
            strcpy(m_szOutstandingChkAmt, "+0000000000000000.000");
            m_bBackdateFlag = false;
            strcpy(m_szBackdateFlag, "");
            m_bBackdateEffectiveDate = false;
            strcpy(m_szBackdateEffectiveDate, "");
            m_bMegaComExpandArea = false;
            strcpy(m_szMegaComExpandArea, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                DebitItems[lOccurs]  = &CDebitItems[lOccurs];
                CDebitItems[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                CreditItems[lOccurs]  = &CCreditItems[lOccurs];
                CCreditItems[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                DebitCreditItems[lOccurs]  = &CDebitCreditItems[lOccurs];
                CDebitCreditItems[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bDrawerNumber = false;
            strcpy(m_szDrawerNumber, "00000");
            m_bCashIn = false;
            strcpy(m_szCashIn, "+0000000000000000.000");
            m_bCashOut = false;
            strcpy(m_szCashOut, "+0000000000000000.000");
            m_bNoOfDrItems = false;
            strcpy(m_szNoOfDrItems, "00");
            m_bNoOfCrItems = false;
            strcpy(m_szNoOfCrItems, "00");
            m_bCarryIn = false;
            strcpy(m_szCarryIn, "+0000000000000000.000");
            m_bCarryOut = false;
            strcpy(m_szCarryOut, "+0000000000000000.000");
            m_bCtrCheckExemption = false;
            strcpy(m_szCtrCheckExemption, "");
            m_bCtrExemptStatus = false;
            strcpy(m_szCtrExemptStatus, "");
            m_bCtrInst = false;
            strcpy(m_szCtrInst, "");
            m_bCtrTin = false;
            strcpy(m_szCtrTin, "");
            m_bClosingTransFlag = false;
            strcpy(m_szClosingTransFlag, "");
            m_bBankPaysClosingInt = false;
            strcpy(m_szBankPaysClosingInt, "");
            m_bOutstandingChksFlag = false;
            strcpy(m_szOutstandingChksFlag, "");
            m_bSavUserTranCd = false;
            strcpy(m_szSavUserTranCd, "");
            m_bLoanUserTranCd = false;
            strcpy(m_szLoanUserTranCd, "");
            m_bWdType = false;
            strcpy(m_szWdType, "");
            m_bWvPenalty = false;
            strcpy(m_szWvPenalty, "");
            m_bWvFedTax = false;
            strcpy(m_szWvFedTax, "");
            m_bWvStateTax = false;
            strcpy(m_szWvStateTax, "");
            m_bWvLocalTax = false;
            strcpy(m_szWvLocalTax, "");
            m_bWvClsChrg = false;
            strcpy(m_szWvClsChrg, "");
            m_bWvTranChrg = false;
            strcpy(m_szWvTranChrg, "");
            m_bInterestTypeFlag = false;
            strcpy(m_szInterestTypeFlag, "");
            m_bOutstandingChkAmt = false;
            strcpy(m_szOutstandingChkAmt, "+0000000000000000.000");
            m_bBackdateFlag = false;
            strcpy(m_szBackdateFlag, "");
            m_bBackdateEffectiveDate = false;
            strcpy(m_szBackdateEffectiveDate, "");
            m_bMegaComExpandArea = false;
            strcpy(m_szMegaComExpandArea, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                DebitItems[lOccurs]  = &CDebitItems[lOccurs];
                CDebitItems[lOccurs].Reinit();
                CDebitItems[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                CreditItems[lOccurs]  = &CCreditItems[lOccurs];
                CCreditItems[lOccurs].Reinit();
                CCreditItems[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                DebitCreditItems[lOccurs]  = &CDebitCreditItems[lOccurs];
                CDebitCreditItems[lOccurs].Reinit();
                CDebitCreditItems[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    DRAWER NUMBER
        long lDrawerNumber () { return 5; };
        RWCString DrawerNumber (void)
        {
            return m_szDrawerNumber;
        }
        long DrawerNumber (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szDrawerNumber, sizeof(m_szDrawerNumber), &m_bDrawerNumber);
        }
        
        //    CASH IN AMOUNT
        long lCashIn () { return 21; };
        RWCString CashIn (void)
        {
            return AceZeroSupp(m_szCashIn, &m_szSuppressBuff[0]);
        }
        RWCString CashInRaw (void)
        {
            return m_szCashIn;
        }
        long CashIn (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCashIn, sizeof(m_szCashIn), &m_bCashIn);
        }
        
        //    CASH OUT AMOUNT
        long lCashOut () { return 21; };
        RWCString CashOut (void)
        {
            return AceZeroSupp(m_szCashOut, &m_szSuppressBuff[0]);
        }
        RWCString CashOutRaw (void)
        {
            return m_szCashOut;
        }
        long CashOut (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCashOut, sizeof(m_szCashOut), &m_bCashOut);
        }
        
        //    NUMBER OF DEBIT ITEMS
        long lNoOfDrItems () { return 2; };
        RWCString NoOfDrItems (void)
        {
            return m_szNoOfDrItems;
        }
        long NoOfDrItems (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szNoOfDrItems, sizeof(m_szNoOfDrItems), &m_bNoOfDrItems);
        }
        
        //    NUMBER OF CREDIT ITEMS
        long lNoOfCrItems () { return 2; };
        RWCString NoOfCrItems (void)
        {
            return m_szNoOfCrItems;
        }
        long NoOfCrItems (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szNoOfCrItems, sizeof(m_szNoOfCrItems), &m_bNoOfCrItems);
        }
        
        //    CARRY IN AMOUNT
        long lCarryIn () { return 21; };
        RWCString CarryIn (void)
        {
            return AceZeroSupp(m_szCarryIn, &m_szSuppressBuff[0]);
        }
        RWCString CarryInRaw (void)
        {
            return m_szCarryIn;
        }
        long CarryIn (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCarryIn, sizeof(m_szCarryIn), &m_bCarryIn);
        }
        
        //    CARRY OUT AMOUNT
        long lCarryOut () { return 21; };
        RWCString CarryOut (void)
        {
            return AceZeroSupp(m_szCarryOut, &m_szSuppressBuff[0]);
        }
        RWCString CarryOutRaw (void)
        {
            return m_szCarryOut;
        }
        long CarryOut (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCarryOut, sizeof(m_szCarryOut), &m_bCarryOut);
        }
        
        //    CURRENCY TRANS PRT CHECK EXEMPTION FLAG
        long lCtrCheckExemption () { return 1; };
        RWCString CtrCheckExemption (void)
        {
            return m_szCtrCheckExemption;
        }
        long CtrCheckExemption (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCtrCheckExemption, sizeof(m_szCtrCheckExemption), &m_bCtrCheckExemption);
        }
        
        //    CURRENCY TRANS RPT EXEMPT STATUS
        long lCtrExemptStatus () { return 1; };
        RWCString CtrExemptStatus (void)
        {
            return m_szCtrExemptStatus;
        }
        long CtrExemptStatus (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCtrExemptStatus, sizeof(m_szCtrExemptStatus), &m_bCtrExemptStatus);
        }
        
        //    CURRENCY TRANS RPT INSTITUTION
        long lCtrInst () { return 4; };
        RWCString CtrInst (void)
        {
            return m_szCtrInst;
        }
        long CtrInst (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCtrInst, sizeof(m_szCtrInst), &m_bCtrInst);
        }
        
        //    CURRENCY TRANS RPT TIN
        long lCtrTin () { return 9; };
        RWCString CtrTin (void)
        {
            return m_szCtrTin;
        }
        long CtrTin (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCtrTin, sizeof(m_szCtrTin), &m_bCtrTin);
        }
        
        //    CLOSING TRANSACTION FLAG
        long lClosingTransFlag () { return 1; };
        RWCString ClosingTransFlag (void)
        {
            return m_szClosingTransFlag;
        }
        long ClosingTransFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szClosingTransFlag, sizeof(m_szClosingTransFlag), &m_bClosingTransFlag);
        }
        
        //    BANK PAYS CLOSING INTEREST FLAG
        long lBankPaysClosingInt () { return 1; };
        RWCString BankPaysClosingInt (void)
        {
            return m_szBankPaysClosingInt;
        }
        long BankPaysClosingInt (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBankPaysClosingInt, sizeof(m_szBankPaysClosingInt), &m_bBankPaysClosingInt);
        }
        
        //    IM ACCT HAS OUTSTANDING CHECKS FLAG
        long lOutstandingChksFlag () { return 1; };
        RWCString OutstandingChksFlag (void)
        {
            return m_szOutstandingChksFlag;
        }
        long OutstandingChksFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szOutstandingChksFlag, sizeof(m_szOutstandingChksFlag), &m_bOutstandingChksFlag);
        }
        
        //    SAVINGS DR USER TRAN CODE
        long lSavUserTranCd () { return 4; };
        RWCString SavUserTranCd (void)
        {
            return m_szSavUserTranCd;
        }
        long SavUserTranCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szSavUserTranCd, sizeof(m_szSavUserTranCd), &m_bSavUserTranCd);
        }
        
        //    LOAN CR USER TRAN CODE
        long lLoanUserTranCd () { return 4; };
        RWCString LoanUserTranCd (void)
        {
            return m_szLoanUserTranCd;
        }
        long LoanUserTranCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szLoanUserTranCd, sizeof(m_szLoanUserTranCd), &m_bLoanUserTranCd);
        }
        
        //    WITHDRAWAL TYPE
        long lWdType () { return 1; };
        RWCString WdType (void)
        {
            return m_szWdType;
        }
        long WdType (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szWdType, sizeof(m_szWdType), &m_bWdType);
        }
        
        //    WAIVE PENALTY FLAG
        long lWvPenalty () { return 1; };
        RWCString WvPenalty (void)
        {
            return m_szWvPenalty;
        }
        long WvPenalty (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szWvPenalty, sizeof(m_szWvPenalty), &m_bWvPenalty);
        }
        
        //    WAIVE FEDERAL TAX FLAG
        long lWvFedTax () { return 1; };
        RWCString WvFedTax (void)
        {
            return m_szWvFedTax;
        }
        long WvFedTax (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szWvFedTax, sizeof(m_szWvFedTax), &m_bWvFedTax);
        }
        
        //    WAIVE STATE TAX FLAG
        long lWvStateTax () { return 1; };
        RWCString WvStateTax (void)
        {
            return m_szWvStateTax;
        }
        long WvStateTax (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szWvStateTax, sizeof(m_szWvStateTax), &m_bWvStateTax);
        }
        
        //    WAIVE LOCAL TAX FLAG
        long lWvLocalTax () { return 1; };
        RWCString WvLocalTax (void)
        {
            return m_szWvLocalTax;
        }
        long WvLocalTax (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szWvLocalTax, sizeof(m_szWvLocalTax), &m_bWvLocalTax);
        }
        
        //    WAIVE CLOSING CHARGE
        long lWvClsChrg () { return 1; };
        RWCString WvClsChrg (void)
        {
            return m_szWvClsChrg;
        }
        long WvClsChrg (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szWvClsChrg, sizeof(m_szWvClsChrg), &m_bWvClsChrg);
        }
        
        //    WAIVE TRANSACTION CHARGE
        long lWvTranChrg () { return 1; };
        RWCString WvTranChrg (void)
        {
            return m_szWvTranChrg;
        }
        long WvTranChrg (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szWvTranChrg, sizeof(m_szWvTranChrg), &m_bWvTranChrg);
        }
        
        //    CLOSING ACCOUNT INTEREST TYPE FLAG
        long lInterestTypeFlag () { return 1; };
        RWCString InterestTypeFlag (void)
        {
            return m_szInterestTypeFlag;
        }
        long InterestTypeFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szInterestTypeFlag, sizeof(m_szInterestTypeFlag), &m_bInterestTypeFlag);
        }
        
        //    CLOSING OUTSTANDING CHECKS AMOUNT
        long lOutstandingChkAmt () { return 21; };
        RWCString OutstandingChkAmt (void)
        {
            return AceZeroSupp(m_szOutstandingChkAmt, &m_szSuppressBuff[0]);
        }
        RWCString OutstandingChkAmtRaw (void)
        {
            return m_szOutstandingChkAmt;
        }
        long OutstandingChkAmt (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szOutstandingChkAmt, sizeof(m_szOutstandingChkAmt), &m_bOutstandingChkAmt);
        }
        
        //    BACKDATE FLAG
        long lBackdateFlag () { return 1; };
        RWCString BackdateFlag (void)
        {
            return m_szBackdateFlag;
        }
        long BackdateFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBackdateFlag, sizeof(m_szBackdateFlag), &m_bBackdateFlag);
        }
        
        //    BACKDATE EFFECTIVE DATE
        long lBackdateEffectiveDate () { return 8; };
        RWCString BackdateEffectiveDate (void)
        {
            return m_szBackdateEffectiveDate;
        }
        long BackdateEffectiveDate (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBackdateEffectiveDate, sizeof(m_szBackdateEffectiveDate), &m_bBackdateEffectiveDate);
        }
        
        //    MEGA COMMON EXPANSION AREA
        long lMegaComExpandArea () { return 67; };
        RWCString MegaComExpandArea (void)
        {
            return m_szMegaComExpandArea;
        }
        long MegaComExpandArea (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMegaComExpandArea, sizeof(m_szMegaComExpandArea), &m_bMegaComExpandArea);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bDrawerNumber) return true;
            if (m_bCashIn) return true;
            if (m_bCashOut) return true;
            if (m_bNoOfDrItems) return true;
            if (m_bNoOfCrItems) return true;
            if (m_bCarryIn) return true;
            if (m_bCarryOut) return true;
            if (m_bCtrCheckExemption) return true;
            if (m_bCtrExemptStatus) return true;
            if (m_bCtrInst) return true;
            if (m_bCtrTin) return true;
            if (m_bClosingTransFlag) return true;
            if (m_bBankPaysClosingInt) return true;
            if (m_bOutstandingChksFlag) return true;
            if (m_bSavUserTranCd) return true;
            if (m_bLoanUserTranCd) return true;
            if (m_bWdType) return true;
            if (m_bWvPenalty) return true;
            if (m_bWvFedTax) return true;
            if (m_bWvStateTax) return true;
            if (m_bWvLocalTax) return true;
            if (m_bWvClsChrg) return true;
            if (m_bWvTranChrg) return true;
            if (m_bInterestTypeFlag) return true;
            if (m_bOutstandingChkAmt) return true;
            if (m_bBackdateFlag) return true;
            if (m_bBackdateEffectiveDate) return true;
            if (m_bMegaComExpandArea) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                if(CDebitItems[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                if(CCreditItems[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                if(CDebitCreditItems[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TWMEGAIN", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "DrawerNumber", m_szDrawerNumber, &m_bDrawerNumber);
                AddXMLField(pSess, "CashIn", m_szCashIn, &m_bCashIn);
                AddXMLField(pSess, "CashOut", m_szCashOut, &m_bCashOut);
                AddXMLField(pSess, "NoOfDrItems", m_szNoOfDrItems, &m_bNoOfDrItems);
                AddXMLField(pSess, "NoOfCrItems", m_szNoOfCrItems, &m_bNoOfCrItems);
                AddXMLField(pSess, "CarryIn", m_szCarryIn, &m_bCarryIn);
                AddXMLField(pSess, "CarryOut", m_szCarryOut, &m_bCarryOut);
                AddXMLField(pSess, "CtrCheckExemption", m_szCtrCheckExemption, &m_bCtrCheckExemption);
                AddXMLField(pSess, "CtrExemptStatus", m_szCtrExemptStatus, &m_bCtrExemptStatus);
                AddXMLField(pSess, "CtrInst", m_szCtrInst, &m_bCtrInst);
                AddXMLField(pSess, "CtrTin", m_szCtrTin, &m_bCtrTin);
                AddXMLField(pSess, "ClosingTransFlag", m_szClosingTransFlag, &m_bClosingTransFlag);
                AddXMLField(pSess, "BankPaysClosingInt", m_szBankPaysClosingInt, &m_bBankPaysClosingInt);
                AddXMLField(pSess, "OutstandingChksFlag", m_szOutstandingChksFlag, &m_bOutstandingChksFlag);
                AddXMLField(pSess, "SavUserTranCd", m_szSavUserTranCd, &m_bSavUserTranCd);
                AddXMLField(pSess, "LoanUserTranCd", m_szLoanUserTranCd, &m_bLoanUserTranCd);
                AddXMLField(pSess, "WdType", m_szWdType, &m_bWdType);
                AddXMLField(pSess, "WvPenalty", m_szWvPenalty, &m_bWvPenalty);
                AddXMLField(pSess, "WvFedTax", m_szWvFedTax, &m_bWvFedTax);
                AddXMLField(pSess, "WvStateTax", m_szWvStateTax, &m_bWvStateTax);
                AddXMLField(pSess, "WvLocalTax", m_szWvLocalTax, &m_bWvLocalTax);
                AddXMLField(pSess, "WvClsChrg", m_szWvClsChrg, &m_bWvClsChrg);
                AddXMLField(pSess, "WvTranChrg", m_szWvTranChrg, &m_bWvTranChrg);
                AddXMLField(pSess, "InterestTypeFlag", m_szInterestTypeFlag, &m_bInterestTypeFlag);
                AddXMLField(pSess, "OutstandingChkAmt", m_szOutstandingChkAmt, &m_bOutstandingChkAmt);
                AddXMLField(pSess, "BackdateFlag", m_szBackdateFlag, &m_bBackdateFlag);
                AddXMLField(pSess, "BackdateEffectiveDate", m_szBackdateEffectiveDate, &m_bBackdateEffectiveDate);
                AddXMLField(pSess, "MegaComExpandArea", m_szMegaComExpandArea, &m_bMegaComExpandArea);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CDebitItems[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CCreditItems[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CDebitCreditItems[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "TWMEGAIN");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TWMEGAIN", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "DrawerNumber", m_szDrawerNumber);
                GetXMLField(pSess, "CashIn", m_szCashIn);
                GetXMLField(pSess, "CashOut", m_szCashOut);
                GetXMLField(pSess, "NoOfDrItems", m_szNoOfDrItems);
                GetXMLField(pSess, "NoOfCrItems", m_szNoOfCrItems);
                GetXMLField(pSess, "CarryIn", m_szCarryIn);
                GetXMLField(pSess, "CarryOut", m_szCarryOut);
                GetXMLField(pSess, "CtrCheckExemption", m_szCtrCheckExemption);
                GetXMLField(pSess, "CtrExemptStatus", m_szCtrExemptStatus);
                GetXMLField(pSess, "CtrInst", m_szCtrInst);
                GetXMLField(pSess, "CtrTin", m_szCtrTin);
                GetXMLField(pSess, "ClosingTransFlag", m_szClosingTransFlag);
                GetXMLField(pSess, "BankPaysClosingInt", m_szBankPaysClosingInt);
                GetXMLField(pSess, "OutstandingChksFlag", m_szOutstandingChksFlag);
                GetXMLField(pSess, "SavUserTranCd", m_szSavUserTranCd);
                GetXMLField(pSess, "LoanUserTranCd", m_szLoanUserTranCd);
                GetXMLField(pSess, "WdType", m_szWdType);
                GetXMLField(pSess, "WvPenalty", m_szWvPenalty);
                GetXMLField(pSess, "WvFedTax", m_szWvFedTax);
                GetXMLField(pSess, "WvStateTax", m_szWvStateTax);
                GetXMLField(pSess, "WvLocalTax", m_szWvLocalTax);
                GetXMLField(pSess, "WvClsChrg", m_szWvClsChrg);
                GetXMLField(pSess, "WvTranChrg", m_szWvTranChrg);
                GetXMLField(pSess, "InterestTypeFlag", m_szInterestTypeFlag);
                GetXMLField(pSess, "OutstandingChkAmt", m_szOutstandingChkAmt);
                GetXMLField(pSess, "BackdateFlag", m_szBackdateFlag);
                GetXMLField(pSess, "BackdateEffectiveDate", m_szBackdateEffectiveDate);
                GetXMLField(pSess, "MegaComExpandArea", m_szMegaComExpandArea);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CDebitItems[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CCreditItems[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CDebitCreditItems[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "TWMEGAIN");
            };
        }
        
        //**************** Start AsdDebitItems Definition ****************
        //                 DEBIT ITEMS
        
        class AsdDebitItems
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bDrCtl1;
            char      m_szDrCtl1[2+1];
            bool      m_bDrCtl2;
            char      m_szDrCtl2[3+1];
            bool      m_bDrCtl3;
            char      m_szDrCtl3[3+1];
            bool      m_bDrCtl4;
            char      m_szDrCtl4[4+1];
            bool      m_bDrAcctNbr;
            char      m_szDrAcctNbr[16+1];
            bool      m_bDrType;
            char      m_szDrType[2+1];
            bool      m_bDrUserTranCd;
            char      m_szDrUserTranCd[4+1];
            bool      m_bDrAmount;
            char      m_szDrAmount[21+1];
            bool      m_bDrCheckNumber;
            char      m_szDrCheckNumber[10+1];
            bool      m_bDrNewAccount;
            char      m_szDrNewAccount[1+1];
            bool      m_bDrWaiveFees;
            char      m_szDrWaiveFees[1+1];
            bool      m_bDrFeeAmount;
            char      m_szDrFeeAmount[21+1];
            bool      m_bDrTraceNumber;
            char      m_szDrTraceNumber[7+1];
            bool      m_bDrTranDesc;
            char      m_szDrTranDesc[18+1];
            bool      m_bDrRaCode;
            char      m_szDrRaCode[2+1];
            bool      m_bDrRaCalYear;
            char      m_szDrRaCalYear[1+1];
            bool      m_bDrAvailableBalance;
            char      m_szDrAvailableBalance[21+1];
            bool      m_bDrEffectiveDate;
            char      m_szDrEffectiveDate[8+1];
            bool      m_bDrAcctExpandArea;
            char      m_szDrAcctExpandArea[12+1];
        
          public:
            long      m_lIndex;

            AsdDebitItems ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bDrCtl1 = false;
                strcpy(m_szDrCtl1, "");
                m_bDrCtl2 = false;
                strcpy(m_szDrCtl2, "");
                m_bDrCtl3 = false;
                strcpy(m_szDrCtl3, "");
                m_bDrCtl4 = false;
                strcpy(m_szDrCtl4, "");
                m_bDrAcctNbr = false;
                strcpy(m_szDrAcctNbr, "");
                m_bDrType = false;
                strcpy(m_szDrType, "");
                m_bDrUserTranCd = false;
                strcpy(m_szDrUserTranCd, "");
                m_bDrAmount = false;
                strcpy(m_szDrAmount, "+0000000000000000.000");
                m_bDrCheckNumber = false;
                strcpy(m_szDrCheckNumber, "");
                m_bDrNewAccount = false;
                strcpy(m_szDrNewAccount, "");
                m_bDrWaiveFees = false;
                strcpy(m_szDrWaiveFees, "");
                m_bDrFeeAmount = false;
                strcpy(m_szDrFeeAmount, "+0000000000000000.000");
                m_bDrTraceNumber = false;
                strcpy(m_szDrTraceNumber, "");
                m_bDrTranDesc = false;
                strcpy(m_szDrTranDesc, "");
                m_bDrRaCode = false;
                strcpy(m_szDrRaCode, "");
                m_bDrRaCalYear = false;
                strcpy(m_szDrRaCalYear, "");
                m_bDrAvailableBalance = false;
                strcpy(m_szDrAvailableBalance, "+0000000000000000.000");
                m_bDrEffectiveDate = false;
                strcpy(m_szDrEffectiveDate, "");
                m_bDrAcctExpandArea = false;
                strcpy(m_szDrAcctExpandArea, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            void Reinit()
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bDrCtl1 = false;
                strcpy(m_szDrCtl1, "");
                m_bDrCtl2 = false;
                strcpy(m_szDrCtl2, "");
                m_bDrCtl3 = false;
                strcpy(m_szDrCtl3, "");
                m_bDrCtl4 = false;
                strcpy(m_szDrCtl4, "");
                m_bDrAcctNbr = false;
                strcpy(m_szDrAcctNbr, "");
                m_bDrType = false;
                strcpy(m_szDrType, "");
                m_bDrUserTranCd = false;
                strcpy(m_szDrUserTranCd, "");
                m_bDrAmount = false;
                strcpy(m_szDrAmount, "+0000000000000000.000");
                m_bDrCheckNumber = false;
                strcpy(m_szDrCheckNumber, "");
                m_bDrNewAccount = false;
                strcpy(m_szDrNewAccount, "");
                m_bDrWaiveFees = false;
                strcpy(m_szDrWaiveFees, "");
                m_bDrFeeAmount = false;
                strcpy(m_szDrFeeAmount, "+0000000000000000.000");
                m_bDrTraceNumber = false;
                strcpy(m_szDrTraceNumber, "");
                m_bDrTranDesc = false;
                strcpy(m_szDrTranDesc, "");
                m_bDrRaCode = false;
                strcpy(m_szDrRaCode, "");
                m_bDrRaCalYear = false;
                strcpy(m_szDrRaCalYear, "");
                m_bDrAvailableBalance = false;
                strcpy(m_szDrAvailableBalance, "+0000000000000000.000");
                m_bDrEffectiveDate = false;
                strcpy(m_szDrEffectiveDate, "");
                m_bDrAcctExpandArea = false;
                strcpy(m_szDrAcctExpandArea, "");
            }

            
            //    HIGHEST LEVEL OF CONTROL
            long lDrCtl1 () { return 2; };
            RWCString DrCtl1 (void)
            {
                return m_szDrCtl1;
            }
            long DrCtl1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrCtl1, sizeof(m_szDrCtl1), &m_bDrCtl1);
            }
            
            //    SECOND LEVEL OF CONTROL
            long lDrCtl2 () { return 3; };
            RWCString DrCtl2 (void)
            {
                return m_szDrCtl2;
            }
            long DrCtl2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrCtl2, sizeof(m_szDrCtl2), &m_bDrCtl2);
            }
            
            //    THIRD LEVEL OF CONTROL
            long lDrCtl3 () { return 3; };
            RWCString DrCtl3 (void)
            {
                return m_szDrCtl3;
            }
            long DrCtl3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrCtl3, sizeof(m_szDrCtl3), &m_bDrCtl3);
            }
            
            //    FOURTH LEVEL OF CONTROL
            long lDrCtl4 () { return 4; };
            RWCString DrCtl4 (void)
            {
                return m_szDrCtl4;
            }
            long DrCtl4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrCtl4, sizeof(m_szDrCtl4), &m_bDrCtl4);
            }
            
            //    CUSTOMER ACCOUNT NUMBER
            long lDrAcctNbr () { return 16; };
            RWCString DrAcctNbr (void)
            {
                return m_szDrAcctNbr;
            }
            long DrAcctNbr (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrAcctNbr, sizeof(m_szDrAcctNbr), &m_bDrAcctNbr);
            }
            
            //    ACCOUNT TYPE
            long lDrType () { return 2; };
            RWCString DrType (void)
            {
                return m_szDrType;
            }
            long DrType (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrType, sizeof(m_szDrType), &m_bDrType);
            }
            
            //    USER TRAN CODE
            long lDrUserTranCd () { return 4; };
            RWCString DrUserTranCd (void)
            {
                return m_szDrUserTranCd;
            }
            long DrUserTranCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrUserTranCd, sizeof(m_szDrUserTranCd), &m_bDrUserTranCd);
            }
            
            //    TRANSACTION AMOUNT
            long lDrAmount () { return 21; };
            RWCString DrAmount (void)
            {
                return AceZeroSupp(m_szDrAmount, &m_szSuppressBuff[0]);
            }
            RWCString DrAmountRaw (void)
            {
                return m_szDrAmount;
            }
            long DrAmount (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrAmount, sizeof(m_szDrAmount), &m_bDrAmount);
            }
            
            //    CHECK NUMBER
            long lDrCheckNumber () { return 10; };
            RWCString DrCheckNumber (void)
            {
                return m_szDrCheckNumber;
            }
            long DrCheckNumber (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrCheckNumber, sizeof(m_szDrCheckNumber), &m_bDrCheckNumber);
            }
            
            //    NEW ACCOUNT FLAG
            long lDrNewAccount () { return 1; };
            RWCString DrNewAccount (void)
            {
                return m_szDrNewAccount;
            }
            long DrNewAccount (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrNewAccount, sizeof(m_szDrNewAccount), &m_bDrNewAccount);
            }
            
            //    WAIVE FEES FLAG
            long lDrWaiveFees () { return 1; };
            RWCString DrWaiveFees (void)
            {
                return m_szDrWaiveFees;
            }
            long DrWaiveFees (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrWaiveFees, sizeof(m_szDrWaiveFees), &m_bDrWaiveFees);
            }
            
            //    FEE AMOUNT
            long lDrFeeAmount () { return 21; };
            RWCString DrFeeAmount (void)
            {
                return AceZeroSupp(m_szDrFeeAmount, &m_szSuppressBuff[0]);
            }
            RWCString DrFeeAmountRaw (void)
            {
                return m_szDrFeeAmount;
            }
            long DrFeeAmount (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeAmount, sizeof(m_szDrFeeAmount), &m_bDrFeeAmount);
            }
            
            //    TRACE NUMBER
            long lDrTraceNumber () { return 7; };
            RWCString DrTraceNumber (void)
            {
                return m_szDrTraceNumber;
            }
            long DrTraceNumber (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrTraceNumber, sizeof(m_szDrTraceNumber), &m_bDrTraceNumber);
            }
            
            //    TRANSACTION DESCRIPTION
            long lDrTranDesc () { return 18; };
            RWCString DrTranDesc (void)
            {
                return m_szDrTranDesc;
            }
            long DrTranDesc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrTranDesc, sizeof(m_szDrTranDesc), &m_bDrTranDesc);
            }
            
            //    RETIREMENT ACCOUNT CODE
            long lDrRaCode () { return 2; };
            RWCString DrRaCode (void)
            {
                return m_szDrRaCode;
            }
            long DrRaCode (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrRaCode, sizeof(m_szDrRaCode), &m_bDrRaCode);
            }
            
            //    RETIREMENT ACCT CALENDAR YEAR
            long lDrRaCalYear () { return 1; };
            RWCString DrRaCalYear (void)
            {
                return m_szDrRaCalYear;
            }
            long DrRaCalYear (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrRaCalYear, sizeof(m_szDrRaCalYear), &m_bDrRaCalYear);
            }
            
            //    AVAILABLE BALANCE
            long lDrAvailableBalance () { return 21; };
            RWCString DrAvailableBalance (void)
            {
                return AceZeroSupp(m_szDrAvailableBalance, &m_szSuppressBuff[0]);
            }
            RWCString DrAvailableBalanceRaw (void)
            {
                return m_szDrAvailableBalance;
            }
            long DrAvailableBalance (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrAvailableBalance, sizeof(m_szDrAvailableBalance), &m_bDrAvailableBalance);
            }
            
            //    DEBIT TRANSACTION EFFECTIVE DATE
            long lDrEffectiveDate () { return 8; };
            RWCString DrEffectiveDate (void)
            {
                return m_szDrEffectiveDate;
            }
            long DrEffectiveDate (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrEffectiveDate, sizeof(m_szDrEffectiveDate), &m_bDrEffectiveDate);
            }
            
            //    DR ACCOUNT EXPANSION AREA
            long lDrAcctExpandArea () { return 12; };
            RWCString DrAcctExpandArea (void)
            {
                return m_szDrAcctExpandArea;
            }
            long DrAcctExpandArea (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrAcctExpandArea, sizeof(m_szDrAcctExpandArea), &m_bDrAcctExpandArea);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bDrCtl1) return true;
                if (m_bDrCtl2) return true;
                if (m_bDrCtl3) return true;
                if (m_bDrCtl4) return true;
                if (m_bDrAcctNbr) return true;
                if (m_bDrType) return true;
                if (m_bDrUserTranCd) return true;
                if (m_bDrAmount) return true;
                if (m_bDrCheckNumber) return true;
                if (m_bDrNewAccount) return true;
                if (m_bDrWaiveFees) return true;
                if (m_bDrFeeAmount) return true;
                if (m_bDrTraceNumber) return true;
                if (m_bDrTranDesc) return true;
                if (m_bDrRaCode) return true;
                if (m_bDrRaCalYear) return true;
                if (m_bDrAvailableBalance) return true;
                if (m_bDrEffectiveDate) return true;
                if (m_bDrAcctExpandArea) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "DebitItems", m_lIndex);
                    AddXMLField(pSess, "DrCtl1", m_szDrCtl1, &m_bDrCtl1);
                    AddXMLField(pSess, "DrCtl2", m_szDrCtl2, &m_bDrCtl2);
                    AddXMLField(pSess, "DrCtl3", m_szDrCtl3, &m_bDrCtl3);
                    AddXMLField(pSess, "DrCtl4", m_szDrCtl4, &m_bDrCtl4);
                    AddXMLField(pSess, "DrAcctNbr", m_szDrAcctNbr, &m_bDrAcctNbr);
                    AddXMLField(pSess, "DrType", m_szDrType, &m_bDrType);
                    AddXMLField(pSess, "DrUserTranCd", m_szDrUserTranCd, &m_bDrUserTranCd);
                    AddXMLField(pSess, "DrAmount", m_szDrAmount, &m_bDrAmount);
                    AddXMLField(pSess, "DrCheckNumber", m_szDrCheckNumber, &m_bDrCheckNumber);
                    AddXMLField(pSess, "DrNewAccount", m_szDrNewAccount, &m_bDrNewAccount);
                    AddXMLField(pSess, "DrWaiveFees", m_szDrWaiveFees, &m_bDrWaiveFees);
                    AddXMLField(pSess, "DrFeeAmount", m_szDrFeeAmount, &m_bDrFeeAmount);
                    AddXMLField(pSess, "DrTraceNumber", m_szDrTraceNumber, &m_bDrTraceNumber);
                    AddXMLField(pSess, "DrTranDesc", m_szDrTranDesc, &m_bDrTranDesc);
                    AddXMLField(pSess, "DrRaCode", m_szDrRaCode, &m_bDrRaCode);
                    AddXMLField(pSess, "DrRaCalYear", m_szDrRaCalYear, &m_bDrRaCalYear);
                    AddXMLField(pSess, "DrAvailableBalance", m_szDrAvailableBalance, &m_bDrAvailableBalance);
                    AddXMLField(pSess, "DrEffectiveDate", m_szDrEffectiveDate, &m_bDrEffectiveDate);
                    AddXMLField(pSess, "DrAcctExpandArea", m_szDrAcctExpandArea, &m_bDrAcctExpandArea);
                    AddXMLCloseRecord(pSess, "DebitItems");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "DebitItems", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "DrCtl1", m_szDrCtl1);
                    GetXMLField(pSess, "DrCtl2", m_szDrCtl2);
                    GetXMLField(pSess, "DrCtl3", m_szDrCtl3);
                    GetXMLField(pSess, "DrCtl4", m_szDrCtl4);
                    GetXMLField(pSess, "DrAcctNbr", m_szDrAcctNbr);
                    GetXMLField(pSess, "DrType", m_szDrType);
                    GetXMLField(pSess, "DrUserTranCd", m_szDrUserTranCd);
                    GetXMLField(pSess, "DrAmount", m_szDrAmount);
                    GetXMLField(pSess, "DrCheckNumber", m_szDrCheckNumber);
                    GetXMLField(pSess, "DrNewAccount", m_szDrNewAccount);
                    GetXMLField(pSess, "DrWaiveFees", m_szDrWaiveFees);
                    GetXMLField(pSess, "DrFeeAmount", m_szDrFeeAmount);
                    GetXMLField(pSess, "DrTraceNumber", m_szDrTraceNumber);
                    GetXMLField(pSess, "DrTranDesc", m_szDrTranDesc);
                    GetXMLField(pSess, "DrRaCode", m_szDrRaCode);
                    GetXMLField(pSess, "DrRaCalYear", m_szDrRaCalYear);
                    GetXMLField(pSess, "DrAvailableBalance", m_szDrAvailableBalance);
                    GetXMLField(pSess, "DrEffectiveDate", m_szDrEffectiveDate);
                    GetXMLField(pSess, "DrAcctExpandArea", m_szDrAcctExpandArea);
                    CloseXMLRecord(pSess, "DebitItems");
                };
            }
        };

        AsdDebitItems  CDebitItems[4];
        AsdDebitItems *DebitItems[4];
        
        //**************** End AsdDebitItems Definition ****************
        
        
        //**************** Start AsdCreditItems Definition ****************
        //                 CREDIT ITEMS
        
        class AsdCreditItems
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bCrCtl1;
            char      m_szCrCtl1[2+1];
            bool      m_bCrCtl2;
            char      m_szCrCtl2[3+1];
            bool      m_bCrCtl3;
            char      m_szCrCtl3[3+1];
            bool      m_bCrCtl4;
            char      m_szCrCtl4[4+1];
            bool      m_bCrAcctNbr;
            char      m_szCrAcctNbr[16+1];
            bool      m_bCrType;
            char      m_szCrType[2+1];
            bool      m_bCrUserTranCd;
            char      m_szCrUserTranCd[4+1];
            bool      m_bCrAmount;
            char      m_szCrAmount[21+1];
            bool      m_bCrNewAccount;
            char      m_szCrNewAccount[1+1];
            bool      m_bCrWaiveFees;
            char      m_szCrWaiveFees[1+1];
            bool      m_bCrFeeAmount;
            char      m_szCrFeeAmount[21+1];
            bool      m_bCrTraceNumber;
            char      m_szCrTraceNumber[7+1];
            bool      m_bCrTranDesc;
            char      m_szCrTranDesc[18+1];
            bool      m_bCrRaCode;
            char      m_szCrRaCode[2+1];
            bool      m_bCrRaCalYear;
            char      m_szCrRaCalYear[1+1];
            bool      m_bCrAvailableBalance;
            char      m_szCrAvailableBalance[21+1];
            bool      m_bCrEffectiveDate;
            char      m_szCrEffectiveDate[8+1];
            bool      m_bCrAcctExpandArea;
            char      m_szCrAcctExpandArea[12+1];
        
          public:
            long      m_lIndex;

            AsdCreditItems ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCrCtl1 = false;
                strcpy(m_szCrCtl1, "");
                m_bCrCtl2 = false;
                strcpy(m_szCrCtl2, "");
                m_bCrCtl3 = false;
                strcpy(m_szCrCtl3, "");
                m_bCrCtl4 = false;
                strcpy(m_szCrCtl4, "");
                m_bCrAcctNbr = false;
                strcpy(m_szCrAcctNbr, "");
                m_bCrType = false;
                strcpy(m_szCrType, "");
                m_bCrUserTranCd = false;
                strcpy(m_szCrUserTranCd, "");
                m_bCrAmount = false;
                strcpy(m_szCrAmount, "+0000000000000000.000");
                m_bCrNewAccount = false;
                strcpy(m_szCrNewAccount, "");
                m_bCrWaiveFees = false;
                strcpy(m_szCrWaiveFees, "");
                m_bCrFeeAmount = false;
                strcpy(m_szCrFeeAmount, "+0000000000000000.000");
                m_bCrTraceNumber = false;
                strcpy(m_szCrTraceNumber, "");
                m_bCrTranDesc = false;
                strcpy(m_szCrTranDesc, "");
                m_bCrRaCode = false;
                strcpy(m_szCrRaCode, "");
                m_bCrRaCalYear = false;
                strcpy(m_szCrRaCalYear, "");
                m_bCrAvailableBalance = false;
                strcpy(m_szCrAvailableBalance, "+0000000000000000.000");
                m_bCrEffectiveDate = false;
                strcpy(m_szCrEffectiveDate, "");
                m_bCrAcctExpandArea = false;
                strcpy(m_szCrAcctExpandArea, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            void Reinit()
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCrCtl1 = false;
                strcpy(m_szCrCtl1, "");
                m_bCrCtl2 = false;
                strcpy(m_szCrCtl2, "");
                m_bCrCtl3 = false;
                strcpy(m_szCrCtl3, "");
                m_bCrCtl4 = false;
                strcpy(m_szCrCtl4, "");
                m_bCrAcctNbr = false;
                strcpy(m_szCrAcctNbr, "");
                m_bCrType = false;
                strcpy(m_szCrType, "");
                m_bCrUserTranCd = false;
                strcpy(m_szCrUserTranCd, "");
                m_bCrAmount = false;
                strcpy(m_szCrAmount, "+0000000000000000.000");
                m_bCrNewAccount = false;
                strcpy(m_szCrNewAccount, "");
                m_bCrWaiveFees = false;
                strcpy(m_szCrWaiveFees, "");
                m_bCrFeeAmount = false;
                strcpy(m_szCrFeeAmount, "+0000000000000000.000");
                m_bCrTraceNumber = false;
                strcpy(m_szCrTraceNumber, "");
                m_bCrTranDesc = false;
                strcpy(m_szCrTranDesc, "");
                m_bCrRaCode = false;
                strcpy(m_szCrRaCode, "");
                m_bCrRaCalYear = false;
                strcpy(m_szCrRaCalYear, "");
                m_bCrAvailableBalance = false;
                strcpy(m_szCrAvailableBalance, "+0000000000000000.000");
                m_bCrEffectiveDate = false;
                strcpy(m_szCrEffectiveDate, "");
                m_bCrAcctExpandArea = false;
                strcpy(m_szCrAcctExpandArea, "");
            }

            
            //    HIGHEST LEVEL OF CONTROL
            long lCrCtl1 () { return 2; };
            RWCString CrCtl1 (void)
            {
                return m_szCrCtl1;
            }
            long CrCtl1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrCtl1, sizeof(m_szCrCtl1), &m_bCrCtl1);
            }
            
            //    SECOND LEVEL OF CONTROL
            long lCrCtl2 () { return 3; };
            RWCString CrCtl2 (void)
            {
                return m_szCrCtl2;
            }
            long CrCtl2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrCtl2, sizeof(m_szCrCtl2), &m_bCrCtl2);
            }
            
            //    THIRD LEVEL OF CONTROL
            long lCrCtl3 () { return 3; };
            RWCString CrCtl3 (void)
            {
                return m_szCrCtl3;
            }
            long CrCtl3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrCtl3, sizeof(m_szCrCtl3), &m_bCrCtl3);
            }
            
            //    FOURTH LEVEL OF CONTROL
            long lCrCtl4 () { return 4; };
            RWCString CrCtl4 (void)
            {
                return m_szCrCtl4;
            }
            long CrCtl4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrCtl4, sizeof(m_szCrCtl4), &m_bCrCtl4);
            }
            
            //    CUSTOMER ACCOUNT NUMBER
            long lCrAcctNbr () { return 16; };
            RWCString CrAcctNbr (void)
            {
                return m_szCrAcctNbr;
            }
            long CrAcctNbr (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrAcctNbr, sizeof(m_szCrAcctNbr), &m_bCrAcctNbr);
            }
            
            //    ACCOUNT TYPE
            long lCrType () { return 2; };
            RWCString CrType (void)
            {
                return m_szCrType;
            }
            long CrType (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrType, sizeof(m_szCrType), &m_bCrType);
            }
            
            //    USER TRAN CODE
            long lCrUserTranCd () { return 4; };
            RWCString CrUserTranCd (void)
            {
                return m_szCrUserTranCd;
            }
            long CrUserTranCd (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrUserTranCd, sizeof(m_szCrUserTranCd), &m_bCrUserTranCd);
            }
            
            //    TRANSACTION AMOUNT
            long lCrAmount () { return 21; };
            RWCString CrAmount (void)
            {
                return AceZeroSupp(m_szCrAmount, &m_szSuppressBuff[0]);
            }
            RWCString CrAmountRaw (void)
            {
                return m_szCrAmount;
            }
            long CrAmount (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrAmount, sizeof(m_szCrAmount), &m_bCrAmount);
            }
            
            //    NEW ACCOUNT FLAG
            long lCrNewAccount () { return 1; };
            RWCString CrNewAccount (void)
            {
                return m_szCrNewAccount;
            }
            long CrNewAccount (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrNewAccount, sizeof(m_szCrNewAccount), &m_bCrNewAccount);
            }
            
            //    WAIVE FEES FLAG
            long lCrWaiveFees () { return 1; };
            RWCString CrWaiveFees (void)
            {
                return m_szCrWaiveFees;
            }
            long CrWaiveFees (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrWaiveFees, sizeof(m_szCrWaiveFees), &m_bCrWaiveFees);
            }
            
            //    FEE AMOUNT
            long lCrFeeAmount () { return 21; };
            RWCString CrFeeAmount (void)
            {
                return AceZeroSupp(m_szCrFeeAmount, &m_szSuppressBuff[0]);
            }
            RWCString CrFeeAmountRaw (void)
            {
                return m_szCrFeeAmount;
            }
            long CrFeeAmount (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeAmount, sizeof(m_szCrFeeAmount), &m_bCrFeeAmount);
            }
            
            //    TRACE NUMBER
            long lCrTraceNumber () { return 7; };
            RWCString CrTraceNumber (void)
            {
                return m_szCrTraceNumber;
            }
            long CrTraceNumber (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrTraceNumber, sizeof(m_szCrTraceNumber), &m_bCrTraceNumber);
            }
            
            //    TRANSACTION DESCRIPTION
            long lCrTranDesc () { return 18; };
            RWCString CrTranDesc (void)
            {
                return m_szCrTranDesc;
            }
            long CrTranDesc (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrTranDesc, sizeof(m_szCrTranDesc), &m_bCrTranDesc);
            }
            
            //    RETIREMENT ACCOUNT CODE
            long lCrRaCode () { return 2; };
            RWCString CrRaCode (void)
            {
                return m_szCrRaCode;
            }
            long CrRaCode (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrRaCode, sizeof(m_szCrRaCode), &m_bCrRaCode);
            }
            
            //    RETIREMENT ACCT CALENDAR YEAR
            long lCrRaCalYear () { return 1; };
            RWCString CrRaCalYear (void)
            {
                return m_szCrRaCalYear;
            }
            long CrRaCalYear (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrRaCalYear, sizeof(m_szCrRaCalYear), &m_bCrRaCalYear);
            }
            
            //    AVAILABLE BALANCE
            long lCrAvailableBalance () { return 21; };
            RWCString CrAvailableBalance (void)
            {
                return AceZeroSupp(m_szCrAvailableBalance, &m_szSuppressBuff[0]);
            }
            RWCString CrAvailableBalanceRaw (void)
            {
                return m_szCrAvailableBalance;
            }
            long CrAvailableBalance (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrAvailableBalance, sizeof(m_szCrAvailableBalance), &m_bCrAvailableBalance);
            }
            
            //    CREDIT TRANSACTION EFFECTIVE DATE
            long lCrEffectiveDate () { return 8; };
            RWCString CrEffectiveDate (void)
            {
                return m_szCrEffectiveDate;
            }
            long CrEffectiveDate (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrEffectiveDate, sizeof(m_szCrEffectiveDate), &m_bCrEffectiveDate);
            }
            
            //    CR ACCOUNT EXPANSION AREA
            long lCrAcctExpandArea () { return 12; };
            RWCString CrAcctExpandArea (void)
            {
                return m_szCrAcctExpandArea;
            }
            long CrAcctExpandArea (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrAcctExpandArea, sizeof(m_szCrAcctExpandArea), &m_bCrAcctExpandArea);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bCrCtl1) return true;
                if (m_bCrCtl2) return true;
                if (m_bCrCtl3) return true;
                if (m_bCrCtl4) return true;
                if (m_bCrAcctNbr) return true;
                if (m_bCrType) return true;
                if (m_bCrUserTranCd) return true;
                if (m_bCrAmount) return true;
                if (m_bCrNewAccount) return true;
                if (m_bCrWaiveFees) return true;
                if (m_bCrFeeAmount) return true;
                if (m_bCrTraceNumber) return true;
                if (m_bCrTranDesc) return true;
                if (m_bCrRaCode) return true;
                if (m_bCrRaCalYear) return true;
                if (m_bCrAvailableBalance) return true;
                if (m_bCrEffectiveDate) return true;
                if (m_bCrAcctExpandArea) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "CreditItems", m_lIndex);
                    AddXMLField(pSess, "CrCtl1", m_szCrCtl1, &m_bCrCtl1);
                    AddXMLField(pSess, "CrCtl2", m_szCrCtl2, &m_bCrCtl2);
                    AddXMLField(pSess, "CrCtl3", m_szCrCtl3, &m_bCrCtl3);
                    AddXMLField(pSess, "CrCtl4", m_szCrCtl4, &m_bCrCtl4);
                    AddXMLField(pSess, "CrAcctNbr", m_szCrAcctNbr, &m_bCrAcctNbr);
                    AddXMLField(pSess, "CrType", m_szCrType, &m_bCrType);
                    AddXMLField(pSess, "CrUserTranCd", m_szCrUserTranCd, &m_bCrUserTranCd);
                    AddXMLField(pSess, "CrAmount", m_szCrAmount, &m_bCrAmount);
                    AddXMLField(pSess, "CrNewAccount", m_szCrNewAccount, &m_bCrNewAccount);
                    AddXMLField(pSess, "CrWaiveFees", m_szCrWaiveFees, &m_bCrWaiveFees);
                    AddXMLField(pSess, "CrFeeAmount", m_szCrFeeAmount, &m_bCrFeeAmount);
                    AddXMLField(pSess, "CrTraceNumber", m_szCrTraceNumber, &m_bCrTraceNumber);
                    AddXMLField(pSess, "CrTranDesc", m_szCrTranDesc, &m_bCrTranDesc);
                    AddXMLField(pSess, "CrRaCode", m_szCrRaCode, &m_bCrRaCode);
                    AddXMLField(pSess, "CrRaCalYear", m_szCrRaCalYear, &m_bCrRaCalYear);
                    AddXMLField(pSess, "CrAvailableBalance", m_szCrAvailableBalance, &m_bCrAvailableBalance);
                    AddXMLField(pSess, "CrEffectiveDate", m_szCrEffectiveDate, &m_bCrEffectiveDate);
                    AddXMLField(pSess, "CrAcctExpandArea", m_szCrAcctExpandArea, &m_bCrAcctExpandArea);
                    AddXMLCloseRecord(pSess, "CreditItems");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "CreditItems", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "CrCtl1", m_szCrCtl1);
                    GetXMLField(pSess, "CrCtl2", m_szCrCtl2);
                    GetXMLField(pSess, "CrCtl3", m_szCrCtl3);
                    GetXMLField(pSess, "CrCtl4", m_szCrCtl4);
                    GetXMLField(pSess, "CrAcctNbr", m_szCrAcctNbr);
                    GetXMLField(pSess, "CrType", m_szCrType);
                    GetXMLField(pSess, "CrUserTranCd", m_szCrUserTranCd);
                    GetXMLField(pSess, "CrAmount", m_szCrAmount);
                    GetXMLField(pSess, "CrNewAccount", m_szCrNewAccount);
                    GetXMLField(pSess, "CrWaiveFees", m_szCrWaiveFees);
                    GetXMLField(pSess, "CrFeeAmount", m_szCrFeeAmount);
                    GetXMLField(pSess, "CrTraceNumber", m_szCrTraceNumber);
                    GetXMLField(pSess, "CrTranDesc", m_szCrTranDesc);
                    GetXMLField(pSess, "CrRaCode", m_szCrRaCode);
                    GetXMLField(pSess, "CrRaCalYear", m_szCrRaCalYear);
                    GetXMLField(pSess, "CrAvailableBalance", m_szCrAvailableBalance);
                    GetXMLField(pSess, "CrEffectiveDate", m_szCrEffectiveDate);
                    GetXMLField(pSess, "CrAcctExpandArea", m_szCrAcctExpandArea);
                    CloseXMLRecord(pSess, "CreditItems");
                };
            }
        };

        AsdCreditItems  CCreditItems[4];
        AsdCreditItems *CreditItems[4];
        
        //**************** End AsdCreditItems Definition ****************
        
        
        //**************** Start AsdDebitCreditItems Definition ****************
        //                 ADDITIONAL INFORMATION
        
        class AsdDebitCreditItems
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bDrShortName;
            char      m_szDrShortName[13+1];
            bool      m_bDrDateOpened;
            char      m_szDrDateOpened[8+1];
            bool      m_bCrShortName;
            char      m_szCrShortName[13+1];
            bool      m_bCrDateOpened;
            char      m_szCrDateOpened[8+1];
        
          public:
            long      m_lIndex;

            AsdDebitCreditItems ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bDrShortName = false;
                strcpy(m_szDrShortName, "");
                m_bDrDateOpened = false;
                strcpy(m_szDrDateOpened, "");
                m_bCrShortName = false;
                strcpy(m_szCrShortName, "");
                m_bCrDateOpened = false;
                strcpy(m_szCrDateOpened, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            void Reinit()
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bDrShortName = false;
                strcpy(m_szDrShortName, "");
                m_bDrDateOpened = false;
                strcpy(m_szDrDateOpened, "");
                m_bCrShortName = false;
                strcpy(m_szCrShortName, "");
                m_bCrDateOpened = false;
                strcpy(m_szCrDateOpened, "");
            }

            
            //    SHORT NAME USED IN REPORTING AND ALPHA SORTING
            long lDrShortName () { return 13; };
            RWCString DrShortName (void)
            {
                return m_szDrShortName;
            }
            long DrShortName (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrShortName, sizeof(m_szDrShortName), &m_bDrShortName);
            }
            
            //    DATE OPENED CCYYMMDD
            long lDrDateOpened () { return 8; };
            RWCString DrDateOpened (void)
            {
                return m_szDrDateOpened;
            }
            long DrDateOpened (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrDateOpened, sizeof(m_szDrDateOpened), &m_bDrDateOpened);
            }
            
            //    SHORT NAME USED IN REPORTING AND ALPHA SORTING
            long lCrShortName () { return 13; };
            RWCString CrShortName (void)
            {
                return m_szCrShortName;
            }
            long CrShortName (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrShortName, sizeof(m_szCrShortName), &m_bCrShortName);
            }
            
            //    DATE OPENED CCYYMMDD
            long lCrDateOpened () { return 8; };
            RWCString CrDateOpened (void)
            {
                return m_szCrDateOpened;
            }
            long CrDateOpened (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrDateOpened, sizeof(m_szCrDateOpened), &m_bCrDateOpened);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bDrShortName) return true;
                if (m_bDrDateOpened) return true;
                if (m_bCrShortName) return true;
                if (m_bCrDateOpened) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "DebitCreditItems", m_lIndex);
                    AddXMLField(pSess, "DrShortName", m_szDrShortName, &m_bDrShortName);
                    AddXMLField(pSess, "DrDateOpened", m_szDrDateOpened, &m_bDrDateOpened);
                    AddXMLField(pSess, "CrShortName", m_szCrShortName, &m_bCrShortName);
                    AddXMLField(pSess, "CrDateOpened", m_szCrDateOpened, &m_bCrDateOpened);
                    AddXMLCloseRecord(pSess, "DebitCreditItems");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "DebitCreditItems", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "DrShortName", m_szDrShortName);
                    GetXMLField(pSess, "DrDateOpened", m_szDrDateOpened);
                    GetXMLField(pSess, "CrShortName", m_szCrShortName);
                    GetXMLField(pSess, "CrDateOpened", m_szCrDateOpened);
                    CloseXMLRecord(pSess, "DebitCreditItems");
                };
            }
        };

        AsdDebitCreditItems  CDebitCreditItems[4];
        AsdDebitCreditItems *DebitCreditItems[4];
        
        //**************** End AsdDebitCreditItems Definition ****************
        
    };

    AsdTWMEGAIN CTWMEGAIN;
    AsdTWMEGAIN *TWMEGAIN;
    
    //**************** End AsdTWMEGAIN Definition ****************

    
    //**************** Start AsdTWMEGFEE Definition ****************
    //                 MEGA TRAN FEE DETAILS DAG FOR C/S APPLICATIONS              
    
    //    TWMEGFEE.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 03/11/03 10:48:23
    class AsdTWMEGFEE
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
    
      public:
        long      m_lIndex;

        AsdTWMEGFEE ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                DbFeeDetails[lOccurs]  = &CDbFeeDetails[lOccurs];
                CDbFeeDetails[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                CrFeeDetails[lOccurs]  = &CCrFeeDetails[lOccurs];
                CCrFeeDetails[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                DbFeeDetails[lOccurs]  = &CDbFeeDetails[lOccurs];
                CDbFeeDetails[lOccurs].Reinit();
                CDbFeeDetails[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                CrFeeDetails[lOccurs]  = &CCrFeeDetails[lOccurs];
                CCrFeeDetails[lOccurs].Reinit();
                CCrFeeDetails[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                if(CDbFeeDetails[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 4; lOccurs++)
            {
                if(CCrFeeDetails[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TWMEGFEE", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CDbFeeDetails[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CCrFeeDetails[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "TWMEGFEE");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TWMEGFEE", m_lIndex, &m_bReceived))
            {
                long lOccurs;
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CDbFeeDetails[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 4; lOccurs++)
                {
                    CCrFeeDetails[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "TWMEGFEE");
            };
        }
        
        //**************** Start AsdDbFeeDetails Definition ****************
        //                 DEBIT FEE DETAILS
        
        class AsdDbFeeDetails
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bDrFeeType1;
            char      m_szDrFeeType1[2+1];
            bool      m_bDrFeeAmount1;
            char      m_szDrFeeAmount1[21+1];
            bool      m_bDrFeeType2;
            char      m_szDrFeeType2[2+1];
            bool      m_bDrFeeAmount2;
            char      m_szDrFeeAmount2[21+1];
            bool      m_bDrFeeType3;
            char      m_szDrFeeType3[2+1];
            bool      m_bDrFeeAmount3;
            char      m_szDrFeeAmount3[21+1];
            bool      m_bDrFeeType4;
            char      m_szDrFeeType4[2+1];
            bool      m_bDrFeeAmount4;
            char      m_szDrFeeAmount4[21+1];
        
          public:
            long      m_lIndex;

            AsdDbFeeDetails ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bDrFeeType1 = false;
                strcpy(m_szDrFeeType1, "");
                m_bDrFeeAmount1 = false;
                strcpy(m_szDrFeeAmount1, "+0000000000000000.000");
                m_bDrFeeType2 = false;
                strcpy(m_szDrFeeType2, "");
                m_bDrFeeAmount2 = false;
                strcpy(m_szDrFeeAmount2, "+0000000000000000.000");
                m_bDrFeeType3 = false;
                strcpy(m_szDrFeeType3, "");
                m_bDrFeeAmount3 = false;
                strcpy(m_szDrFeeAmount3, "+0000000000000000.000");
                m_bDrFeeType4 = false;
                strcpy(m_szDrFeeType4, "");
                m_bDrFeeAmount4 = false;
                strcpy(m_szDrFeeAmount4, "+0000000000000000.000");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            void Reinit()
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bDrFeeType1 = false;
                strcpy(m_szDrFeeType1, "");
                m_bDrFeeAmount1 = false;
                strcpy(m_szDrFeeAmount1, "+0000000000000000.000");
                m_bDrFeeType2 = false;
                strcpy(m_szDrFeeType2, "");
                m_bDrFeeAmount2 = false;
                strcpy(m_szDrFeeAmount2, "+0000000000000000.000");
                m_bDrFeeType3 = false;
                strcpy(m_szDrFeeType3, "");
                m_bDrFeeAmount3 = false;
                strcpy(m_szDrFeeAmount3, "+0000000000000000.000");
                m_bDrFeeType4 = false;
                strcpy(m_szDrFeeType4, "");
                m_bDrFeeAmount4 = false;
                strcpy(m_szDrFeeAmount4, "+0000000000000000.000");
            }

            
            //    DEBIT FEE TYPE 1
            long lDrFeeType1 () { return 2; };
            RWCString DrFeeType1 (void)
            {
                return m_szDrFeeType1;
            }
            long DrFeeType1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeType1, sizeof(m_szDrFeeType1), &m_bDrFeeType1);
            }
            
            //    DEBIT FEE AMOUN 1
            long lDrFeeAmount1 () { return 21; };
            RWCString DrFeeAmount1 (void)
            {
                return AceZeroSupp(m_szDrFeeAmount1, &m_szSuppressBuff[0]);
            }
            RWCString DrFeeAmount1Raw (void)
            {
                return m_szDrFeeAmount1;
            }
            long DrFeeAmount1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeAmount1, sizeof(m_szDrFeeAmount1), &m_bDrFeeAmount1);
            }
            
            //    DEBIT FEE TYPE 2
            long lDrFeeType2 () { return 2; };
            RWCString DrFeeType2 (void)
            {
                return m_szDrFeeType2;
            }
            long DrFeeType2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeType2, sizeof(m_szDrFeeType2), &m_bDrFeeType2);
            }
            
            //    DEBIT FEE AMOUN 2
            long lDrFeeAmount2 () { return 21; };
            RWCString DrFeeAmount2 (void)
            {
                return AceZeroSupp(m_szDrFeeAmount2, &m_szSuppressBuff[0]);
            }
            RWCString DrFeeAmount2Raw (void)
            {
                return m_szDrFeeAmount2;
            }
            long DrFeeAmount2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeAmount2, sizeof(m_szDrFeeAmount2), &m_bDrFeeAmount2);
            }
            
            //    DEBIT FEE TYPE 3
            long lDrFeeType3 () { return 2; };
            RWCString DrFeeType3 (void)
            {
                return m_szDrFeeType3;
            }
            long DrFeeType3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeType3, sizeof(m_szDrFeeType3), &m_bDrFeeType3);
            }
            
            //    DEBIT FEE AMOUN 3
            long lDrFeeAmount3 () { return 21; };
            RWCString DrFeeAmount3 (void)
            {
                return AceZeroSupp(m_szDrFeeAmount3, &m_szSuppressBuff[0]);
            }
            RWCString DrFeeAmount3Raw (void)
            {
                return m_szDrFeeAmount3;
            }
            long DrFeeAmount3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeAmount3, sizeof(m_szDrFeeAmount3), &m_bDrFeeAmount3);
            }
            
            //    DEBIT FEE TYPE 4
            long lDrFeeType4 () { return 2; };
            RWCString DrFeeType4 (void)
            {
                return m_szDrFeeType4;
            }
            long DrFeeType4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeType4, sizeof(m_szDrFeeType4), &m_bDrFeeType4);
            }
            
            //    DEBIT FEE AMOUNT 4
            long lDrFeeAmount4 () { return 21; };
            RWCString DrFeeAmount4 (void)
            {
                return AceZeroSupp(m_szDrFeeAmount4, &m_szSuppressBuff[0]);
            }
            RWCString DrFeeAmount4Raw (void)
            {
                return m_szDrFeeAmount4;
            }
            long DrFeeAmount4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szDrFeeAmount4, sizeof(m_szDrFeeAmount4), &m_bDrFeeAmount4);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bDrFeeType1) return true;
                if (m_bDrFeeAmount1) return true;
                if (m_bDrFeeType2) return true;
                if (m_bDrFeeAmount2) return true;
                if (m_bDrFeeType3) return true;
                if (m_bDrFeeAmount3) return true;
                if (m_bDrFeeType4) return true;
                if (m_bDrFeeAmount4) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                	  if (m_szDrFeeAmount1[0]=='-') m_szDrFeeAmount1[0] = ' ';
                	  if (m_szDrFeeAmount2[0]=='-') m_szDrFeeAmount2[0] = ' ';
                	  if (m_szDrFeeAmount3[0]=='-') m_szDrFeeAmount3[0] = ' ';
                	  if (m_szDrFeeAmount4[0]=='-') m_szDrFeeAmount4[0] = ' ';
                	  
                    AddXMLRecord(pSess, "DbFeeDetails", m_lIndex);
                    AddXMLField(pSess, "DrFeeType1", m_szDrFeeType1, &m_bDrFeeType1);
                    AddXMLField(pSess, "DrFeeAmount1", m_szDrFeeAmount1, &m_bDrFeeAmount1);
                    AddXMLField(pSess, "DrFeeType2", m_szDrFeeType2, &m_bDrFeeType2);
                    AddXMLField(pSess, "DrFeeAmount2", m_szDrFeeAmount2, &m_bDrFeeAmount2);
                    AddXMLField(pSess, "DrFeeType3", m_szDrFeeType3, &m_bDrFeeType3);
                    AddXMLField(pSess, "DrFeeAmount3", m_szDrFeeAmount3, &m_bDrFeeAmount3);
                    AddXMLField(pSess, "DrFeeType4", m_szDrFeeType4, &m_bDrFeeType4);
                    AddXMLField(pSess, "DrFeeAmount4", m_szDrFeeAmount4, &m_bDrFeeAmount4);
                    AddXMLCloseRecord(pSess, "DbFeeDetails");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "DbFeeDetails", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "DrFeeType1", m_szDrFeeType1);
                    GetXMLField(pSess, "DrFeeAmount1", m_szDrFeeAmount1);
                    GetXMLField(pSess, "DrFeeType2", m_szDrFeeType2);
                    GetXMLField(pSess, "DrFeeAmount2", m_szDrFeeAmount2);
                    GetXMLField(pSess, "DrFeeType3", m_szDrFeeType3);
                    GetXMLField(pSess, "DrFeeAmount3", m_szDrFeeAmount3);
                    GetXMLField(pSess, "DrFeeType4", m_szDrFeeType4);
                    GetXMLField(pSess, "DrFeeAmount4", m_szDrFeeAmount4);
                    CloseXMLRecord(pSess, "DbFeeDetails");
                };
            }
        };

        AsdDbFeeDetails  CDbFeeDetails[4];
        AsdDbFeeDetails *DbFeeDetails[4];
        
        //**************** End AsdDbFeeDetails Definition ****************
        
        
        //**************** Start AsdCrFeeDetails Definition ****************
        //                 CREDIT FEE DETAILS
        
        class AsdCrFeeDetails
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bCrFeeType1;
            char      m_szCrFeeType1[2+1];
            bool      m_bCrFeeAmount1;
            char      m_szCrFeeAmount1[21+1];
            bool      m_bCrFeeType2;
            char      m_szCrFeeType2[2+1];
            bool      m_bCrFeeAmount2;
            char      m_szCrFeeAmount2[21+1];
            bool      m_bCrFeeType3;
            char      m_szCrFeeType3[2+1];
            bool      m_bCrFeeAmount3;
            char      m_szCrFeeAmount3[21+1];
            bool      m_bCrFeeType4;
            char      m_szCrFeeType4[2+1];
            bool      m_bCrFeeAmount4;
            char      m_szCrFeeAmount4[21+1];
        
          public:
            long      m_lIndex;

            AsdCrFeeDetails ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCrFeeType1 = false;
                strcpy(m_szCrFeeType1, "");
                m_bCrFeeAmount1 = false;
                strcpy(m_szCrFeeAmount1, "+0000000000000000.000");
                m_bCrFeeType2 = false;
                strcpy(m_szCrFeeType2, "");
                m_bCrFeeAmount2 = false;
                strcpy(m_szCrFeeAmount2, "+0000000000000000.000");
                m_bCrFeeType3 = false;
                strcpy(m_szCrFeeType3, "");
                m_bCrFeeAmount3 = false;
                strcpy(m_szCrFeeAmount3, "+0000000000000000.000");
                m_bCrFeeType4 = false;
                strcpy(m_szCrFeeType4, "");
                m_bCrFeeAmount4 = false;
                strcpy(m_szCrFeeAmount4, "+0000000000000000.000");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            void Reinit()
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCrFeeType1 = false;
                strcpy(m_szCrFeeType1, "");
                m_bCrFeeAmount1 = false;
                strcpy(m_szCrFeeAmount1, "+0000000000000000.000");
                m_bCrFeeType2 = false;
                strcpy(m_szCrFeeType2, "");
                m_bCrFeeAmount2 = false;
                strcpy(m_szCrFeeAmount2, "+0000000000000000.000");
                m_bCrFeeType3 = false;
                strcpy(m_szCrFeeType3, "");
                m_bCrFeeAmount3 = false;
                strcpy(m_szCrFeeAmount3, "+0000000000000000.000");
                m_bCrFeeType4 = false;
                strcpy(m_szCrFeeType4, "");
                m_bCrFeeAmount4 = false;
                strcpy(m_szCrFeeAmount4, "+0000000000000000.000");
            }

            
            //    CREDIT FEE TYPE 1
            long lCrFeeType1 () { return 2; };
            RWCString CrFeeType1 (void)
            {
                return m_szCrFeeType1;
            }
            long CrFeeType1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeType1, sizeof(m_szCrFeeType1), &m_bCrFeeType1);
            }
            
            //    CREDIT FEE AMOUNT 1
            long lCrFeeAmount1 () { return 21; };
            RWCString CrFeeAmount1 (void)
            {
                return AceZeroSupp(m_szCrFeeAmount1, &m_szSuppressBuff[0]);
            }
            RWCString CrFeeAmount1Raw (void)
            {
                return m_szCrFeeAmount1;
            }
            long CrFeeAmount1 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeAmount1, sizeof(m_szCrFeeAmount1), &m_bCrFeeAmount1);
            }
            
            //    CREDIT FEE TYPE 2
            long lCrFeeType2 () { return 2; };
            RWCString CrFeeType2 (void)
            {
                return m_szCrFeeType2;
            }
            long CrFeeType2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeType2, sizeof(m_szCrFeeType2), &m_bCrFeeType2);
            }
            
            //    CREDIT FEE AMOUNT 2
            long lCrFeeAmount2 () { return 21; };
            RWCString CrFeeAmount2 (void)
            {
                return AceZeroSupp(m_szCrFeeAmount2, &m_szSuppressBuff[0]);
            }
            RWCString CrFeeAmount2Raw (void)
            {
                return m_szCrFeeAmount2;
            }
            long CrFeeAmount2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeAmount2, sizeof(m_szCrFeeAmount2), &m_bCrFeeAmount2);
            }
            
            //    CREDIT FEE TYPE 3
            long lCrFeeType3 () { return 2; };
            RWCString CrFeeType3 (void)
            {
                return m_szCrFeeType3;
            }
            long CrFeeType3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeType3, sizeof(m_szCrFeeType3), &m_bCrFeeType3);
            }
            
            //    CREDIT FEE AMOUNT 3
            long lCrFeeAmount3 () { return 21; };
            RWCString CrFeeAmount3 (void)
            {
                return AceZeroSupp(m_szCrFeeAmount3, &m_szSuppressBuff[0]);
            }
            RWCString CrFeeAmount3Raw (void)
            {
                return m_szCrFeeAmount3;
            }
            long CrFeeAmount3 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeAmount3, sizeof(m_szCrFeeAmount3), &m_bCrFeeAmount3);
            }
            
            //    CREDIT FEE TYPE 4
            long lCrFeeType4 () { return 2; };
            RWCString CrFeeType4 (void)
            {
                return m_szCrFeeType4;
            }
            long CrFeeType4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeType4, sizeof(m_szCrFeeType4), &m_bCrFeeType4);
            }
            
            //    CREDIT FEE AMOUNT 4
            long lCrFeeAmount4 () { return 21; };
            RWCString CrFeeAmount4 (void)
            {
                return AceZeroSupp(m_szCrFeeAmount4, &m_szSuppressBuff[0]);
            }
            RWCString CrFeeAmount4Raw (void)
            {
                return m_szCrFeeAmount4;
            }
            long CrFeeAmount4 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szCrFeeAmount4, sizeof(m_szCrFeeAmount4), &m_bCrFeeAmount4);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bCrFeeType1) return true;
                if (m_bCrFeeAmount1) return true;
                if (m_bCrFeeType2) return true;
                if (m_bCrFeeAmount2) return true;
                if (m_bCrFeeType3) return true;
                if (m_bCrFeeAmount3) return true;
                if (m_bCrFeeType4) return true;
                if (m_bCrFeeAmount4) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                	
                	  if (m_szCrFeeAmount1[0]=='-') m_szCrFeeAmount1[0] = ' ';
                	  if (m_szCrFeeAmount2[0]=='-') m_szCrFeeAmount2[0] = ' ';
                	  if (m_szCrFeeAmount3[0]=='-') m_szCrFeeAmount3[0] = ' ';
                	  if (m_szCrFeeAmount4[0]=='-') m_szCrFeeAmount4[0] = ' ';

                    AddXMLRecord(pSess, "CrFeeDetails", m_lIndex);
                    AddXMLField(pSess, "CrFeeType1", m_szCrFeeType1, &m_bCrFeeType1);
                    AddXMLField(pSess, "CrFeeAmount1", m_szCrFeeAmount1, &m_bCrFeeAmount1);
                    AddXMLField(pSess, "CrFeeType2", m_szCrFeeType2, &m_bCrFeeType2);
                    AddXMLField(pSess, "CrFeeAmount2", m_szCrFeeAmount2, &m_bCrFeeAmount2);
                    AddXMLField(pSess, "CrFeeType3", m_szCrFeeType3, &m_bCrFeeType3);
                    AddXMLField(pSess, "CrFeeAmount3", m_szCrFeeAmount3, &m_bCrFeeAmount3);
                    AddXMLField(pSess, "CrFeeType4", m_szCrFeeType4, &m_bCrFeeType4);
                    AddXMLField(pSess, "CrFeeAmount4", m_szCrFeeAmount4, &m_bCrFeeAmount4);
                    AddXMLCloseRecord(pSess, "CrFeeDetails");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "CrFeeDetails", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "CrFeeType1", m_szCrFeeType1);
                    GetXMLField(pSess, "CrFeeAmount1", m_szCrFeeAmount1);
                    GetXMLField(pSess, "CrFeeType2", m_szCrFeeType2);
                    GetXMLField(pSess, "CrFeeAmount2", m_szCrFeeAmount2);
                    GetXMLField(pSess, "CrFeeType3", m_szCrFeeType3);
                    GetXMLField(pSess, "CrFeeAmount3", m_szCrFeeAmount3);
                    GetXMLField(pSess, "CrFeeType4", m_szCrFeeType4);
                    GetXMLField(pSess, "CrFeeAmount4", m_szCrFeeAmount4);
                    CloseXMLRecord(pSess, "CrFeeDetails");
                };
            }
        };

        AsdCrFeeDetails  CCrFeeDetails[4];
        AsdCrFeeDetails *CrFeeDetails[4];
        
        //**************** End AsdCrFeeDetails Definition ****************
        
    };

    AsdTWMEGFEE CTWMEGFEE;
    AsdTWMEGFEE *TWMEGFEE;
    
    //**************** End AsdTWMEGFEE Definition ****************

    
    //**************** Start AsdTWBPTRN Definition ****************
    //                 TELLER BILL PAYMENT DAG                                     
    
    //    TWBPTRN.map
    //    generated by Dsm2Ace ver. 4.2.00
    //    on 07/02/15 15:34:36
    class AsdTWBPTRN
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bToAccountNumber;
        char      m_szToAccountNumber[10+1];
        bool      m_bReference1;
        char      m_szReference1[20+1];
        bool      m_bCustNoRef2;
        char      m_szCustNoRef2[20+1];
        bool      m_bTranYy;
        char      m_szTranYy[2+1];
        bool      m_bTranMm;
        char      m_szTranMm[2+1];
        bool      m_bTranDd;
        char      m_szTranDd[2+1];
        bool      m_bTranTimeZero;
        char      m_szTranTimeZero[2+1];
        bool      m_bTranTimeHh;
        char      m_szTranTimeHh[2+1];
        bool      m_bTranTimeMm;
        char      m_szTranTimeMm[2+1];
        bool      m_bTranTimeSs;
        char      m_szTranTimeSs[2+1];
        bool      m_bTermId;
        char      m_szTermId[16+1];
        bool      m_bFill0;
        char      m_szFill0[20+1];
        bool      m_bChannelCode;
        char      m_szChannelCode[4+1];
        bool      m_bControlId;
        char      m_szControlId[1+1];
        bool      m_bTranSerial;
        char      m_szTranSerial[8+1];
        bool      m_bWorkId;
        char      m_szWorkId[1+1];
        bool      m_bTranCode;
        char      m_szTranCode[4+1];
        bool      m_bTellerId;
        char      m_szTellerId[8+1];
        bool      m_bAuthId;
        char      m_szAuthId[8+1];
        bool      m_bAuthLevel;
        char      m_szAuthLevel[1+1];
        bool      m_bFlag;
        char      m_szFlag[1+1];
        bool      m_bProcessingBranch;
        char      m_szProcessingBranch[4+1];
        bool      m_bBranchCode;
        char      m_szBranchCode[3+1];
        bool      m_bChequeNumber;
        char      m_szChequeNumber[7+1];
        bool      m_bBankCode;
        char      m_szBankCode[3+1];
        bool      m_bFill1;
        char      m_szFill1[4+1];
        bool      m_bPayYy;
        char      m_szPayYy[2+1];
        bool      m_bPayMm;
        char      m_szPayMm[2+1];
        bool      m_bPayDd;
        char      m_szPayDd[2+1];
        bool      m_bValueDate;
        char      m_szValueDate[6+1];
        bool      m_bType;
        char      m_szType[3+1];
        bool      m_bFromAccount;
        char      m_szFromAccount[10+1];
        bool      m_bSequenceNo;
        char      m_szSequenceNo[9+1];
        bool      m_bCustomerName;
        char      m_szCustomerName[40+1];
        bool      m_bAmount;
        char      m_szAmount[11+1];
        bool      m_bCommission;
        char      m_szCommission[11+1];
        bool      m_bPaymentBy;
        char      m_szPaymentBy[1+1];
        bool      m_bReference3;
        char      m_szReference3[20+1];
        bool      m_bFill2;
        char      m_szFill2[5+1];
        bool      m_bDelFlag;
        char      m_szDelFlag[1+1];
        bool      m_bNxtDayFlag;
        char      m_szNxtDayFlag[1+1];
        bool      m_bBpRegionFlag;
        char      m_szBpRegionFlag[1+1];
        bool      m_bBpAmount13;
        char      m_szBpAmount13[13+1];
        bool      m_bFill3;
        char      m_szFill3[5+1];
    
      public:
        long      m_lIndex;

        AsdTWBPTRN ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bToAccountNumber = false;
            strcpy(m_szToAccountNumber, "0000000000");
            m_bReference1 = false;
            strcpy(m_szReference1, "");
            m_bCustNoRef2 = false;
            strcpy(m_szCustNoRef2, "");
            m_bTranYy = false;
            strcpy(m_szTranYy, "00");
            m_bTranMm = false;
            strcpy(m_szTranMm, "00");
            m_bTranDd = false;
            strcpy(m_szTranDd, "00");
            m_bTranTimeZero = false;
            strcpy(m_szTranTimeZero, "00");
            m_bTranTimeHh = false;
            strcpy(m_szTranTimeHh, "00");
            m_bTranTimeMm = false;
            strcpy(m_szTranTimeMm, "00");
            m_bTranTimeSs = false;
            strcpy(m_szTranTimeSs, "00");
            m_bTermId = false;
            strcpy(m_szTermId, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bChannelCode = false;
            strcpy(m_szChannelCode, "");
            m_bControlId = false;
            strcpy(m_szControlId, "");
            m_bTranSerial = false;
            strcpy(m_szTranSerial, "00000000");
            m_bWorkId = false;
            strcpy(m_szWorkId, "");
            m_bTranCode = false;
            strcpy(m_szTranCode, "0000");
            m_bTellerId = false;
            strcpy(m_szTellerId, "00000000");
            m_bAuthId = false;
            strcpy(m_szAuthId, "00000000");
            m_bAuthLevel = false;
            strcpy(m_szAuthLevel, "");
            m_bFlag = false;
            strcpy(m_szFlag, "");
            m_bProcessingBranch = false;
            strcpy(m_szProcessingBranch, "0000");
            m_bBranchCode = false;
            strcpy(m_szBranchCode, "000");
            m_bChequeNumber = false;
            strcpy(m_szChequeNumber, "");
            m_bBankCode = false;
            strcpy(m_szBankCode, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            m_bPayYy = false;
            strcpy(m_szPayYy, "00");
            m_bPayMm = false;
            strcpy(m_szPayMm, "00");
            m_bPayDd = false;
            strcpy(m_szPayDd, "00");
            m_bValueDate = false;
            strcpy(m_szValueDate, "000000");
            m_bType = false;
            strcpy(m_szType, "");
            m_bFromAccount = false;
            strcpy(m_szFromAccount, "");
            m_bSequenceNo = false;
            strcpy(m_szSequenceNo, "");
            m_bCustomerName = false;
            strcpy(m_szCustomerName, "");
            m_bAmount = false;
            strcpy(m_szAmount, "00000000000");
            m_bCommission = false;
            strcpy(m_szCommission, "00000000000");
            m_bPaymentBy = false;
            strcpy(m_szPaymentBy, "");
            m_bReference3 = false;
            strcpy(m_szReference3, "");
            m_bFill2 = false;
            strcpy(m_szFill2, "");
            m_bDelFlag = false;
            strcpy(m_szDelFlag, "");
            m_bNxtDayFlag = false;
            strcpy(m_szNxtDayFlag, "");
            m_bBpRegionFlag = false;
            strcpy(m_szBpRegionFlag, "");
            m_bBpAmount13 = false;
            strcpy(m_szBpAmount13, "0000000000000");
            m_bFill3 = false;
            strcpy(m_szFill3, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bToAccountNumber = false;
            strcpy(m_szToAccountNumber, "0000000000");
            m_bReference1 = false;
            strcpy(m_szReference1, "");
            m_bCustNoRef2 = false;
            strcpy(m_szCustNoRef2, "");
            m_bTranYy = false;
            strcpy(m_szTranYy, "00");
            m_bTranMm = false;
            strcpy(m_szTranMm, "00");
            m_bTranDd = false;
            strcpy(m_szTranDd, "00");
            m_bTranTimeZero = false;
            strcpy(m_szTranTimeZero, "00");
            m_bTranTimeHh = false;
            strcpy(m_szTranTimeHh, "00");
            m_bTranTimeMm = false;
            strcpy(m_szTranTimeMm, "00");
            m_bTranTimeSs = false;
            strcpy(m_szTranTimeSs, "00");
            m_bTermId = false;
            strcpy(m_szTermId, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bChannelCode = false;
            strcpy(m_szChannelCode, "");
            m_bControlId = false;
            strcpy(m_szControlId, "");
            m_bTranSerial = false;
            strcpy(m_szTranSerial, "00000000");
            m_bWorkId = false;
            strcpy(m_szWorkId, "");
            m_bTranCode = false;
            strcpy(m_szTranCode, "0000");
            m_bTellerId = false;
            strcpy(m_szTellerId, "00000000");
            m_bAuthId = false;
            strcpy(m_szAuthId, "00000000");
            m_bAuthLevel = false;
            strcpy(m_szAuthLevel, "");
            m_bFlag = false;
            strcpy(m_szFlag, "");
            m_bProcessingBranch = false;
            strcpy(m_szProcessingBranch, "0000");
            m_bBranchCode = false;
            strcpy(m_szBranchCode, "000");
            m_bChequeNumber = false;
            strcpy(m_szChequeNumber, "");
            m_bBankCode = false;
            strcpy(m_szBankCode, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            m_bPayYy = false;
            strcpy(m_szPayYy, "00");
            m_bPayMm = false;
            strcpy(m_szPayMm, "00");
            m_bPayDd = false;
            strcpy(m_szPayDd, "00");
            m_bValueDate = false;
            strcpy(m_szValueDate, "000000");
            m_bType = false;
            strcpy(m_szType, "");
            m_bFromAccount = false;
            strcpy(m_szFromAccount, "");
            m_bSequenceNo = false;
            strcpy(m_szSequenceNo, "");
            m_bCustomerName = false;
            strcpy(m_szCustomerName, "");
            m_bAmount = false;
            strcpy(m_szAmount, "00000000000");
            m_bCommission = false;
            strcpy(m_szCommission, "00000000000");
            m_bPaymentBy = false;
            strcpy(m_szPaymentBy, "");
            m_bReference3 = false;
            strcpy(m_szReference3, "");
            m_bFill2 = false;
            strcpy(m_szFill2, "");
            m_bDelFlag = false;
            strcpy(m_szDelFlag, "");
            m_bNxtDayFlag = false;
            strcpy(m_szNxtDayFlag, "");
            m_bBpRegionFlag = false;
            strcpy(m_szBpRegionFlag, "");
            m_bBpAmount13 = false;
            strcpy(m_szBpAmount13, "0000000000000");
            m_bFill3 = false;
            strcpy(m_szFill3, "");
        }

        
        //    TO ACCOUNT NUMBER
        long lToAccountNumber () { return 10; };
        RWCString ToAccountNumber (void)
        {
            return m_szToAccountNumber;
        }
        long ToAccountNumber (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szToAccountNumber, sizeof(m_szToAccountNumber), &m_bToAccountNumber);
        }
        
        //    TRANSACTION REFERENCE 1
        long lReference1 () { return 20; };
        RWCString Reference1 (void)
        {
            return m_szReference1;
        }
        long Reference1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReference1, sizeof(m_szReference1), &m_bReference1);
        }
        
        //    CUSTOMER NUMBER REFERENCE 2
        long lCustNoRef2 () { return 20; };
        RWCString CustNoRef2 (void)
        {
            return m_szCustNoRef2;
        }
        long CustNoRef2 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCustNoRef2, sizeof(m_szCustNoRef2), &m_bCustNoRef2);
        }
        
        //    TRANSACTION DATE YEAR
        long lTranYy () { return 2; };
        RWCString TranYy (void)
        {
            return m_szTranYy;
        }
        long TranYy (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranYy, sizeof(m_szTranYy), &m_bTranYy);
        }
        
        //    TRANSACTION DATE MONTH
        long lTranMm () { return 2; };
        RWCString TranMm (void)
        {
            return m_szTranMm;
        }
        long TranMm (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranMm, sizeof(m_szTranMm), &m_bTranMm);
        }
        
        //    TRANSACTION DATE DAY
        long lTranDd () { return 2; };
        RWCString TranDd (void)
        {
            return m_szTranDd;
        }
        long TranDd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranDd, sizeof(m_szTranDd), &m_bTranDd);
        }
        
        //    TRANSACTION TIME ZERO
        long lTranTimeZero () { return 2; };
        RWCString TranTimeZero (void)
        {
            return m_szTranTimeZero;
        }
        long TranTimeZero (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranTimeZero, sizeof(m_szTranTimeZero), &m_bTranTimeZero);
        }
        
        //    TRANSACTION TIME HOUR
        long lTranTimeHh () { return 2; };
        RWCString TranTimeHh (void)
        {
            return m_szTranTimeHh;
        }
        long TranTimeHh (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranTimeHh, sizeof(m_szTranTimeHh), &m_bTranTimeHh);
        }
        
        //    TRANSACTION TIME MINUTES
        long lTranTimeMm () { return 2; };
        RWCString TranTimeMm (void)
        {
            return m_szTranTimeMm;
        }
        long TranTimeMm (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranTimeMm, sizeof(m_szTranTimeMm), &m_bTranTimeMm);
        }
        
        //    TRANSACTION TIME SECONDS
        long lTranTimeSs () { return 2; };
        RWCString TranTimeSs (void)
        {
            return m_szTranTimeSs;
        }
        long TranTimeSs (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranTimeSs, sizeof(m_szTranTimeSs), &m_bTranTimeSs);
        }
        
        //    TERMINAL ID
        long lTermId () { return 16; };
        RWCString TermId (void)
        {
            return m_szTermId;
        }
        long TermId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTermId, sizeof(m_szTermId), &m_bTermId);
        }
        
        long lFill0 () { return 20; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    CHANNEL CODE
        long lChannelCode () { return 4; };
        RWCString ChannelCode (void)
        {
            return m_szChannelCode;
        }
        long ChannelCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szChannelCode, sizeof(m_szChannelCode), &m_bChannelCode);
        }
        
        //    CONTROL ID
        long lControlId () { return 1; };
        RWCString ControlId (void)
        {
            return m_szControlId;
        }
        long ControlId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szControlId, sizeof(m_szControlId), &m_bControlId);
        }
        
        //    TRANSACTION SERIAL NUMBER
        long lTranSerial () { return 8; };
        RWCString TranSerial (void)
        {
            return m_szTranSerial;
        }
        long TranSerial (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranSerial, sizeof(m_szTranSerial), &m_bTranSerial);
        }
        
        //    WORK ID
        long lWorkId () { return 1; };
        RWCString WorkId (void)
        {
            return m_szWorkId;
        }
        long WorkId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szWorkId, sizeof(m_szWorkId), &m_bWorkId);
        }
        
        //    TRANSACTION CODE
        long lTranCode () { return 4; };
        RWCString TranCode (void)
        {
            return m_szTranCode;
        }
        long TranCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTranCode, sizeof(m_szTranCode), &m_bTranCode);
        }
        
        //    TELLER ID
        long lTellerId () { return 8; };
        RWCString TellerId (void)
        {
            return m_szTellerId;
        }
        long TellerId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szTellerId, sizeof(m_szTellerId), &m_bTellerId);
        }
        
        //    TRANSACTION AUTHORIZATION ID
        long lAuthId () { return 8; };
        RWCString AuthId (void)
        {
            return m_szAuthId;
        }
        long AuthId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szAuthId, sizeof(m_szAuthId), &m_bAuthId);
        }
        
        //    AUTHORITY LEVEL
        long lAuthLevel () { return 1; };
        RWCString AuthLevel (void)
        {
            return m_szAuthLevel;
        }
        long AuthLevel (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szAuthLevel, sizeof(m_szAuthLevel), &m_bAuthLevel);
        }
        
        //    TRANSACTION FLAG
        long lFlag () { return 1; };
        RWCString Flag (void)
        {
            return m_szFlag;
        }
        long Flag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFlag, sizeof(m_szFlag), &m_bFlag);
        }
        
        //    TRANSACTION PROCESSING BRANCH
        long lProcessingBranch () { return 4; };
        RWCString ProcessingBranch (void)
        {
            return m_szProcessingBranch;
        }
        long ProcessingBranch (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szProcessingBranch, sizeof(m_szProcessingBranch), &m_bProcessingBranch);
        }
        
        //    TRANSACTION PROCESSING BRANCH CODE
        long lBranchCode () { return 3; };
        RWCString BranchCode (void)
        {
            return m_szBranchCode;
        }
        long BranchCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBranchCode, sizeof(m_szBranchCode), &m_bBranchCode);
        }
        
        //    CHECK NUMBER
        long lChequeNumber () { return 7; };
        RWCString ChequeNumber (void)
        {
            return m_szChequeNumber;
        }
        long ChequeNumber (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szChequeNumber, sizeof(m_szChequeNumber), &m_bChequeNumber);
        }
        
        //    BANK CODE
        long lBankCode () { return 3; };
        RWCString BankCode (void)
        {
            return m_szBankCode;
        }
        long BankCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBankCode, sizeof(m_szBankCode), &m_bBankCode);
        }
        
        long lFill1 () { return 4; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        //    TRANSACTION PAYMENT DATE YEAR
        long lPayYy () { return 2; };
        RWCString PayYy (void)
        {
            return m_szPayYy;
        }
        long PayYy (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPayYy, sizeof(m_szPayYy), &m_bPayYy);
        }
        
        //    TRANSACTION PAYMENT DATE MONTH
        long lPayMm () { return 2; };
        RWCString PayMm (void)
        {
            return m_szPayMm;
        }
        long PayMm (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPayMm, sizeof(m_szPayMm), &m_bPayMm);
        }
        
        //    TRANSACTION PAY DATE DAY
        long lPayDd () { return 2; };
        RWCString PayDd (void)
        {
            return m_szPayDd;
        }
        long PayDd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPayDd, sizeof(m_szPayDd), &m_bPayDd);
        }
        
        //    TRANSACTION VALUE DATE
        long lValueDate () { return 6; };
        RWCString ValueDate (void)
        {
            return m_szValueDate;
        }
        long ValueDate (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szValueDate, sizeof(m_szValueDate), &m_bValueDate);
        }
        
        //    TRANSACTION TYPE
        long lType () { return 3; };
        RWCString Type (void)
        {
            return m_szType;
        }
        long Type (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szType, sizeof(m_szType), &m_bType);
        }
        
        //    FROM ACCOUNT NUMBER
        long lFromAccount () { return 10; };
        RWCString FromAccount (void)
        {
            return m_szFromAccount;
        }
        long FromAccount (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFromAccount, sizeof(m_szFromAccount), &m_bFromAccount);
        }
        
        //    TRANSACTION SEQUENCE NUMBER
        long lSequenceNo () { return 9; };
        RWCString SequenceNo (void)
        {
            return m_szSequenceNo;
        }
        long SequenceNo (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szSequenceNo, sizeof(m_szSequenceNo), &m_bSequenceNo);
        }
        
        //    CUSTOMER NAME
        long lCustomerName () { return 40; };
        RWCString CustomerName (void)
        {
            return m_szCustomerName;
        }
        long CustomerName (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCustomerName, sizeof(m_szCustomerName), &m_bCustomerName);
        }
        
        //    TRANSACTION AMOUNT
        long lAmount () { return 11; };
        RWCString Amount (void)
        {
            return m_szAmount;
        }
        long Amount (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szAmount, sizeof(m_szAmount), &m_bAmount);
        }
        
        //    COMMISSION AMOUNT
        long lCommission () { return 11; };
        RWCString Commission (void)
        {
            return m_szCommission;
        }
        long Commission (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szCommission, sizeof(m_szCommission), &m_bCommission);
        }
        
        //    PAYMENT BY
        long lPaymentBy () { return 1; };
        RWCString PaymentBy (void)
        {
            return m_szPaymentBy;
        }
        long PaymentBy (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szPaymentBy, sizeof(m_szPaymentBy), &m_bPaymentBy);
        }
        
        //    TRANSACTION REFERENCE 3
        long lReference3 () { return 20; };
        RWCString Reference3 (void)
        {
            return m_szReference3;
        }
        long Reference3 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szReference3, sizeof(m_szReference3), &m_bReference3);
        }
        
        long lFill2 () { return 5; };
        RWCString Fill2 (void)
        {
            return m_szFill2;
        }
        long Fill2 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFill2, sizeof(m_szFill2), &m_bFill2);
        }
        
        //    TRANSACTION DELETE FLAG
        long lDelFlag () { return 1; };
        RWCString DelFlag (void)
        {
            return m_szDelFlag;
        }
        long DelFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szDelFlag, sizeof(m_szDelFlag), &m_bDelFlag);
        }
        
        //    NEXT DAY FLAG
        long lNxtDayFlag () { return 1; };
        RWCString NxtDayFlag (void)
        {
            return m_szNxtDayFlag;
        }
        long NxtDayFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szNxtDayFlag, sizeof(m_szNxtDayFlag), &m_bNxtDayFlag);
        }
        
        //    BP REGION FLAG
        long lBpRegionFlag () { return 1; };
        RWCString BpRegionFlag (void)
        {
            return m_szBpRegionFlag;
        }
        long BpRegionFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBpRegionFlag, sizeof(m_szBpRegionFlag), &m_bBpRegionFlag);
        }
        
        //    BP AMOUNT13
        long lBpAmount13 () { return 13; };
        RWCString BpAmount13 (void)
        {
            return m_szBpAmount13;
        }
        long BpAmount13 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szBpAmount13, sizeof(m_szBpAmount13), &m_bBpAmount13);
        }
        
        long lFill3 () { return 5; };
        RWCString Fill3 (void)
        {
            return m_szFill3;
        }
        long Fill3 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFill3, sizeof(m_szFill3), &m_bFill3);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bToAccountNumber) return true;
            if (m_bReference1) return true;
            if (m_bCustNoRef2) return true;
            if (m_bTranYy) return true;
            if (m_bTranMm) return true;
            if (m_bTranDd) return true;
            if (m_bTranTimeZero) return true;
            if (m_bTranTimeHh) return true;
            if (m_bTranTimeMm) return true;
            if (m_bTranTimeSs) return true;
            if (m_bTermId) return true;
            if (m_bFill0) return true;
            if (m_bChannelCode) return true;
            if (m_bControlId) return true;
            if (m_bTranSerial) return true;
            if (m_bWorkId) return true;
            if (m_bTranCode) return true;
            if (m_bTellerId) return true;
            if (m_bAuthId) return true;
            if (m_bAuthLevel) return true;
            if (m_bFlag) return true;
            if (m_bProcessingBranch) return true;
            if (m_bBranchCode) return true;
            if (m_bChequeNumber) return true;
            if (m_bBankCode) return true;
            if (m_bFill1) return true;
            if (m_bPayYy) return true;
            if (m_bPayMm) return true;
            if (m_bPayDd) return true;
            if (m_bValueDate) return true;
            if (m_bType) return true;
            if (m_bFromAccount) return true;
            if (m_bSequenceNo) return true;
            if (m_bCustomerName) return true;
            if (m_bAmount) return true;
            if (m_bCommission) return true;
            if (m_bPaymentBy) return true;
            if (m_bReference3) return true;
            if (m_bFill2) return true;
            if (m_bDelFlag) return true;
            if (m_bNxtDayFlag) return true;
            if (m_bBpRegionFlag) return true;
            if (m_bBpAmount13) return true;
            if (m_bFill3) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TWBPTRN", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "ToAccountNumber", m_szToAccountNumber, &m_bToAccountNumber);
                AddXMLField(pSess, "Reference1", m_szReference1, &m_bReference1);
                AddXMLField(pSess, "CustNoRef2", m_szCustNoRef2, &m_bCustNoRef2);
                AddXMLField(pSess, "TranYy", m_szTranYy, &m_bTranYy);
                AddXMLField(pSess, "TranMm", m_szTranMm, &m_bTranMm);
                AddXMLField(pSess, "TranDd", m_szTranDd, &m_bTranDd);
                AddXMLField(pSess, "TranTimeZero", m_szTranTimeZero, &m_bTranTimeZero);
                AddXMLField(pSess, "TranTimeHh", m_szTranTimeHh, &m_bTranTimeHh);
                AddXMLField(pSess, "TranTimeMm", m_szTranTimeMm, &m_bTranTimeMm);
                AddXMLField(pSess, "TranTimeSs", m_szTranTimeSs, &m_bTranTimeSs);
                AddXMLField(pSess, "TermId", m_szTermId, &m_bTermId);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "ChannelCode", m_szChannelCode, &m_bChannelCode);
                AddXMLField(pSess, "ControlId", m_szControlId, &m_bControlId);
                AddXMLField(pSess, "TranSerial", m_szTranSerial, &m_bTranSerial);
                AddXMLField(pSess, "WorkId", m_szWorkId, &m_bWorkId);
                AddXMLField(pSess, "TranCode", m_szTranCode, &m_bTranCode);
                AddXMLField(pSess, "TellerId", m_szTellerId, &m_bTellerId);
                AddXMLField(pSess, "AuthId", m_szAuthId, &m_bAuthId);
                AddXMLField(pSess, "AuthLevel", m_szAuthLevel, &m_bAuthLevel);
                AddXMLField(pSess, "Flag", m_szFlag, &m_bFlag);
                AddXMLField(pSess, "ProcessingBranch", m_szProcessingBranch, &m_bProcessingBranch);
                AddXMLField(pSess, "BranchCode", m_szBranchCode, &m_bBranchCode);
                AddXMLField(pSess, "ChequeNumber", m_szChequeNumber, &m_bChequeNumber);
                AddXMLField(pSess, "BankCode", m_szBankCode, &m_bBankCode);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                AddXMLField(pSess, "PayYy", m_szPayYy, &m_bPayYy);
                AddXMLField(pSess, "PayMm", m_szPayMm, &m_bPayMm);
                AddXMLField(pSess, "PayDd", m_szPayDd, &m_bPayDd);
                AddXMLField(pSess, "ValueDate", m_szValueDate, &m_bValueDate);
                AddXMLField(pSess, "Type", m_szType, &m_bType);
                AddXMLField(pSess, "FromAccount", m_szFromAccount, &m_bFromAccount);
                AddXMLField(pSess, "SequenceNo", m_szSequenceNo, &m_bSequenceNo);
                AddXMLField(pSess, "CustomerName", m_szCustomerName, &m_bCustomerName);
                AddXMLField(pSess, "Amount", m_szAmount, &m_bAmount);
                AddXMLField(pSess, "Commission", m_szCommission, &m_bCommission);
                AddXMLField(pSess, "PaymentBy", m_szPaymentBy, &m_bPaymentBy);
                AddXMLField(pSess, "Reference3", m_szReference3, &m_bReference3);
                AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                AddXMLField(pSess, "DelFlag", m_szDelFlag, &m_bDelFlag);
                AddXMLField(pSess, "NxtDayFlag", m_szNxtDayFlag, &m_bNxtDayFlag);
                AddXMLField(pSess, "BpRegionFlag", m_szBpRegionFlag, &m_bBpRegionFlag);
                AddXMLField(pSess, "BpAmount13", m_szBpAmount13, &m_bBpAmount13);
                AddXMLField(pSess, "Fill3", m_szFill3, &m_bFill3);
                AddXMLCloseRecord(pSess, "TWBPTRN");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TWBPTRN", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "ToAccountNumber", m_szToAccountNumber);
                GetXMLField(pSess, "Reference1", m_szReference1);
                GetXMLField(pSess, "CustNoRef2", m_szCustNoRef2);
                GetXMLField(pSess, "TranYy", m_szTranYy);
                GetXMLField(pSess, "TranMm", m_szTranMm);
                GetXMLField(pSess, "TranDd", m_szTranDd);
                GetXMLField(pSess, "TranTimeZero", m_szTranTimeZero);
                GetXMLField(pSess, "TranTimeHh", m_szTranTimeHh);
                GetXMLField(pSess, "TranTimeMm", m_szTranTimeMm);
                GetXMLField(pSess, "TranTimeSs", m_szTranTimeSs);
                GetXMLField(pSess, "TermId", m_szTermId);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "ChannelCode", m_szChannelCode);
                GetXMLField(pSess, "ControlId", m_szControlId);
                GetXMLField(pSess, "TranSerial", m_szTranSerial);
                GetXMLField(pSess, "WorkId", m_szWorkId);
                GetXMLField(pSess, "TranCode", m_szTranCode);
                GetXMLField(pSess, "TellerId", m_szTellerId);
                GetXMLField(pSess, "AuthId", m_szAuthId);
                GetXMLField(pSess, "AuthLevel", m_szAuthLevel);
                GetXMLField(pSess, "Flag", m_szFlag);
                GetXMLField(pSess, "ProcessingBranch", m_szProcessingBranch);
                GetXMLField(pSess, "BranchCode", m_szBranchCode);
                GetXMLField(pSess, "ChequeNumber", m_szChequeNumber);
                GetXMLField(pSess, "BankCode", m_szBankCode);
                GetXMLField(pSess, "Fill1", m_szFill1);
                GetXMLField(pSess, "PayYy", m_szPayYy);
                GetXMLField(pSess, "PayMm", m_szPayMm);
                GetXMLField(pSess, "PayDd", m_szPayDd);
                GetXMLField(pSess, "ValueDate", m_szValueDate);
                GetXMLField(pSess, "Type", m_szType);
                GetXMLField(pSess, "FromAccount", m_szFromAccount);
                GetXMLField(pSess, "SequenceNo", m_szSequenceNo);
                GetXMLField(pSess, "CustomerName", m_szCustomerName);
                GetXMLField(pSess, "Amount", m_szAmount);
                GetXMLField(pSess, "Commission", m_szCommission);
                GetXMLField(pSess, "PaymentBy", m_szPaymentBy);
                GetXMLField(pSess, "Reference3", m_szReference3);
                GetXMLField(pSess, "Fill2", m_szFill2);
                GetXMLField(pSess, "DelFlag", m_szDelFlag);
                GetXMLField(pSess, "NxtDayFlag", m_szNxtDayFlag);
                GetXMLField(pSess, "BpRegionFlag", m_szBpRegionFlag);
                GetXMLField(pSess, "BpAmount13", m_szBpAmount13);
                GetXMLField(pSess, "Fill3", m_szFill3);
                CloseXMLRecord(pSess, "TWBPTRN");
            };
        }
    };

    AsdTWBPTRN CTWBPTRN;
    AsdTWBPTRN *TWBPTRN;
    
    //**************** End AsdTWBPTRN Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
            CMdaTrmMsg.Reinit();
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc.data(), m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            void Reinit()
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs]  = &CMdaMsg[lOccurs];
                CMdaMsg[lOccurs].Reinit();
                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc.data(), m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                void Reinit()
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc.data(), m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdTWBLLPAYData Definition ****************

typedef AsdTWBLLPAYData *LPTWBLLPAY;
typedef AsdTWBLLPAYData::AsdTSHeader *LPTWBLLPAY_TSHeader;
typedef AsdTWBLLPAYData::AsdTWMEGAIN *LPTWBLLPAY_TWMEGAIN;
typedef AsdTWBLLPAYData::AsdTWMEGAIN::AsdDebitItems *LPTWBLLPAY_TWMEGAIN_DebitItems;
typedef AsdTWBLLPAYData::AsdTWMEGAIN::AsdCreditItems *LPTWBLLPAY_TWMEGAIN_CreditItems;
typedef AsdTWBLLPAYData::AsdTWMEGAIN::AsdDebitCreditItems *LPTWBLLPAY_TWMEGAIN_DebitCreditItems;
typedef AsdTWBLLPAYData::AsdTWMEGFEE *LPTWBLLPAY_TWMEGFEE;
typedef AsdTWBLLPAYData::AsdTWMEGFEE::AsdDbFeeDetails *LPTWBLLPAY_TWMEGFEE_DbFeeDetails;
typedef AsdTWBLLPAYData::AsdTWMEGFEE::AsdCrFeeDetails *LPTWBLLPAY_TWMEGFEE_CrFeeDetails;
typedef AsdTWBLLPAYData::AsdTWBPTRN *LPTWBLLPAY_TWBPTRN;
typedef AsdTWBLLPAYData::AsdTSMDA *LPTWBLLPAY_TSMDA;
typedef AsdTWBLLPAYData::AsdTSMDA::AsdMdaTrmMsg *LPTWBLLPAY_TSMDA_MdaTrmMsg;
typedef AsdTWBLLPAYData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPTWBLLPAY_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdTWBLLPAYData_H

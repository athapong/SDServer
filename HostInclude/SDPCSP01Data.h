#ifndef AsdSDPCSP01Data_H
#define AsdSDPCSP01Data_H

#include <stdlib.h>
#ifdef  AsdSDPCSP01_INTEGRITY_STRING
#undef  AsdSDPCSP01_INTEGRITY_STRING
#endif
#define AsdSDPCSP01_INTEGRITY_STRING        ""

#ifdef  AsdSDPCSP01_CRC_STRING
#undef  AsdSDPCSP01_CRC_STRING
#endif
#define AsdSDPCSP01_CRC_STRING "4277677596"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCSP01Data Definition ****************
//                 ST Account Post

//                 SDPCSP01Data.h generated by AceGen2 ver. 2.5.09

class AsdSDPCSP01Data
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCSP01Data ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCSP01.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCSP01_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDSTCMMI = &CSDSTCMMI;
        SDST01MI = &CSDST01MI;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCSP01Data ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDSTCMMI.Reinit();
            CSDST01MI.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCSP01_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSP01_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDSTCMMI.Save(&m_Sess);
        CSDST01MI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCSP01", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDSTCMMI.Load(&m_Sess);
                        CSDST01MI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCSP01");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSP01_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDSTCMMI.Save(&m_Sess);
        CSDST01MI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCSP01", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDSTCMMI.Load(&m_Sess);
                        CSDST01MI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCSP01");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSP01_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDSTCMMI Definition ****************
    //                 ST STANDARD COMMUNICATION AREA                              
    
    //    SDSTCMMI.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:20
    class AsdSDSTCMMI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bZ2ndTimeThru;
        char      m_szZ2ndTimeThru[1+1];
        bool      m_bStmastPtr;
        char      m_szStmastPtr[4+1];
        bool      m_bStmCtl1;
        char      m_szStmCtl1[2+1];
        bool      m_bStmCtl2;
        char      m_szStmCtl2[3+1];
        bool      m_bStmCtl3;
        char      m_szStmCtl3[3+1];
        bool      m_bStmCtl4;
        char      m_szStmCtl4[3+1];
        bool      m_bStmAcctNo;
        char      m_szStmAcctNo[14+1];
        bool      m_bCtl1;
        char      m_szCtl1[2+1];
        bool      m_bCtl2;
        char      m_szCtl2[3+1];
        bool      m_bCtl3;
        char      m_szCtl3[3+1];
        bool      m_bCtl4;
        char      m_szCtl4[3+1];
        bool      m_bPkPlanId;
        char      m_szPkPlanId[12+1];
        bool      m_bPkSeqNbr;
        char      m_szPkSeqNbr[3+1];
        bool      m_bPkEmployeeId;
        char      m_szPkEmployeeId[12+1];
        bool      m_bDept;
        char      m_szDept[3+1];
        bool      m_bBatch;
        char      m_szBatch[5+1];
        bool      m_bTranAmount;
        char      m_szTranAmount[15+1];
        bool      m_bTranCode;
        char      m_szTranCode[2+1];
        bool      m_bDrcrFlag;
        char      m_szDrcrFlag[1+1];
        bool      m_bUserTranCode;
        char      m_szUserTranCode[4+1];
        bool      m_bPrevExtlTranCd;
        char      m_szPrevExtlTranCd[8+1];
        bool      m_bCurExtlTranCd;
        char      m_szCurExtlTranCd[8+1];
        bool      m_bNxtExtlTranCd;
        char      m_szNxtExtlTranCd[8+1];
        bool      m_bSimulatedTranCd;
        char      m_szSimulatedTranCd[8+1];
        bool      m_bSmProcCd;
        char      m_szSmProcCd[1+1];
        bool      m_bAddedDt;
        char      m_szAddedDt[8+1];
        bool      m_bCurrDec;
        char      m_szCurrDec[1+1];
        bool      m_bReturnToAlphaFlag;
        char      m_szReturnToAlphaFlag[1+1];
        bool      m_bPrevMaintDt;
        char      m_szPrevMaintDt[8+1];
        bool      m_bPrevMaintTime;
        char      m_szPrevMaintTime[6+1];
        bool      m_bPrevMaintEmpCtl1;
        char      m_szPrevMaintEmpCtl1[2+1];
        bool      m_bPrevMaintEmpCtl2;
        char      m_szPrevMaintEmpCtl2[3+1];
        bool      m_bPrevMaintEmpId;
        char      m_szPrevMaintEmpId[8+1];
        bool      m_bLstLogTrmId;
        char      m_szLstLogTrmId[8+1];
        bool      m_bPrevMenuAcctKey;
        char      m_szPrevMenuAcctKey[25+1];
        bool      m_bPrevMenuTranId;
        char      m_szPrevMenuTranId[8+1];
        bool      m_bPrevMenuBeginKey;
        char      m_szPrevMenuBeginKey[100+1];
        bool      m_bPrevMenuEndKey;
        char      m_szPrevMenuEndKey[100+1];
        bool      m_bPrevMenuSelKey;
        char      m_szPrevMenuSelKey[100+1];
        bool      m_bPassModelDistBal;
        char      m_szPassModelDistBal[15+1];
    
      public:
        long      m_lIndex;

        AsdSDSTCMMI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bZ2ndTimeThru = false;
            strcpy(m_szZ2ndTimeThru, "");
            m_bStmastPtr = false;
            strcpy(m_szStmastPtr, "0000");
            m_bStmCtl1 = false;
            strcpy(m_szStmCtl1, "");
            m_bStmCtl2 = false;
            strcpy(m_szStmCtl2, "");
            m_bStmCtl3 = false;
            strcpy(m_szStmCtl3, "");
            m_bStmCtl4 = false;
            strcpy(m_szStmCtl4, "");
            m_bStmAcctNo = false;
            strcpy(m_szStmAcctNo, "");
            m_bCtl1 = false;
            strcpy(m_szCtl1, "00");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "000");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "000");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "000");
            m_bPkPlanId = false;
            strcpy(m_szPkPlanId, "");
            m_bPkSeqNbr = false;
            strcpy(m_szPkSeqNbr, "");
            m_bPkEmployeeId = false;
            strcpy(m_szPkEmployeeId, "");
            m_bDept = false;
            strcpy(m_szDept, "000");
            m_bBatch = false;
            strcpy(m_szBatch, "00000");
            m_bTranAmount = false;
            strcpy(m_szTranAmount, "000000000000000");
            m_bTranCode = false;
            strcpy(m_szTranCode, "");
            m_bDrcrFlag = false;
            strcpy(m_szDrcrFlag, "");
            m_bUserTranCode = false;
            strcpy(m_szUserTranCode, "0000");
            m_bPrevExtlTranCd = false;
            strcpy(m_szPrevExtlTranCd, "");
            m_bCurExtlTranCd = false;
            strcpy(m_szCurExtlTranCd, "");
            m_bNxtExtlTranCd = false;
            strcpy(m_szNxtExtlTranCd, "");
            m_bSimulatedTranCd = false;
            strcpy(m_szSimulatedTranCd, "0");
            m_bSmProcCd = false;
            strcpy(m_szSmProcCd, "");
            m_bAddedDt = false;
            strcpy(m_szAddedDt, "");
            m_bCurrDec = false;
            strcpy(m_szCurrDec, "");
            m_bReturnToAlphaFlag = false;
            strcpy(m_szReturnToAlphaFlag, "");
            m_bPrevMaintDt = false;
            strcpy(m_szPrevMaintDt, "");
            m_bPrevMaintTime = false;
            strcpy(m_szPrevMaintTime, "");
            m_bPrevMaintEmpCtl1 = false;
            strcpy(m_szPrevMaintEmpCtl1, "");
            m_bPrevMaintEmpCtl2 = false;
            strcpy(m_szPrevMaintEmpCtl2, "");
            m_bPrevMaintEmpId = false;
            strcpy(m_szPrevMaintEmpId, "");
            m_bLstLogTrmId = false;
            strcpy(m_szLstLogTrmId, "");
            m_bPrevMenuAcctKey = false;
            strcpy(m_szPrevMenuAcctKey, "");
            m_bPrevMenuTranId = false;
            strcpy(m_szPrevMenuTranId, "");
            m_bPrevMenuBeginKey = false;
            strcpy(m_szPrevMenuBeginKey, "");
            m_bPrevMenuEndKey = false;
            strcpy(m_szPrevMenuEndKey, "");
            m_bPrevMenuSelKey = false;
            strcpy(m_szPrevMenuSelKey, "");
            m_bPassModelDistBal = false;
            strcpy(m_szPassModelDistBal, "000000000000000");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bZ2ndTimeThru = false;
            strcpy(m_szZ2ndTimeThru, "");
            m_bStmastPtr = false;
            strcpy(m_szStmastPtr, "0000");
            m_bStmCtl1 = false;
            strcpy(m_szStmCtl1, "");
            m_bStmCtl2 = false;
            strcpy(m_szStmCtl2, "");
            m_bStmCtl3 = false;
            strcpy(m_szStmCtl3, "");
            m_bStmCtl4 = false;
            strcpy(m_szStmCtl4, "");
            m_bStmAcctNo = false;
            strcpy(m_szStmAcctNo, "");
            m_bCtl1 = false;
            strcpy(m_szCtl1, "00");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "000");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "000");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "000");
            m_bPkPlanId = false;
            strcpy(m_szPkPlanId, "");
            m_bPkSeqNbr = false;
            strcpy(m_szPkSeqNbr, "");
            m_bPkEmployeeId = false;
            strcpy(m_szPkEmployeeId, "");
            m_bDept = false;
            strcpy(m_szDept, "000");
            m_bBatch = false;
            strcpy(m_szBatch, "00000");
            m_bTranAmount = false;
            strcpy(m_szTranAmount, "000000000000000");
            m_bTranCode = false;
            strcpy(m_szTranCode, "");
            m_bDrcrFlag = false;
            strcpy(m_szDrcrFlag, "");
            m_bUserTranCode = false;
            strcpy(m_szUserTranCode, "0000");
            m_bPrevExtlTranCd = false;
            strcpy(m_szPrevExtlTranCd, "");
            m_bCurExtlTranCd = false;
            strcpy(m_szCurExtlTranCd, "");
            m_bNxtExtlTranCd = false;
            strcpy(m_szNxtExtlTranCd, "");
            m_bSimulatedTranCd = false;
            strcpy(m_szSimulatedTranCd, "0");
            m_bSmProcCd = false;
            strcpy(m_szSmProcCd, "");
            m_bAddedDt = false;
            strcpy(m_szAddedDt, "");
            m_bCurrDec = false;
            strcpy(m_szCurrDec, "");
            m_bReturnToAlphaFlag = false;
            strcpy(m_szReturnToAlphaFlag, "");
            m_bPrevMaintDt = false;
            strcpy(m_szPrevMaintDt, "");
            m_bPrevMaintTime = false;
            strcpy(m_szPrevMaintTime, "");
            m_bPrevMaintEmpCtl1 = false;
            strcpy(m_szPrevMaintEmpCtl1, "");
            m_bPrevMaintEmpCtl2 = false;
            strcpy(m_szPrevMaintEmpCtl2, "");
            m_bPrevMaintEmpId = false;
            strcpy(m_szPrevMaintEmpId, "");
            m_bLstLogTrmId = false;
            strcpy(m_szLstLogTrmId, "");
            m_bPrevMenuAcctKey = false;
            strcpy(m_szPrevMenuAcctKey, "");
            m_bPrevMenuTranId = false;
            strcpy(m_szPrevMenuTranId, "");
            m_bPrevMenuBeginKey = false;
            strcpy(m_szPrevMenuBeginKey, "");
            m_bPrevMenuEndKey = false;
            strcpy(m_szPrevMenuEndKey, "");
            m_bPrevMenuSelKey = false;
            strcpy(m_szPrevMenuSelKey, "");
            m_bPassModelDistBal = false;
            strcpy(m_szPassModelDistBal, "000000000000000");
        }

        
        //    SECOND TIME THROUGH INDICATOR
        long lZ2ndTimeThru () { return 1; };
        RWCString Z2ndTimeThru (void)
        {
            return m_szZ2ndTimeThru;
        }
        long Z2ndTimeThru (const RWCString& rwc)
        {
            return SetString(rwc, m_szZ2ndTimeThru, sizeof(m_szZ2ndTimeThru), &m_bZ2ndTimeThru);
        }
        
        //    ST ACCOUNT MASTER RECORD ADDRESS
        long lStmastPtr () { return 4; };
        RWCString StmastPtr (void)
        {
            return m_szStmastPtr;
        }
        long StmastPtr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmastPtr, sizeof(m_szStmastPtr), &m_bStmastPtr);
        }
        
        //    BANK IDENTIFICATION NUMBER
        long lStmCtl1 () { return 2; };
        RWCString StmCtl1 (void)
        {
            return m_szStmCtl1;
        }
        long StmCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCtl1, sizeof(m_szStmCtl1), &m_bStmCtl1);
        }
        
        //    USER DEFINED SECOND LEVEL OF CONTROL
        long lStmCtl2 () { return 3; };
        RWCString StmCtl2 (void)
        {
            return m_szStmCtl2;
        }
        long StmCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCtl2, sizeof(m_szStmCtl2), &m_bStmCtl2);
        }
        
        //    USER DEFINED THIRD LEVEL OF CONTROL
        long lStmCtl3 () { return 3; };
        RWCString StmCtl3 (void)
        {
            return m_szStmCtl3;
        }
        long StmCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCtl3, sizeof(m_szStmCtl3), &m_bStmCtl3);
        }
        
        //    USER DEFINED FOURTH LEVEL OF CONTROL
        long lStmCtl4 () { return 3; };
        RWCString StmCtl4 (void)
        {
            return m_szStmCtl4;
        }
        long StmCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCtl4, sizeof(m_szStmCtl4), &m_bStmCtl4);
        }
        
        //    ACCOUNT NUMBER
        long lStmAcctNo () { return 14; };
        RWCString StmAcctNo (void)
        {
            return m_szStmAcctNo;
        }
        long StmAcctNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmAcctNo, sizeof(m_szStmAcctNo), &m_bStmAcctNo);
        }
        
        //    CONTROL 1
        long lCtl1 () { return 2; };
        RWCString Ctl1 (void)
        {
            return m_szCtl1;
        }
        long Ctl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl1, sizeof(m_szCtl1), &m_bCtl1);
        }
        
        //    CONTROL 2
        long lCtl2 () { return 3; };
        RWCString Ctl2 (void)
        {
            return m_szCtl2;
        }
        long Ctl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl2, sizeof(m_szCtl2), &m_bCtl2);
        }
        
        //    CONTROL 3
        long lCtl3 () { return 3; };
        RWCString Ctl3 (void)
        {
            return m_szCtl3;
        }
        long Ctl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl3, sizeof(m_szCtl3), &m_bCtl3);
        }
        
        //    CONTROL 4
        long lCtl4 () { return 3; };
        RWCString Ctl4 (void)
        {
            return m_szCtl4;
        }
        long Ctl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl4, sizeof(m_szCtl4), &m_bCtl4);
        }
        
        //    PLAN KEY PLAN ID
        long lPkPlanId () { return 12; };
        RWCString PkPlanId (void)
        {
            return m_szPkPlanId;
        }
        long PkPlanId (const RWCString& rwc)
        {
            return SetString(rwc, m_szPkPlanId, sizeof(m_szPkPlanId), &m_bPkPlanId);
        }
        
        //    PLAN KEY SEQUENCE NUMBER
        long lPkSeqNbr () { return 3; };
        RWCString PkSeqNbr (void)
        {
            return m_szPkSeqNbr;
        }
        long PkSeqNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szPkSeqNbr, sizeof(m_szPkSeqNbr), &m_bPkSeqNbr);
        }
        
        //    PLAN KEY EMPLOYEE ID
        long lPkEmployeeId () { return 12; };
        RWCString PkEmployeeId (void)
        {
            return m_szPkEmployeeId;
        }
        long PkEmployeeId (const RWCString& rwc)
        {
            return SetString(rwc, m_szPkEmployeeId, sizeof(m_szPkEmployeeId), &m_bPkEmployeeId);
        }
        
        //    DEPARTMENT
        long lDept () { return 3; };
        RWCString Dept (void)
        {
            return m_szDept;
        }
        long Dept (const RWCString& rwc)
        {
            return SetString(rwc, m_szDept, sizeof(m_szDept), &m_bDept);
        }
        
        //    BATCH
        long lBatch () { return 5; };
        RWCString Batch (void)
        {
            return m_szBatch;
        }
        long Batch (const RWCString& rwc)
        {
            return SetString(rwc, m_szBatch, sizeof(m_szBatch), &m_bBatch);
        }
        
        //    TRANSACTION AMOUNT
        long lTranAmount () { return 15; };
        RWCString TranAmount (void)
        {
            return m_szTranAmount;
        }
        long TranAmount (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranAmount, sizeof(m_szTranAmount), &m_bTranAmount);
        }
        
        //    TRANSACTION CODE
        long lTranCode () { return 2; };
        RWCString TranCode (void)
        {
            return m_szTranCode;
        }
        long TranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranCode, sizeof(m_szTranCode), &m_bTranCode);
        }
        
        //    TRANSACTION DEBIT/CREDIT FLAG
        long lDrcrFlag () { return 1; };
        RWCString DrcrFlag (void)
        {
            return m_szDrcrFlag;
        }
        long DrcrFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrcrFlag, sizeof(m_szDrcrFlag), &m_bDrcrFlag);
        }
        
        //    USER TRANSACTION CODE
        long lUserTranCode () { return 4; };
        RWCString UserTranCode (void)
        {
            return m_szUserTranCode;
        }
        long UserTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserTranCode, sizeof(m_szUserTranCode), &m_bUserTranCode);
        }
        
        //    PREVIOUS EXTERNAL TRAN CODE
        long lPrevExtlTranCd () { return 8; };
        RWCString PrevExtlTranCd (void)
        {
            return m_szPrevExtlTranCd;
        }
        long PrevExtlTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevExtlTranCd, sizeof(m_szPrevExtlTranCd), &m_bPrevExtlTranCd);
        }
        
        //    CURRENT EXTERNAL TRANSACTION CODE
        long lCurExtlTranCd () { return 8; };
        RWCString CurExtlTranCd (void)
        {
            return m_szCurExtlTranCd;
        }
        long CurExtlTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCurExtlTranCd, sizeof(m_szCurExtlTranCd), &m_bCurExtlTranCd);
        }
        
        //    NEXT EXTERNAL TRAN CODE
        long lNxtExtlTranCd () { return 8; };
        RWCString NxtExtlTranCd (void)
        {
            return m_szNxtExtlTranCd;
        }
        long NxtExtlTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szNxtExtlTranCd, sizeof(m_szNxtExtlTranCd), &m_bNxtExtlTranCd);
        }
        
        //    SIMULATED TRAN CODE
        long lSimulatedTranCd () { return 8; };
        RWCString SimulatedTranCd (void)
        {
            return m_szSimulatedTranCd;
        }
        long SimulatedTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSimulatedTranCd, sizeof(m_szSimulatedTranCd), &m_bSimulatedTranCd);
        }
        
        //    PROCESS CODE FOR SM (CUSTOMER SERVICE)
        long lSmProcCd () { return 1; };
        RWCString SmProcCd (void)
        {
            return m_szSmProcCd;
        }
        long SmProcCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSmProcCd, sizeof(m_szSmProcCd), &m_bSmProcCd);
        }
        
        //    DATE THE ACCOUNT WAS ADDED TO THE FILE
        long lAddedDt () { return 8; };
        RWCString AddedDt (void)
        {
            return m_szAddedDt;
        }
        long AddedDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddedDt, sizeof(m_szAddedDt), &m_bAddedDt);
        }
        
        //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY
        long lCurrDec () { return 1; };
        RWCString CurrDec (void)
        {
            return m_szCurrDec;
        }
        long CurrDec (const RWCString& rwc)
        {
            return SetString(rwc, m_szCurrDec, sizeof(m_szCurrDec), &m_bCurrDec);
        }
        
        //    TS NCA ALPHA FLAG
        long lReturnToAlphaFlag () { return 1; };
        RWCString ReturnToAlphaFlag (void)
        {
            return m_szReturnToAlphaFlag;
        }
        long ReturnToAlphaFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szReturnToAlphaFlag, sizeof(m_szReturnToAlphaFlag), &m_bReturnToAlphaFlag);
        }
        
        //    DATE PREVIOUS LAST UPDATE
        long lPrevMaintDt () { return 8; };
        RWCString PrevMaintDt (void)
        {
            return m_szPrevMaintDt;
        }
        long PrevMaintDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintDt, sizeof(m_szPrevMaintDt), &m_bPrevMaintDt);
        }
        
        //    TIME OF PREVIOUS LAST MAINT
        long lPrevMaintTime () { return 6; };
        RWCString PrevMaintTime (void)
        {
            return m_szPrevMaintTime;
        }
        long PrevMaintTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintTime, sizeof(m_szPrevMaintTime), &m_bPrevMaintTime);
        }
        
        //    PREVIOUS LAST MAINTENANCE EMPLOYEE CONTROL 1
        long lPrevMaintEmpCtl1 () { return 2; };
        RWCString PrevMaintEmpCtl1 (void)
        {
            return m_szPrevMaintEmpCtl1;
        }
        long PrevMaintEmpCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintEmpCtl1, sizeof(m_szPrevMaintEmpCtl1), &m_bPrevMaintEmpCtl1);
        }
        
        //    PREVIOUS LAST MAINTENANCE EMPLOYEE CONTROL 2
        long lPrevMaintEmpCtl2 () { return 3; };
        RWCString PrevMaintEmpCtl2 (void)
        {
            return m_szPrevMaintEmpCtl2;
        }
        long PrevMaintEmpCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintEmpCtl2, sizeof(m_szPrevMaintEmpCtl2), &m_bPrevMaintEmpCtl2);
        }
        
        //    PREVIOUS LAST MAINTENANCE EMPLOYEE IDENTIFICATION
        long lPrevMaintEmpId () { return 8; };
        RWCString PrevMaintEmpId (void)
        {
            return m_szPrevMaintEmpId;
        }
        long PrevMaintEmpId (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMaintEmpId, sizeof(m_szPrevMaintEmpId), &m_bPrevMaintEmpId);
        }
        
        //    TERMINAL ID OF WHERE THE LAST UPDATE OCCURRED
        long lLstLogTrmId () { return 8; };
        RWCString LstLogTrmId (void)
        {
            return m_szLstLogTrmId;
        }
        long LstLogTrmId (const RWCString& rwc)
        {
            return SetString(rwc, m_szLstLogTrmId, sizeof(m_szLstLogTrmId), &m_bLstLogTrmId);
        }
        
        //    ACCOUNT KEY FOR PREVIOUS MENU
        long lPrevMenuAcctKey () { return 25; };
        RWCString PrevMenuAcctKey (void)
        {
            return m_szPrevMenuAcctKey;
        }
        long PrevMenuAcctKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuAcctKey, sizeof(m_szPrevMenuAcctKey), &m_bPrevMenuAcctKey);
        }
        
        //    PREVIOUS MENU TRANSACTION ID
        long lPrevMenuTranId () { return 8; };
        RWCString PrevMenuTranId (void)
        {
            return m_szPrevMenuTranId;
        }
        long PrevMenuTranId (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuTranId, sizeof(m_szPrevMenuTranId), &m_bPrevMenuTranId);
        }
        
        //    PREVIOUS MENU BEGINNING KEY
        long lPrevMenuBeginKey () { return 100; };
        RWCString PrevMenuBeginKey (void)
        {
            return m_szPrevMenuBeginKey;
        }
        long PrevMenuBeginKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuBeginKey, sizeof(m_szPrevMenuBeginKey), &m_bPrevMenuBeginKey);
        }
        
        //    PREVIOUS MENU ENDING KEY
        long lPrevMenuEndKey () { return 100; };
        RWCString PrevMenuEndKey (void)
        {
            return m_szPrevMenuEndKey;
        }
        long PrevMenuEndKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuEndKey, sizeof(m_szPrevMenuEndKey), &m_bPrevMenuEndKey);
        }
        
        //    PREVIOUS MENU KEY OF ENTRY SELECTED
        long lPrevMenuSelKey () { return 100; };
        RWCString PrevMenuSelKey (void)
        {
            return m_szPrevMenuSelKey;
        }
        long PrevMenuSelKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrevMenuSelKey, sizeof(m_szPrevMenuSelKey), &m_bPrevMenuSelKey);
        }
        
        //    COMM AREA PASS DATA AREA - PLAN MODEL DIST BAL
        long lPassModelDistBal () { return 15; };
        RWCString PassModelDistBal (void)
        {
            return m_szPassModelDistBal;
        }
        long PassModelDistBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szPassModelDistBal, sizeof(m_szPassModelDistBal), &m_bPassModelDistBal);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bZ2ndTimeThru) return true;
            if (m_bStmastPtr) return true;
            if (m_bStmCtl1) return true;
            if (m_bStmCtl2) return true;
            if (m_bStmCtl3) return true;
            if (m_bStmCtl4) return true;
            if (m_bStmAcctNo) return true;
            if (m_bCtl1) return true;
            if (m_bCtl2) return true;
            if (m_bCtl3) return true;
            if (m_bCtl4) return true;
            if (m_bPkPlanId) return true;
            if (m_bPkSeqNbr) return true;
            if (m_bPkEmployeeId) return true;
            if (m_bDept) return true;
            if (m_bBatch) return true;
            if (m_bTranAmount) return true;
            if (m_bTranCode) return true;
            if (m_bDrcrFlag) return true;
            if (m_bUserTranCode) return true;
            if (m_bPrevExtlTranCd) return true;
            if (m_bCurExtlTranCd) return true;
            if (m_bNxtExtlTranCd) return true;
            if (m_bSimulatedTranCd) return true;
            if (m_bSmProcCd) return true;
            if (m_bAddedDt) return true;
            if (m_bCurrDec) return true;
            if (m_bReturnToAlphaFlag) return true;
            if (m_bPrevMaintDt) return true;
            if (m_bPrevMaintTime) return true;
            if (m_bPrevMaintEmpCtl1) return true;
            if (m_bPrevMaintEmpCtl2) return true;
            if (m_bPrevMaintEmpId) return true;
            if (m_bLstLogTrmId) return true;
            if (m_bPrevMenuAcctKey) return true;
            if (m_bPrevMenuTranId) return true;
            if (m_bPrevMenuBeginKey) return true;
            if (m_bPrevMenuEndKey) return true;
            if (m_bPrevMenuSelKey) return true;
            if (m_bPassModelDistBal) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDSTCMMI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "Z2ndTimeThru", m_szZ2ndTimeThru, &m_bZ2ndTimeThru);
                AddXMLField(pSess, "StmastPtr", m_szStmastPtr, &m_bStmastPtr);
                AddXMLField(pSess, "StmCtl1", m_szStmCtl1, &m_bStmCtl1);
                AddXMLField(pSess, "StmCtl2", m_szStmCtl2, &m_bStmCtl2);
                AddXMLField(pSess, "StmCtl3", m_szStmCtl3, &m_bStmCtl3);
                AddXMLField(pSess, "StmCtl4", m_szStmCtl4, &m_bStmCtl4);
                AddXMLField(pSess, "StmAcctNo", m_szStmAcctNo, &m_bStmAcctNo);
                AddXMLField(pSess, "Ctl1", m_szCtl1, &m_bCtl1);
                AddXMLField(pSess, "Ctl2", m_szCtl2, &m_bCtl2);
                AddXMLField(pSess, "Ctl3", m_szCtl3, &m_bCtl3);
                AddXMLField(pSess, "Ctl4", m_szCtl4, &m_bCtl4);
                AddXMLField(pSess, "PkPlanId", m_szPkPlanId, &m_bPkPlanId);
                AddXMLField(pSess, "PkSeqNbr", m_szPkSeqNbr, &m_bPkSeqNbr);
                AddXMLField(pSess, "PkEmployeeId", m_szPkEmployeeId, &m_bPkEmployeeId);
                AddXMLField(pSess, "Dept", m_szDept, &m_bDept);
                AddXMLField(pSess, "Batch", m_szBatch, &m_bBatch);
                AddXMLField(pSess, "TranAmount", m_szTranAmount, &m_bTranAmount);
                AddXMLField(pSess, "TranCode", m_szTranCode, &m_bTranCode);
                AddXMLField(pSess, "DrcrFlag", m_szDrcrFlag, &m_bDrcrFlag);
                AddXMLField(pSess, "UserTranCode", m_szUserTranCode, &m_bUserTranCode);
                AddXMLField(pSess, "PrevExtlTranCd", m_szPrevExtlTranCd, &m_bPrevExtlTranCd);
                AddXMLField(pSess, "CurExtlTranCd", m_szCurExtlTranCd, &m_bCurExtlTranCd);
                AddXMLField(pSess, "NxtExtlTranCd", m_szNxtExtlTranCd, &m_bNxtExtlTranCd);
                AddXMLField(pSess, "SimulatedTranCd", m_szSimulatedTranCd, &m_bSimulatedTranCd);
                AddXMLField(pSess, "SmProcCd", m_szSmProcCd, &m_bSmProcCd);
                AddXMLField(pSess, "AddedDt", m_szAddedDt, &m_bAddedDt);
                AddXMLField(pSess, "CurrDec", m_szCurrDec, &m_bCurrDec);
                AddXMLField(pSess, "ReturnToAlphaFlag", m_szReturnToAlphaFlag, &m_bReturnToAlphaFlag);
                AddXMLField(pSess, "PrevMaintDt", m_szPrevMaintDt, &m_bPrevMaintDt);
                AddXMLField(pSess, "PrevMaintTime", m_szPrevMaintTime, &m_bPrevMaintTime);
                AddXMLField(pSess, "PrevMaintEmpCtl1", m_szPrevMaintEmpCtl1, &m_bPrevMaintEmpCtl1);
                AddXMLField(pSess, "PrevMaintEmpCtl2", m_szPrevMaintEmpCtl2, &m_bPrevMaintEmpCtl2);
                AddXMLField(pSess, "PrevMaintEmpId", m_szPrevMaintEmpId, &m_bPrevMaintEmpId);
                AddXMLField(pSess, "LstLogTrmId", m_szLstLogTrmId, &m_bLstLogTrmId);
                AddXMLField(pSess, "PrevMenuAcctKey", m_szPrevMenuAcctKey, &m_bPrevMenuAcctKey);
                AddXMLField(pSess, "PrevMenuTranId", m_szPrevMenuTranId, &m_bPrevMenuTranId);
                AddXMLField(pSess, "PrevMenuBeginKey", m_szPrevMenuBeginKey, &m_bPrevMenuBeginKey);
                AddXMLField(pSess, "PrevMenuEndKey", m_szPrevMenuEndKey, &m_bPrevMenuEndKey);
                AddXMLField(pSess, "PrevMenuSelKey", m_szPrevMenuSelKey, &m_bPrevMenuSelKey);
                AddXMLField(pSess, "PassModelDistBal", m_szPassModelDistBal, &m_bPassModelDistBal);
                AddXMLCloseRecord(pSess, "SDSTCMMI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDSTCMMI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "Z2ndTimeThru", m_szZ2ndTimeThru);
                GetXMLField(pSess, "StmastPtr", m_szStmastPtr);
                GetXMLField(pSess, "StmCtl1", m_szStmCtl1);
                GetXMLField(pSess, "StmCtl2", m_szStmCtl2);
                GetXMLField(pSess, "StmCtl3", m_szStmCtl3);
                GetXMLField(pSess, "StmCtl4", m_szStmCtl4);
                GetXMLField(pSess, "StmAcctNo", m_szStmAcctNo);
                GetXMLField(pSess, "Ctl1", m_szCtl1);
                GetXMLField(pSess, "Ctl2", m_szCtl2);
                GetXMLField(pSess, "Ctl3", m_szCtl3);
                GetXMLField(pSess, "Ctl4", m_szCtl4);
                GetXMLField(pSess, "PkPlanId", m_szPkPlanId);
                GetXMLField(pSess, "PkSeqNbr", m_szPkSeqNbr);
                GetXMLField(pSess, "PkEmployeeId", m_szPkEmployeeId);
                GetXMLField(pSess, "Dept", m_szDept);
                GetXMLField(pSess, "Batch", m_szBatch);
                GetXMLField(pSess, "TranAmount", m_szTranAmount);
                GetXMLField(pSess, "TranCode", m_szTranCode);
                GetXMLField(pSess, "DrcrFlag", m_szDrcrFlag);
                GetXMLField(pSess, "UserTranCode", m_szUserTranCode);
                GetXMLField(pSess, "PrevExtlTranCd", m_szPrevExtlTranCd);
                GetXMLField(pSess, "CurExtlTranCd", m_szCurExtlTranCd);
                GetXMLField(pSess, "NxtExtlTranCd", m_szNxtExtlTranCd);
                GetXMLField(pSess, "SimulatedTranCd", m_szSimulatedTranCd);
                GetXMLField(pSess, "SmProcCd", m_szSmProcCd);
                GetXMLField(pSess, "AddedDt", m_szAddedDt);
                GetXMLField(pSess, "CurrDec", m_szCurrDec);
                GetXMLField(pSess, "ReturnToAlphaFlag", m_szReturnToAlphaFlag);
                GetXMLField(pSess, "PrevMaintDt", m_szPrevMaintDt);
                GetXMLField(pSess, "PrevMaintTime", m_szPrevMaintTime);
                GetXMLField(pSess, "PrevMaintEmpCtl1", m_szPrevMaintEmpCtl1);
                GetXMLField(pSess, "PrevMaintEmpCtl2", m_szPrevMaintEmpCtl2);
                GetXMLField(pSess, "PrevMaintEmpId", m_szPrevMaintEmpId);
                GetXMLField(pSess, "LstLogTrmId", m_szLstLogTrmId);
                GetXMLField(pSess, "PrevMenuAcctKey", m_szPrevMenuAcctKey);
                GetXMLField(pSess, "PrevMenuTranId", m_szPrevMenuTranId);
                GetXMLField(pSess, "PrevMenuBeginKey", m_szPrevMenuBeginKey);
                GetXMLField(pSess, "PrevMenuEndKey", m_szPrevMenuEndKey);
                GetXMLField(pSess, "PrevMenuSelKey", m_szPrevMenuSelKey);
                GetXMLField(pSess, "PassModelDistBal", m_szPassModelDistBal);
                CloseXMLRecord(pSess, "SDSTCMMI");
            };
        }
    };

    AsdSDSTCMMI CSDSTCMMI;
    AsdSDSTCMMI *SDSTCMMI;
    
    //**************** End AsdSDSTCMMI Definition ****************

    
    //**************** Start AsdSDST01MI Definition ****************
    //                 SERVICE DELIVERY ST NEW ACCOUNT INPUT                       
    
    //    SDST01MI.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 05/13/03 11:44:15
    class AsdSDST01MI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bStAcctType;
        char      m_szStAcctType[3+1];
        bool      m_bStAcctCategory;
        char      m_szStAcctCategory[1+1];
        bool      m_bStIntDistSchedCd;
        char      m_szStIntDistSchedCd[1+1];
        bool      m_bIntDistCyc;
        char      m_szIntDistCyc[2+1];
        bool      m_bStIntDistIncr;
        char      m_szStIntDistIncr[4+1];
        bool      m_bIntDistDayOfMnth;
        char      m_szIntDistDayOfMnth[2+1];
        bool      m_bStIntDistCd;
        char      m_szStIntDistCd[1+1];
        bool      m_bStNaTrlrCountry;
        char      m_szStNaTrlrCountry[2+1];
        bool      m_bNaTrlrType1;
        char      m_szNaTrlrType1[1+1];
        bool      m_bNaTrlrLine1;
        char      m_szNaTrlrLine1[40+1];
        bool      m_bNaTrlrSsNameCd1;
        char      m_szNaTrlrSsNameCd1[1+1];
        bool      m_bNaTrlrType2;
        char      m_szNaTrlrType2[1+1];
        bool      m_bNaTrlrLine2;
        char      m_szNaTrlrLine2[40+1];
        bool      m_bNaTrlrSsNameCd2;
        char      m_szNaTrlrSsNameCd2[1+1];
        bool      m_bNaTrlrType3;
        char      m_szNaTrlrType3[1+1];
        bool      m_bNaTrlrLine3;
        char      m_szNaTrlrLine3[40+1];
        bool      m_bNaTrlrSsNameCd3;
        char      m_szNaTrlrSsNameCd3[1+1];
        bool      m_bNaTrlrType4;
        char      m_szNaTrlrType4[1+1];
        bool      m_bNaTrlrLine4;
        char      m_szNaTrlrLine4[40+1];
        bool      m_bNaTrlrSsNameCd4;
        char      m_szNaTrlrSsNameCd4[1+1];
        bool      m_bNaTrlrType5;
        char      m_szNaTrlrType5[1+1];
        bool      m_bNaTrlrLine5;
        char      m_szNaTrlrLine5[40+1];
        bool      m_bCityStateCode;
        char      m_szCityStateCode[3+1];
        bool      m_bCityState;
        char      m_szCityState[30+1];
        bool      m_bStZipCodeFixed5;
        char      m_szStZipCodeFixed5[5+1];
        bool      m_bStZipCodeDash;
        char      m_szStZipCodeDash[1+1];
        bool      m_bStZipCodeLast4;
        char      m_szStZipCodeLast4[4+1];
        bool      m_bFrgnAddrInd;
        char      m_szFrgnAddrInd[1+1];
        bool      m_bNaTrlrSpecInstr;
        char      m_szNaTrlrSpecInstr[1+1];
        bool      m_bSpecInstNaLine8;
        char      m_szSpecInstNaLine8[40+1];
        bool      m_bStShortName;
        char      m_szStShortName[13+1];
        bool      m_bBirthDate;
        char      m_szBirthDate[8+1];
        bool      m_bCustomerNumber;
        char      m_szCustomerNumber[12+1];
        bool      m_bFtiName;
        char      m_szFtiName[40+1];
        bool      m_bStFtiCode;
        char      m_szStFtiCode[1+1];
        bool      m_bStFtiSsn;
        char      m_szStFtiSsn[9+1];
        bool      m_bStTinCert;
        char      m_szStTinCert[1+1];
        bool      m_bStBkupWthldFlag;
        char      m_szStBkupWthldFlag[1+1];
        bool      m_bStTaxReason;
        char      m_szStTaxReason[1+1];
        bool      m_bNraCertName1;
        char      m_szNraCertName1[1+1];
        bool      m_bNraCertName2;
        char      m_szNraCertName2[1+1];
        bool      m_bTaxCountry;
        char      m_szTaxCountry[2+1];
        bool      m_bProvinceCd;
        char      m_szProvinceCd[2+1];
        bool      m_bTisConsumerFlag;
        char      m_szTisConsumerFlag[1+1];
        bool      m_bStHpnAreaCode;
        char      m_szStHpnAreaCode[3+1];
        bool      m_bStHomePhone;
        char      m_szStHomePhone[7+1];
        bool      m_bStHomeExtension;
        char      m_szStHomeExtension[4+1];
        bool      m_bStOpnAreaCode;
        char      m_szStOpnAreaCode[3+1];
        bool      m_bStOfficePhone;
        char      m_szStOfficePhone[7+1];
        bool      m_bStOfficeExtension;
        char      m_szStOfficeExtension[4+1];
        bool      m_bStIraTrPkRetPlanId;
        char      m_szStIraTrPkRetPlanId[12+1];
        bool      m_bStIraTrPkIrsSeqNo;
        char      m_szStIraTrPkIrsSeqNo[3+1];
        bool      m_bStIraTrPkEmpPlanId;
        char      m_szStIraTrPkEmpPlanId[12+1];
        bool      m_bStTrlrCtlIraFlg;
        char      m_szStTrlrCtlIraFlg[1+1];
        bool      m_bStIraTrlrPrimaryInd;
        char      m_szStIraTrlrPrimaryInd[1+1];
        bool      m_bStIraTrlrType;
        char      m_szStIraTrlrType[2+1];
        bool      m_bIraTrlrSubtype;
        char      m_szIraTrlrSubtype[3+1];
        bool      m_bIraTrlrEmprId;
        char      m_szIraTrlrEmprId[12+1];
        bool      m_bIraTrlrBenePct;
        char      m_szIraTrlrBenePct[7+1];
        bool      m_bStSystemType;
        char      m_szStSystemType[3+1];
        bool      m_bStBranch;
        char      m_szStBranch[3+1];
        bool      m_bStOfficer;
        char      m_szStOfficer[5+1];
        bool      m_bStRegion;
        char      m_szStRegion[3+1];
        bool      m_bStmOffEmp;
        char      m_szStmOffEmp[1+1];
        bool      m_bAoiOpeningDate;
        char      m_szAoiOpeningDate[8+1];
        bool      m_bAoiSourceFunds;
        char      m_szAoiSourceFunds[2+1];
        bool      m_bStandardBaseRate;
        char      m_szStandardBaseRate[9+1];
        bool      m_bStMntPeriod;
        char      m_szStMntPeriod[1+1];
        bool      m_bStMntIncr;
        char      m_szStMntIncr[4+1];
        bool      m_bMatDateNextMat;
        char      m_szMatDateNextMat[8+1];
        bool      m_bStMatAutoRenew;
        char      m_szStMatAutoRenew[1+1];
        bool      m_bStStmtTrlrMailFlag;
        char      m_szStStmtTrlrMailFlag[1+1];
        bool      m_bAf01SystemId;
        char      m_szAf01SystemId[2+1];
        bool      m_bAf01AcctControl;
        char      m_szAf01AcctControl[31+1];
        bool      m_bAf03SystemId;
        char      m_szAf03SystemId[2+1];
        bool      m_bAf03AcctControl;
        char      m_szAf03AcctControl[31+1];
        bool      m_bAf04SystemId;
        char      m_szAf04SystemId[2+1];
        bool      m_bAf04AcctControl;
        char      m_szAf04AcctControl[31+1];
        bool      m_bAf07SystemId;
        char      m_szAf07SystemId[2+1];
        bool      m_bAf07AcctControl;
        char      m_szAf07AcctControl[31+1];
        bool      m_bStTrlrCtlServChrgFlg;
        char      m_szStTrlrCtlServChrgFlg[1+1];
        bool      m_bStGovernmentId;
        char      m_szStGovernmentId[25+1];
    
      public:
        long      m_lIndex;

        AsdSDST01MI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bStAcctType = false;
            strcpy(m_szStAcctType, "");
            m_bStAcctCategory = false;
            strcpy(m_szStAcctCategory, "");
            m_bStIntDistSchedCd = false;
            strcpy(m_szStIntDistSchedCd, "");
            m_bIntDistCyc = false;
            strcpy(m_szIntDistCyc, "00");
            m_bStIntDistIncr = false;
            strcpy(m_szStIntDistIncr, "+000");
            m_bIntDistDayOfMnth = false;
            strcpy(m_szIntDistDayOfMnth, "");
            m_bStIntDistCd = false;
            strcpy(m_szStIntDistCd, "");
            m_bStNaTrlrCountry = false;
            strcpy(m_szStNaTrlrCountry, "");
            m_bNaTrlrType1 = false;
            strcpy(m_szNaTrlrType1, "");
            m_bNaTrlrLine1 = false;
            strcpy(m_szNaTrlrLine1, "");
            m_bNaTrlrSsNameCd1 = false;
            strcpy(m_szNaTrlrSsNameCd1, "");
            m_bNaTrlrType2 = false;
            strcpy(m_szNaTrlrType2, "");
            m_bNaTrlrLine2 = false;
            strcpy(m_szNaTrlrLine2, "");
            m_bNaTrlrSsNameCd2 = false;
            strcpy(m_szNaTrlrSsNameCd2, "");
            m_bNaTrlrType3 = false;
            strcpy(m_szNaTrlrType3, "");
            m_bNaTrlrLine3 = false;
            strcpy(m_szNaTrlrLine3, "");
            m_bNaTrlrSsNameCd3 = false;
            strcpy(m_szNaTrlrSsNameCd3, "");
            m_bNaTrlrType4 = false;
            strcpy(m_szNaTrlrType4, "");
            m_bNaTrlrLine4 = false;
            strcpy(m_szNaTrlrLine4, "");
            m_bNaTrlrSsNameCd4 = false;
            strcpy(m_szNaTrlrSsNameCd4, "");
            m_bNaTrlrType5 = false;
            strcpy(m_szNaTrlrType5, "");
            m_bNaTrlrLine5 = false;
            strcpy(m_szNaTrlrLine5, "");
            m_bCityStateCode = false;
            strcpy(m_szCityStateCode, "");
            m_bCityState = false;
            strcpy(m_szCityState, "");
            m_bStZipCodeFixed5 = false;
            strcpy(m_szStZipCodeFixed5, "");
            m_bStZipCodeDash = false;
            strcpy(m_szStZipCodeDash, "");
            m_bStZipCodeLast4 = false;
            strcpy(m_szStZipCodeLast4, "");
            m_bFrgnAddrInd = false;
            strcpy(m_szFrgnAddrInd, "");
            m_bNaTrlrSpecInstr = false;
            strcpy(m_szNaTrlrSpecInstr, "");
            m_bSpecInstNaLine8 = false;
            strcpy(m_szSpecInstNaLine8, "");
            m_bStShortName = false;
            strcpy(m_szStShortName, "");
            m_bBirthDate = false;
            strcpy(m_szBirthDate, "");
            m_bCustomerNumber = false;
            strcpy(m_szCustomerNumber, "");
            m_bFtiName = false;
            strcpy(m_szFtiName, "");
            m_bStFtiCode = false;
            strcpy(m_szStFtiCode, "");
            m_bStFtiSsn = false;
            strcpy(m_szStFtiSsn, "000000000");
            m_bStTinCert = false;
            strcpy(m_szStTinCert, "");
            m_bStBkupWthldFlag = false;
            strcpy(m_szStBkupWthldFlag, "");
            m_bStTaxReason = false;
            strcpy(m_szStTaxReason, "");
            m_bNraCertName1 = false;
            strcpy(m_szNraCertName1, "");
            m_bNraCertName2 = false;
            strcpy(m_szNraCertName2, "");
            m_bTaxCountry = false;
            strcpy(m_szTaxCountry, "");
            m_bProvinceCd = false;
            strcpy(m_szProvinceCd, "");
            m_bTisConsumerFlag = false;
            strcpy(m_szTisConsumerFlag, "");
            m_bStHpnAreaCode = false;
            strcpy(m_szStHpnAreaCode, "");
            m_bStHomePhone = false;
            strcpy(m_szStHomePhone, "0000000");
            m_bStHomeExtension = false;
            strcpy(m_szStHomeExtension, "0000");
            m_bStOpnAreaCode = false;
            strcpy(m_szStOpnAreaCode, "");
            m_bStOfficePhone = false;
            strcpy(m_szStOfficePhone, "");
            m_bStOfficeExtension = false;
            strcpy(m_szStOfficeExtension, "0000");
            m_bStIraTrPkRetPlanId = false;
            strcpy(m_szStIraTrPkRetPlanId, "");
            m_bStIraTrPkIrsSeqNo = false;
            strcpy(m_szStIraTrPkIrsSeqNo, "");
            m_bStIraTrPkEmpPlanId = false;
            strcpy(m_szStIraTrPkEmpPlanId, "");
            m_bStTrlrCtlIraFlg = false;
            strcpy(m_szStTrlrCtlIraFlg, "");
            m_bStIraTrlrPrimaryInd = false;
            strcpy(m_szStIraTrlrPrimaryInd, "");
            m_bStIraTrlrType = false;
            strcpy(m_szStIraTrlrType, "");
            m_bIraTrlrSubtype = false;
            strcpy(m_szIraTrlrSubtype, "");
            m_bIraTrlrEmprId = false;
            strcpy(m_szIraTrlrEmprId, "");
            m_bIraTrlrBenePct = false;
            strcpy(m_szIraTrlrBenePct, "+000.00");
            m_bStSystemType = false;
            strcpy(m_szStSystemType, "");
            m_bStBranch = false;
            strcpy(m_szStBranch, "");
            m_bStOfficer = false;
            strcpy(m_szStOfficer, "");
            m_bStRegion = false;
            strcpy(m_szStRegion, "");
            m_bStmOffEmp = false;
            strcpy(m_szStmOffEmp, "");
            m_bAoiOpeningDate = false;
            strcpy(m_szAoiOpeningDate, "");
            m_bAoiSourceFunds = false;
            strcpy(m_szAoiSourceFunds, "");
            m_bStandardBaseRate = false;
            strcpy(m_szStandardBaseRate, "+.0000000");
            m_bStMntPeriod = false;
            strcpy(m_szStMntPeriod, "");
            m_bStMntIncr = false;
            strcpy(m_szStMntIncr, "+000");
            m_bMatDateNextMat = false;
            strcpy(m_szMatDateNextMat, "");
            m_bStMatAutoRenew = false;
            strcpy(m_szStMatAutoRenew, "");
            m_bStStmtTrlrMailFlag = false;
            strcpy(m_szStStmtTrlrMailFlag, "");
            m_bAf01SystemId = false;
            strcpy(m_szAf01SystemId, "");
            m_bAf01AcctControl = false;
            strcpy(m_szAf01AcctControl, "");
            m_bAf03SystemId = false;
            strcpy(m_szAf03SystemId, "");
            m_bAf03AcctControl = false;
            strcpy(m_szAf03AcctControl, "");
            m_bAf04SystemId = false;
            strcpy(m_szAf04SystemId, "");
            m_bAf04AcctControl = false;
            strcpy(m_szAf04AcctControl, "");
            m_bAf07SystemId = false;
            strcpy(m_szAf07SystemId, "");
            m_bAf07AcctControl = false;
            strcpy(m_szAf07AcctControl, "");
            m_bStTrlrCtlServChrgFlg = false;
            strcpy(m_szStTrlrCtlServChrgFlg, "");
            m_bStGovernmentId = false;
            strcpy(m_szStGovernmentId, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bStAcctType = false;
            strcpy(m_szStAcctType, "");
            m_bStAcctCategory = false;
            strcpy(m_szStAcctCategory, "");
            m_bStIntDistSchedCd = false;
            strcpy(m_szStIntDistSchedCd, "");
            m_bIntDistCyc = false;
            strcpy(m_szIntDistCyc, "00");
            m_bStIntDistIncr = false;
            strcpy(m_szStIntDistIncr, "+000");
            m_bIntDistDayOfMnth = false;
            strcpy(m_szIntDistDayOfMnth, "");
            m_bStIntDistCd = false;
            strcpy(m_szStIntDistCd, "");
            m_bStNaTrlrCountry = false;
            strcpy(m_szStNaTrlrCountry, "");
            m_bNaTrlrType1 = false;
            strcpy(m_szNaTrlrType1, "");
            m_bNaTrlrLine1 = false;
            strcpy(m_szNaTrlrLine1, "");
            m_bNaTrlrSsNameCd1 = false;
            strcpy(m_szNaTrlrSsNameCd1, "");
            m_bNaTrlrType2 = false;
            strcpy(m_szNaTrlrType2, "");
            m_bNaTrlrLine2 = false;
            strcpy(m_szNaTrlrLine2, "");
            m_bNaTrlrSsNameCd2 = false;
            strcpy(m_szNaTrlrSsNameCd2, "");
            m_bNaTrlrType3 = false;
            strcpy(m_szNaTrlrType3, "");
            m_bNaTrlrLine3 = false;
            strcpy(m_szNaTrlrLine3, "");
            m_bNaTrlrSsNameCd3 = false;
            strcpy(m_szNaTrlrSsNameCd3, "");
            m_bNaTrlrType4 = false;
            strcpy(m_szNaTrlrType4, "");
            m_bNaTrlrLine4 = false;
            strcpy(m_szNaTrlrLine4, "");
            m_bNaTrlrSsNameCd4 = false;
            strcpy(m_szNaTrlrSsNameCd4, "");
            m_bNaTrlrType5 = false;
            strcpy(m_szNaTrlrType5, "");
            m_bNaTrlrLine5 = false;
            strcpy(m_szNaTrlrLine5, "");
            m_bCityStateCode = false;
            strcpy(m_szCityStateCode, "");
            m_bCityState = false;
            strcpy(m_szCityState, "");
            m_bStZipCodeFixed5 = false;
            strcpy(m_szStZipCodeFixed5, "");
            m_bStZipCodeDash = false;
            strcpy(m_szStZipCodeDash, "");
            m_bStZipCodeLast4 = false;
            strcpy(m_szStZipCodeLast4, "");
            m_bFrgnAddrInd = false;
            strcpy(m_szFrgnAddrInd, "");
            m_bNaTrlrSpecInstr = false;
            strcpy(m_szNaTrlrSpecInstr, "");
            m_bSpecInstNaLine8 = false;
            strcpy(m_szSpecInstNaLine8, "");
            m_bStShortName = false;
            strcpy(m_szStShortName, "");
            m_bBirthDate = false;
            strcpy(m_szBirthDate, "");
            m_bCustomerNumber = false;
            strcpy(m_szCustomerNumber, "");
            m_bFtiName = false;
            strcpy(m_szFtiName, "");
            m_bStFtiCode = false;
            strcpy(m_szStFtiCode, "");
            m_bStFtiSsn = false;
            strcpy(m_szStFtiSsn, "000000000");
            m_bStTinCert = false;
            strcpy(m_szStTinCert, "");
            m_bStBkupWthldFlag = false;
            strcpy(m_szStBkupWthldFlag, "");
            m_bStTaxReason = false;
            strcpy(m_szStTaxReason, "");
            m_bNraCertName1 = false;
            strcpy(m_szNraCertName1, "");
            m_bNraCertName2 = false;
            strcpy(m_szNraCertName2, "");
            m_bTaxCountry = false;
            strcpy(m_szTaxCountry, "");
            m_bProvinceCd = false;
            strcpy(m_szProvinceCd, "");
            m_bTisConsumerFlag = false;
            strcpy(m_szTisConsumerFlag, "");
            m_bStHpnAreaCode = false;
            strcpy(m_szStHpnAreaCode, "");
            m_bStHomePhone = false;
            strcpy(m_szStHomePhone, "0000000");
            m_bStHomeExtension = false;
            strcpy(m_szStHomeExtension, "0000");
            m_bStOpnAreaCode = false;
            strcpy(m_szStOpnAreaCode, "");
            m_bStOfficePhone = false;
            strcpy(m_szStOfficePhone, "");
            m_bStOfficeExtension = false;
            strcpy(m_szStOfficeExtension, "0000");
            m_bStIraTrPkRetPlanId = false;
            strcpy(m_szStIraTrPkRetPlanId, "");
            m_bStIraTrPkIrsSeqNo = false;
            strcpy(m_szStIraTrPkIrsSeqNo, "");
            m_bStIraTrPkEmpPlanId = false;
            strcpy(m_szStIraTrPkEmpPlanId, "");
            m_bStTrlrCtlIraFlg = false;
            strcpy(m_szStTrlrCtlIraFlg, "");
            m_bStIraTrlrPrimaryInd = false;
            strcpy(m_szStIraTrlrPrimaryInd, "");
            m_bStIraTrlrType = false;
            strcpy(m_szStIraTrlrType, "");
            m_bIraTrlrSubtype = false;
            strcpy(m_szIraTrlrSubtype, "");
            m_bIraTrlrEmprId = false;
            strcpy(m_szIraTrlrEmprId, "");
            m_bIraTrlrBenePct = false;
            strcpy(m_szIraTrlrBenePct, "+000.00");
            m_bStSystemType = false;
            strcpy(m_szStSystemType, "");
            m_bStBranch = false;
            strcpy(m_szStBranch, "");
            m_bStOfficer = false;
            strcpy(m_szStOfficer, "");
            m_bStRegion = false;
            strcpy(m_szStRegion, "");
            m_bStmOffEmp = false;
            strcpy(m_szStmOffEmp, "");
            m_bAoiOpeningDate = false;
            strcpy(m_szAoiOpeningDate, "");
            m_bAoiSourceFunds = false;
            strcpy(m_szAoiSourceFunds, "");
            m_bStandardBaseRate = false;
            strcpy(m_szStandardBaseRate, "+.0000000");
            m_bStMntPeriod = false;
            strcpy(m_szStMntPeriod, "");
            m_bStMntIncr = false;
            strcpy(m_szStMntIncr, "+000");
            m_bMatDateNextMat = false;
            strcpy(m_szMatDateNextMat, "");
            m_bStMatAutoRenew = false;
            strcpy(m_szStMatAutoRenew, "");
            m_bStStmtTrlrMailFlag = false;
            strcpy(m_szStStmtTrlrMailFlag, "");
            m_bAf01SystemId = false;
            strcpy(m_szAf01SystemId, "");
            m_bAf01AcctControl = false;
            strcpy(m_szAf01AcctControl, "");
            m_bAf03SystemId = false;
            strcpy(m_szAf03SystemId, "");
            m_bAf03AcctControl = false;
            strcpy(m_szAf03AcctControl, "");
            m_bAf04SystemId = false;
            strcpy(m_szAf04SystemId, "");
            m_bAf04AcctControl = false;
            strcpy(m_szAf04AcctControl, "");
            m_bAf07SystemId = false;
            strcpy(m_szAf07SystemId, "");
            m_bAf07AcctControl = false;
            strcpy(m_szAf07AcctControl, "");
            m_bStTrlrCtlServChrgFlg = false;
            strcpy(m_szStTrlrCtlServChrgFlg, "");
            m_bStGovernmentId = false;
            strcpy(m_szStGovernmentId, "");
        }

        
        //    USER DEFINED REQUIRED FIELD/IT IS A KEY TO TYPE CONTROL REC
        long lStAcctType () { return 3; };
        RWCString StAcctType (void)
        {
            return m_szStAcctType;
        }
        long StAcctType (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAcctType, sizeof(m_szStAcctType), &m_bStAcctType);
        }
        
        //    REQ NONMAINTENANCEABLE APPL CODE WHICH CORRES TO PROD TYPE
        long lStAcctCategory () { return 1; };
        RWCString StAcctCategory (void)
        {
            return m_szStAcctCategory;
        }
        long StAcctCategory (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAcctCategory, sizeof(m_szStAcctCategory), &m_bStAcctCategory);
        }
        
        //    SCHEDULE CODE FOR INTEREST DISTRIBUTION
        long lStIntDistSchedCd () { return 1; };
        RWCString StIntDistSchedCd (void)
        {
            return m_szStIntDistSchedCd;
        }
        long StIntDistSchedCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntDistSchedCd, sizeof(m_szStIntDistSchedCd), &m_bStIntDistSchedCd);
        }
        
        //    SPECIFIES THE CYCLE/FREQUENCY FOR CORRESPONDING SCHED CODES
        long lIntDistCyc () { return 2; };
        RWCString IntDistCyc (void)
        {
            return m_szIntDistCyc;
        }
        long IntDistCyc (const RWCString& rwc)
        {
            return SetString(rwc, m_szIntDistCyc, sizeof(m_szIntDistCyc), &m_bIntDistCyc);
        }
        
        //    NUMBER OF DAYS OR MONTHS FOR SCHEDULE CODES 3 AND 4
        long lStIntDistIncr () { return 4; };
        RWCString StIntDistIncr (void)
        {
            return AceZeroSupp(m_szStIntDistIncr, &m_szSuppressBuff[0]);
        }
        RWCString StIntDistIncrRaw (void)
        {
            return m_szStIntDistIncr;
        }
        long StIntDistIncr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntDistIncr, sizeof(m_szStIntDistIncr), &m_bStIntDistIncr);
        }
        
        //    DAY OF THE MONTH FOR USE IN SCHEDULE CODES 2 AND 4
        long lIntDistDayOfMnth () { return 2; };
        RWCString IntDistDayOfMnth (void)
        {
            return m_szIntDistDayOfMnth;
        }
        long IntDistDayOfMnth (const RWCString& rwc)
        {
            return SetString(rwc, m_szIntDistDayOfMnth, sizeof(m_szIntDistDayOfMnth), &m_bIntDistDayOfMnth);
        }
        
        //    SPECIFIES HOW INTEREST IS DISTRIBUTED
        long lStIntDistCd () { return 1; };
        RWCString StIntDistCd (void)
        {
            return m_szStIntDistCd;
        }
        long StIntDistCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntDistCd, sizeof(m_szStIntDistCd), &m_bStIntDistCd);
        }
        
        //    NAME/ADDRESS TRAILER COUNTRY CODE
        long lStNaTrlrCountry () { return 2; };
        RWCString StNaTrlrCountry (void)
        {
            return m_szStNaTrlrCountry;
        }
        long StNaTrlrCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szStNaTrlrCountry, sizeof(m_szStNaTrlrCountry), &m_bStNaTrlrCountry);
        }
        
        //    TYPE OF NAME/ADDRESS LINE 1
        long lNaTrlrType1 () { return 1; };
        RWCString NaTrlrType1 (void)
        {
            return m_szNaTrlrType1;
        }
        long NaTrlrType1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrType1, sizeof(m_szNaTrlrType1), &m_bNaTrlrType1);
        }
        
        //    NAME/ADDRESS LINE 1
        long lNaTrlrLine1 () { return 40; };
        RWCString NaTrlrLine1 (void)
        {
            return m_szNaTrlrLine1;
        }
        long NaTrlrLine1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrLine1, sizeof(m_szNaTrlrLine1), &m_bNaTrlrLine1);
        }
        
        //    SOCIAL SECURITY NAME CODE 1
        long lNaTrlrSsNameCd1 () { return 1; };
        RWCString NaTrlrSsNameCd1 (void)
        {
            return m_szNaTrlrSsNameCd1;
        }
        long NaTrlrSsNameCd1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrSsNameCd1, sizeof(m_szNaTrlrSsNameCd1), &m_bNaTrlrSsNameCd1);
        }
        
        //    TYPE OF NAME/ADDRESS LINE 2
        long lNaTrlrType2 () { return 1; };
        RWCString NaTrlrType2 (void)
        {
            return m_szNaTrlrType2;
        }
        long NaTrlrType2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrType2, sizeof(m_szNaTrlrType2), &m_bNaTrlrType2);
        }
        
        //    NAME/ADDRESS LINE 2
        long lNaTrlrLine2 () { return 40; };
        RWCString NaTrlrLine2 (void)
        {
            return m_szNaTrlrLine2;
        }
        long NaTrlrLine2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrLine2, sizeof(m_szNaTrlrLine2), &m_bNaTrlrLine2);
        }
        
        //    SOCIAL SECURITY NAME CODE 2
        long lNaTrlrSsNameCd2 () { return 1; };
        RWCString NaTrlrSsNameCd2 (void)
        {
            return m_szNaTrlrSsNameCd2;
        }
        long NaTrlrSsNameCd2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrSsNameCd2, sizeof(m_szNaTrlrSsNameCd2), &m_bNaTrlrSsNameCd2);
        }
        
        //    TYPE OF NAME/ADDRESS LINE 3
        long lNaTrlrType3 () { return 1; };
        RWCString NaTrlrType3 (void)
        {
            return m_szNaTrlrType3;
        }
        long NaTrlrType3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrType3, sizeof(m_szNaTrlrType3), &m_bNaTrlrType3);
        }
        
        //    NAME/ADDRESS LINE 3
        long lNaTrlrLine3 () { return 40; };
        RWCString NaTrlrLine3 (void)
        {
            return m_szNaTrlrLine3;
        }
        long NaTrlrLine3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrLine3, sizeof(m_szNaTrlrLine3), &m_bNaTrlrLine3);
        }
        
        //    SOCIAL SECURITY NAME CODE 3
        long lNaTrlrSsNameCd3 () { return 1; };
        RWCString NaTrlrSsNameCd3 (void)
        {
            return m_szNaTrlrSsNameCd3;
        }
        long NaTrlrSsNameCd3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrSsNameCd3, sizeof(m_szNaTrlrSsNameCd3), &m_bNaTrlrSsNameCd3);
        }
        
        //    TYPE OF NAME/ADDRESS LINE 4
        long lNaTrlrType4 () { return 1; };
        RWCString NaTrlrType4 (void)
        {
            return m_szNaTrlrType4;
        }
        long NaTrlrType4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrType4, sizeof(m_szNaTrlrType4), &m_bNaTrlrType4);
        }
        
        //    NAME/ADDRESS LINE 4
        long lNaTrlrLine4 () { return 40; };
        RWCString NaTrlrLine4 (void)
        {
            return m_szNaTrlrLine4;
        }
        long NaTrlrLine4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrLine4, sizeof(m_szNaTrlrLine4), &m_bNaTrlrLine4);
        }
        
        //    SOCIAL SECURITY NAME CODE 4
        long lNaTrlrSsNameCd4 () { return 1; };
        RWCString NaTrlrSsNameCd4 (void)
        {
            return m_szNaTrlrSsNameCd4;
        }
        long NaTrlrSsNameCd4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrSsNameCd4, sizeof(m_szNaTrlrSsNameCd4), &m_bNaTrlrSsNameCd4);
        }
        
        //    TYPE OF NAME/ADDRESS LINE 5
        long lNaTrlrType5 () { return 1; };
        RWCString NaTrlrType5 (void)
        {
            return m_szNaTrlrType5;
        }
        long NaTrlrType5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrType5, sizeof(m_szNaTrlrType5), &m_bNaTrlrType5);
        }
        
        //    NAME/ADDRESS LINE 5
        long lNaTrlrLine5 () { return 40; };
        RWCString NaTrlrLine5 (void)
        {
            return m_szNaTrlrLine5;
        }
        long NaTrlrLine5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrLine5, sizeof(m_szNaTrlrLine5), &m_bNaTrlrLine5);
        }
        
        //    CITY STATE CODE OF THE ACCOUNT HOLDER
        long lCityStateCode () { return 3; };
        RWCString CityStateCode (void)
        {
            return m_szCityStateCode;
        }
        long CityStateCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szCityStateCode, sizeof(m_szCityStateCode), &m_bCityStateCode);
        }
        
        //    CITY STATE OF THE ACCOUNT HOLDER
        long lCityState () { return 30; };
        RWCString CityState (void)
        {
            return m_szCityState;
        }
        long CityState (const RWCString& rwc)
        {
            return SetString(rwc, m_szCityState, sizeof(m_szCityState), &m_bCityState);
        }
        
        //    ZIP CODE
        long lStZipCodeFixed5 () { return 5; };
        RWCString StZipCodeFixed5 (void)
        {
            return m_szStZipCodeFixed5;
        }
        long StZipCodeFixed5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStZipCodeFixed5, sizeof(m_szStZipCodeFixed5), &m_bStZipCodeFixed5);
        }
        
        //    DASH SEPARATING FIXED PORTION OF ZIP CODE AND EXTENSION
        long lStZipCodeDash () { return 1; };
        RWCString StZipCodeDash (void)
        {
            return m_szStZipCodeDash;
        }
        long StZipCodeDash (const RWCString& rwc)
        {
            return SetString(rwc, m_szStZipCodeDash, sizeof(m_szStZipCodeDash), &m_bStZipCodeDash);
        }
        
        //    ZIP CODE
        long lStZipCodeLast4 () { return 4; };
        RWCString StZipCodeLast4 (void)
        {
            return m_szStZipCodeLast4;
        }
        long StZipCodeLast4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStZipCodeLast4, sizeof(m_szStZipCodeLast4), &m_bStZipCodeLast4);
        }
        
        //    FOREIGN ADDRESS INDICATOR HOLDER
        long lFrgnAddrInd () { return 1; };
        RWCString FrgnAddrInd (void)
        {
            return m_szFrgnAddrInd;
        }
        long FrgnAddrInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szFrgnAddrInd, sizeof(m_szFrgnAddrInd), &m_bFrgnAddrInd);
        }
        
        //    SPECIAL INSTRUCTION PRINT FLAG
        long lNaTrlrSpecInstr () { return 1; };
        RWCString NaTrlrSpecInstr (void)
        {
            return m_szNaTrlrSpecInstr;
        }
        long NaTrlrSpecInstr (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrSpecInstr, sizeof(m_szNaTrlrSpecInstr), &m_bNaTrlrSpecInstr);
        }
        
        //    NAME/ADDRESS LINE 8
        long lSpecInstNaLine8 () { return 40; };
        RWCString SpecInstNaLine8 (void)
        {
            return m_szSpecInstNaLine8;
        }
        long SpecInstNaLine8 (const RWCString& rwc)
        {
            return SetString(rwc, m_szSpecInstNaLine8, sizeof(m_szSpecInstNaLine8), &m_bSpecInstNaLine8);
        }
        
        //    ABBREVIATED VERSION OF THE CUSTOMER'S NAME
        long lStShortName () { return 13; };
        RWCString StShortName (void)
        {
            return m_szStShortName;
        }
        long StShortName (const RWCString& rwc)
        {
            return SetString(rwc, m_szStShortName, sizeof(m_szStShortName), &m_bStShortName);
        }
        
        //    ACCOUNT HOLDER'S BIRTHDATE - CCYYMMDD
        long lBirthDate () { return 8; };
        RWCString BirthDate (void)
        {
            return m_szBirthDate;
        }
        long BirthDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBirthDate, sizeof(m_szBirthDate), &m_bBirthDate);
        }
        
        //    NUMBER USED TO TIE ACCTS TOGETHER WITHIN APPLICATIONS
        long lCustomerNumber () { return 12; };
        RWCString CustomerNumber (void)
        {
            return m_szCustomerNumber;
        }
        long CustomerNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustomerNumber, sizeof(m_szCustomerNumber), &m_bCustomerNumber);
        }
        
        //    SOCIAL SECURITY/TAX NAME
        long lFtiName () { return 40; };
        RWCString FtiName (void)
        {
            return m_szFtiName;
        }
        long FtiName (const RWCString& rwc)
        {
            return SetString(rwc, m_szFtiName, sizeof(m_szFtiName), &m_bFtiName);
        }
        
        //    SOCIAL SECURITY/TAX NUMBER
        long lStFtiCode () { return 1; };
        RWCString StFtiCode (void)
        {
            return m_szStFtiCode;
        }
        long StFtiCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStFtiCode, sizeof(m_szStFtiCode), &m_bStFtiCode);
        }
        
        //    CONTAINS THE FIELDS THAT MAKE UP THE SOCIAL SECURITY NUMBER
        long lStFtiSsn () { return 9; };
        RWCString StFtiSsn (void)
        {
            return m_szStFtiSsn;
        }
        long StFtiSsn (const RWCString& rwc)
        {
            return SetString(rwc, m_szStFtiSsn, sizeof(m_szStFtiSsn), &m_bStFtiSsn);
        }
        
        //    INDICATES IF TAX IDENTIFICATION NUMBER IS CERTIFIED
        long lStTinCert () { return 1; };
        RWCString StTinCert (void)
        {
            return m_szStTinCert;
        }
        long StTinCert (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTinCert, sizeof(m_szStTinCert), &m_bStTinCert);
        }
        
        //    INDICATES WHY BACKUP WITHHOLDING APPLIES
        long lStBkupWthldFlag () { return 1; };
        RWCString StBkupWthldFlag (void)
        {
            return m_szStBkupWthldFlag;
        }
        long StBkupWthldFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStBkupWthldFlag, sizeof(m_szStBkupWthldFlag), &m_bStBkupWthldFlag);
        }
        
        //    USER DEFINED REASON WHY ACCOUNT IS NOT SUBJECT TO TAXES
        long lStTaxReason () { return 1; };
        RWCString StTaxReason (void)
        {
            return m_szStTaxReason;
        }
        long StTaxReason (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTaxReason, sizeof(m_szStTaxReason), &m_bStTaxReason);
        }
        
        //    NON-RESIDENT ALIEN CERT NAME 1
        long lNraCertName1 () { return 1; };
        RWCString NraCertName1 (void)
        {
            return m_szNraCertName1;
        }
        long NraCertName1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNraCertName1, sizeof(m_szNraCertName1), &m_bNraCertName1);
        }
        
        //    NON-RESIDENT ALIEN CERT NAME 2
        long lNraCertName2 () { return 1; };
        RWCString NraCertName2 (void)
        {
            return m_szNraCertName2;
        }
        long NraCertName2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNraCertName2, sizeof(m_szNraCertName2), &m_bNraCertName2);
        }
        
        //    TAX COUNTRY
        long lTaxCountry () { return 2; };
        RWCString TaxCountry (void)
        {
            return m_szTaxCountry;
        }
        long TaxCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szTaxCountry, sizeof(m_szTaxCountry), &m_bTaxCountry);
        }
        
        //    PROVINCE CODE
        long lProvinceCd () { return 2; };
        RWCString ProvinceCd (void)
        {
            return m_szProvinceCd;
        }
        long ProvinceCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szProvinceCd, sizeof(m_szProvinceCd), &m_bProvinceCd);
        }
        
        //    TISA CONSUMER FLAG
        long lTisConsumerFlag () { return 1; };
        RWCString TisConsumerFlag (void)
        {
            return m_szTisConsumerFlag;
        }
        long TisConsumerFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szTisConsumerFlag, sizeof(m_szTisConsumerFlag), &m_bTisConsumerFlag);
        }
        
        //    HOME PHONE NUMBER OF ACCOUNT HOLDER/AREA CODE
        long lStHpnAreaCode () { return 3; };
        RWCString StHpnAreaCode (void)
        {
            return m_szStHpnAreaCode;
        }
        long StHpnAreaCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStHpnAreaCode, sizeof(m_szStHpnAreaCode), &m_bStHpnAreaCode);
        }
        
        //    CONTAINS HOME PHONE NUMBER WITHOUT THE AREA CODE
        long lStHomePhone () { return 7; };
        RWCString StHomePhone (void)
        {
            return m_szStHomePhone;
        }
        long StHomePhone (const RWCString& rwc)
        {
            return SetString(rwc, m_szStHomePhone, sizeof(m_szStHomePhone), &m_bStHomePhone);
        }
        
        //    HOME PHONE EXTENSION NUMBER
        long lStHomeExtension () { return 4; };
        RWCString StHomeExtension (void)
        {
            return m_szStHomeExtension;
        }
        long StHomeExtension (const RWCString& rwc)
        {
            return SetString(rwc, m_szStHomeExtension, sizeof(m_szStHomeExtension), &m_bStHomeExtension);
        }
        
        //    OFFICE PHONE NUMBER OF ACCOUNT HOLDER/AREA CODE
        long lStOpnAreaCode () { return 3; };
        RWCString StOpnAreaCode (void)
        {
            return m_szStOpnAreaCode;
        }
        long StOpnAreaCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStOpnAreaCode, sizeof(m_szStOpnAreaCode), &m_bStOpnAreaCode);
        }
        
        //    OFFICE PHONE NUMBER
        long lStOfficePhone () { return 7; };
        RWCString StOfficePhone (void)
        {
            return m_szStOfficePhone;
        }
        long StOfficePhone (const RWCString& rwc)
        {
            return SetString(rwc, m_szStOfficePhone, sizeof(m_szStOfficePhone), &m_bStOfficePhone);
        }
        
        //    OFFICE PHONE EXTENSION
        long lStOfficeExtension () { return 4; };
        RWCString StOfficeExtension (void)
        {
            return m_szStOfficeExtension;
        }
        long StOfficeExtension (const RWCString& rwc)
        {
            return SetString(rwc, m_szStOfficeExtension, sizeof(m_szStOfficeExtension), &m_bStOfficeExtension);
        }
        
        //    PLAN IDENTIFICATION NUMBER FOR THE IRA
        long lStIraTrPkRetPlanId () { return 12; };
        RWCString StIraTrPkRetPlanId (void)
        {
            return m_szStIraTrPkRetPlanId;
        }
        long StIraTrPkRetPlanId (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrPkRetPlanId, sizeof(m_szStIraTrPkRetPlanId), &m_bStIraTrPkRetPlanId);
        }
        
        //    SEQUENCE NUMBER FOR THE IRA'S PLAN
        long lStIraTrPkIrsSeqNo () { return 3; };
        RWCString StIraTrPkIrsSeqNo (void)
        {
            return m_szStIraTrPkIrsSeqNo;
        }
        long StIraTrPkIrsSeqNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrPkIrsSeqNo, sizeof(m_szStIraTrPkIrsSeqNo), &m_bStIraTrPkIrsSeqNo);
        }
        
        //    EMPLOYEE IDENTIFICATION NUMBER FOR THE IRA
        long lStIraTrPkEmpPlanId () { return 12; };
        RWCString StIraTrPkEmpPlanId (void)
        {
            return m_szStIraTrPkEmpPlanId;
        }
        long StIraTrPkEmpPlanId (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrPkEmpPlanId, sizeof(m_szStIraTrPkEmpPlanId), &m_bStIraTrPkEmpPlanId);
        }
        
        //    INDICATES IRA TRAILER
        long lStTrlrCtlIraFlg () { return 1; };
        RWCString StTrlrCtlIraFlg (void)
        {
            return m_szStTrlrCtlIraFlg;
        }
        long StTrlrCtlIraFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTrlrCtlIraFlg, sizeof(m_szStTrlrCtlIraFlg), &m_bStTrlrCtlIraFlg);
        }
        
        //    INDICATES IRA IS CONSIDERED PRIMARY FOR REPORTING PURPOSES
        long lStIraTrlrPrimaryInd () { return 1; };
        RWCString StIraTrlrPrimaryInd (void)
        {
            return m_szStIraTrlrPrimaryInd;
        }
        long StIraTrlrPrimaryInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrlrPrimaryInd, sizeof(m_szStIraTrlrPrimaryInd), &m_bStIraTrlrPrimaryInd);
        }
        
        //    TYPE OF IRA TRAILER
        long lStIraTrlrType () { return 2; };
        RWCString StIraTrlrType (void)
        {
            return m_szStIraTrlrType;
        }
        long StIraTrlrType (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrlrType, sizeof(m_szStIraTrlrType), &m_bStIraTrlrType);
        }
        
        //    RA SUBTYPE
        long lIraTrlrSubtype () { return 3; };
        RWCString IraTrlrSubtype (void)
        {
            return m_szIraTrlrSubtype;
        }
        long IraTrlrSubtype (const RWCString& rwc)
        {
            return SetString(rwc, m_szIraTrlrSubtype, sizeof(m_szIraTrlrSubtype), &m_bIraTrlrSubtype);
        }
        
        //    EMPLOYER ID
        long lIraTrlrEmprId () { return 12; };
        RWCString IraTrlrEmprId (void)
        {
            return m_szIraTrlrEmprId;
        }
        long IraTrlrEmprId (const RWCString& rwc)
        {
            return SetString(rwc, m_szIraTrlrEmprId, sizeof(m_szIraTrlrEmprId), &m_bIraTrlrEmprId);
        }
        
        //    BENEFICIARY PERCENT SHARE
        long lIraTrlrBenePct () { return 7; };
        RWCString IraTrlrBenePct (void)
        {
            return AceZeroSupp(m_szIraTrlrBenePct, &m_szSuppressBuff[0]);
        }
        RWCString IraTrlrBenePctRaw (void)
        {
            return m_szIraTrlrBenePct;
        }
        long IraTrlrBenePct (const RWCString& rwc)
        {
            return SetString(rwc, m_szIraTrlrBenePct, sizeof(m_szIraTrlrBenePct), &m_bIraTrlrBenePct);
        }
        
        //    A SYSTEM/USER DEFINED FIELD - 1ST BYTE SYSTEM USES FOR RPTG
        long lStSystemType () { return 3; };
        RWCString StSystemType (void)
        {
            return m_szStSystemType;
        }
        long StSystemType (const RWCString& rwc)
        {
            return SetString(rwc, m_szStSystemType, sizeof(m_szStSystemType), &m_bStSystemType);
        }
        
        //    BRANCH
        long lStBranch () { return 3; };
        RWCString StBranch (void)
        {
            return m_szStBranch;
        }
        long StBranch (const RWCString& rwc)
        {
            return SetString(rwc, m_szStBranch, sizeof(m_szStBranch), &m_bStBranch);
        }
        
        //    OFFICER
        long lStOfficer () { return 5; };
        RWCString StOfficer (void)
        {
            return m_szStOfficer;
        }
        long StOfficer (const RWCString& rwc)
        {
            return SetString(rwc, m_szStOfficer, sizeof(m_szStOfficer), &m_bStOfficer);
        }
        
        //    REGION CODE
        long lStRegion () { return 3; };
        RWCString StRegion (void)
        {
            return m_szStRegion;
        }
        long StRegion (const RWCString& rwc)
        {
            return SetString(rwc, m_szStRegion, sizeof(m_szStRegion), &m_bStRegion);
        }
        
        //    INSTITUTION WHERE THE OFFICER, EMPLOYEE, OR DIRECTOR WORKS
        long lStmOffEmp () { return 1; };
        RWCString StmOffEmp (void)
        {
            return m_szStmOffEmp;
        }
        long StmOffEmp (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmOffEmp, sizeof(m_szStmOffEmp), &m_bStmOffEmp);
        }
        
        //    DATE ACCT WAS OPENED OR CERTIFICATE WAS ISSUED
        long lAoiOpeningDate () { return 8; };
        RWCString AoiOpeningDate (void)
        {
            return m_szAoiOpeningDate;
        }
        long AoiOpeningDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szAoiOpeningDate, sizeof(m_szAoiOpeningDate), &m_bAoiOpeningDate);
        }
        
        //    USER DEFINED
        long lAoiSourceFunds () { return 2; };
        RWCString AoiSourceFunds (void)
        {
            return m_szAoiSourceFunds;
        }
        long AoiSourceFunds (const RWCString& rwc)
        {
            return SetString(rwc, m_szAoiSourceFunds, sizeof(m_szAoiSourceFunds), &m_bAoiSourceFunds);
        }
        
        //    STANDARD BASE INTEREST RATE
        long lStandardBaseRate () { return 9; };
        RWCString StandardBaseRate (void)
        {
            return AceZeroSupp(m_szStandardBaseRate, &m_szSuppressBuff[0]);
        }
        RWCString StandardBaseRateRaw (void)
        {
            return m_szStandardBaseRate;
        }
        long StandardBaseRate (const RWCString& rwc)
        {
            return SetString(rwc, m_szStandardBaseRate, sizeof(m_szStandardBaseRate), &m_bStandardBaseRate);
        }
        
        //    INDICATES THE PERIOD IS IN DAYS OR MONTHS/TERM
        long lStMntPeriod () { return 1; };
        RWCString StMntPeriod (void)
        {
            return m_szStMntPeriod;
        }
        long StMntPeriod (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMntPeriod, sizeof(m_szStMntPeriod), &m_bStMntPeriod);
        }
        
        //    NUMBER OF DAYS OR MONTHS IN CONNECTION WITH TERM PERIOD
        long lStMntIncr () { return 4; };
        RWCString StMntIncr (void)
        {
            return AceZeroSupp(m_szStMntIncr, &m_szSuppressBuff[0]);
        }
        RWCString StMntIncrRaw (void)
        {
            return m_szStMntIncr;
        }
        long StMntIncr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMntIncr, sizeof(m_szStMntIncr), &m_bStMntIncr);
        }
        
        //    DATE OF NEXT MATURITY
        long lMatDateNextMat () { return 8; };
        RWCString MatDateNextMat (void)
        {
            return m_szMatDateNextMat;
        }
        long MatDateNextMat (const RWCString& rwc)
        {
            return SetString(rwc, m_szMatDateNextMat, sizeof(m_szMatDateNextMat), &m_bMatDateNextMat);
        }
        
        //    INDICATES HOW AUTOMATIC RENEWAL TAKES PLACE
        long lStMatAutoRenew () { return 1; };
        RWCString StMatAutoRenew (void)
        {
            return m_szStMatAutoRenew;
        }
        long StMatAutoRenew (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMatAutoRenew, sizeof(m_szStMatAutoRenew), &m_bStMatAutoRenew);
        }
        
        //    INDICATES WHETHER TO MAIL STATEMENTS
        long lStStmtTrlrMailFlag () { return 1; };
        RWCString StStmtTrlrMailFlag (void)
        {
            return m_szStStmtTrlrMailFlag;
        }
        long StStmtTrlrMailFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStmtTrlrMailFlag, sizeof(m_szStStmtTrlrMailFlag), &m_bStStmtTrlrMailFlag);
        }
        
        //    AF1 ACCT TRLR SYSTEM
        long lAf01SystemId () { return 2; };
        RWCString Af01SystemId (void)
        {
            return m_szAf01SystemId;
        }
        long Af01SystemId (const RWCString& rwc)
        {
            return SetString(rwc, m_szAf01SystemId, sizeof(m_szAf01SystemId), &m_bAf01SystemId);
        }
        
        //    REQUIRED CONTROL FIELD OF THE AFFILIATE ACCOUNT
        long lAf01AcctControl () { return 31; };
        RWCString Af01AcctControl (void)
        {
            return m_szAf01AcctControl;
        }
        long Af01AcctControl (const RWCString& rwc)
        {
            return SetString(rwc, m_szAf01AcctControl, sizeof(m_szAf01AcctControl), &m_bAf01AcctControl);
        }
        
        //    AF3 ACCT TRLR SYSTEM
        long lAf03SystemId () { return 2; };
        RWCString Af03SystemId (void)
        {
            return m_szAf03SystemId;
        }
        long Af03SystemId (const RWCString& rwc)
        {
            return SetString(rwc, m_szAf03SystemId, sizeof(m_szAf03SystemId), &m_bAf03SystemId);
        }
        
        //    REQUIRED CONTROL FIELD OF THE AFFILIATE ACCOUNT
        long lAf03AcctControl () { return 31; };
        RWCString Af03AcctControl (void)
        {
            return m_szAf03AcctControl;
        }
        long Af03AcctControl (const RWCString& rwc)
        {
            return SetString(rwc, m_szAf03AcctControl, sizeof(m_szAf03AcctControl), &m_bAf03AcctControl);
        }
        
        //    AFF ACCT TRLR SYSTEM
        long lAf04SystemId () { return 2; };
        RWCString Af04SystemId (void)
        {
            return m_szAf04SystemId;
        }
        long Af04SystemId (const RWCString& rwc)
        {
            return SetString(rwc, m_szAf04SystemId, sizeof(m_szAf04SystemId), &m_bAf04SystemId);
        }
        
        //    REQUIRED CONTROL FIELD OF THE AFFILIATE ACCOUNT
        long lAf04AcctControl () { return 31; };
        RWCString Af04AcctControl (void)
        {
            return m_szAf04AcctControl;
        }
        long Af04AcctControl (const RWCString& rwc)
        {
            return SetString(rwc, m_szAf04AcctControl, sizeof(m_szAf04AcctControl), &m_bAf04AcctControl);
        }
        
        //    AFF ACCT TRLR SYSTEM
        long lAf07SystemId () { return 2; };
        RWCString Af07SystemId (void)
        {
            return m_szAf07SystemId;
        }
        long Af07SystemId (const RWCString& rwc)
        {
            return SetString(rwc, m_szAf07SystemId, sizeof(m_szAf07SystemId), &m_bAf07SystemId);
        }
        
        //    REQUIRED CONTROL FIELD OF THE AFFILIATE ACCOUNT
        long lAf07AcctControl () { return 31; };
        RWCString Af07AcctControl (void)
        {
            return m_szAf07AcctControl;
        }
        long Af07AcctControl (const RWCString& rwc)
        {
            return SetString(rwc, m_szAf07AcctControl, sizeof(m_szAf07AcctControl), &m_bAf07AcctControl);
        }
        
        //    INDICATES WHETHER TO SERVICE CHARGE THE ACCOUNT
        long lStTrlrCtlServChrgFlg () { return 1; };
        RWCString StTrlrCtlServChrgFlg (void)
        {
            return m_szStTrlrCtlServChrgFlg;
        }
        long StTrlrCtlServChrgFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTrlrCtlServChrgFlg, sizeof(m_szStTrlrCtlServChrgFlg), &m_bStTrlrCtlServChrgFlg);
        }
        
        //    GOVERNMENT ID
        long lStGovernmentId () { return 25; };
        RWCString StGovernmentId (void)
        {
            return m_szStGovernmentId;
        }
        long StGovernmentId (const RWCString& rwc)
        {
            return SetString(rwc, m_szStGovernmentId, sizeof(m_szStGovernmentId), &m_bStGovernmentId);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bStAcctType) return true;
            if (m_bStAcctCategory) return true;
            if (m_bStIntDistSchedCd) return true;
            if (m_bIntDistCyc) return true;
            if (m_bStIntDistIncr) return true;
            if (m_bIntDistDayOfMnth) return true;
            if (m_bStIntDistCd) return true;
            if (m_bStNaTrlrCountry) return true;
            if (m_bNaTrlrType1) return true;
            if (m_bNaTrlrLine1) return true;
            if (m_bNaTrlrSsNameCd1) return true;
            if (m_bNaTrlrType2) return true;
            if (m_bNaTrlrLine2) return true;
            if (m_bNaTrlrSsNameCd2) return true;
            if (m_bNaTrlrType3) return true;
            if (m_bNaTrlrLine3) return true;
            if (m_bNaTrlrSsNameCd3) return true;
            if (m_bNaTrlrType4) return true;
            if (m_bNaTrlrLine4) return true;
            if (m_bNaTrlrSsNameCd4) return true;
            if (m_bNaTrlrType5) return true;
            if (m_bNaTrlrLine5) return true;
            if (m_bCityStateCode) return true;
            if (m_bCityState) return true;
            if (m_bStZipCodeFixed5) return true;
            if (m_bStZipCodeDash) return true;
            if (m_bStZipCodeLast4) return true;
            if (m_bFrgnAddrInd) return true;
            if (m_bNaTrlrSpecInstr) return true;
            if (m_bSpecInstNaLine8) return true;
            if (m_bStShortName) return true;
            if (m_bBirthDate) return true;
            if (m_bCustomerNumber) return true;
            if (m_bFtiName) return true;
            if (m_bStFtiCode) return true;
            if (m_bStFtiSsn) return true;
            if (m_bStTinCert) return true;
            if (m_bStBkupWthldFlag) return true;
            if (m_bStTaxReason) return true;
            if (m_bNraCertName1) return true;
            if (m_bNraCertName2) return true;
            if (m_bTaxCountry) return true;
            if (m_bProvinceCd) return true;
            if (m_bTisConsumerFlag) return true;
            if (m_bStHpnAreaCode) return true;
            if (m_bStHomePhone) return true;
            if (m_bStHomeExtension) return true;
            if (m_bStOpnAreaCode) return true;
            if (m_bStOfficePhone) return true;
            if (m_bStOfficeExtension) return true;
            if (m_bStIraTrPkRetPlanId) return true;
            if (m_bStIraTrPkIrsSeqNo) return true;
            if (m_bStIraTrPkEmpPlanId) return true;
            if (m_bStTrlrCtlIraFlg) return true;
            if (m_bStIraTrlrPrimaryInd) return true;
            if (m_bStIraTrlrType) return true;
            if (m_bIraTrlrSubtype) return true;
            if (m_bIraTrlrEmprId) return true;
            if (m_bIraTrlrBenePct) return true;
            if (m_bStSystemType) return true;
            if (m_bStBranch) return true;
            if (m_bStOfficer) return true;
            if (m_bStRegion) return true;
            if (m_bStmOffEmp) return true;
            if (m_bAoiOpeningDate) return true;
            if (m_bAoiSourceFunds) return true;
            if (m_bStandardBaseRate) return true;
            if (m_bStMntPeriod) return true;
            if (m_bStMntIncr) return true;
            if (m_bMatDateNextMat) return true;
            if (m_bStMatAutoRenew) return true;
            if (m_bStStmtTrlrMailFlag) return true;
            if (m_bAf01SystemId) return true;
            if (m_bAf01AcctControl) return true;
            if (m_bAf03SystemId) return true;
            if (m_bAf03AcctControl) return true;
            if (m_bAf04SystemId) return true;
            if (m_bAf04AcctControl) return true;
            if (m_bAf07SystemId) return true;
            if (m_bAf07AcctControl) return true;
            if (m_bStTrlrCtlServChrgFlg) return true;
            if (m_bStGovernmentId) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDST01MI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "StAcctType", m_szStAcctType, &m_bStAcctType);
                AddXMLField(pSess, "StAcctCategory", m_szStAcctCategory, &m_bStAcctCategory);
                AddXMLField(pSess, "StIntDistSchedCd", m_szStIntDistSchedCd, &m_bStIntDistSchedCd);
                AddXMLField(pSess, "IntDistCyc", m_szIntDistCyc, &m_bIntDistCyc);
                AddXMLField(pSess, "StIntDistIncr", m_szStIntDistIncr, &m_bStIntDistIncr);
                AddXMLField(pSess, "IntDistDayOfMnth", m_szIntDistDayOfMnth, &m_bIntDistDayOfMnth);
                AddXMLField(pSess, "StIntDistCd", m_szStIntDistCd, &m_bStIntDistCd);
                AddXMLField(pSess, "StNaTrlrCountry", m_szStNaTrlrCountry, &m_bStNaTrlrCountry);
                AddXMLField(pSess, "NaTrlrType1", m_szNaTrlrType1, &m_bNaTrlrType1);
                AddXMLField(pSess, "NaTrlrLine1", m_szNaTrlrLine1, &m_bNaTrlrLine1);
                AddXMLField(pSess, "NaTrlrSsNameCd1", m_szNaTrlrSsNameCd1, &m_bNaTrlrSsNameCd1);
                AddXMLField(pSess, "NaTrlrType2", m_szNaTrlrType2, &m_bNaTrlrType2);
                AddXMLField(pSess, "NaTrlrLine2", m_szNaTrlrLine2, &m_bNaTrlrLine2);
                AddXMLField(pSess, "NaTrlrSsNameCd2", m_szNaTrlrSsNameCd2, &m_bNaTrlrSsNameCd2);
                AddXMLField(pSess, "NaTrlrType3", m_szNaTrlrType3, &m_bNaTrlrType3);
                AddXMLField(pSess, "NaTrlrLine3", m_szNaTrlrLine3, &m_bNaTrlrLine3);
                AddXMLField(pSess, "NaTrlrSsNameCd3", m_szNaTrlrSsNameCd3, &m_bNaTrlrSsNameCd3);
                AddXMLField(pSess, "NaTrlrType4", m_szNaTrlrType4, &m_bNaTrlrType4);
                AddXMLField(pSess, "NaTrlrLine4", m_szNaTrlrLine4, &m_bNaTrlrLine4);
                AddXMLField(pSess, "NaTrlrSsNameCd4", m_szNaTrlrSsNameCd4, &m_bNaTrlrSsNameCd4);
                AddXMLField(pSess, "NaTrlrType5", m_szNaTrlrType5, &m_bNaTrlrType5);
                AddXMLField(pSess, "NaTrlrLine5", m_szNaTrlrLine5, &m_bNaTrlrLine5);
                AddXMLField(pSess, "CityStateCode", m_szCityStateCode, &m_bCityStateCode);
                AddXMLField(pSess, "CityState", m_szCityState, &m_bCityState);
                AddXMLField(pSess, "StZipCodeFixed5", m_szStZipCodeFixed5, &m_bStZipCodeFixed5);
                AddXMLField(pSess, "StZipCodeDash", m_szStZipCodeDash, &m_bStZipCodeDash);
                AddXMLField(pSess, "StZipCodeLast4", m_szStZipCodeLast4, &m_bStZipCodeLast4);
                AddXMLField(pSess, "FrgnAddrInd", m_szFrgnAddrInd, &m_bFrgnAddrInd);
                AddXMLField(pSess, "NaTrlrSpecInstr", m_szNaTrlrSpecInstr, &m_bNaTrlrSpecInstr);
                AddXMLField(pSess, "SpecInstNaLine8", m_szSpecInstNaLine8, &m_bSpecInstNaLine8);
                AddXMLField(pSess, "StShortName", m_szStShortName, &m_bStShortName);
                AddXMLField(pSess, "BirthDate", m_szBirthDate, &m_bBirthDate);
                AddXMLField(pSess, "CustomerNumber", m_szCustomerNumber, &m_bCustomerNumber);
                AddXMLField(pSess, "FtiName", m_szFtiName, &m_bFtiName);
                AddXMLField(pSess, "StFtiCode", m_szStFtiCode, &m_bStFtiCode);
                AddXMLField(pSess, "StFtiSsn", m_szStFtiSsn, &m_bStFtiSsn);
                AddXMLField(pSess, "StTinCert", m_szStTinCert, &m_bStTinCert);
                AddXMLField(pSess, "StBkupWthldFlag", m_szStBkupWthldFlag, &m_bStBkupWthldFlag);
                AddXMLField(pSess, "StTaxReason", m_szStTaxReason, &m_bStTaxReason);
                AddXMLField(pSess, "NraCertName1", m_szNraCertName1, &m_bNraCertName1);
                AddXMLField(pSess, "NraCertName2", m_szNraCertName2, &m_bNraCertName2);
                AddXMLField(pSess, "TaxCountry", m_szTaxCountry, &m_bTaxCountry);
                AddXMLField(pSess, "ProvinceCd", m_szProvinceCd, &m_bProvinceCd);
                AddXMLField(pSess, "TisConsumerFlag", m_szTisConsumerFlag, &m_bTisConsumerFlag);
                AddXMLField(pSess, "StHpnAreaCode", m_szStHpnAreaCode, &m_bStHpnAreaCode);
                AddXMLField(pSess, "StHomePhone", m_szStHomePhone, &m_bStHomePhone);
                AddXMLField(pSess, "StHomeExtension", m_szStHomeExtension, &m_bStHomeExtension);
                AddXMLField(pSess, "StOpnAreaCode", m_szStOpnAreaCode, &m_bStOpnAreaCode);
                AddXMLField(pSess, "StOfficePhone", m_szStOfficePhone, &m_bStOfficePhone);
                AddXMLField(pSess, "StOfficeExtension", m_szStOfficeExtension, &m_bStOfficeExtension);
                AddXMLField(pSess, "StIraTrPkRetPlanId", m_szStIraTrPkRetPlanId, &m_bStIraTrPkRetPlanId);
                AddXMLField(pSess, "StIraTrPkIrsSeqNo", m_szStIraTrPkIrsSeqNo, &m_bStIraTrPkIrsSeqNo);
                AddXMLField(pSess, "StIraTrPkEmpPlanId", m_szStIraTrPkEmpPlanId, &m_bStIraTrPkEmpPlanId);
                AddXMLField(pSess, "StTrlrCtlIraFlg", m_szStTrlrCtlIraFlg, &m_bStTrlrCtlIraFlg);
                AddXMLField(pSess, "StIraTrlrPrimaryInd", m_szStIraTrlrPrimaryInd, &m_bStIraTrlrPrimaryInd);
                AddXMLField(pSess, "StIraTrlrType", m_szStIraTrlrType, &m_bStIraTrlrType);
                AddXMLField(pSess, "IraTrlrSubtype", m_szIraTrlrSubtype, &m_bIraTrlrSubtype);
                AddXMLField(pSess, "IraTrlrEmprId", m_szIraTrlrEmprId, &m_bIraTrlrEmprId);
                AddXMLField(pSess, "IraTrlrBenePct", m_szIraTrlrBenePct, &m_bIraTrlrBenePct);
                AddXMLField(pSess, "StSystemType", m_szStSystemType, &m_bStSystemType);
                AddXMLField(pSess, "StBranch", m_szStBranch, &m_bStBranch);
                AddXMLField(pSess, "StOfficer", m_szStOfficer, &m_bStOfficer);
                AddXMLField(pSess, "StRegion", m_szStRegion, &m_bStRegion);
                AddXMLField(pSess, "StmOffEmp", m_szStmOffEmp, &m_bStmOffEmp);
                AddXMLField(pSess, "AoiOpeningDate", m_szAoiOpeningDate, &m_bAoiOpeningDate);
                AddXMLField(pSess, "AoiSourceFunds", m_szAoiSourceFunds, &m_bAoiSourceFunds);
                AddXMLField(pSess, "StandardBaseRate", m_szStandardBaseRate, &m_bStandardBaseRate);
                AddXMLField(pSess, "StMntPeriod", m_szStMntPeriod, &m_bStMntPeriod);
                AddXMLField(pSess, "StMntIncr", m_szStMntIncr, &m_bStMntIncr);
                AddXMLField(pSess, "MatDateNextMat", m_szMatDateNextMat, &m_bMatDateNextMat);
                AddXMLField(pSess, "StMatAutoRenew", m_szStMatAutoRenew, &m_bStMatAutoRenew);
                AddXMLField(pSess, "StStmtTrlrMailFlag", m_szStStmtTrlrMailFlag, &m_bStStmtTrlrMailFlag);
                AddXMLField(pSess, "Af01SystemId", m_szAf01SystemId, &m_bAf01SystemId);
                AddXMLField(pSess, "Af01AcctControl", m_szAf01AcctControl, &m_bAf01AcctControl);
                AddXMLField(pSess, "Af03SystemId", m_szAf03SystemId, &m_bAf03SystemId);
                AddXMLField(pSess, "Af03AcctControl", m_szAf03AcctControl, &m_bAf03AcctControl);
                AddXMLField(pSess, "Af04SystemId", m_szAf04SystemId, &m_bAf04SystemId);
                AddXMLField(pSess, "Af04AcctControl", m_szAf04AcctControl, &m_bAf04AcctControl);
                AddXMLField(pSess, "Af07SystemId", m_szAf07SystemId, &m_bAf07SystemId);
                AddXMLField(pSess, "Af07AcctControl", m_szAf07AcctControl, &m_bAf07AcctControl);
                AddXMLField(pSess, "StTrlrCtlServChrgFlg", m_szStTrlrCtlServChrgFlg, &m_bStTrlrCtlServChrgFlg);
                AddXMLField(pSess, "StGovernmentId", m_szStGovernmentId, &m_bStGovernmentId);
                AddXMLCloseRecord(pSess, "SDST01MI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDST01MI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "StAcctType", m_szStAcctType);
                GetXMLField(pSess, "StAcctCategory", m_szStAcctCategory);
                GetXMLField(pSess, "StIntDistSchedCd", m_szStIntDistSchedCd);
                GetXMLField(pSess, "IntDistCyc", m_szIntDistCyc);
                GetXMLField(pSess, "StIntDistIncr", m_szStIntDistIncr);
                GetXMLField(pSess, "IntDistDayOfMnth", m_szIntDistDayOfMnth);
                GetXMLField(pSess, "StIntDistCd", m_szStIntDistCd);
                GetXMLField(pSess, "StNaTrlrCountry", m_szStNaTrlrCountry);
                GetXMLField(pSess, "NaTrlrType1", m_szNaTrlrType1);
                GetXMLField(pSess, "NaTrlrLine1", m_szNaTrlrLine1);
                GetXMLField(pSess, "NaTrlrSsNameCd1", m_szNaTrlrSsNameCd1);
                GetXMLField(pSess, "NaTrlrType2", m_szNaTrlrType2);
                GetXMLField(pSess, "NaTrlrLine2", m_szNaTrlrLine2);
                GetXMLField(pSess, "NaTrlrSsNameCd2", m_szNaTrlrSsNameCd2);
                GetXMLField(pSess, "NaTrlrType3", m_szNaTrlrType3);
                GetXMLField(pSess, "NaTrlrLine3", m_szNaTrlrLine3);
                GetXMLField(pSess, "NaTrlrSsNameCd3", m_szNaTrlrSsNameCd3);
                GetXMLField(pSess, "NaTrlrType4", m_szNaTrlrType4);
                GetXMLField(pSess, "NaTrlrLine4", m_szNaTrlrLine4);
                GetXMLField(pSess, "NaTrlrSsNameCd4", m_szNaTrlrSsNameCd4);
                GetXMLField(pSess, "NaTrlrType5", m_szNaTrlrType5);
                GetXMLField(pSess, "NaTrlrLine5", m_szNaTrlrLine5);
                GetXMLField(pSess, "CityStateCode", m_szCityStateCode);
                GetXMLField(pSess, "CityState", m_szCityState);
                GetXMLField(pSess, "StZipCodeFixed5", m_szStZipCodeFixed5);
                GetXMLField(pSess, "StZipCodeDash", m_szStZipCodeDash);
                GetXMLField(pSess, "StZipCodeLast4", m_szStZipCodeLast4);
                GetXMLField(pSess, "FrgnAddrInd", m_szFrgnAddrInd);
                GetXMLField(pSess, "NaTrlrSpecInstr", m_szNaTrlrSpecInstr);
                GetXMLField(pSess, "SpecInstNaLine8", m_szSpecInstNaLine8);
                GetXMLField(pSess, "StShortName", m_szStShortName);
                GetXMLField(pSess, "BirthDate", m_szBirthDate);
                GetXMLField(pSess, "CustomerNumber", m_szCustomerNumber);
                GetXMLField(pSess, "FtiName", m_szFtiName);
                GetXMLField(pSess, "StFtiCode", m_szStFtiCode);
                GetXMLField(pSess, "StFtiSsn", m_szStFtiSsn);
                GetXMLField(pSess, "StTinCert", m_szStTinCert);
                GetXMLField(pSess, "StBkupWthldFlag", m_szStBkupWthldFlag);
                GetXMLField(pSess, "StTaxReason", m_szStTaxReason);
                GetXMLField(pSess, "NraCertName1", m_szNraCertName1);
                GetXMLField(pSess, "NraCertName2", m_szNraCertName2);
                GetXMLField(pSess, "TaxCountry", m_szTaxCountry);
                GetXMLField(pSess, "ProvinceCd", m_szProvinceCd);
                GetXMLField(pSess, "TisConsumerFlag", m_szTisConsumerFlag);
                GetXMLField(pSess, "StHpnAreaCode", m_szStHpnAreaCode);
                GetXMLField(pSess, "StHomePhone", m_szStHomePhone);
                GetXMLField(pSess, "StHomeExtension", m_szStHomeExtension);
                GetXMLField(pSess, "StOpnAreaCode", m_szStOpnAreaCode);
                GetXMLField(pSess, "StOfficePhone", m_szStOfficePhone);
                GetXMLField(pSess, "StOfficeExtension", m_szStOfficeExtension);
                GetXMLField(pSess, "StIraTrPkRetPlanId", m_szStIraTrPkRetPlanId);
                GetXMLField(pSess, "StIraTrPkIrsSeqNo", m_szStIraTrPkIrsSeqNo);
                GetXMLField(pSess, "StIraTrPkEmpPlanId", m_szStIraTrPkEmpPlanId);
                GetXMLField(pSess, "StTrlrCtlIraFlg", m_szStTrlrCtlIraFlg);
                GetXMLField(pSess, "StIraTrlrPrimaryInd", m_szStIraTrlrPrimaryInd);
                GetXMLField(pSess, "StIraTrlrType", m_szStIraTrlrType);
                GetXMLField(pSess, "IraTrlrSubtype", m_szIraTrlrSubtype);
                GetXMLField(pSess, "IraTrlrEmprId", m_szIraTrlrEmprId);
                GetXMLField(pSess, "IraTrlrBenePct", m_szIraTrlrBenePct);
                GetXMLField(pSess, "StSystemType", m_szStSystemType);
                GetXMLField(pSess, "StBranch", m_szStBranch);
                GetXMLField(pSess, "StOfficer", m_szStOfficer);
                GetXMLField(pSess, "StRegion", m_szStRegion);
                GetXMLField(pSess, "StmOffEmp", m_szStmOffEmp);
                GetXMLField(pSess, "AoiOpeningDate", m_szAoiOpeningDate);
                GetXMLField(pSess, "AoiSourceFunds", m_szAoiSourceFunds);
                GetXMLField(pSess, "StandardBaseRate", m_szStandardBaseRate);
                GetXMLField(pSess, "StMntPeriod", m_szStMntPeriod);
                GetXMLField(pSess, "StMntIncr", m_szStMntIncr);
                GetXMLField(pSess, "MatDateNextMat", m_szMatDateNextMat);
                GetXMLField(pSess, "StMatAutoRenew", m_szStMatAutoRenew);
                GetXMLField(pSess, "StStmtTrlrMailFlag", m_szStStmtTrlrMailFlag);
                GetXMLField(pSess, "Af01SystemId", m_szAf01SystemId);
                GetXMLField(pSess, "Af01AcctControl", m_szAf01AcctControl);
                GetXMLField(pSess, "Af03SystemId", m_szAf03SystemId);
                GetXMLField(pSess, "Af03AcctControl", m_szAf03AcctControl);
                GetXMLField(pSess, "Af04SystemId", m_szAf04SystemId);
                GetXMLField(pSess, "Af04AcctControl", m_szAf04AcctControl);
                GetXMLField(pSess, "Af07SystemId", m_szAf07SystemId);
                GetXMLField(pSess, "Af07AcctControl", m_szAf07AcctControl);
                GetXMLField(pSess, "StTrlrCtlServChrgFlg", m_szStTrlrCtlServChrgFlg);
                GetXMLField(pSess, "StGovernmentId", m_szStGovernmentId);
                CloseXMLRecord(pSess, "SDST01MI");
            };
        }
    };

    AsdSDST01MI CSDST01MI;
    AsdSDST01MI *SDST01MI;
    
    //**************** End AsdSDST01MI Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCSP01Data Definition ****************

typedef AsdSDPCSP01Data *LPSDPCSP01;
typedef AsdSDPCSP01Data::AsdTSHeader *LPSDPCSP01_TSHeader;
typedef AsdSDPCSP01Data::AsdSDSTCMMI *LPSDPCSP01_SDSTCMMI;
typedef AsdSDPCSP01Data::AsdSDST01MI *LPSDPCSP01_SDST01MI;
typedef AsdSDPCSP01Data::AsdTSMDA *LPSDPCSP01_TSMDA;
typedef AsdSDPCSP01Data::AsdTSMDA::AsdMdaTrmMsg *LPSDPCSP01_TSMDA_MdaTrmMsg;
typedef AsdSDPCSP01Data::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCSP01_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCSP01Data_H

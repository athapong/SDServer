#ifndef AsdSDPCSTMSData_H
#define AsdSDPCSTMSData_H

#include <stdlib.h>
#ifdef  AsdSDPCSTMS_INTEGRITY_STRING
#undef  AsdSDPCSTMS_INTEGRITY_STRING
#endif
#define AsdSDPCSTMS_INTEGRITY_STRING        ""

#ifdef  AsdSDPCSTMS_CRC_STRING
#undef  AsdSDPCSTMS_CRC_STRING
#endif
#define AsdSDPCSTMS_CRC_STRING "264344338"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCSTMSData Definition ****************
//                 ST Account Inquiry #2

//                 SDPCSTMSData.h generated by AceGen2 ver. 2.5.09

class AsdSDPCSTMSData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCSTMSData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCSTMS.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCSTMS_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDSTINP = &CSDSTINP;
        SDSTACTO = &CSDSTACTO;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCSTMSData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDSTINP.Reinit();
            CSDSTACTO.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCSTMS_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSTMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDSTINP.Save(&m_Sess);
        CSDSTACTO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCSTMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDSTINP.Load(&m_Sess);
                        CSDSTACTO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCSTMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSTMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDSTINP.Save(&m_Sess);
        CSDSTACTO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCSTMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDSTINP.Load(&m_Sess);
                        CSDSTACTO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCSTMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCSTMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDSTINP Definition ****************
    //                 SERVICE DELIVERY ST INQUIRY INPUT                           
    
    //    SDSTINP.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/28/02 13:46:47
    class AsdSDSTINP
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bStControl1;
        char      m_szStControl1[2+1];
        bool      m_bStControl2;
        char      m_szStControl2[3+1];
        bool      m_bStControl3;
        char      m_szStControl3[3+1];
        bool      m_bStControl4;
        char      m_szStControl4[3+1];
        bool      m_bStAccountNo;
        char      m_szStAccountNo[14+1];
        bool      m_bStActrRecSeq;
        char      m_szStActrRecSeq[5+1];
        bool      m_bActivity;
        char      m_szActivity[1+1];
        bool      m_bSelectType;
        char      m_szSelectType[1+1];
        bool      m_bPageFwdFlag;
        char      m_szPageFwdFlag[1+1];
        bool      m_bSaveBalance;
        char      m_szSaveBalance[17+1];
        bool      m_bWkUserArea;
        char      m_szWkUserArea[30+1];
    
      public:
        long      m_lIndex;

        AsdSDSTINP ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bStControl1 = false;
            strcpy(m_szStControl1, "");
            m_bStControl2 = false;
            strcpy(m_szStControl2, "");
            m_bStControl3 = false;
            strcpy(m_szStControl3, "");
            m_bStControl4 = false;
            strcpy(m_szStControl4, "");
            m_bStAccountNo = false;
            strcpy(m_szStAccountNo, "");
            m_bStActrRecSeq = false;
            strcpy(m_szStActrRecSeq, "00000");
            m_bActivity = false;
            strcpy(m_szActivity, "");
            m_bSelectType = false;
            strcpy(m_szSelectType, "");
            m_bPageFwdFlag = false;
            strcpy(m_szPageFwdFlag, "");
            m_bSaveBalance = false;
            strcpy(m_szSaveBalance, "+0000000000000.00");
            m_bWkUserArea = false;
            strcpy(m_szWkUserArea, "");
            RangeValues  = &CRangeValues;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bStControl1 = false;
            strcpy(m_szStControl1, "");
            m_bStControl2 = false;
            strcpy(m_szStControl2, "");
            m_bStControl3 = false;
            strcpy(m_szStControl3, "");
            m_bStControl4 = false;
            strcpy(m_szStControl4, "");
            m_bStAccountNo = false;
            strcpy(m_szStAccountNo, "");
            m_bStActrRecSeq = false;
            strcpy(m_szStActrRecSeq, "00000");
            m_bActivity = false;
            strcpy(m_szActivity, "");
            m_bSelectType = false;
            strcpy(m_szSelectType, "");
            m_bPageFwdFlag = false;
            strcpy(m_szPageFwdFlag, "");
            m_bSaveBalance = false;
            strcpy(m_szSaveBalance, "+0000000000000.00");
            m_bWkUserArea = false;
            strcpy(m_szWkUserArea, "");
            RangeValues  = &CRangeValues;
        }

        
        //    IDENTIFICATION NUMBER OF BANK/FIRST LEVEL OF CONTROL
        long lStControl1 () { return 2; };
        RWCString StControl1 (void)
        {
            return m_szStControl1;
        }
        long StControl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStControl1, sizeof(m_szStControl1), &m_bStControl1);
        }
        
        //    USER DEFINED SECOND LEVEL OF CONTROL
        long lStControl2 () { return 3; };
        RWCString StControl2 (void)
        {
            return m_szStControl2;
        }
        long StControl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStControl2, sizeof(m_szStControl2), &m_bStControl2);
        }
        
        //    USER DEFINED THIRD LEVEL OF CONTROL
        long lStControl3 () { return 3; };
        RWCString StControl3 (void)
        {
            return m_szStControl3;
        }
        long StControl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStControl3, sizeof(m_szStControl3), &m_bStControl3);
        }
        
        //    USER DEFINED FOURTH LEVEL OF CONTROL
        long lStControl4 () { return 3; };
        RWCString StControl4 (void)
        {
            return m_szStControl4;
        }
        long StControl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStControl4, sizeof(m_szStControl4), &m_bStControl4);
        }
        
        //    USER DEFINED NUMERIC FIELD TO IDENTIFY THE MASTER RECORD
        long lStAccountNo () { return 14; };
        RWCString StAccountNo (void)
        {
            return m_szStAccountNo;
        }
        long StAccountNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAccountNo, sizeof(m_szStAccountNo), &m_bStAccountNo);
        }
        
        //    ACCOUNT RECORD SEQUENCE
        long lStActrRecSeq () { return 5; };
        RWCString StActrRecSeq (void)
        {
            return AceZeroSupp(m_szStActrRecSeq, &m_szSuppressBuff[0]);
        }
        RWCString StActrRecSeqRaw (void)
        {
            return m_szStActrRecSeq;
        }
        long StActrRecSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szStActrRecSeq, sizeof(m_szStActrRecSeq), &m_bStActrRecSeq);
        }
        
        //    ACTIVITY FLAG
        long lActivity () { return 1; };
        RWCString Activity (void)
        {
            return m_szActivity;
        }
        long Activity (const RWCString& rwc)
        {
            return SetString(rwc, m_szActivity, sizeof(m_szActivity), &m_bActivity);
        }
        
        //    HISTORY SELECTION CRITERIA
        long lSelectType () { return 1; };
        RWCString SelectType (void)
        {
            return m_szSelectType;
        }
        long SelectType (const RWCString& rwc)
        {
            return SetString(rwc, m_szSelectType, sizeof(m_szSelectType), &m_bSelectType);
        }
        
        //    PAGE FORWARD FLAG
        long lPageFwdFlag () { return 1; };
        RWCString PageFwdFlag (void)
        {
            return m_szPageFwdFlag;
        }
        long PageFwdFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szPageFwdFlag, sizeof(m_szPageFwdFlag), &m_bPageFwdFlag);
        }
        
        //    SAVE BALANCE OF LAST RECORD READ
        long lSaveBalance () { return 17; };
        RWCString SaveBalance (void)
        {
            return AceZeroSupp(m_szSaveBalance, &m_szSuppressBuff[0]);
        }
        RWCString SaveBalanceRaw (void)
        {
            return m_szSaveBalance;
        }
        long SaveBalance (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveBalance, sizeof(m_szSaveBalance), &m_bSaveBalance);
        }
        
        //    USER AREA FILLER
        long lWkUserArea () { return 30; };
        RWCString WkUserArea (void)
        {
            return m_szWkUserArea;
        }
        long WkUserArea (const RWCString& rwc)
        {
            return SetString(rwc, m_szWkUserArea, sizeof(m_szWkUserArea), &m_bWkUserArea);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bStControl1) return true;
            if (m_bStControl2) return true;
            if (m_bStControl3) return true;
            if (m_bStControl4) return true;
            if (m_bStAccountNo) return true;
            if (m_bStActrRecSeq) return true;
            if (m_bActivity) return true;
            if (m_bSelectType) return true;
            if (m_bPageFwdFlag) return true;
            if (m_bSaveBalance) return true;
            if (m_bWkUserArea) return true;
            if (CRangeValues.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDSTINP", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "StControl1", m_szStControl1, &m_bStControl1);
                AddXMLField(pSess, "StControl2", m_szStControl2, &m_bStControl2);
                AddXMLField(pSess, "StControl3", m_szStControl3, &m_bStControl3);
                AddXMLField(pSess, "StControl4", m_szStControl4, &m_bStControl4);
                AddXMLField(pSess, "StAccountNo", m_szStAccountNo, &m_bStAccountNo);
                AddXMLField(pSess, "StActrRecSeq", m_szStActrRecSeq, &m_bStActrRecSeq);
                AddXMLField(pSess, "Activity", m_szActivity, &m_bActivity);
                AddXMLField(pSess, "SelectType", m_szSelectType, &m_bSelectType);
                AddXMLField(pSess, "PageFwdFlag", m_szPageFwdFlag, &m_bPageFwdFlag);
                AddXMLField(pSess, "SaveBalance", m_szSaveBalance, &m_bSaveBalance);
                AddXMLField(pSess, "WkUserArea", m_szWkUserArea, &m_bWkUserArea);
                CRangeValues.Save(pSess);
                AddXMLCloseRecord(pSess, "SDSTINP");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDSTINP", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "StControl1", m_szStControl1);
                GetXMLField(pSess, "StControl2", m_szStControl2);
                GetXMLField(pSess, "StControl3", m_szStControl3);
                GetXMLField(pSess, "StControl4", m_szStControl4);
                GetXMLField(pSess, "StAccountNo", m_szStAccountNo);
                GetXMLField(pSess, "StActrRecSeq", m_szStActrRecSeq);
                GetXMLField(pSess, "Activity", m_szActivity);
                GetXMLField(pSess, "SelectType", m_szSelectType);
                GetXMLField(pSess, "PageFwdFlag", m_szPageFwdFlag);
                GetXMLField(pSess, "SaveBalance", m_szSaveBalance);
                GetXMLField(pSess, "WkUserArea", m_szWkUserArea);
                CRangeValues.Load(pSess);
                CloseXMLRecord(pSess, "SDSTINP");
            };
        }
        
        //**************** Start AsdRangeValues Definition ****************
        //                 SELECTION RANGE OF VALUES
        
        class AsdRangeValues
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bBeginAmount;
            char      m_szBeginAmount[15+1];
            bool      m_bEndAmount;
            char      m_szEndAmount[15+1];
        
          public:
            long      m_lIndex;

            AsdRangeValues ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bBeginAmount = false;
                strcpy(m_szBeginAmount, "000000000000000");
                m_bEndAmount = false;
                strcpy(m_szEndAmount, "000000000000000");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    SELECTED BEGINNING AMOUNT
            long lBeginAmount () { return 15; };
            RWCString BeginAmount (void)
            {
                return m_szBeginAmount;
            }
            long BeginAmount (const RWCString& rwc)
            {
                return SetString(rwc, m_szBeginAmount, sizeof(m_szBeginAmount), &m_bBeginAmount);
            }
            
            //    SELECTED ENDING AMOUNT
            long lEndAmount () { return 15; };
            RWCString EndAmount (void)
            {
                return m_szEndAmount;
            }
            long EndAmount (const RWCString& rwc)
            {
                return SetString(rwc, m_szEndAmount, sizeof(m_szEndAmount), &m_bEndAmount);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bBeginAmount) return true;
                if (m_bEndAmount) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "RangeValues", m_lIndex);
                    AddXMLField(pSess, "BeginAmount", m_szBeginAmount, &m_bBeginAmount);
                    AddXMLField(pSess, "EndAmount", m_szEndAmount, &m_bEndAmount);
                    AddXMLCloseRecord(pSess, "RangeValues");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "RangeValues", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "BeginAmount", m_szBeginAmount);
                    GetXMLField(pSess, "EndAmount", m_szEndAmount);
                    CloseXMLRecord(pSess, "RangeValues");
                };
            }
        };

        AsdRangeValues  CRangeValues;
        AsdRangeValues *RangeValues;
        
        //**************** End AsdRangeValues Definition ****************
        
    };

    AsdSDSTINP CSDSTINP;
    AsdSDSTINP *SDSTINP;
    
    //**************** End AsdSDSTINP Definition ****************

    
    //**************** Start AsdSDSTACTO Definition ****************
    //                 SERVICE DELIVERY ST ACCOUNT INQUIRY OUTPUT                  
    
    //    SDSTACTO.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 05/13/03 11:44:27
    class AsdSDSTACTO
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bStControl1;
        char      m_szStControl1[2+1];
        bool      m_bStControl2;
        char      m_szStControl2[3+1];
        bool      m_bStControl3;
        char      m_szStControl3[3+1];
        bool      m_bStControl4;
        char      m_szStControl4[3+1];
        bool      m_bStAccountNo;
        char      m_szStAccountNo[14+1];
        bool      m_bStStateCode;
        char      m_szStStateCode[2+1];
        bool      m_bStZipCodeFixed5;
        char      m_szStZipCodeFixed5[5+1];
        bool      m_bStZipCodeDash;
        char      m_szStZipCodeDash[1+1];
        bool      m_bStZipCodeLast4;
        char      m_szStZipCodeLast4[4+1];
        bool      m_bStCountryCode;
        char      m_szStCountryCode[5+1];
        bool      m_bStBranch;
        char      m_szStBranch[3+1];
        bool      m_bStAcctType;
        char      m_szStAcctType[3+1];
        bool      m_bStLcdCent;
        char      m_szStLcdCent[2+1];
        bool      m_bStLcdYr;
        char      m_szStLcdYr[2+1];
        bool      m_bStLcdMo;
        char      m_szStLcdMo[2+1];
        bool      m_bStLcdDa;
        char      m_szStLcdDa[2+1];
        bool      m_bStAmtLastDep;
        char      m_szStAmtLastDep[17+1];
        bool      m_bStLcwCent;
        char      m_szStLcwCent[2+1];
        bool      m_bStLcwYr;
        char      m_szStLcwYr[2+1];
        bool      m_bStLcwMo;
        char      m_szStLcwMo[2+1];
        bool      m_bStLcwDa;
        char      m_szStLcwDa[2+1];
        bool      m_bStAmtLastWithdrawal;
        char      m_szStAmtLastWithdrawal[17+1];
        bool      m_bStFtiCode;
        char      m_szStFtiCode[1+1];
        bool      m_bStFtiPrefix;
        char      m_szStFtiPrefix[1+1];
        bool      m_bStFtiSsn1;
        char      m_szStFtiSsn1[3+1];
        bool      m_bStFtiSsn2;
        char      m_szStFtiSsn2[2+1];
        bool      m_bStFtiSsn3;
        char      m_szStFtiSsn3[4+1];
        bool      m_bStFtiSuffix;
        char      m_szStFtiSuffix[1+1];
        bool      m_bStYtdIntPaid;
        char      m_szStYtdIntPaid[17+1];
        bool      m_bStLytdIntPaid;
        char      m_szStLytdIntPaid[17+1];
        bool      m_bStAoiDoCent;
        char      m_szStAoiDoCent[2+1];
        bool      m_bStAoiDoYr;
        char      m_szStAoiDoYr[2+1];
        bool      m_bStAoiDoMo;
        char      m_szStAoiDoMo[2+1];
        bool      m_bStAoiDoDa;
        char      m_szStAoiDoDa[2+1];
        bool      m_bStCaPaymentAmt;
        char      m_szStCaPaymentAmt[17+1];
        bool      m_bStClosingBalance;
        char      m_szStClosingBalance[17+1];
        bool      m_bStCurrentRate;
        char      m_szStCurrentRate[11+1];
        bool      m_bStIntAccrAmt;
        char      m_szStIntAccrAmt[19+1];
        bool      m_bStIpdCent;
        char      m_szStIpdCent[2+1];
        bool      m_bStIpdYr;
        char      m_szStIpdYr[2+1];
        bool      m_bStIpdMo;
        char      m_szStIpdMo[2+1];
        bool      m_bStIpdDa;
        char      m_szStIpdDa[2+1];
        bool      m_bStMtdServChrg;
        char      m_szStMtdServChrg[13+1];
        bool      m_bStIdDnpYear;
        char      m_szStIdDnpYear[4+1];
        bool      m_bStIdDnpMo;
        char      m_szStIdDnpMo[2+1];
        bool      m_bStIdDnpDa;
        char      m_szStIdDnpDa[2+1];
        bool      m_bStCdAnticInt;
        char      m_szStCdAnticInt[17+1];
        bool      m_bStScTrlrServChrg;
        char      m_szStScTrlrServChrg[13+1];
        bool      m_bStStatus;
        char      m_szStStatus[2+1];
        bool      m_bStOfficer;
        char      m_szStOfficer[5+1];
        bool      m_bStMntPeriod;
        char      m_szStMntPeriod[1+1];
        bool      m_bStMntIncr;
        char      m_szStMntIncr[4+1];
        bool      m_bStMntAnnivDay;
        char      m_szStMntAnnivDay[2+1];
        bool      m_bStMatAutoRenew;
        char      m_szStMatAutoRenew[1+1];
        bool      m_bStMatDnmYear;
        char      m_szStMatDnmYear[4+1];
        bool      m_bStMatDnmMo;
        char      m_szStMatDnmMo[2+1];
        bool      m_bStMatDnmDa;
        char      m_szStMatDnmDa[2+1];
        bool      m_bStLastRenewDate;
        char      m_szStLastRenewDate[8+1];
        bool      m_bStRenewCurBal;
        char      m_szStRenewCurBal[17+1];
        bool      m_bStRenewTimesRenew;
        char      m_szStRenewTimesRenew[4+1];
        bool      m_bStCaNoOfPymts;
        char      m_szStCaNoOfPymts[4+1];
        bool      m_bStCaLastPymtNo;
        char      m_szStCaLastPymtNo[4+1];
        bool      m_bStCaNoOfPymtsMade;
        char      m_szStCaNoOfPymtsMade[4+1];
        bool      m_bStIntPayPrevPay;
        char      m_szStIntPayPrevPay[17+1];
        bool      m_bStAcctCategory;
        char      m_szStAcctCategory[1+1];
        bool      m_bStCustLanguage;
        char      m_szStCustLanguage[2+1];
        bool      m_bStCustLangGroup;
        char      m_szStCustLangGroup[1+1];
        bool      m_bStCurrCode;
        char      m_szStCurrCode[3+1];
        bool      m_bStCurrDec;
        char      m_szStCurrDec[1+1];
        bool      m_bStmFmFlag;
        char      m_szStmFmFlag[1+1];
        bool      m_bStmNameAddrFlag;
        char      m_szStmNameAddrFlag[1+1];
        bool      m_bStmMemoFlag;
        char      m_szStmMemoFlag[1+1];
        bool      m_bStmMonyFlag;
        char      m_szStmMonyFlag[1+1];
        bool      m_bStmBackdateFlag;
        char      m_szStmBackdateFlag[1+1];
        bool      m_bStmRequestFlag;
        char      m_szStmRequestFlag[1+1];
        bool      m_bStmPlanFlag;
        char      m_szStmPlanFlag[1+1];
        bool      m_bStmDoNotCloseFlag;
        char      m_szStmDoNotCloseFlag[1+1];
        bool      m_bStmClsFlag;
        char      m_szStmClsFlag[1+1];
        bool      m_bStmAvailBal;
        char      m_szStmAvailBal[17+1];
        bool      m_bStmLedgerBal;
        char      m_szStmLedgerBal[17+1];
        bool      m_bStmProjAccrInt;
        char      m_szStmProjAccrInt[17+1];
        bool      m_bStmStopHoldSumFlag;
        char      m_szStmStopHoldSumFlag[1+1];
        bool      m_bStmShsHoldFullBal;
        char      m_szStmShsHoldFullBal[1+1];
        bool      m_bStmShsHoldsAmt;
        char      m_szStmShsHoldsAmt[17+1];
        bool      m_bStmShsPledgeFullBal;
        char      m_szStmShsPledgeFullBal[1+1];
        bool      m_bStmShsPledgeAmt;
        char      m_szStmShsPledgeAmt[17+1];
        bool      m_bStmMatDnmCent;
        char      m_szStmMatDnmCent[2+1];
        bool      m_bStmMatDnmYr;
        char      m_szStmMatDnmYr[2+1];
        bool      m_bStmMatDnmMo;
        char      m_szStmMatDnmMo[2+1];
        bool      m_bStmMatDnmDa;
        char      m_szStmMatDnmDa[2+1];
        bool      m_bStmIpCurAnnlRate2;
        char      m_szStmIpCurAnnlRate2[11+1];
        bool      m_bStGracePeriodFlag;
        char      m_szStGracePeriodFlag[1+1];
        bool      m_bStGraceEndDate;
        char      m_szStGraceEndDate[8+1];
        bool      m_bStShortName;
        char      m_szStShortName[13+1];
        bool      m_bStmOffEmp;
        char      m_szStmOffEmp[1+1];
        bool      m_bStAnalysisAcct;
        char      m_szStAnalysisAcct[1+1];
        bool      m_bStmIraTrlrLstDistCc;
        char      m_szStmIraTrlrLstDistCc[2+1];
        bool      m_bStmIraTrlrLstDistYy;
        char      m_szStmIraTrlrLstDistYy[2+1];
        bool      m_bStmIraTrlrLstDistMo;
        char      m_szStmIraTrlrLstDistMo[2+1];
        bool      m_bStmIraTrlrLstDistDa;
        char      m_szStmIraTrlrLstDistDa[2+1];
        bool      m_bStIraTrPkRetPlanId;
        char      m_szStIraTrPkRetPlanId[12+1];
        bool      m_bStIraTrPkIrsSeqNo;
        char      m_szStIraTrPkIrsSeqNo[3+1];
        bool      m_bStIraTrPkEmpPlanId;
        char      m_szStIraTrPkEmpPlanId[12+1];
        bool      m_bStIraTrlrPrimaryInd;
        char      m_szStIraTrlrPrimaryInd[1+1];
        bool      m_bStIraTrlrStatusCd;
        char      m_szStIraTrlrStatusCd[1+1];
        bool      m_bStmTotalPenalty;
        char      m_szStmTotalPenalty[17+1];
        bool      m_bStRegion;
        char      m_szStRegion[3+1];
        bool      m_bBc1ProcCent;
        char      m_szBc1ProcCent[2+1];
        bool      m_bBc1ProcYr;
        char      m_szBc1ProcYr[2+1];
        bool      m_bBc1ProcMo;
        char      m_szBc1ProcMo[2+1];
        bool      m_bBc1ProcDa;
        char      m_szBc1ProcDa[2+1];
        bool      m_bStScTrlrNscdCent;
        char      m_szStScTrlrNscdCent[2+1];
        bool      m_bStStmtTrlrSiLsdYr;
        char      m_szStStmtTrlrSiLsdYr[2+1];
        bool      m_bStStmtTrlrSiLsdMo;
        char      m_szStStmtTrlrSiLsdMo[2+1];
        bool      m_bStStmtTrlrSiLsdDa;
        char      m_szStStmtTrlrSiLsdDa[2+1];
        bool      m_bStGraceWdPeriod;
        char      m_szStGraceWdPeriod[1+1];
        bool      m_bStTrlrCtlIraFlg;
        char      m_szStTrlrCtlIraFlg[1+1];
        bool      m_bStTrlrCtlServChrgFlg;
        char      m_szStTrlrCtlServChrgFlg[1+1];
        bool      m_bStScTrlrWaiveScFlg;
        char      m_szStScTrlrWaiveScFlg[1+1];
        bool      m_bStScTrlrWaiveScRsn;
        char      m_szStScTrlrWaiveScRsn[2+1];
        bool      m_bStStmtTrlrCycleNo;
        short     m_nStStmtTrlrCycleNo;
        bool      m_bStStmtTrlrPullCode;
        char      m_szStStmtTrlrPullCode[1+1];
        bool      m_bStTrlrCtlStmtFlg;
        char      m_szStTrlrCtlStmtFlg[1+1];
        bool      m_bStHpnAreaCode;
        char      m_szStHpnAreaCode[3+1];
        bool      m_bStHomePhone;
        char      m_szStHomePhone[7+1];
        bool      m_bStHomeExtension;
        char      m_szStHomeExtension[4+1];
        bool      m_bStOpnAreaCode;
        char      m_szStOpnAreaCode[3+1];
        bool      m_bStOfficePhone;
        char      m_szStOfficePhone[7+1];
        bool      m_bStOfficeExtension;
        char      m_szStOfficeExtension[4+1];
        bool      m_bStTinCert;
        char      m_szStTinCert[1+1];
        bool      m_bStIraTrlrType;
        char      m_szStIraTrlrType[2+1];
        bool      m_bStIraTrlrDecDisab;
        char      m_szStIraTrlrDecDisab[1+1];
        bool      m_bStRequiredSigns;
        char      m_szStRequiredSigns[1+1];
        bool      m_bStmCollectedBal;
        char      m_szStmCollectedBal[17+1];
        bool      m_bAvgBal;
        char      m_szAvgBal[17+1];
        bool      m_bStStmtTrlrMailFlag;
        char      m_szStStmtTrlrMailFlag[1+1];
        bool      m_bStDcCent;
        char      m_szStDcCent[2+1];
        bool      m_bStDcYr;
        char      m_szStDcYr[2+1];
        bool      m_bStDcMo;
        char      m_szStDcMo[2+1];
        bool      m_bStDcDa;
        char      m_szStDcDa[2+1];
        bool      m_bStBkupWthldFlag;
        char      m_szStBkupWthldFlag[1+1];
        bool      m_bStTaxReason;
        char      m_szStTaxReason[1+1];
        bool      m_bStIntParamDailyAccr;
        char      m_szStIntParamDailyAccr[19+1];
        bool      m_bStIntDistSchedCd;
        char      m_szStIntDistSchedCd[1+1];
        bool      m_bStIntDistIncr;
        char      m_szStIntDistIncr[4+1];
        bool      m_bStIntDistCd;
        char      m_szStIntDistCd[1+1];
        bool      m_bStIraTrlrScDistSdCd;
        char      m_szStIraTrlrScDistSdCd[2+1];
        bool      m_bBc1Aba;
        char      m_szBc1Aba[9+1];
        bool      m_bBc1RunCent;
        char      m_szBc1RunCent[2+1];
        bool      m_bBc1RunYr;
        char      m_szBc1RunYr[2+1];
        bool      m_bBc1RunMo;
        char      m_szBc1RunMo[2+1];
        bool      m_bBc1RunDa;
        char      m_szBc1RunDa[2+1];
        bool      m_bBc1LpdPtCent;
        char      m_szBc1LpdPtCent[2+1];
        bool      m_bBc1LpdPtYr;
        char      m_szBc1LpdPtYr[2+1];
        bool      m_bBc1LpdPtMo;
        char      m_szBc1LpdPtMo[2+1];
        bool      m_bBc1LpdPtDa;
        char      m_szBc1LpdPtDa[2+1];
        bool      m_bBc1NpdProcCent;
        char      m_szBc1NpdProcCent[2+1];
        bool      m_bBc1NpdProcYr;
        char      m_szBc1NpdProcYr[2+1];
        bool      m_bBc1NpdProcMo;
        char      m_szBc1NpdProcMo[2+1];
        bool      m_bBc1NpdProcDa;
        char      m_szBc1NpdProcDa[2+1];
        bool      m_bStAfAcctTrlrNo;
        char      m_szStAfAcctTrlrNo[4+1];
        bool      m_bStPbPassbookAcct;
        char      m_szStPbPassbookAcct[1+1];
        bool      m_bStImFundingFlag;
        char      m_szStImFundingFlag[1+1];
        bool      m_bNraCertName1;
        char      m_szNraCertName1[1+1];
        bool      m_bNraCertName2;
        char      m_szNraCertName2[1+1];
        bool      m_bTaxCountry;
        char      m_szTaxCountry[2+1];
        bool      m_bProvinceCd;
        char      m_szProvinceCd[2+1];
        bool      m_bNaTrlrCountry;
        char      m_szNaTrlrCountry[2+1];
        bool      m_bStStmtTrlrSiBegBal;
        char      m_szStStmtTrlrSiBegBal[17+1];
        bool      m_bStmLastMonyActvDate;
        char      m_szStmLastMonyActvDate[8+1];
        bool      m_bUserCharField1;
        char      m_szUserCharField1[15+1];
        bool      m_bUserCharField2;
        char      m_szUserCharField2[15+1];
        bool      m_bUserCharField3;
        char      m_szUserCharField3[15+1];
        bool      m_bYesterdayFloatAmt;
        char      m_szYesterdayFloatAmt[17+1];
        bool      m_bTodayFloatAmt;
        char      m_szTodayFloatAmt[17+1];
        bool      m_bTotalBalance;
        char      m_szTotalBalance[17+1];
        bool      m_bStGovernmentId;
        char      m_szStGovernmentId[25+1];
    
      public:
        long      m_lIndex;

        AsdSDSTACTO ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bStControl1 = false;
            strcpy(m_szStControl1, "");
            m_bStControl2 = false;
            strcpy(m_szStControl2, "");
            m_bStControl3 = false;
            strcpy(m_szStControl3, "");
            m_bStControl4 = false;
            strcpy(m_szStControl4, "");
            m_bStAccountNo = false;
            strcpy(m_szStAccountNo, "");
            m_bStStateCode = false;
            strcpy(m_szStStateCode, "");
            m_bStZipCodeFixed5 = false;
            strcpy(m_szStZipCodeFixed5, "");
            m_bStZipCodeDash = false;
            strcpy(m_szStZipCodeDash, "");
            m_bStZipCodeLast4 = false;
            strcpy(m_szStZipCodeLast4, "");
            m_bStCountryCode = false;
            strcpy(m_szStCountryCode, "");
            m_bStBranch = false;
            strcpy(m_szStBranch, "");
            m_bStAcctType = false;
            strcpy(m_szStAcctType, "");
            m_bStLcdCent = false;
            strcpy(m_szStLcdCent, "");
            m_bStLcdYr = false;
            strcpy(m_szStLcdYr, "");
            m_bStLcdMo = false;
            strcpy(m_szStLcdMo, "");
            m_bStLcdDa = false;
            strcpy(m_szStLcdDa, "");
            m_bStAmtLastDep = false;
            strcpy(m_szStAmtLastDep, "+0000000000000.00");
            m_bStLcwCent = false;
            strcpy(m_szStLcwCent, "");
            m_bStLcwYr = false;
            strcpy(m_szStLcwYr, "");
            m_bStLcwMo = false;
            strcpy(m_szStLcwMo, "");
            m_bStLcwDa = false;
            strcpy(m_szStLcwDa, "");
            m_bStAmtLastWithdrawal = false;
            strcpy(m_szStAmtLastWithdrawal, "+0000000000000.00");
            m_bStFtiCode = false;
            strcpy(m_szStFtiCode, "");
            m_bStFtiPrefix = false;
            strcpy(m_szStFtiPrefix, "");
            m_bStFtiSsn1 = false;
            strcpy(m_szStFtiSsn1, "");
            m_bStFtiSsn2 = false;
            strcpy(m_szStFtiSsn2, "");
            m_bStFtiSsn3 = false;
            strcpy(m_szStFtiSsn3, "");
            m_bStFtiSuffix = false;
            strcpy(m_szStFtiSuffix, "");
            m_bStYtdIntPaid = false;
            strcpy(m_szStYtdIntPaid, "+0000000000000.00");
            m_bStLytdIntPaid = false;
            strcpy(m_szStLytdIntPaid, "+0000000000000.00");
            m_bStAoiDoCent = false;
            strcpy(m_szStAoiDoCent, "");
            m_bStAoiDoYr = false;
            strcpy(m_szStAoiDoYr, "");
            m_bStAoiDoMo = false;
            strcpy(m_szStAoiDoMo, "");
            m_bStAoiDoDa = false;
            strcpy(m_szStAoiDoDa, "");
            m_bStCaPaymentAmt = false;
            strcpy(m_szStCaPaymentAmt, "+0000000000000.00");
            m_bStClosingBalance = false;
            strcpy(m_szStClosingBalance, "+0000000000000.00");
            m_bStCurrentRate = false;
            strcpy(m_szStCurrentRate, "+0.00000000");
            m_bStIntAccrAmt = false;
            strcpy(m_szStIntAccrAmt, "+00000000000.000000");
            m_bStIpdCent = false;
            strcpy(m_szStIpdCent, "");
            m_bStIpdYr = false;
            strcpy(m_szStIpdYr, "");
            m_bStIpdMo = false;
            strcpy(m_szStIpdMo, "");
            m_bStIpdDa = false;
            strcpy(m_szStIpdDa, "");
            m_bStMtdServChrg = false;
            strcpy(m_szStMtdServChrg, "+000000000.00");
            m_bStIdDnpYear = false;
            strcpy(m_szStIdDnpYear, "0000");
            m_bStIdDnpMo = false;
            strcpy(m_szStIdDnpMo, "");
            m_bStIdDnpDa = false;
            strcpy(m_szStIdDnpDa, "");
            m_bStCdAnticInt = false;
            strcpy(m_szStCdAnticInt, "+0000000000000.00");
            m_bStScTrlrServChrg = false;
            strcpy(m_szStScTrlrServChrg, "+000000000.00");
            m_bStStatus = false;
            strcpy(m_szStStatus, "");
            m_bStOfficer = false;
            strcpy(m_szStOfficer, "");
            m_bStMntPeriod = false;
            strcpy(m_szStMntPeriod, "");
            m_bStMntIncr = false;
            strcpy(m_szStMntIncr, "+000");
            m_bStMntAnnivDay = false;
            strcpy(m_szStMntAnnivDay, "");
            m_bStMatAutoRenew = false;
            strcpy(m_szStMatAutoRenew, "");
            m_bStMatDnmYear = false;
            strcpy(m_szStMatDnmYear, "0000");
            m_bStMatDnmMo = false;
            strcpy(m_szStMatDnmMo, "");
            m_bStMatDnmDa = false;
            strcpy(m_szStMatDnmDa, "");
            m_bStLastRenewDate = false;
            strcpy(m_szStLastRenewDate, "");
            m_bStRenewCurBal = false;
            strcpy(m_szStRenewCurBal, "+0000000000000.00");
            m_bStRenewTimesRenew = false;
            strcpy(m_szStRenewTimesRenew, "+000");
            m_bStCaNoOfPymts = false;
            strcpy(m_szStCaNoOfPymts, "+000");
            m_bStCaLastPymtNo = false;
            strcpy(m_szStCaLastPymtNo, "+000");
            m_bStCaNoOfPymtsMade = false;
            strcpy(m_szStCaNoOfPymtsMade, "+000");
            m_bStIntPayPrevPay = false;
            strcpy(m_szStIntPayPrevPay, "+0000000000000.00");
            m_bStAcctCategory = false;
            strcpy(m_szStAcctCategory, "");
            m_bStCustLanguage = false;
            strcpy(m_szStCustLanguage, "");
            m_bStCustLangGroup = false;
            strcpy(m_szStCustLangGroup, "");
            m_bStCurrCode = false;
            strcpy(m_szStCurrCode, "");
            m_bStCurrDec = false;
            strcpy(m_szStCurrDec, "");
            m_bStmFmFlag = false;
            strcpy(m_szStmFmFlag, "");
            m_bStmNameAddrFlag = false;
            strcpy(m_szStmNameAddrFlag, "");
            m_bStmMemoFlag = false;
            strcpy(m_szStmMemoFlag, "");
            m_bStmMonyFlag = false;
            strcpy(m_szStmMonyFlag, "");
            m_bStmBackdateFlag = false;
            strcpy(m_szStmBackdateFlag, "");
            m_bStmRequestFlag = false;
            strcpy(m_szStmRequestFlag, "");
            m_bStmPlanFlag = false;
            strcpy(m_szStmPlanFlag, "");
            m_bStmDoNotCloseFlag = false;
            strcpy(m_szStmDoNotCloseFlag, "");
            m_bStmClsFlag = false;
            strcpy(m_szStmClsFlag, "");
            m_bStmAvailBal = false;
            strcpy(m_szStmAvailBal, "+0000000000000.00");
            m_bStmLedgerBal = false;
            strcpy(m_szStmLedgerBal, "+0000000000000.00");
            m_bStmProjAccrInt = false;
            strcpy(m_szStmProjAccrInt, "+0000000000000.00");
            m_bStmStopHoldSumFlag = false;
            strcpy(m_szStmStopHoldSumFlag, "");
            m_bStmShsHoldFullBal = false;
            strcpy(m_szStmShsHoldFullBal, "");
            m_bStmShsHoldsAmt = false;
            strcpy(m_szStmShsHoldsAmt, "+0000000000000.00");
            m_bStmShsPledgeFullBal = false;
            strcpy(m_szStmShsPledgeFullBal, "");
            m_bStmShsPledgeAmt = false;
            strcpy(m_szStmShsPledgeAmt, "+0000000000000.00");
            m_bStmMatDnmCent = false;
            strcpy(m_szStmMatDnmCent, "");
            m_bStmMatDnmYr = false;
            strcpy(m_szStmMatDnmYr, "");
            m_bStmMatDnmMo = false;
            strcpy(m_szStmMatDnmMo, "");
            m_bStmMatDnmDa = false;
            strcpy(m_szStmMatDnmDa, "");
            m_bStmIpCurAnnlRate2 = false;
            strcpy(m_szStmIpCurAnnlRate2, "+000.000000");
            m_bStGracePeriodFlag = false;
            strcpy(m_szStGracePeriodFlag, "");
            m_bStGraceEndDate = false;
            strcpy(m_szStGraceEndDate, "");
            m_bStShortName = false;
            strcpy(m_szStShortName, "");
            m_bStmOffEmp = false;
            strcpy(m_szStmOffEmp, "");
            m_bStAnalysisAcct = false;
            strcpy(m_szStAnalysisAcct, "");
            m_bStmIraTrlrLstDistCc = false;
            strcpy(m_szStmIraTrlrLstDistCc, "");
            m_bStmIraTrlrLstDistYy = false;
            strcpy(m_szStmIraTrlrLstDistYy, "");
            m_bStmIraTrlrLstDistMo = false;
            strcpy(m_szStmIraTrlrLstDistMo, "");
            m_bStmIraTrlrLstDistDa = false;
            strcpy(m_szStmIraTrlrLstDistDa, "");
            m_bStIraTrPkRetPlanId = false;
            strcpy(m_szStIraTrPkRetPlanId, "");
            m_bStIraTrPkIrsSeqNo = false;
            strcpy(m_szStIraTrPkIrsSeqNo, "");
            m_bStIraTrPkEmpPlanId = false;
            strcpy(m_szStIraTrPkEmpPlanId, "");
            m_bStIraTrlrPrimaryInd = false;
            strcpy(m_szStIraTrlrPrimaryInd, "");
            m_bStIraTrlrStatusCd = false;
            strcpy(m_szStIraTrlrStatusCd, "");
            m_bStmTotalPenalty = false;
            strcpy(m_szStmTotalPenalty, "+0000000000000.00");
            m_bStRegion = false;
            strcpy(m_szStRegion, "");
            m_bBc1ProcCent = false;
            strcpy(m_szBc1ProcCent, "");
            m_bBc1ProcYr = false;
            strcpy(m_szBc1ProcYr, "");
            m_bBc1ProcMo = false;
            strcpy(m_szBc1ProcMo, "");
            m_bBc1ProcDa = false;
            strcpy(m_szBc1ProcDa, "");
            m_bStScTrlrNscdCent = false;
            strcpy(m_szStScTrlrNscdCent, "");
            m_bStStmtTrlrSiLsdYr = false;
            strcpy(m_szStStmtTrlrSiLsdYr, "");
            m_bStStmtTrlrSiLsdMo = false;
            strcpy(m_szStStmtTrlrSiLsdMo, "");
            m_bStStmtTrlrSiLsdDa = false;
            strcpy(m_szStStmtTrlrSiLsdDa, "");
            m_bStGraceWdPeriod = false;
            strcpy(m_szStGraceWdPeriod, "");
            m_bStTrlrCtlIraFlg = false;
            strcpy(m_szStTrlrCtlIraFlg, "");
            m_bStTrlrCtlServChrgFlg = false;
            strcpy(m_szStTrlrCtlServChrgFlg, "");
            m_bStScTrlrWaiveScFlg = false;
            strcpy(m_szStScTrlrWaiveScFlg, "");
            m_bStScTrlrWaiveScRsn = false;
            strcpy(m_szStScTrlrWaiveScRsn, "");
            m_bStStmtTrlrCycleNo = false;
            m_nStStmtTrlrCycleNo = 0;
            m_bStStmtTrlrPullCode = false;
            strcpy(m_szStStmtTrlrPullCode, "");
            m_bStTrlrCtlStmtFlg = false;
            strcpy(m_szStTrlrCtlStmtFlg, "");
            m_bStHpnAreaCode = false;
            strcpy(m_szStHpnAreaCode, "");
            m_bStHomePhone = false;
            strcpy(m_szStHomePhone, "0000000");
            m_bStHomeExtension = false;
            strcpy(m_szStHomeExtension, "0000");
            m_bStOpnAreaCode = false;
            strcpy(m_szStOpnAreaCode, "");
            m_bStOfficePhone = false;
            strcpy(m_szStOfficePhone, "");
            m_bStOfficeExtension = false;
            strcpy(m_szStOfficeExtension, "0000");
            m_bStTinCert = false;
            strcpy(m_szStTinCert, "");
            m_bStIraTrlrType = false;
            strcpy(m_szStIraTrlrType, "");
            m_bStIraTrlrDecDisab = false;
            strcpy(m_szStIraTrlrDecDisab, "");
            m_bStRequiredSigns = false;
            strcpy(m_szStRequiredSigns, "");
            m_bStmCollectedBal = false;
            strcpy(m_szStmCollectedBal, "+0000000000000.00");
            m_bAvgBal = false;
            strcpy(m_szAvgBal, "+0000000000000.00");
            m_bStStmtTrlrMailFlag = false;
            strcpy(m_szStStmtTrlrMailFlag, "");
            m_bStDcCent = false;
            strcpy(m_szStDcCent, "");
            m_bStDcYr = false;
            strcpy(m_szStDcYr, "");
            m_bStDcMo = false;
            strcpy(m_szStDcMo, "");
            m_bStDcDa = false;
            strcpy(m_szStDcDa, "");
            m_bStBkupWthldFlag = false;
            strcpy(m_szStBkupWthldFlag, "");
            m_bStTaxReason = false;
            strcpy(m_szStTaxReason, "");
            m_bStIntParamDailyAccr = false;
            strcpy(m_szStIntParamDailyAccr, "+00000000000.000000");
            m_bStIntDistSchedCd = false;
            strcpy(m_szStIntDistSchedCd, "");
            m_bStIntDistIncr = false;
            strcpy(m_szStIntDistIncr, "+000");
            m_bStIntDistCd = false;
            strcpy(m_szStIntDistCd, "");
            m_bStIraTrlrScDistSdCd = false;
            strcpy(m_szStIraTrlrScDistSdCd, "");
            m_bBc1Aba = false;
            strcpy(m_szBc1Aba, "");
            m_bBc1RunCent = false;
            strcpy(m_szBc1RunCent, "");
            m_bBc1RunYr = false;
            strcpy(m_szBc1RunYr, "");
            m_bBc1RunMo = false;
            strcpy(m_szBc1RunMo, "");
            m_bBc1RunDa = false;
            strcpy(m_szBc1RunDa, "");
            m_bBc1LpdPtCent = false;
            strcpy(m_szBc1LpdPtCent, "");
            m_bBc1LpdPtYr = false;
            strcpy(m_szBc1LpdPtYr, "");
            m_bBc1LpdPtMo = false;
            strcpy(m_szBc1LpdPtMo, "");
            m_bBc1LpdPtDa = false;
            strcpy(m_szBc1LpdPtDa, "");
            m_bBc1NpdProcCent = false;
            strcpy(m_szBc1NpdProcCent, "");
            m_bBc1NpdProcYr = false;
            strcpy(m_szBc1NpdProcYr, "");
            m_bBc1NpdProcMo = false;
            strcpy(m_szBc1NpdProcMo, "");
            m_bBc1NpdProcDa = false;
            strcpy(m_szBc1NpdProcDa, "");
            m_bStAfAcctTrlrNo = false;
            strcpy(m_szStAfAcctTrlrNo, "+000");
            m_bStPbPassbookAcct = false;
            strcpy(m_szStPbPassbookAcct, "");
            m_bStImFundingFlag = false;
            strcpy(m_szStImFundingFlag, "");
            m_bNraCertName1 = false;
            strcpy(m_szNraCertName1, "");
            m_bNraCertName2 = false;
            strcpy(m_szNraCertName2, "");
            m_bTaxCountry = false;
            strcpy(m_szTaxCountry, "");
            m_bProvinceCd = false;
            strcpy(m_szProvinceCd, "");
            m_bNaTrlrCountry = false;
            strcpy(m_szNaTrlrCountry, "");
            m_bStStmtTrlrSiBegBal = false;
            strcpy(m_szStStmtTrlrSiBegBal, "+0000000000000.00");
            m_bStmLastMonyActvDate = false;
            strcpy(m_szStmLastMonyActvDate, "");
            m_bUserCharField1 = false;
            strcpy(m_szUserCharField1, "");
            m_bUserCharField2 = false;
            strcpy(m_szUserCharField2, "");
            m_bUserCharField3 = false;
            strcpy(m_szUserCharField3, "");
            m_bYesterdayFloatAmt = false;
            strcpy(m_szYesterdayFloatAmt, "+0000000000000.00");
            m_bTodayFloatAmt = false;
            strcpy(m_szTodayFloatAmt, "+0000000000000.00");
            m_bTotalBalance = false;
            strcpy(m_szTotalBalance, "+0000000000000.00");
            m_bStGovernmentId = false;
            strcpy(m_szStGovernmentId, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                StNaTrlr[lOccurs]  = &CStNaTrlr[lOccurs];
                CStNaTrlr[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 11; lOccurs++)
            {
                StAfAcctTrlr[lOccurs]  = &CStAfAcctTrlr[lOccurs];
                CStAfAcctTrlr[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bStControl1 = false;
            strcpy(m_szStControl1, "");
            m_bStControl2 = false;
            strcpy(m_szStControl2, "");
            m_bStControl3 = false;
            strcpy(m_szStControl3, "");
            m_bStControl4 = false;
            strcpy(m_szStControl4, "");
            m_bStAccountNo = false;
            strcpy(m_szStAccountNo, "");
            m_bStStateCode = false;
            strcpy(m_szStStateCode, "");
            m_bStZipCodeFixed5 = false;
            strcpy(m_szStZipCodeFixed5, "");
            m_bStZipCodeDash = false;
            strcpy(m_szStZipCodeDash, "");
            m_bStZipCodeLast4 = false;
            strcpy(m_szStZipCodeLast4, "");
            m_bStCountryCode = false;
            strcpy(m_szStCountryCode, "");
            m_bStBranch = false;
            strcpy(m_szStBranch, "");
            m_bStAcctType = false;
            strcpy(m_szStAcctType, "");
            m_bStLcdCent = false;
            strcpy(m_szStLcdCent, "");
            m_bStLcdYr = false;
            strcpy(m_szStLcdYr, "");
            m_bStLcdMo = false;
            strcpy(m_szStLcdMo, "");
            m_bStLcdDa = false;
            strcpy(m_szStLcdDa, "");
            m_bStAmtLastDep = false;
            strcpy(m_szStAmtLastDep, "+0000000000000.00");
            m_bStLcwCent = false;
            strcpy(m_szStLcwCent, "");
            m_bStLcwYr = false;
            strcpy(m_szStLcwYr, "");
            m_bStLcwMo = false;
            strcpy(m_szStLcwMo, "");
            m_bStLcwDa = false;
            strcpy(m_szStLcwDa, "");
            m_bStAmtLastWithdrawal = false;
            strcpy(m_szStAmtLastWithdrawal, "+0000000000000.00");
            m_bStFtiCode = false;
            strcpy(m_szStFtiCode, "");
            m_bStFtiPrefix = false;
            strcpy(m_szStFtiPrefix, "");
            m_bStFtiSsn1 = false;
            strcpy(m_szStFtiSsn1, "");
            m_bStFtiSsn2 = false;
            strcpy(m_szStFtiSsn2, "");
            m_bStFtiSsn3 = false;
            strcpy(m_szStFtiSsn3, "");
            m_bStFtiSuffix = false;
            strcpy(m_szStFtiSuffix, "");
            m_bStYtdIntPaid = false;
            strcpy(m_szStYtdIntPaid, "+0000000000000.00");
            m_bStLytdIntPaid = false;
            strcpy(m_szStLytdIntPaid, "+0000000000000.00");
            m_bStAoiDoCent = false;
            strcpy(m_szStAoiDoCent, "");
            m_bStAoiDoYr = false;
            strcpy(m_szStAoiDoYr, "");
            m_bStAoiDoMo = false;
            strcpy(m_szStAoiDoMo, "");
            m_bStAoiDoDa = false;
            strcpy(m_szStAoiDoDa, "");
            m_bStCaPaymentAmt = false;
            strcpy(m_szStCaPaymentAmt, "+0000000000000.00");
            m_bStClosingBalance = false;
            strcpy(m_szStClosingBalance, "+0000000000000.00");
            m_bStCurrentRate = false;
            strcpy(m_szStCurrentRate, "+0.00000000");
            m_bStIntAccrAmt = false;
            strcpy(m_szStIntAccrAmt, "+00000000000.000000");
            m_bStIpdCent = false;
            strcpy(m_szStIpdCent, "");
            m_bStIpdYr = false;
            strcpy(m_szStIpdYr, "");
            m_bStIpdMo = false;
            strcpy(m_szStIpdMo, "");
            m_bStIpdDa = false;
            strcpy(m_szStIpdDa, "");
            m_bStMtdServChrg = false;
            strcpy(m_szStMtdServChrg, "+000000000.00");
            m_bStIdDnpYear = false;
            strcpy(m_szStIdDnpYear, "0000");
            m_bStIdDnpMo = false;
            strcpy(m_szStIdDnpMo, "");
            m_bStIdDnpDa = false;
            strcpy(m_szStIdDnpDa, "");
            m_bStCdAnticInt = false;
            strcpy(m_szStCdAnticInt, "+0000000000000.00");
            m_bStScTrlrServChrg = false;
            strcpy(m_szStScTrlrServChrg, "+000000000.00");
            m_bStStatus = false;
            strcpy(m_szStStatus, "");
            m_bStOfficer = false;
            strcpy(m_szStOfficer, "");
            m_bStMntPeriod = false;
            strcpy(m_szStMntPeriod, "");
            m_bStMntIncr = false;
            strcpy(m_szStMntIncr, "+000");
            m_bStMntAnnivDay = false;
            strcpy(m_szStMntAnnivDay, "");
            m_bStMatAutoRenew = false;
            strcpy(m_szStMatAutoRenew, "");
            m_bStMatDnmYear = false;
            strcpy(m_szStMatDnmYear, "0000");
            m_bStMatDnmMo = false;
            strcpy(m_szStMatDnmMo, "");
            m_bStMatDnmDa = false;
            strcpy(m_szStMatDnmDa, "");
            m_bStLastRenewDate = false;
            strcpy(m_szStLastRenewDate, "");
            m_bStRenewCurBal = false;
            strcpy(m_szStRenewCurBal, "+0000000000000.00");
            m_bStRenewTimesRenew = false;
            strcpy(m_szStRenewTimesRenew, "+000");
            m_bStCaNoOfPymts = false;
            strcpy(m_szStCaNoOfPymts, "+000");
            m_bStCaLastPymtNo = false;
            strcpy(m_szStCaLastPymtNo, "+000");
            m_bStCaNoOfPymtsMade = false;
            strcpy(m_szStCaNoOfPymtsMade, "+000");
            m_bStIntPayPrevPay = false;
            strcpy(m_szStIntPayPrevPay, "+0000000000000.00");
            m_bStAcctCategory = false;
            strcpy(m_szStAcctCategory, "");
            m_bStCustLanguage = false;
            strcpy(m_szStCustLanguage, "");
            m_bStCustLangGroup = false;
            strcpy(m_szStCustLangGroup, "");
            m_bStCurrCode = false;
            strcpy(m_szStCurrCode, "");
            m_bStCurrDec = false;
            strcpy(m_szStCurrDec, "");
            m_bStmFmFlag = false;
            strcpy(m_szStmFmFlag, "");
            m_bStmNameAddrFlag = false;
            strcpy(m_szStmNameAddrFlag, "");
            m_bStmMemoFlag = false;
            strcpy(m_szStmMemoFlag, "");
            m_bStmMonyFlag = false;
            strcpy(m_szStmMonyFlag, "");
            m_bStmBackdateFlag = false;
            strcpy(m_szStmBackdateFlag, "");
            m_bStmRequestFlag = false;
            strcpy(m_szStmRequestFlag, "");
            m_bStmPlanFlag = false;
            strcpy(m_szStmPlanFlag, "");
            m_bStmDoNotCloseFlag = false;
            strcpy(m_szStmDoNotCloseFlag, "");
            m_bStmClsFlag = false;
            strcpy(m_szStmClsFlag, "");
            m_bStmAvailBal = false;
            strcpy(m_szStmAvailBal, "+0000000000000.00");
            m_bStmLedgerBal = false;
            strcpy(m_szStmLedgerBal, "+0000000000000.00");
            m_bStmProjAccrInt = false;
            strcpy(m_szStmProjAccrInt, "+0000000000000.00");
            m_bStmStopHoldSumFlag = false;
            strcpy(m_szStmStopHoldSumFlag, "");
            m_bStmShsHoldFullBal = false;
            strcpy(m_szStmShsHoldFullBal, "");
            m_bStmShsHoldsAmt = false;
            strcpy(m_szStmShsHoldsAmt, "+0000000000000.00");
            m_bStmShsPledgeFullBal = false;
            strcpy(m_szStmShsPledgeFullBal, "");
            m_bStmShsPledgeAmt = false;
            strcpy(m_szStmShsPledgeAmt, "+0000000000000.00");
            m_bStmMatDnmCent = false;
            strcpy(m_szStmMatDnmCent, "");
            m_bStmMatDnmYr = false;
            strcpy(m_szStmMatDnmYr, "");
            m_bStmMatDnmMo = false;
            strcpy(m_szStmMatDnmMo, "");
            m_bStmMatDnmDa = false;
            strcpy(m_szStmMatDnmDa, "");
            m_bStmIpCurAnnlRate2 = false;
            strcpy(m_szStmIpCurAnnlRate2, "+000.000000");
            m_bStGracePeriodFlag = false;
            strcpy(m_szStGracePeriodFlag, "");
            m_bStGraceEndDate = false;
            strcpy(m_szStGraceEndDate, "");
            m_bStShortName = false;
            strcpy(m_szStShortName, "");
            m_bStmOffEmp = false;
            strcpy(m_szStmOffEmp, "");
            m_bStAnalysisAcct = false;
            strcpy(m_szStAnalysisAcct, "");
            m_bStmIraTrlrLstDistCc = false;
            strcpy(m_szStmIraTrlrLstDistCc, "");
            m_bStmIraTrlrLstDistYy = false;
            strcpy(m_szStmIraTrlrLstDistYy, "");
            m_bStmIraTrlrLstDistMo = false;
            strcpy(m_szStmIraTrlrLstDistMo, "");
            m_bStmIraTrlrLstDistDa = false;
            strcpy(m_szStmIraTrlrLstDistDa, "");
            m_bStIraTrPkRetPlanId = false;
            strcpy(m_szStIraTrPkRetPlanId, "");
            m_bStIraTrPkIrsSeqNo = false;
            strcpy(m_szStIraTrPkIrsSeqNo, "");
            m_bStIraTrPkEmpPlanId = false;
            strcpy(m_szStIraTrPkEmpPlanId, "");
            m_bStIraTrlrPrimaryInd = false;
            strcpy(m_szStIraTrlrPrimaryInd, "");
            m_bStIraTrlrStatusCd = false;
            strcpy(m_szStIraTrlrStatusCd, "");
            m_bStmTotalPenalty = false;
            strcpy(m_szStmTotalPenalty, "+0000000000000.00");
            m_bStRegion = false;
            strcpy(m_szStRegion, "");
            m_bBc1ProcCent = false;
            strcpy(m_szBc1ProcCent, "");
            m_bBc1ProcYr = false;
            strcpy(m_szBc1ProcYr, "");
            m_bBc1ProcMo = false;
            strcpy(m_szBc1ProcMo, "");
            m_bBc1ProcDa = false;
            strcpy(m_szBc1ProcDa, "");
            m_bStScTrlrNscdCent = false;
            strcpy(m_szStScTrlrNscdCent, "");
            m_bStStmtTrlrSiLsdYr = false;
            strcpy(m_szStStmtTrlrSiLsdYr, "");
            m_bStStmtTrlrSiLsdMo = false;
            strcpy(m_szStStmtTrlrSiLsdMo, "");
            m_bStStmtTrlrSiLsdDa = false;
            strcpy(m_szStStmtTrlrSiLsdDa, "");
            m_bStGraceWdPeriod = false;
            strcpy(m_szStGraceWdPeriod, "");
            m_bStTrlrCtlIraFlg = false;
            strcpy(m_szStTrlrCtlIraFlg, "");
            m_bStTrlrCtlServChrgFlg = false;
            strcpy(m_szStTrlrCtlServChrgFlg, "");
            m_bStScTrlrWaiveScFlg = false;
            strcpy(m_szStScTrlrWaiveScFlg, "");
            m_bStScTrlrWaiveScRsn = false;
            strcpy(m_szStScTrlrWaiveScRsn, "");
            m_bStStmtTrlrCycleNo = false;
            m_nStStmtTrlrCycleNo = 0;
            m_bStStmtTrlrPullCode = false;
            strcpy(m_szStStmtTrlrPullCode, "");
            m_bStTrlrCtlStmtFlg = false;
            strcpy(m_szStTrlrCtlStmtFlg, "");
            m_bStHpnAreaCode = false;
            strcpy(m_szStHpnAreaCode, "");
            m_bStHomePhone = false;
            strcpy(m_szStHomePhone, "0000000");
            m_bStHomeExtension = false;
            strcpy(m_szStHomeExtension, "0000");
            m_bStOpnAreaCode = false;
            strcpy(m_szStOpnAreaCode, "");
            m_bStOfficePhone = false;
            strcpy(m_szStOfficePhone, "");
            m_bStOfficeExtension = false;
            strcpy(m_szStOfficeExtension, "0000");
            m_bStTinCert = false;
            strcpy(m_szStTinCert, "");
            m_bStIraTrlrType = false;
            strcpy(m_szStIraTrlrType, "");
            m_bStIraTrlrDecDisab = false;
            strcpy(m_szStIraTrlrDecDisab, "");
            m_bStRequiredSigns = false;
            strcpy(m_szStRequiredSigns, "");
            m_bStmCollectedBal = false;
            strcpy(m_szStmCollectedBal, "+0000000000000.00");
            m_bAvgBal = false;
            strcpy(m_szAvgBal, "+0000000000000.00");
            m_bStStmtTrlrMailFlag = false;
            strcpy(m_szStStmtTrlrMailFlag, "");
            m_bStDcCent = false;
            strcpy(m_szStDcCent, "");
            m_bStDcYr = false;
            strcpy(m_szStDcYr, "");
            m_bStDcMo = false;
            strcpy(m_szStDcMo, "");
            m_bStDcDa = false;
            strcpy(m_szStDcDa, "");
            m_bStBkupWthldFlag = false;
            strcpy(m_szStBkupWthldFlag, "");
            m_bStTaxReason = false;
            strcpy(m_szStTaxReason, "");
            m_bStIntParamDailyAccr = false;
            strcpy(m_szStIntParamDailyAccr, "+00000000000.000000");
            m_bStIntDistSchedCd = false;
            strcpy(m_szStIntDistSchedCd, "");
            m_bStIntDistIncr = false;
            strcpy(m_szStIntDistIncr, "+000");
            m_bStIntDistCd = false;
            strcpy(m_szStIntDistCd, "");
            m_bStIraTrlrScDistSdCd = false;
            strcpy(m_szStIraTrlrScDistSdCd, "");
            m_bBc1Aba = false;
            strcpy(m_szBc1Aba, "");
            m_bBc1RunCent = false;
            strcpy(m_szBc1RunCent, "");
            m_bBc1RunYr = false;
            strcpy(m_szBc1RunYr, "");
            m_bBc1RunMo = false;
            strcpy(m_szBc1RunMo, "");
            m_bBc1RunDa = false;
            strcpy(m_szBc1RunDa, "");
            m_bBc1LpdPtCent = false;
            strcpy(m_szBc1LpdPtCent, "");
            m_bBc1LpdPtYr = false;
            strcpy(m_szBc1LpdPtYr, "");
            m_bBc1LpdPtMo = false;
            strcpy(m_szBc1LpdPtMo, "");
            m_bBc1LpdPtDa = false;
            strcpy(m_szBc1LpdPtDa, "");
            m_bBc1NpdProcCent = false;
            strcpy(m_szBc1NpdProcCent, "");
            m_bBc1NpdProcYr = false;
            strcpy(m_szBc1NpdProcYr, "");
            m_bBc1NpdProcMo = false;
            strcpy(m_szBc1NpdProcMo, "");
            m_bBc1NpdProcDa = false;
            strcpy(m_szBc1NpdProcDa, "");
            m_bStAfAcctTrlrNo = false;
            strcpy(m_szStAfAcctTrlrNo, "+000");
            m_bStPbPassbookAcct = false;
            strcpy(m_szStPbPassbookAcct, "");
            m_bStImFundingFlag = false;
            strcpy(m_szStImFundingFlag, "");
            m_bNraCertName1 = false;
            strcpy(m_szNraCertName1, "");
            m_bNraCertName2 = false;
            strcpy(m_szNraCertName2, "");
            m_bTaxCountry = false;
            strcpy(m_szTaxCountry, "");
            m_bProvinceCd = false;
            strcpy(m_szProvinceCd, "");
            m_bNaTrlrCountry = false;
            strcpy(m_szNaTrlrCountry, "");
            m_bStStmtTrlrSiBegBal = false;
            strcpy(m_szStStmtTrlrSiBegBal, "+0000000000000.00");
            m_bStmLastMonyActvDate = false;
            strcpy(m_szStmLastMonyActvDate, "");
            m_bUserCharField1 = false;
            strcpy(m_szUserCharField1, "");
            m_bUserCharField2 = false;
            strcpy(m_szUserCharField2, "");
            m_bUserCharField3 = false;
            strcpy(m_szUserCharField3, "");
            m_bYesterdayFloatAmt = false;
            strcpy(m_szYesterdayFloatAmt, "+0000000000000.00");
            m_bTodayFloatAmt = false;
            strcpy(m_szTodayFloatAmt, "+0000000000000.00");
            m_bTotalBalance = false;
            strcpy(m_szTotalBalance, "+0000000000000.00");
            m_bStGovernmentId = false;
            strcpy(m_szStGovernmentId, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                StNaTrlr[lOccurs]  = &CStNaTrlr[lOccurs];
                CStNaTrlr[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 11; lOccurs++)
            {
                StAfAcctTrlr[lOccurs]  = &CStAfAcctTrlr[lOccurs];
                CStAfAcctTrlr[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    IDENTIFICATION NUMBER OF BANK/FIRST LEVEL OF CONTROL
        long lStControl1 () { return 2; };
        RWCString StControl1 (void)
        {
            return m_szStControl1;
        }
        long StControl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStControl1, sizeof(m_szStControl1), &m_bStControl1);
        }
        
        //    USER DEFINED SECOND LEVEL OF CONTROL
        long lStControl2 () { return 3; };
        RWCString StControl2 (void)
        {
            return m_szStControl2;
        }
        long StControl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStControl2, sizeof(m_szStControl2), &m_bStControl2);
        }
        
        //    USER DEFINED THIRD LEVEL OF CONTROL
        long lStControl3 () { return 3; };
        RWCString StControl3 (void)
        {
            return m_szStControl3;
        }
        long StControl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStControl3, sizeof(m_szStControl3), &m_bStControl3);
        }
        
        //    USER DEFINED FOURTH LEVEL OF CONTROL
        long lStControl4 () { return 3; };
        RWCString StControl4 (void)
        {
            return m_szStControl4;
        }
        long StControl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStControl4, sizeof(m_szStControl4), &m_bStControl4);
        }
        
        //    USER DEFINED NUMERIC FIELD TO IDENTIFY THE MASTER RECORD
        long lStAccountNo () { return 14; };
        RWCString StAccountNo (void)
        {
            return m_szStAccountNo;
        }
        long StAccountNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAccountNo, sizeof(m_szStAccountNo), &m_bStAccountNo);
        }
        
        //    STATE CODE OF THE ACCOUNT HOLDER
        long lStStateCode () { return 2; };
        RWCString StStateCode (void)
        {
            return m_szStStateCode;
        }
        long StStateCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStateCode, sizeof(m_szStStateCode), &m_bStStateCode);
        }
        
        //    ZIP CODE
        long lStZipCodeFixed5 () { return 5; };
        RWCString StZipCodeFixed5 (void)
        {
            return m_szStZipCodeFixed5;
        }
        long StZipCodeFixed5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStZipCodeFixed5, sizeof(m_szStZipCodeFixed5), &m_bStZipCodeFixed5);
        }
        
        //    DASH SEPARATING FIXED PORTION OF ZIP CODE AND EXTENSION
        long lStZipCodeDash () { return 1; };
        RWCString StZipCodeDash (void)
        {
            return m_szStZipCodeDash;
        }
        long StZipCodeDash (const RWCString& rwc)
        {
            return SetString(rwc, m_szStZipCodeDash, sizeof(m_szStZipCodeDash), &m_bStZipCodeDash);
        }
        
        //    ZIP CODE
        long lStZipCodeLast4 () { return 4; };
        RWCString StZipCodeLast4 (void)
        {
            return m_szStZipCodeLast4;
        }
        long StZipCodeLast4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStZipCodeLast4, sizeof(m_szStZipCodeLast4), &m_bStZipCodeLast4);
        }
        
        //    COUNTRY CODE OF ACCOUNT HOLDER
        long lStCountryCode () { return 5; };
        RWCString StCountryCode (void)
        {
            return m_szStCountryCode;
        }
        long StCountryCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCountryCode, sizeof(m_szStCountryCode), &m_bStCountryCode);
        }
        
        //    BRANCH
        long lStBranch () { return 3; };
        RWCString StBranch (void)
        {
            return m_szStBranch;
        }
        long StBranch (const RWCString& rwc)
        {
            return SetString(rwc, m_szStBranch, sizeof(m_szStBranch), &m_bStBranch);
        }
        
        //    USER DEFINED REQUIRED FIELD/IT IS A KEY TO TYPE CONTROL REC
        long lStAcctType () { return 3; };
        RWCString StAcctType (void)
        {
            return m_szStAcctType;
        }
        long StAcctType (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAcctType, sizeof(m_szStAcctType), &m_bStAcctType);
        }
        
        //    DATE OF LAST CUST DEPOSIT - CENTURY
        long lStLcdCent () { return 2; };
        RWCString StLcdCent (void)
        {
            return m_szStLcdCent;
        }
        long StLcdCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLcdCent, sizeof(m_szStLcdCent), &m_bStLcdCent);
        }
        
        //    DATE OF THE LAST CUSTOMER DEPOSIT/YEAR
        long lStLcdYr () { return 2; };
        RWCString StLcdYr (void)
        {
            return m_szStLcdYr;
        }
        long StLcdYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLcdYr, sizeof(m_szStLcdYr), &m_bStLcdYr);
        }
        
        //    DATE OF THE LAST CUSTOMER DEPOSIT/MTH
        long lStLcdMo () { return 2; };
        RWCString StLcdMo (void)
        {
            return m_szStLcdMo;
        }
        long StLcdMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLcdMo, sizeof(m_szStLcdMo), &m_bStLcdMo);
        }
        
        //    DATE OF THE LAST CUSTOMER DEPOSIT/DAY
        long lStLcdDa () { return 2; };
        RWCString StLcdDa (void)
        {
            return m_szStLcdDa;
        }
        long StLcdDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLcdDa, sizeof(m_szStLcdDa), &m_bStLcdDa);
        }
        
        //    AMOUNT OF THE LAST DEPOSIT MADE TO THE ACCT BY BNK OR CUST
        long lStAmtLastDep () { return 17; };
        RWCString StAmtLastDep (void)
        {
            return AceZeroSupp(m_szStAmtLastDep, &m_szSuppressBuff[0]);
        }
        RWCString StAmtLastDepRaw (void)
        {
            return m_szStAmtLastDep;
        }
        long StAmtLastDep (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAmtLastDep, sizeof(m_szStAmtLastDep), &m_bStAmtLastDep);
        }
        
        //    DATE OF LAST CUST WITHDRAWAL - CENTURY
        long lStLcwCent () { return 2; };
        RWCString StLcwCent (void)
        {
            return m_szStLcwCent;
        }
        long StLcwCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLcwCent, sizeof(m_szStLcwCent), &m_bStLcwCent);
        }
        
        //    COMP DEFN/DATE OF THE LAST CUSTOMER GENERATED WITHDRAWAL/YEA
        long lStLcwYr () { return 2; };
        RWCString StLcwYr (void)
        {
            return m_szStLcwYr;
        }
        long StLcwYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLcwYr, sizeof(m_szStLcwYr), &m_bStLcwYr);
        }
        
        //    COMP DEFN/DATE OF THE LAST CUSTOMER GENERATED WITHDRAWAL/MTH
        long lStLcwMo () { return 2; };
        RWCString StLcwMo (void)
        {
            return m_szStLcwMo;
        }
        long StLcwMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLcwMo, sizeof(m_szStLcwMo), &m_bStLcwMo);
        }
        
        //    COMP DEFN/DATE OF THE LAST CUSTOMER GENERATED WITHDRAWAL/DAY
        long lStLcwDa () { return 2; };
        RWCString StLcwDa (void)
        {
            return m_szStLcwDa;
        }
        long StLcwDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLcwDa, sizeof(m_szStLcwDa), &m_bStLcwDa);
        }
        
        //    AMOUNT OF LAST WITHDRAWAL MADE TO ACCT AS DEFINED BY COMPT
        long lStAmtLastWithdrawal () { return 17; };
        RWCString StAmtLastWithdrawal (void)
        {
            return AceZeroSupp(m_szStAmtLastWithdrawal, &m_szSuppressBuff[0]);
        }
        RWCString StAmtLastWithdrawalRaw (void)
        {
            return m_szStAmtLastWithdrawal;
        }
        long StAmtLastWithdrawal (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAmtLastWithdrawal, sizeof(m_szStAmtLastWithdrawal), &m_bStAmtLastWithdrawal);
        }
        
        //    SOCIAL SECURITY/TAX NUMBER
        long lStFtiCode () { return 1; };
        RWCString StFtiCode (void)
        {
            return m_szStFtiCode;
        }
        long StFtiCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStFtiCode, sizeof(m_szStFtiCode), &m_bStFtiCode);
        }
        
        //    ALPHA PREFIX, IF USED
        long lStFtiPrefix () { return 1; };
        RWCString StFtiPrefix (void)
        {
            return m_szStFtiPrefix;
        }
        long StFtiPrefix (const RWCString& rwc)
        {
            return SetString(rwc, m_szStFtiPrefix, sizeof(m_szStFtiPrefix), &m_bStFtiPrefix);
        }
        
        //    SOCIAL SECURITY NUMBER
        long lStFtiSsn1 () { return 3; };
        RWCString StFtiSsn1 (void)
        {
            return m_szStFtiSsn1;
        }
        long StFtiSsn1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStFtiSsn1, sizeof(m_szStFtiSsn1), &m_bStFtiSsn1);
        }
        
        //    SOCIAL SECURITY NUMBER
        long lStFtiSsn2 () { return 2; };
        RWCString StFtiSsn2 (void)
        {
            return m_szStFtiSsn2;
        }
        long StFtiSsn2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStFtiSsn2, sizeof(m_szStFtiSsn2), &m_bStFtiSsn2);
        }
        
        //    SOCIAL SECURITY NUMBER
        long lStFtiSsn3 () { return 4; };
        RWCString StFtiSsn3 (void)
        {
            return m_szStFtiSsn3;
        }
        long StFtiSsn3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStFtiSsn3, sizeof(m_szStFtiSsn3), &m_bStFtiSsn3);
        }
        
        //    ALPHA SUFFIX, IF USED
        long lStFtiSuffix () { return 1; };
        RWCString StFtiSuffix (void)
        {
            return m_szStFtiSuffix;
        }
        long StFtiSuffix (const RWCString& rwc)
        {
            return SetString(rwc, m_szStFtiSuffix, sizeof(m_szStFtiSuffix), &m_bStFtiSuffix);
        }
        
        //    YEAR TO DATE/ACTUAL INTEREST PAID DURING THE YEAR
        long lStYtdIntPaid () { return 17; };
        RWCString StYtdIntPaid (void)
        {
            return AceZeroSupp(m_szStYtdIntPaid, &m_szSuppressBuff[0]);
        }
        RWCString StYtdIntPaidRaw (void)
        {
            return m_szStYtdIntPaid;
        }
        long StYtdIntPaid (const RWCString& rwc)
        {
            return SetString(rwc, m_szStYtdIntPaid, sizeof(m_szStYtdIntPaid), &m_bStYtdIntPaid);
        }
        
        //    ACTUAL INTEREST PAID LAST YEAR
        long lStLytdIntPaid () { return 17; };
        RWCString StLytdIntPaid (void)
        {
            return AceZeroSupp(m_szStLytdIntPaid, &m_szSuppressBuff[0]);
        }
        RWCString StLytdIntPaidRaw (void)
        {
            return m_szStLytdIntPaid;
        }
        long StLytdIntPaid (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLytdIntPaid, sizeof(m_szStLytdIntPaid), &m_bStLytdIntPaid);
        }
        
        //    DATE ACCOUNT WAS OPENED - CENTURY
        long lStAoiDoCent () { return 2; };
        RWCString StAoiDoCent (void)
        {
            return m_szStAoiDoCent;
        }
        long StAoiDoCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAoiDoCent, sizeof(m_szStAoiDoCent), &m_bStAoiDoCent);
        }
        
        //    ACCOUNT OPENED DATE/YEAR
        long lStAoiDoYr () { return 2; };
        RWCString StAoiDoYr (void)
        {
            return m_szStAoiDoYr;
        }
        long StAoiDoYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAoiDoYr, sizeof(m_szStAoiDoYr), &m_bStAoiDoYr);
        }
        
        //    ACCOUNT OPENED DATE/MONTH
        long lStAoiDoMo () { return 2; };
        RWCString StAoiDoMo (void)
        {
            return m_szStAoiDoMo;
        }
        long StAoiDoMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAoiDoMo, sizeof(m_szStAoiDoMo), &m_bStAoiDoMo);
        }
        
        //    ACCOUNT OPENED DATE/DAY
        long lStAoiDoDa () { return 2; };
        RWCString StAoiDoDa (void)
        {
            return m_szStAoiDoDa;
        }
        long StAoiDoDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAoiDoDa, sizeof(m_szStAoiDoDa), &m_bStAoiDoDa);
        }
        
        //    DENOMINATION OF THE PAYMENTS
        long lStCaPaymentAmt () { return 17; };
        RWCString StCaPaymentAmt (void)
        {
            return AceZeroSupp(m_szStCaPaymentAmt, &m_szSuppressBuff[0]);
        }
        RWCString StCaPaymentAmtRaw (void)
        {
            return m_szStCaPaymentAmt;
        }
        long StCaPaymentAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCaPaymentAmt, sizeof(m_szStCaPaymentAmt), &m_bStCaPaymentAmt);
        }
        
        //    CLOSING BALANCE
        long lStClosingBalance () { return 17; };
        RWCString StClosingBalance (void)
        {
            return AceZeroSupp(m_szStClosingBalance, &m_szSuppressBuff[0]);
        }
        RWCString StClosingBalanceRaw (void)
        {
            return m_szStClosingBalance;
        }
        long StClosingBalance (const RWCString& rwc)
        {
            return SetString(rwc, m_szStClosingBalance, sizeof(m_szStClosingBalance), &m_bStClosingBalance);
        }
        
        //    ANNUAL RATE FROM BCR BEFORE ANY ADJUSTMENTS ARE APPLIED
        long lStCurrentRate () { return 11; };
        RWCString StCurrentRate (void)
        {
            return AceZeroSupp(m_szStCurrentRate, &m_szSuppressBuff[0]);
        }
        RWCString StCurrentRateRaw (void)
        {
            return m_szStCurrentRate;
        }
        long StCurrentRate (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCurrentRate, sizeof(m_szStCurrentRate), &m_bStCurrentRate);
        }
        
        //    INTEREST ACCRUED SINCE LAST PAID
        long lStIntAccrAmt () { return 19; };
        RWCString StIntAccrAmt (void)
        {
            return AceZeroSupp(m_szStIntAccrAmt, &m_szSuppressBuff[0]);
        }
        RWCString StIntAccrAmtRaw (void)
        {
            return m_szStIntAccrAmt;
        }
        long StIntAccrAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntAccrAmt, sizeof(m_szStIntAccrAmt), &m_bStIntAccrAmt);
        }
        
        //    INTEREST PAYMENT HISTORY DATE - CENTURY
        long lStIpdCent () { return 2; };
        RWCString StIpdCent (void)
        {
            return m_szStIpdCent;
        }
        long StIpdCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIpdCent, sizeof(m_szStIpdCent), &m_bStIpdCent);
        }
        
        //    PAYMENT DATE/YEAR
        long lStIpdYr () { return 2; };
        RWCString StIpdYr (void)
        {
            return m_szStIpdYr;
        }
        long StIpdYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIpdYr, sizeof(m_szStIpdYr), &m_bStIpdYr);
        }
        
        //    PAYMENT DATE/MONTH
        long lStIpdMo () { return 2; };
        RWCString StIpdMo (void)
        {
            return m_szStIpdMo;
        }
        long StIpdMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIpdMo, sizeof(m_szStIpdMo), &m_bStIpdMo);
        }
        
        //    PAYMENT DATE/DAY
        long lStIpdDa () { return 2; };
        RWCString StIpdDa (void)
        {
            return m_szStIpdDa;
        }
        long StIpdDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIpdDa, sizeof(m_szStIpdDa), &m_bStIpdDa);
        }
        
        //    AMOUNT OF SERVICE CHARGE ASSESSED DURING THE CALENDAR MONTH
        long lStMtdServChrg () { return 13; };
        RWCString StMtdServChrg (void)
        {
            return AceZeroSupp(m_szStMtdServChrg, &m_szSuppressBuff[0]);
        }
        RWCString StMtdServChrgRaw (void)
        {
            return m_szStMtdServChrg;
        }
        long StMtdServChrg (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMtdServChrg, sizeof(m_szStMtdServChrg), &m_bStMtdServChrg);
        }
        
        //    DATE NEXT INTEREST PAYMENT IS DUE/YEAR
        long lStIdDnpYear () { return 4; };
        RWCString StIdDnpYear (void)
        {
            return m_szStIdDnpYear;
        }
        long StIdDnpYear (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIdDnpYear, sizeof(m_szStIdDnpYear), &m_bStIdDnpYear);
        }
        
        //    DATE NEXT INTEREST PAYMENT IS DUE/MONTH
        long lStIdDnpMo () { return 2; };
        RWCString StIdDnpMo (void)
        {
            return m_szStIdDnpMo;
        }
        long StIdDnpMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIdDnpMo, sizeof(m_szStIdDnpMo), &m_bStIdDnpMo);
        }
        
        //    DATE NEXT INTEREST PAYMENT IS DUE/DAY
        long lStIdDnpDa () { return 2; };
        RWCString StIdDnpDa (void)
        {
            return m_szStIdDnpDa;
        }
        long StIdDnpDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIdDnpDa, sizeof(m_szStIdDnpDa), &m_bStIdDnpDa);
        }
        
        //    INTEREST ANTICIPATED TO BE PAID ON NEXT PAYMENT DATE/CD ONLY
        long lStCdAnticInt () { return 17; };
        RWCString StCdAnticInt (void)
        {
            return AceZeroSupp(m_szStCdAnticInt, &m_szSuppressBuff[0]);
        }
        RWCString StCdAnticIntRaw (void)
        {
            return m_szStCdAnticInt;
        }
        long StCdAnticInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCdAnticInt, sizeof(m_szStCdAnticInt), &m_bStCdAnticInt);
        }
        
        //    SERVICE CHARGE AMOUNT
        long lStScTrlrServChrg () { return 13; };
        RWCString StScTrlrServChrg (void)
        {
            return AceZeroSupp(m_szStScTrlrServChrg, &m_szSuppressBuff[0]);
        }
        RWCString StScTrlrServChrgRaw (void)
        {
            return m_szStScTrlrServChrg;
        }
        long StScTrlrServChrg (const RWCString& rwc)
        {
            return SetString(rwc, m_szStScTrlrServChrg, sizeof(m_szStScTrlrServChrg), &m_bStScTrlrServChrg);
        }
        
        //    INDICATES THE STATUS OF AN ACCOUNT
        long lStStatus () { return 2; };
        RWCString StStatus (void)
        {
            return m_szStStatus;
        }
        long StStatus (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStatus, sizeof(m_szStStatus), &m_bStStatus);
        }
        
        //    OFFICER
        long lStOfficer () { return 5; };
        RWCString StOfficer (void)
        {
            return m_szStOfficer;
        }
        long StOfficer (const RWCString& rwc)
        {
            return SetString(rwc, m_szStOfficer, sizeof(m_szStOfficer), &m_bStOfficer);
        }
        
        //    INDICATES THE PERIOD IS IN DAYS OR MONTHS/TERM
        long lStMntPeriod () { return 1; };
        RWCString StMntPeriod (void)
        {
            return m_szStMntPeriod;
        }
        long StMntPeriod (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMntPeriod, sizeof(m_szStMntPeriod), &m_bStMntPeriod);
        }
        
        //    NUMBER OF DAYS OR MONTHS IN CONNECTION WITH TERM PERIOD
        long lStMntIncr () { return 4; };
        RWCString StMntIncr (void)
        {
            return AceZeroSupp(m_szStMntIncr, &m_szSuppressBuff[0]);
        }
        RWCString StMntIncrRaw (void)
        {
            return m_szStMntIncr;
        }
        long StMntIncr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMntIncr, sizeof(m_szStMntIncr), &m_bStMntIncr);
        }
        
        //    THE DAY IS TAKEN FROM THE ACCOUNT OPENED DAY
        long lStMntAnnivDay () { return 2; };
        RWCString StMntAnnivDay (void)
        {
            return m_szStMntAnnivDay;
        }
        long StMntAnnivDay (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMntAnnivDay, sizeof(m_szStMntAnnivDay), &m_bStMntAnnivDay);
        }
        
        //    INDICATES HOW AUTOMATIC RENEWAL TAKES PLACE
        long lStMatAutoRenew () { return 1; };
        RWCString StMatAutoRenew (void)
        {
            return m_szStMatAutoRenew;
        }
        long StMatAutoRenew (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMatAutoRenew, sizeof(m_szStMatAutoRenew), &m_bStMatAutoRenew);
        }
        
        //    NEXT DATE DEPOSIT OR CERTIFICATE WILL MATURE/YEAR
        long lStMatDnmYear () { return 4; };
        RWCString StMatDnmYear (void)
        {
            return m_szStMatDnmYear;
        }
        long StMatDnmYear (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMatDnmYear, sizeof(m_szStMatDnmYear), &m_bStMatDnmYear);
        }
        
        //    NEXT DATE DEPOSIT OR CERTIFICATE WILL MATURE/MONTH
        long lStMatDnmMo () { return 2; };
        RWCString StMatDnmMo (void)
        {
            return m_szStMatDnmMo;
        }
        long StMatDnmMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMatDnmMo, sizeof(m_szStMatDnmMo), &m_bStMatDnmMo);
        }
        
        //    NEXT DATE DEPOSIT OR CERTIFICATE WILL MATURE/DAY
        long lStMatDnmDa () { return 2; };
        RWCString StMatDnmDa (void)
        {
            return m_szStMatDnmDa;
        }
        long StMatDnmDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStMatDnmDa, sizeof(m_szStMatDnmDa), &m_bStMatDnmDa);
        }
        
        //    LAST RENEWAL DATE - CCYYMMDD
        long lStLastRenewDate () { return 8; };
        RWCString StLastRenewDate (void)
        {
            return m_szStLastRenewDate;
        }
        long StLastRenewDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szStLastRenewDate, sizeof(m_szStLastRenewDate), &m_bStLastRenewDate);
        }
        
        //    CURRENT BALANCE WHEN LAST RENEWED
        long lStRenewCurBal () { return 17; };
        RWCString StRenewCurBal (void)
        {
            return AceZeroSupp(m_szStRenewCurBal, &m_szSuppressBuff[0]);
        }
        RWCString StRenewCurBalRaw (void)
        {
            return m_szStRenewCurBal;
        }
        long StRenewCurBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szStRenewCurBal, sizeof(m_szStRenewCurBal), &m_bStRenewCurBal);
        }
        
        //    NUMBER OF TIMES RENEWED
        long lStRenewTimesRenew () { return 4; };
        RWCString StRenewTimesRenew (void)
        {
            return AceZeroSupp(m_szStRenewTimesRenew, &m_szSuppressBuff[0]);
        }
        RWCString StRenewTimesRenewRaw (void)
        {
            return m_szStRenewTimesRenew;
        }
        long StRenewTimesRenew (const RWCString& rwc)
        {
            return SetString(rwc, m_szStRenewTimesRenew, sizeof(m_szStRenewTimesRenew), &m_bStRenewTimesRenew);
        }
        
        //    TOTAL NUMBER OF PAYMENTS TO BE MADE
        long lStCaNoOfPymts () { return 4; };
        RWCString StCaNoOfPymts (void)
        {
            return AceZeroSupp(m_szStCaNoOfPymts, &m_szSuppressBuff[0]);
        }
        RWCString StCaNoOfPymtsRaw (void)
        {
            return m_szStCaNoOfPymts;
        }
        long StCaNoOfPymts (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCaNoOfPymts, sizeof(m_szStCaNoOfPymts), &m_bStCaNoOfPymts);
        }
        
        //    LAST PAYMENT COUPON NUMBER
        long lStCaLastPymtNo () { return 4; };
        RWCString StCaLastPymtNo (void)
        {
            return AceZeroSupp(m_szStCaLastPymtNo, &m_szSuppressBuff[0]);
        }
        RWCString StCaLastPymtNoRaw (void)
        {
            return m_szStCaLastPymtNo;
        }
        long StCaLastPymtNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCaLastPymtNo, sizeof(m_szStCaLastPymtNo), &m_bStCaLastPymtNo);
        }
        
        //    NUMBER OF PAYMENTS MADE TO DATE
        long lStCaNoOfPymtsMade () { return 4; };
        RWCString StCaNoOfPymtsMade (void)
        {
            return AceZeroSupp(m_szStCaNoOfPymtsMade, &m_szSuppressBuff[0]);
        }
        RWCString StCaNoOfPymtsMadeRaw (void)
        {
            return m_szStCaNoOfPymtsMade;
        }
        long StCaNoOfPymtsMade (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCaNoOfPymtsMade, sizeof(m_szStCaNoOfPymtsMade), &m_bStCaNoOfPymtsMade);
        }
        
        //    AMOUNT OF PREVIOUS INTEREST PAYMENT
        long lStIntPayPrevPay () { return 17; };
        RWCString StIntPayPrevPay (void)
        {
            return AceZeroSupp(m_szStIntPayPrevPay, &m_szSuppressBuff[0]);
        }
        RWCString StIntPayPrevPayRaw (void)
        {
            return m_szStIntPayPrevPay;
        }
        long StIntPayPrevPay (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntPayPrevPay, sizeof(m_szStIntPayPrevPay), &m_bStIntPayPrevPay);
        }
        
        //    REQ NONMAINTENANCEABLE APPL CODE WHICH CORRES TO PROD TYPE
        long lStAcctCategory () { return 1; };
        RWCString StAcctCategory (void)
        {
            return m_szStAcctCategory;
        }
        long StAcctCategory (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAcctCategory, sizeof(m_szStAcctCategory), &m_bStAcctCategory);
        }
        
        //    CUSTOMER LANGUAGE (ENGLISH, SPANISH, ETC.)
        long lStCustLanguage () { return 2; };
        RWCString StCustLanguage (void)
        {
            return m_szStCustLanguage;
        }
        long StCustLanguage (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCustLanguage, sizeof(m_szStCustLanguage), &m_bStCustLanguage);
        }
        
        //    CUSTOMER LANGUAGE GROUP
        long lStCustLangGroup () { return 1; };
        RWCString StCustLangGroup (void)
        {
            return m_szStCustLangGroup;
        }
        long StCustLangGroup (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCustLangGroup, sizeof(m_szStCustLangGroup), &m_bStCustLangGroup);
        }
        
        //    CURRENCY FOR THE ACCOUNT (U.S. DOLLARS, JAPANESE YEN, ETC.)
        long lStCurrCode () { return 3; };
        RWCString StCurrCode (void)
        {
            return m_szStCurrCode;
        }
        long StCurrCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCurrCode, sizeof(m_szStCurrCode), &m_bStCurrCode);
        }
        
        //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY
        long lStCurrDec () { return 1; };
        RWCString StCurrDec (void)
        {
            return m_szStCurrDec;
        }
        long StCurrDec (const RWCString& rwc)
        {
            return SetString(rwc, m_szStCurrDec, sizeof(m_szStCurrDec), &m_bStCurrDec);
        }
        
        //    INDICATES WHETHER FIELD FILE MAINTENANCE OCCURRED TODAY
        long lStmFmFlag () { return 1; };
        RWCString StmFmFlag (void)
        {
            return m_szStmFmFlag;
        }
        long StmFmFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmFmFlag, sizeof(m_szStmFmFlag), &m_bStmFmFlag);
        }
        
        //    INDICATES WHETHER NAME/ADDRESS MAINTENANCE OCCURRED TODAY
        long lStmNameAddrFlag () { return 1; };
        RWCString StmNameAddrFlag (void)
        {
            return m_szStmNameAddrFlag;
        }
        long StmNameAddrFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmNameAddrFlag, sizeof(m_szStmNameAddrFlag), &m_bStmNameAddrFlag);
        }
        
        //    INDICATES WHETHER A MESSAGE MEMO TRANSACTION OCCURRED TODAY
        long lStmMemoFlag () { return 1; };
        RWCString StmMemoFlag (void)
        {
            return m_szStmMemoFlag;
        }
        long StmMemoFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmMemoFlag, sizeof(m_szStmMemoFlag), &m_bStmMemoFlag);
        }
        
        //    INDICATES WHETHER MONETARY ACTIVITY OCCURRED TODAY
        long lStmMonyFlag () { return 1; };
        RWCString StmMonyFlag (void)
        {
            return m_szStmMonyFlag;
        }
        long StmMonyFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmMonyFlag, sizeof(m_szStmMonyFlag), &m_bStmMonyFlag);
        }
        
        //    INDICATES WHETHER A BACKDATED MONETARY TRANS OCCURRED TODAY
        long lStmBackdateFlag () { return 1; };
        RWCString StmBackdateFlag (void)
        {
            return m_szStmBackdateFlag;
        }
        long StmBackdateFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmBackdateFlag, sizeof(m_szStmBackdateFlag), &m_bStmBackdateFlag);
        }
        
        //    INDICATES WHETHER A PRINT REQUEST WAS ENTERED TODAY
        long lStmRequestFlag () { return 1; };
        RWCString StmRequestFlag (void)
        {
            return m_szStmRequestFlag;
        }
        long StmRequestFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmRequestFlag, sizeof(m_szStmRequestFlag), &m_bStmRequestFlag);
        }
        
        //    INDICATES WHETHER PLAN ACTIVITY OCCURRED TODAY
        long lStmPlanFlag () { return 1; };
        RWCString StmPlanFlag (void)
        {
            return m_szStmPlanFlag;
        }
        long StmPlanFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmPlanFlag, sizeof(m_szStmPlanFlag), &m_bStmPlanFlag);
        }
        
        //    INDICATES WHETHER THE ACCOUNT WAS SET TO REMAIN OPEN
        long lStmDoNotCloseFlag () { return 1; };
        RWCString StmDoNotCloseFlag (void)
        {
            return m_szStmDoNotCloseFlag;
        }
        long StmDoNotCloseFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmDoNotCloseFlag, sizeof(m_szStmDoNotCloseFlag), &m_bStmDoNotCloseFlag);
        }
        
        //    INDICATES WHETHER THE ACCOUNT WAS CLOSED ONLINE TODAY
        long lStmClsFlag () { return 1; };
        RWCString StmClsFlag (void)
        {
            return m_szStmClsFlag;
        }
        long StmClsFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmClsFlag, sizeof(m_szStmClsFlag), &m_bStmClsFlag);
        }
        
        //    PROJECTED BALANCE FROM THE BATCH ACCOUNT MASTER RECORD
        long lStmAvailBal () { return 17; };
        RWCString StmAvailBal (void)
        {
            return AceZeroSupp(m_szStmAvailBal, &m_szSuppressBuff[0]);
        }
        RWCString StmAvailBalRaw (void)
        {
            return m_szStmAvailBal;
        }
        long StmAvailBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmAvailBal, sizeof(m_szStmAvailBal), &m_bStmAvailBal);
        }
        
        //    PROJECTED BALANCE FROM ACCOUNT MASTER
        long lStmLedgerBal () { return 17; };
        RWCString StmLedgerBal (void)
        {
            return AceZeroSupp(m_szStmLedgerBal, &m_szSuppressBuff[0]);
        }
        RWCString StmLedgerBalRaw (void)
        {
            return m_szStmLedgerBal;
        }
        long StmLedgerBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmLedgerBal, sizeof(m_szStmLedgerBal), &m_bStmLedgerBal);
        }
        
        //    ANTICIPATED INTEREST FOR THE END OF THE INTEREST PERIOD
        long lStmProjAccrInt () { return 17; };
        RWCString StmProjAccrInt (void)
        {
            return AceZeroSupp(m_szStmProjAccrInt, &m_szSuppressBuff[0]);
        }
        RWCString StmProjAccrIntRaw (void)
        {
            return m_szStmProjAccrInt;
        }
        long StmProjAccrInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmProjAccrInt, sizeof(m_szStmProjAccrInt), &m_bStmProjAccrInt);
        }
        
        //    INDICATES WHETHER STOP/HOLD INFO EXISTS FOR THE ACCOUNT
        long lStmStopHoldSumFlag () { return 1; };
        RWCString StmStopHoldSumFlag (void)
        {
            return m_szStmStopHoldSumFlag;
        }
        long StmStopHoldSumFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmStopHoldSumFlag, sizeof(m_szStmStopHoldSumFlag), &m_bStmStopHoldSumFlag);
        }
        
        //    INDICATES WHETHER THE ENTIRE BALANCE IS HELD
        long lStmShsHoldFullBal () { return 1; };
        RWCString StmShsHoldFullBal (void)
        {
            return m_szStmShsHoldFullBal;
        }
        long StmShsHoldFullBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmShsHoldFullBal, sizeof(m_szStmShsHoldFullBal), &m_bStmShsHoldFullBal);
        }
        
        //    STOP/HOLDS AMOUNT
        long lStmShsHoldsAmt () { return 17; };
        RWCString StmShsHoldsAmt (void)
        {
            return AceZeroSupp(m_szStmShsHoldsAmt, &m_szSuppressBuff[0]);
        }
        RWCString StmShsHoldsAmtRaw (void)
        {
            return m_szStmShsHoldsAmt;
        }
        long StmShsHoldsAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmShsHoldsAmt, sizeof(m_szStmShsHoldsAmt), &m_bStmShsHoldsAmt);
        }
        
        //    INDICATES WHETHER TO ENTIRE ACCOUNT BALANCE IS PLEDGED
        long lStmShsPledgeFullBal () { return 1; };
        RWCString StmShsPledgeFullBal (void)
        {
            return m_szStmShsPledgeFullBal;
        }
        long StmShsPledgeFullBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmShsPledgeFullBal, sizeof(m_szStmShsPledgeFullBal), &m_bStmShsPledgeFullBal);
        }
        
        //    STOP/HOLD PLEDGE AMOUNT
        long lStmShsPledgeAmt () { return 17; };
        RWCString StmShsPledgeAmt (void)
        {
            return AceZeroSupp(m_szStmShsPledgeAmt, &m_szSuppressBuff[0]);
        }
        RWCString StmShsPledgeAmtRaw (void)
        {
            return m_szStmShsPledgeAmt;
        }
        long StmShsPledgeAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmShsPledgeAmt, sizeof(m_szStmShsPledgeAmt), &m_bStmShsPledgeAmt);
        }
        
        //    NEXT CENTURY WHEN THE ACCOUNT MATURES
        long lStmMatDnmCent () { return 2; };
        RWCString StmMatDnmCent (void)
        {
            return m_szStmMatDnmCent;
        }
        long StmMatDnmCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmMatDnmCent, sizeof(m_szStmMatDnmCent), &m_bStmMatDnmCent);
        }
        
        //    NEXT YEAR WHEN THE ACCOUNT MATURES
        long lStmMatDnmYr () { return 2; };
        RWCString StmMatDnmYr (void)
        {
            return m_szStmMatDnmYr;
        }
        long StmMatDnmYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmMatDnmYr, sizeof(m_szStmMatDnmYr), &m_bStmMatDnmYr);
        }
        
        //    NEXT MONTH WHEN THE ACCOUNT MATURES
        long lStmMatDnmMo () { return 2; };
        RWCString StmMatDnmMo (void)
        {
            return m_szStmMatDnmMo;
        }
        long StmMatDnmMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmMatDnmMo, sizeof(m_szStmMatDnmMo), &m_bStmMatDnmMo);
        }
        
        //    NEXT DAY WHEN THE ACCOUNT MATURES
        long lStmMatDnmDa () { return 2; };
        RWCString StmMatDnmDa (void)
        {
            return m_szStmMatDnmDa;
        }
        long StmMatDnmDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmMatDnmDa, sizeof(m_szStmMatDnmDa), &m_bStmMatDnmDa);
        }
        
        //    ANNUAL RATE DETERMINED BY ADJ, CUR, BONUS, AND TIERED RATES
        long lStmIpCurAnnlRate2 () { return 11; };
        RWCString StmIpCurAnnlRate2 (void)
        {
            return AceZeroSupp(m_szStmIpCurAnnlRate2, &m_szSuppressBuff[0]);
        }
        RWCString StmIpCurAnnlRate2Raw (void)
        {
            return m_szStmIpCurAnnlRate2;
        }
        long StmIpCurAnnlRate2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmIpCurAnnlRate2, sizeof(m_szStmIpCurAnnlRate2), &m_bStmIpCurAnnlRate2);
        }
        
        //    INDICATES WHETHER THE CD IS IN THE GRACE PERIOD
        long lStGracePeriodFlag () { return 1; };
        RWCString StGracePeriodFlag (void)
        {
            return m_szStGracePeriodFlag;
        }
        long StGracePeriodFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStGracePeriodFlag, sizeof(m_szStGracePeriodFlag), &m_bStGracePeriodFlag);
        }
        
        //    DATE WHEN THE GRACE PERIOD ENDS
        long lStGraceEndDate () { return 8; };
        RWCString StGraceEndDate (void)
        {
            return m_szStGraceEndDate;
        }
        long StGraceEndDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szStGraceEndDate, sizeof(m_szStGraceEndDate), &m_bStGraceEndDate);
        }
        
        //    ABBREVIATED VERSION OF THE CUSTOMER'S NAME
        long lStShortName () { return 13; };
        RWCString StShortName (void)
        {
            return m_szStShortName;
        }
        long StShortName (const RWCString& rwc)
        {
            return SetString(rwc, m_szStShortName, sizeof(m_szStShortName), &m_bStShortName);
        }
        
        //    INSTITUTION WHERE THE OFFICER, EMPLOYEE, OR DIRECTOR WORKS
        long lStmOffEmp () { return 1; };
        RWCString StmOffEmp (void)
        {
            return m_szStmOffEmp;
        }
        long StmOffEmp (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmOffEmp, sizeof(m_szStmOffEmp), &m_bStmOffEmp);
        }
        
        //    INDICATES WHETHER ACCOUNT IS SENT TO THE ANALYSIS SUBSYSTEM
        long lStAnalysisAcct () { return 1; };
        RWCString StAnalysisAcct (void)
        {
            return m_szStAnalysisAcct;
        }
        long StAnalysisAcct (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAnalysisAcct, sizeof(m_szStAnalysisAcct), &m_bStAnalysisAcct);
        }
        
        //    CENTURY OF LAST DISTRIBUTION
        long lStmIraTrlrLstDistCc () { return 2; };
        RWCString StmIraTrlrLstDistCc (void)
        {
            return m_szStmIraTrlrLstDistCc;
        }
        long StmIraTrlrLstDistCc (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmIraTrlrLstDistCc, sizeof(m_szStmIraTrlrLstDistCc), &m_bStmIraTrlrLstDistCc);
        }
        
        //    YEAR OF LAST DISTRIBUTION
        long lStmIraTrlrLstDistYy () { return 2; };
        RWCString StmIraTrlrLstDistYy (void)
        {
            return m_szStmIraTrlrLstDistYy;
        }
        long StmIraTrlrLstDistYy (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmIraTrlrLstDistYy, sizeof(m_szStmIraTrlrLstDistYy), &m_bStmIraTrlrLstDistYy);
        }
        
        //    MONTH OF LAST DISTRIBUTION
        long lStmIraTrlrLstDistMo () { return 2; };
        RWCString StmIraTrlrLstDistMo (void)
        {
            return m_szStmIraTrlrLstDistMo;
        }
        long StmIraTrlrLstDistMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmIraTrlrLstDistMo, sizeof(m_szStmIraTrlrLstDistMo), &m_bStmIraTrlrLstDistMo);
        }
        
        //    DAY OF LAST DISTRIBUTION
        long lStmIraTrlrLstDistDa () { return 2; };
        RWCString StmIraTrlrLstDistDa (void)
        {
            return m_szStmIraTrlrLstDistDa;
        }
        long StmIraTrlrLstDistDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmIraTrlrLstDistDa, sizeof(m_szStmIraTrlrLstDistDa), &m_bStmIraTrlrLstDistDa);
        }
        
        //    PLAN IDENTIFICATION NUMBER FOR THE IRA
        long lStIraTrPkRetPlanId () { return 12; };
        RWCString StIraTrPkRetPlanId (void)
        {
            return m_szStIraTrPkRetPlanId;
        }
        long StIraTrPkRetPlanId (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrPkRetPlanId, sizeof(m_szStIraTrPkRetPlanId), &m_bStIraTrPkRetPlanId);
        }
        
        //    SEQUENCE NUMBER FOR THE IRA'S PLAN
        long lStIraTrPkIrsSeqNo () { return 3; };
        RWCString StIraTrPkIrsSeqNo (void)
        {
            return m_szStIraTrPkIrsSeqNo;
        }
        long StIraTrPkIrsSeqNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrPkIrsSeqNo, sizeof(m_szStIraTrPkIrsSeqNo), &m_bStIraTrPkIrsSeqNo);
        }
        
        //    EMPLOYEE IDENTIFICATION NUMBER FOR THE IRA
        long lStIraTrPkEmpPlanId () { return 12; };
        RWCString StIraTrPkEmpPlanId (void)
        {
            return m_szStIraTrPkEmpPlanId;
        }
        long StIraTrPkEmpPlanId (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrPkEmpPlanId, sizeof(m_szStIraTrPkEmpPlanId), &m_bStIraTrPkEmpPlanId);
        }
        
        //    INDICATES IRA IS CONSIDERED PRIMARY FOR REPORTING PURPOSES
        long lStIraTrlrPrimaryInd () { return 1; };
        RWCString StIraTrlrPrimaryInd (void)
        {
            return m_szStIraTrlrPrimaryInd;
        }
        long StIraTrlrPrimaryInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrlrPrimaryInd, sizeof(m_szStIraTrlrPrimaryInd), &m_bStIraTrlrPrimaryInd);
        }
        
        //    ACCOUNT HOLDER'S CONTRIBUTION AND/OR DISTRIBUTION STATUS
        long lStIraTrlrStatusCd () { return 1; };
        RWCString StIraTrlrStatusCd (void)
        {
            return m_szStIraTrlrStatusCd;
        }
        long StIraTrlrStatusCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrlrStatusCd, sizeof(m_szStIraTrlrStatusCd), &m_bStIraTrlrStatusCd);
        }
        
        //    AMT OF TOT PENALTY THAT CAN BE ASSESSED ON UNMATURED MONEY
        long lStmTotalPenalty () { return 17; };
        RWCString StmTotalPenalty (void)
        {
            return AceZeroSupp(m_szStmTotalPenalty, &m_szSuppressBuff[0]);
        }
        RWCString StmTotalPenaltyRaw (void)
        {
            return m_szStmTotalPenalty;
        }
        long StmTotalPenalty (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmTotalPenalty, sizeof(m_szStmTotalPenalty), &m_bStmTotalPenalty);
        }
        
        //    REGION CODE
        long lStRegion () { return 3; };
        RWCString StRegion (void)
        {
            return m_szStRegion;
        }
        long StRegion (const RWCString& rwc)
        {
            return SetString(rwc, m_szStRegion, sizeof(m_szStRegion), &m_bStRegion);
        }
        
        //    CENTURY FOR THE PROCESS THRU DATE
        long lBc1ProcCent () { return 2; };
        RWCString Bc1ProcCent (void)
        {
            return m_szBc1ProcCent;
        }
        long Bc1ProcCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1ProcCent, sizeof(m_szBc1ProcCent), &m_bBc1ProcCent);
        }
        
        //    PROCESS THRU DATE/YEAR
        long lBc1ProcYr () { return 2; };
        RWCString Bc1ProcYr (void)
        {
            return m_szBc1ProcYr;
        }
        long Bc1ProcYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1ProcYr, sizeof(m_szBc1ProcYr), &m_bBc1ProcYr);
        }
        
        //    PROCESS THRU DATE/MONTH
        long lBc1ProcMo () { return 2; };
        RWCString Bc1ProcMo (void)
        {
            return m_szBc1ProcMo;
        }
        long Bc1ProcMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1ProcMo, sizeof(m_szBc1ProcMo), &m_bBc1ProcMo);
        }
        
        //    PROCESS THRU DATE/DAY
        long lBc1ProcDa () { return 2; };
        RWCString Bc1ProcDa (void)
        {
            return m_szBc1ProcDa;
        }
        long Bc1ProcDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1ProcDa, sizeof(m_szBc1ProcDa), &m_bBc1ProcDa);
        }
        
        //    SERVICE CHARGE TRAILER NEXT SERVICE CHARGE DATE CENTURY
        long lStScTrlrNscdCent () { return 2; };
        RWCString StScTrlrNscdCent (void)
        {
            return m_szStScTrlrNscdCent;
        }
        long StScTrlrNscdCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szStScTrlrNscdCent, sizeof(m_szStScTrlrNscdCent), &m_bStScTrlrNscdCent);
        }
        
        //    DATE LAST RESET SATEMENT/YEAR
        long lStStmtTrlrSiLsdYr () { return 2; };
        RWCString StStmtTrlrSiLsdYr (void)
        {
            return m_szStStmtTrlrSiLsdYr;
        }
        long StStmtTrlrSiLsdYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStmtTrlrSiLsdYr, sizeof(m_szStStmtTrlrSiLsdYr), &m_bStStmtTrlrSiLsdYr);
        }
        
        //    DATE LAST RESET SATEMENT/MONTH
        long lStStmtTrlrSiLsdMo () { return 2; };
        RWCString StStmtTrlrSiLsdMo (void)
        {
            return m_szStStmtTrlrSiLsdMo;
        }
        long StStmtTrlrSiLsdMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStmtTrlrSiLsdMo, sizeof(m_szStStmtTrlrSiLsdMo), &m_bStStmtTrlrSiLsdMo);
        }
        
        //    DATE LAST RESET SATEMENT/DAY
        long lStStmtTrlrSiLsdDa () { return 2; };
        RWCString StStmtTrlrSiLsdDa (void)
        {
            return m_szStStmtTrlrSiLsdDa;
        }
        long StStmtTrlrSiLsdDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStmtTrlrSiLsdDa, sizeof(m_szStStmtTrlrSiLsdDa), &m_bStStmtTrlrSiLsdDa);
        }
        
        //    INDICATES THIS ACCT IS WITHIN GRACE WITHDRAWAL DAYS
        long lStGraceWdPeriod () { return 1; };
        RWCString StGraceWdPeriod (void)
        {
            return m_szStGraceWdPeriod;
        }
        long StGraceWdPeriod (const RWCString& rwc)
        {
            return SetString(rwc, m_szStGraceWdPeriod, sizeof(m_szStGraceWdPeriod), &m_bStGraceWdPeriod);
        }
        
        //    INDICATES IRA TRAILER
        long lStTrlrCtlIraFlg () { return 1; };
        RWCString StTrlrCtlIraFlg (void)
        {
            return m_szStTrlrCtlIraFlg;
        }
        long StTrlrCtlIraFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTrlrCtlIraFlg, sizeof(m_szStTrlrCtlIraFlg), &m_bStTrlrCtlIraFlg);
        }
        
        //    INDICATES WHETHER TO SERVICE CHARGE THE ACCOUNT
        long lStTrlrCtlServChrgFlg () { return 1; };
        RWCString StTrlrCtlServChrgFlg (void)
        {
            return m_szStTrlrCtlServChrgFlg;
        }
        long StTrlrCtlServChrgFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTrlrCtlServChrgFlg, sizeof(m_szStTrlrCtlServChrgFlg), &m_bStTrlrCtlServChrgFlg);
        }
        
        //    INDICATES WHETHER TO WAIVE THE SERVICE CHARGE
        long lStScTrlrWaiveScFlg () { return 1; };
        RWCString StScTrlrWaiveScFlg (void)
        {
            return m_szStScTrlrWaiveScFlg;
        }
        long StScTrlrWaiveScFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szStScTrlrWaiveScFlg, sizeof(m_szStScTrlrWaiveScFlg), &m_bStScTrlrWaiveScFlg);
        }
        
        //    REASON FOR WAIVING THE SERVICE CHARGE
        long lStScTrlrWaiveScRsn () { return 2; };
        RWCString StScTrlrWaiveScRsn (void)
        {
            return m_szStScTrlrWaiveScRsn;
        }
        long StScTrlrWaiveScRsn (const RWCString& rwc)
        {
            return SetString(rwc, m_szStScTrlrWaiveScRsn, sizeof(m_szStScTrlrWaiveScRsn), &m_bStScTrlrWaiveScRsn);
        }
        
        //    CYCLE NUMBER/REQ IF PULL CODE IS C
        short StStmtTrlrCycleNo (void)
        {
            return m_nStStmtTrlrCycleNo;
        }
        long StStmtTrlrCycleNo (const short nValue)
        {
            return SetShort(nValue, &m_nStStmtTrlrCycleNo, &m_bStStmtTrlrCycleNo);
        }
        
        //    PULL CODE/CYCLE OR REQUEST
        long lStStmtTrlrPullCode () { return 1; };
        RWCString StStmtTrlrPullCode (void)
        {
            return m_szStStmtTrlrPullCode;
        }
        long StStmtTrlrPullCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStmtTrlrPullCode, sizeof(m_szStStmtTrlrPullCode), &m_bStStmtTrlrPullCode);
        }
        
        //    INDICATES WHETHER TO KEEP STATEMENT INFORMATION
        long lStTrlrCtlStmtFlg () { return 1; };
        RWCString StTrlrCtlStmtFlg (void)
        {
            return m_szStTrlrCtlStmtFlg;
        }
        long StTrlrCtlStmtFlg (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTrlrCtlStmtFlg, sizeof(m_szStTrlrCtlStmtFlg), &m_bStTrlrCtlStmtFlg);
        }
        
        //    HOME PHONE NUMBER OF ACCOUNT HOLDER/AREA CODE
        long lStHpnAreaCode () { return 3; };
        RWCString StHpnAreaCode (void)
        {
            return m_szStHpnAreaCode;
        }
        long StHpnAreaCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStHpnAreaCode, sizeof(m_szStHpnAreaCode), &m_bStHpnAreaCode);
        }
        
        //    CONTAINS HOME PHONE NUMBER WITHOUT THE AREA CODE
        long lStHomePhone () { return 7; };
        RWCString StHomePhone (void)
        {
            return m_szStHomePhone;
        }
        long StHomePhone (const RWCString& rwc)
        {
            return SetString(rwc, m_szStHomePhone, sizeof(m_szStHomePhone), &m_bStHomePhone);
        }
        
        //    HOME PHONE EXTENSION NUMBER
        long lStHomeExtension () { return 4; };
        RWCString StHomeExtension (void)
        {
            return m_szStHomeExtension;
        }
        long StHomeExtension (const RWCString& rwc)
        {
            return SetString(rwc, m_szStHomeExtension, sizeof(m_szStHomeExtension), &m_bStHomeExtension);
        }
        
        //    OFFICE PHONE NUMBER OF ACCOUNT HOLDER/AREA CODE
        long lStOpnAreaCode () { return 3; };
        RWCString StOpnAreaCode (void)
        {
            return m_szStOpnAreaCode;
        }
        long StOpnAreaCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szStOpnAreaCode, sizeof(m_szStOpnAreaCode), &m_bStOpnAreaCode);
        }
        
        //    OFFICE PHONE NUMBER
        long lStOfficePhone () { return 7; };
        RWCString StOfficePhone (void)
        {
            return m_szStOfficePhone;
        }
        long StOfficePhone (const RWCString& rwc)
        {
            return SetString(rwc, m_szStOfficePhone, sizeof(m_szStOfficePhone), &m_bStOfficePhone);
        }
        
        //    OFFICE PHONE EXTENSION
        long lStOfficeExtension () { return 4; };
        RWCString StOfficeExtension (void)
        {
            return m_szStOfficeExtension;
        }
        long StOfficeExtension (const RWCString& rwc)
        {
            return SetString(rwc, m_szStOfficeExtension, sizeof(m_szStOfficeExtension), &m_bStOfficeExtension);
        }
        
        //    INDICATES IF TAX IDENTIFICATION NUMBER IS CERTIFIED
        long lStTinCert () { return 1; };
        RWCString StTinCert (void)
        {
            return m_szStTinCert;
        }
        long StTinCert (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTinCert, sizeof(m_szStTinCert), &m_bStTinCert);
        }
        
        //    TYPE OF IRA TRAILER
        long lStIraTrlrType () { return 2; };
        RWCString StIraTrlrType (void)
        {
            return m_szStIraTrlrType;
        }
        long StIraTrlrType (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrlrType, sizeof(m_szStIraTrlrType), &m_bStIraTrlrType);
        }
        
        //    INDICATES IF ACCOUNT HOLDER IS DISABLED/DECEASED
        long lStIraTrlrDecDisab () { return 1; };
        RWCString StIraTrlrDecDisab (void)
        {
            return m_szStIraTrlrDecDisab;
        }
        long StIraTrlrDecDisab (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrlrDecDisab, sizeof(m_szStIraTrlrDecDisab), &m_bStIraTrlrDecDisab);
        }
        
        //    INDICATES THE NUMBER OF SIGNATURES REQUIRED FOR WITHDRAWAL
        long lStRequiredSigns () { return 1; };
        RWCString StRequiredSigns (void)
        {
            return m_szStRequiredSigns;
        }
        long StRequiredSigns (const RWCString& rwc)
        {
            return SetString(rwc, m_szStRequiredSigns, sizeof(m_szStRequiredSigns), &m_bStRequiredSigns);
        }
        
        //    COLLECTED BALANCE/CURRENT BAL MINUS TOTAL FLOAT
        long lStmCollectedBal () { return 17; };
        RWCString StmCollectedBal (void)
        {
            return AceZeroSupp(m_szStmCollectedBal, &m_szSuppressBuff[0]);
        }
        RWCString StmCollectedBalRaw (void)
        {
            return m_szStmCollectedBal;
        }
        long StmCollectedBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmCollectedBal, sizeof(m_szStmCollectedBal), &m_bStmCollectedBal);
        }
        
        //    AVERAGE ACCOUNT BALANCE QUARTER TO DATE
        long lAvgBal () { return 17; };
        RWCString AvgBal (void)
        {
            return AceZeroSupp(m_szAvgBal, &m_szSuppressBuff[0]);
        }
        RWCString AvgBalRaw (void)
        {
            return m_szAvgBal;
        }
        long AvgBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szAvgBal, sizeof(m_szAvgBal), &m_bAvgBal);
        }
        
        //    INDICATES WHETHER TO MAIL STATEMENTS
        long lStStmtTrlrMailFlag () { return 1; };
        RWCString StStmtTrlrMailFlag (void)
        {
            return m_szStStmtTrlrMailFlag;
        }
        long StStmtTrlrMailFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStmtTrlrMailFlag, sizeof(m_szStStmtTrlrMailFlag), &m_bStStmtTrlrMailFlag);
        }
        
        //    DATE THE ACCOUNT WENT INTO OR OUT OF CLOSED STATUS/CENTURY
        long lStDcCent () { return 2; };
        RWCString StDcCent (void)
        {
            return m_szStDcCent;
        }
        long StDcCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szStDcCent, sizeof(m_szStDcCent), &m_bStDcCent);
        }
        
        //    DATE ACCOUNT CLOSED - YEAR
        long lStDcYr () { return 2; };
        RWCString StDcYr (void)
        {
            return m_szStDcYr;
        }
        long StDcYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStDcYr, sizeof(m_szStDcYr), &m_bStDcYr);
        }
        
        //    DATE THE ACCOUNT WENT INTO OR OUT OF CLOSED STATUS/MONTH
        long lStDcMo () { return 2; };
        RWCString StDcMo (void)
        {
            return m_szStDcMo;
        }
        long StDcMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStDcMo, sizeof(m_szStDcMo), &m_bStDcMo);
        }
        
        //    DATE THE ACCOUNT WENT INTO OR OUT OF CLOSED STATUS/DAY
        long lStDcDa () { return 2; };
        RWCString StDcDa (void)
        {
            return m_szStDcDa;
        }
        long StDcDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szStDcDa, sizeof(m_szStDcDa), &m_bStDcDa);
        }
        
        //    INDICATES WHY BACKUP WITHHOLDING APPLIES
        long lStBkupWthldFlag () { return 1; };
        RWCString StBkupWthldFlag (void)
        {
            return m_szStBkupWthldFlag;
        }
        long StBkupWthldFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStBkupWthldFlag, sizeof(m_szStBkupWthldFlag), &m_bStBkupWthldFlag);
        }
        
        //    USER DEFINED REASON WHY ACCOUNT IS NOT SUBJECT TO TAXES
        long lStTaxReason () { return 1; };
        RWCString StTaxReason (void)
        {
            return m_szStTaxReason;
        }
        long StTaxReason (const RWCString& rwc)
        {
            return SetString(rwc, m_szStTaxReason, sizeof(m_szStTaxReason), &m_bStTaxReason);
        }
        
        //    PRORATED AMT FOR ACCRUAL TYPE 4 OR AMT TO ACCRUE DAILY FOR S
        long lStIntParamDailyAccr () { return 19; };
        RWCString StIntParamDailyAccr (void)
        {
            return AceZeroSupp(m_szStIntParamDailyAccr, &m_szSuppressBuff[0]);
        }
        RWCString StIntParamDailyAccrRaw (void)
        {
            return m_szStIntParamDailyAccr;
        }
        long StIntParamDailyAccr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntParamDailyAccr, sizeof(m_szStIntParamDailyAccr), &m_bStIntParamDailyAccr);
        }
        
        //    SCHEDULE CODE FOR INTEREST DISTRIBUTION
        long lStIntDistSchedCd () { return 1; };
        RWCString StIntDistSchedCd (void)
        {
            return m_szStIntDistSchedCd;
        }
        long StIntDistSchedCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntDistSchedCd, sizeof(m_szStIntDistSchedCd), &m_bStIntDistSchedCd);
        }
        
        //    NUMBER OF DAYS OR MONTHS FOR SCHEDULE CODES 3 AND 4
        long lStIntDistIncr () { return 4; };
        RWCString StIntDistIncr (void)
        {
            return AceZeroSupp(m_szStIntDistIncr, &m_szSuppressBuff[0]);
        }
        RWCString StIntDistIncrRaw (void)
        {
            return m_szStIntDistIncr;
        }
        long StIntDistIncr (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntDistIncr, sizeof(m_szStIntDistIncr), &m_bStIntDistIncr);
        }
        
        //    SPECIFIES HOW INTEREST IS DISTRIBUTED
        long lStIntDistCd () { return 1; };
        RWCString StIntDistCd (void)
        {
            return m_szStIntDistCd;
        }
        long StIntDistCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIntDistCd, sizeof(m_szStIntDistCd), &m_bStIntDistCd);
        }
        
        //    INDICATES IF PARTICIPANT RECEIVES SCHEDULED DISTRIBUTIONS
        long lStIraTrlrScDistSdCd () { return 2; };
        RWCString StIraTrlrScDistSdCd (void)
        {
            return m_szStIraTrlrScDistSdCd;
        }
        long StIraTrlrScDistSdCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStIraTrlrScDistSdCd, sizeof(m_szStIraTrlrScDistSdCd), &m_bStIraTrlrScDistSdCd);
        }
        
        //    ABA NUMBER
        long lBc1Aba () { return 9; };
        RWCString Bc1Aba (void)
        {
            return m_szBc1Aba;
        }
        long Bc1Aba (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1Aba, sizeof(m_szBc1Aba), &m_bBc1Aba);
        }
        
        //    RUN CENTURY
        long lBc1RunCent () { return 2; };
        RWCString Bc1RunCent (void)
        {
            return m_szBc1RunCent;
        }
        long Bc1RunCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1RunCent, sizeof(m_szBc1RunCent), &m_bBc1RunCent);
        }
        
        //    RUN YEAR
        long lBc1RunYr () { return 2; };
        RWCString Bc1RunYr (void)
        {
            return m_szBc1RunYr;
        }
        long Bc1RunYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1RunYr, sizeof(m_szBc1RunYr), &m_bBc1RunYr);
        }
        
        //    RUN MONTH
        long lBc1RunMo () { return 2; };
        RWCString Bc1RunMo (void)
        {
            return m_szBc1RunMo;
        }
        long Bc1RunMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1RunMo, sizeof(m_szBc1RunMo), &m_bBc1RunMo);
        }
        
        //    RUN DAY
        long lBc1RunDa () { return 2; };
        RWCString Bc1RunDa (void)
        {
            return m_szBc1RunDa;
        }
        long Bc1RunDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1RunDa, sizeof(m_szBc1RunDa), &m_bBc1RunDa);
        }
        
        //    CENTURY FOR THE LAST PROCESS THRU DATE
        long lBc1LpdPtCent () { return 2; };
        RWCString Bc1LpdPtCent (void)
        {
            return m_szBc1LpdPtCent;
        }
        long Bc1LpdPtCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1LpdPtCent, sizeof(m_szBc1LpdPtCent), &m_bBc1LpdPtCent);
        }
        
        //    LAST PROCESS THRU DATE/YEAR
        long lBc1LpdPtYr () { return 2; };
        RWCString Bc1LpdPtYr (void)
        {
            return m_szBc1LpdPtYr;
        }
        long Bc1LpdPtYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1LpdPtYr, sizeof(m_szBc1LpdPtYr), &m_bBc1LpdPtYr);
        }
        
        //    LAST PROCESS THRU DATE/MONTH
        long lBc1LpdPtMo () { return 2; };
        RWCString Bc1LpdPtMo (void)
        {
            return m_szBc1LpdPtMo;
        }
        long Bc1LpdPtMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1LpdPtMo, sizeof(m_szBc1LpdPtMo), &m_bBc1LpdPtMo);
        }
        
        //    LAST PROCESS THRU DATE/DAY
        long lBc1LpdPtDa () { return 2; };
        RWCString Bc1LpdPtDa (void)
        {
            return m_szBc1LpdPtDa;
        }
        long Bc1LpdPtDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1LpdPtDa, sizeof(m_szBc1LpdPtDa), &m_bBc1LpdPtDa);
        }
        
        //    CENTURY FOR THE NEXT PROCESS THRU DATE
        long lBc1NpdProcCent () { return 2; };
        RWCString Bc1NpdProcCent (void)
        {
            return m_szBc1NpdProcCent;
        }
        long Bc1NpdProcCent (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1NpdProcCent, sizeof(m_szBc1NpdProcCent), &m_bBc1NpdProcCent);
        }
        
        //    NEXT PROCESS THRU DATE/YEAR
        long lBc1NpdProcYr () { return 2; };
        RWCString Bc1NpdProcYr (void)
        {
            return m_szBc1NpdProcYr;
        }
        long Bc1NpdProcYr (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1NpdProcYr, sizeof(m_szBc1NpdProcYr), &m_bBc1NpdProcYr);
        }
        
        //    NEXT PROCESS THRU DATE/MONTH
        long lBc1NpdProcMo () { return 2; };
        RWCString Bc1NpdProcMo (void)
        {
            return m_szBc1NpdProcMo;
        }
        long Bc1NpdProcMo (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1NpdProcMo, sizeof(m_szBc1NpdProcMo), &m_bBc1NpdProcMo);
        }
        
        //    NEXT PROCESS THRU DATE/DAY
        long lBc1NpdProcDa () { return 2; };
        RWCString Bc1NpdProcDa (void)
        {
            return m_szBc1NpdProcDa;
        }
        long Bc1NpdProcDa (const RWCString& rwc)
        {
            return SetString(rwc, m_szBc1NpdProcDa, sizeof(m_szBc1NpdProcDa), &m_bBc1NpdProcDa);
        }
        
        //    NUMBER OF ACCOUNTS
        long lStAfAcctTrlrNo () { return 4; };
        RWCString StAfAcctTrlrNo (void)
        {
            return AceZeroSupp(m_szStAfAcctTrlrNo, &m_szSuppressBuff[0]);
        }
        RWCString StAfAcctTrlrNoRaw (void)
        {
            return m_szStAfAcctTrlrNo;
        }
        long StAfAcctTrlrNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szStAfAcctTrlrNo, sizeof(m_szStAfAcctTrlrNo), &m_bStAfAcctTrlrNo);
        }
        
        //    INDICATES THIS ACCOUNT IS A PASSBOOK ACCOUNT
        long lStPbPassbookAcct () { return 1; };
        RWCString StPbPassbookAcct (void)
        {
            return m_szStPbPassbookAcct;
        }
        long StPbPassbookAcct (const RWCString& rwc)
        {
            return SetString(rwc, m_szStPbPassbookAcct, sizeof(m_szStPbPassbookAcct), &m_bStPbPassbookAcct);
        }
        
        //    IM FUNDING SUBSYSTEM FLAG
        long lStImFundingFlag () { return 1; };
        RWCString StImFundingFlag (void)
        {
            return m_szStImFundingFlag;
        }
        long StImFundingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szStImFundingFlag, sizeof(m_szStImFundingFlag), &m_bStImFundingFlag);
        }
        
        //    NON-RESIDENT ALIEN CERT NAME 1
        long lNraCertName1 () { return 1; };
        RWCString NraCertName1 (void)
        {
            return m_szNraCertName1;
        }
        long NraCertName1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNraCertName1, sizeof(m_szNraCertName1), &m_bNraCertName1);
        }
        
        //    NON-RESIDENT ALIEN CERT NAME 2
        long lNraCertName2 () { return 1; };
        RWCString NraCertName2 (void)
        {
            return m_szNraCertName2;
        }
        long NraCertName2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNraCertName2, sizeof(m_szNraCertName2), &m_bNraCertName2);
        }
        
        //    TAX COUNTRY
        long lTaxCountry () { return 2; };
        RWCString TaxCountry (void)
        {
            return m_szTaxCountry;
        }
        long TaxCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szTaxCountry, sizeof(m_szTaxCountry), &m_bTaxCountry);
        }
        
        //    PROVINCE CODE
        long lProvinceCd () { return 2; };
        RWCString ProvinceCd (void)
        {
            return m_szProvinceCd;
        }
        long ProvinceCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szProvinceCd, sizeof(m_szProvinceCd), &m_bProvinceCd);
        }
        
        //    NAME/ADDRESS TRAILER COUNTRY CODE
        long lNaTrlrCountry () { return 2; };
        RWCString NaTrlrCountry (void)
        {
            return m_szNaTrlrCountry;
        }
        long NaTrlrCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szNaTrlrCountry, sizeof(m_szNaTrlrCountry), &m_bNaTrlrCountry);
        }
        
        //    CURRENT BALANCE WHEN LAST RESET STATEMENT WAS PRINTED
        long lStStmtTrlrSiBegBal () { return 17; };
        RWCString StStmtTrlrSiBegBal (void)
        {
            return AceZeroSupp(m_szStStmtTrlrSiBegBal, &m_szSuppressBuff[0]);
        }
        RWCString StStmtTrlrSiBegBalRaw (void)
        {
            return m_szStStmtTrlrSiBegBal;
        }
        long StStmtTrlrSiBegBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szStStmtTrlrSiBegBal, sizeof(m_szStStmtTrlrSiBegBal), &m_bStStmtTrlrSiBegBal);
        }
        
        //    LAST DATE OF MONETARY ACTIVITY BY THE CUSTOMER
        long lStmLastMonyActvDate () { return 8; };
        RWCString StmLastMonyActvDate (void)
        {
            return m_szStmLastMonyActvDate;
        }
        long StmLastMonyActvDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szStmLastMonyActvDate, sizeof(m_szStmLastMonyActvDate), &m_bStmLastMonyActvDate);
        }
        
        //    USER CHARACTER FIELD 1
        long lUserCharField1 () { return 15; };
        RWCString UserCharField1 (void)
        {
            return m_szUserCharField1;
        }
        long UserCharField1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField1, sizeof(m_szUserCharField1), &m_bUserCharField1);
        }
        
        //    USER CHARACTER FIELD 2
        long lUserCharField2 () { return 15; };
        RWCString UserCharField2 (void)
        {
            return m_szUserCharField2;
        }
        long UserCharField2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField2, sizeof(m_szUserCharField2), &m_bUserCharField2);
        }
        
        //    USER CHARACTER FIELD 3
        long lUserCharField3 () { return 15; };
        RWCString UserCharField3 (void)
        {
            return m_szUserCharField3;
        }
        long UserCharField3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField3, sizeof(m_szUserCharField3), &m_bUserCharField3);
        }
        
        //    YESTERDAY FLOAT AMOUNT
        long lYesterdayFloatAmt () { return 17; };
        RWCString YesterdayFloatAmt (void)
        {
            return AceZeroSupp(m_szYesterdayFloatAmt, &m_szSuppressBuff[0]);
        }
        RWCString YesterdayFloatAmtRaw (void)
        {
            return m_szYesterdayFloatAmt;
        }
        long YesterdayFloatAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szYesterdayFloatAmt, sizeof(m_szYesterdayFloatAmt), &m_bYesterdayFloatAmt);
        }
        
        //    TODAYS FLOAT AMOUNT
        long lTodayFloatAmt () { return 17; };
        RWCString TodayFloatAmt (void)
        {
            return AceZeroSupp(m_szTodayFloatAmt, &m_szSuppressBuff[0]);
        }
        RWCString TodayFloatAmtRaw (void)
        {
            return m_szTodayFloatAmt;
        }
        long TodayFloatAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szTodayFloatAmt, sizeof(m_szTodayFloatAmt), &m_bTodayFloatAmt);
        }
        
        //    TOTAL BALANCE
        long lTotalBalance () { return 17; };
        RWCString TotalBalance (void)
        {
            return AceZeroSupp(m_szTotalBalance, &m_szSuppressBuff[0]);
        }
        RWCString TotalBalanceRaw (void)
        {
            return m_szTotalBalance;
        }
        long TotalBalance (const RWCString& rwc)
        {
            return SetString(rwc, m_szTotalBalance, sizeof(m_szTotalBalance), &m_bTotalBalance);
        }
        
        //    GOVERNMENT ID
        long lStGovernmentId () { return 25; };
        RWCString StGovernmentId (void)
        {
            return m_szStGovernmentId;
        }
        long StGovernmentId (const RWCString& rwc)
        {
            return SetString(rwc, m_szStGovernmentId, sizeof(m_szStGovernmentId), &m_bStGovernmentId);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bStControl1) return true;
            if (m_bStControl2) return true;
            if (m_bStControl3) return true;
            if (m_bStControl4) return true;
            if (m_bStAccountNo) return true;
            if (m_bStStateCode) return true;
            if (m_bStZipCodeFixed5) return true;
            if (m_bStZipCodeDash) return true;
            if (m_bStZipCodeLast4) return true;
            if (m_bStCountryCode) return true;
            if (m_bStBranch) return true;
            if (m_bStAcctType) return true;
            if (m_bStLcdCent) return true;
            if (m_bStLcdYr) return true;
            if (m_bStLcdMo) return true;
            if (m_bStLcdDa) return true;
            if (m_bStAmtLastDep) return true;
            if (m_bStLcwCent) return true;
            if (m_bStLcwYr) return true;
            if (m_bStLcwMo) return true;
            if (m_bStLcwDa) return true;
            if (m_bStAmtLastWithdrawal) return true;
            if (m_bStFtiCode) return true;
            if (m_bStFtiPrefix) return true;
            if (m_bStFtiSsn1) return true;
            if (m_bStFtiSsn2) return true;
            if (m_bStFtiSsn3) return true;
            if (m_bStFtiSuffix) return true;
            if (m_bStYtdIntPaid) return true;
            if (m_bStLytdIntPaid) return true;
            if (m_bStAoiDoCent) return true;
            if (m_bStAoiDoYr) return true;
            if (m_bStAoiDoMo) return true;
            if (m_bStAoiDoDa) return true;
            if (m_bStCaPaymentAmt) return true;
            if (m_bStClosingBalance) return true;
            if (m_bStCurrentRate) return true;
            if (m_bStIntAccrAmt) return true;
            if (m_bStIpdCent) return true;
            if (m_bStIpdYr) return true;
            if (m_bStIpdMo) return true;
            if (m_bStIpdDa) return true;
            if (m_bStMtdServChrg) return true;
            if (m_bStIdDnpYear) return true;
            if (m_bStIdDnpMo) return true;
            if (m_bStIdDnpDa) return true;
            if (m_bStCdAnticInt) return true;
            if (m_bStScTrlrServChrg) return true;
            if (m_bStStatus) return true;
            if (m_bStOfficer) return true;
            if (m_bStMntPeriod) return true;
            if (m_bStMntIncr) return true;
            if (m_bStMntAnnivDay) return true;
            if (m_bStMatAutoRenew) return true;
            if (m_bStMatDnmYear) return true;
            if (m_bStMatDnmMo) return true;
            if (m_bStMatDnmDa) return true;
            if (m_bStLastRenewDate) return true;
            if (m_bStRenewCurBal) return true;
            if (m_bStRenewTimesRenew) return true;
            if (m_bStCaNoOfPymts) return true;
            if (m_bStCaLastPymtNo) return true;
            if (m_bStCaNoOfPymtsMade) return true;
            if (m_bStIntPayPrevPay) return true;
            if (m_bStAcctCategory) return true;
            if (m_bStCustLanguage) return true;
            if (m_bStCustLangGroup) return true;
            if (m_bStCurrCode) return true;
            if (m_bStCurrDec) return true;
            if (m_bStmFmFlag) return true;
            if (m_bStmNameAddrFlag) return true;
            if (m_bStmMemoFlag) return true;
            if (m_bStmMonyFlag) return true;
            if (m_bStmBackdateFlag) return true;
            if (m_bStmRequestFlag) return true;
            if (m_bStmPlanFlag) return true;
            if (m_bStmDoNotCloseFlag) return true;
            if (m_bStmClsFlag) return true;
            if (m_bStmAvailBal) return true;
            if (m_bStmLedgerBal) return true;
            if (m_bStmProjAccrInt) return true;
            if (m_bStmStopHoldSumFlag) return true;
            if (m_bStmShsHoldFullBal) return true;
            if (m_bStmShsHoldsAmt) return true;
            if (m_bStmShsPledgeFullBal) return true;
            if (m_bStmShsPledgeAmt) return true;
            if (m_bStmMatDnmCent) return true;
            if (m_bStmMatDnmYr) return true;
            if (m_bStmMatDnmMo) return true;
            if (m_bStmMatDnmDa) return true;
            if (m_bStmIpCurAnnlRate2) return true;
            if (m_bStGracePeriodFlag) return true;
            if (m_bStGraceEndDate) return true;
            if (m_bStShortName) return true;
            if (m_bStmOffEmp) return true;
            if (m_bStAnalysisAcct) return true;
            if (m_bStmIraTrlrLstDistCc) return true;
            if (m_bStmIraTrlrLstDistYy) return true;
            if (m_bStmIraTrlrLstDistMo) return true;
            if (m_bStmIraTrlrLstDistDa) return true;
            if (m_bStIraTrPkRetPlanId) return true;
            if (m_bStIraTrPkIrsSeqNo) return true;
            if (m_bStIraTrPkEmpPlanId) return true;
            if (m_bStIraTrlrPrimaryInd) return true;
            if (m_bStIraTrlrStatusCd) return true;
            if (m_bStmTotalPenalty) return true;
            if (m_bStRegion) return true;
            if (m_bBc1ProcCent) return true;
            if (m_bBc1ProcYr) return true;
            if (m_bBc1ProcMo) return true;
            if (m_bBc1ProcDa) return true;
            if (m_bStScTrlrNscdCent) return true;
            if (m_bStStmtTrlrSiLsdYr) return true;
            if (m_bStStmtTrlrSiLsdMo) return true;
            if (m_bStStmtTrlrSiLsdDa) return true;
            if (m_bStGraceWdPeriod) return true;
            if (m_bStTrlrCtlIraFlg) return true;
            if (m_bStTrlrCtlServChrgFlg) return true;
            if (m_bStScTrlrWaiveScFlg) return true;
            if (m_bStScTrlrWaiveScRsn) return true;
            if (m_bStStmtTrlrCycleNo) return true;
            if (m_bStStmtTrlrPullCode) return true;
            if (m_bStTrlrCtlStmtFlg) return true;
            if (m_bStHpnAreaCode) return true;
            if (m_bStHomePhone) return true;
            if (m_bStHomeExtension) return true;
            if (m_bStOpnAreaCode) return true;
            if (m_bStOfficePhone) return true;
            if (m_bStOfficeExtension) return true;
            if (m_bStTinCert) return true;
            if (m_bStIraTrlrType) return true;
            if (m_bStIraTrlrDecDisab) return true;
            if (m_bStRequiredSigns) return true;
            if (m_bStmCollectedBal) return true;
            if (m_bAvgBal) return true;
            if (m_bStStmtTrlrMailFlag) return true;
            if (m_bStDcCent) return true;
            if (m_bStDcYr) return true;
            if (m_bStDcMo) return true;
            if (m_bStDcDa) return true;
            if (m_bStBkupWthldFlag) return true;
            if (m_bStTaxReason) return true;
            if (m_bStIntParamDailyAccr) return true;
            if (m_bStIntDistSchedCd) return true;
            if (m_bStIntDistIncr) return true;
            if (m_bStIntDistCd) return true;
            if (m_bStIraTrlrScDistSdCd) return true;
            if (m_bBc1Aba) return true;
            if (m_bBc1RunCent) return true;
            if (m_bBc1RunYr) return true;
            if (m_bBc1RunMo) return true;
            if (m_bBc1RunDa) return true;
            if (m_bBc1LpdPtCent) return true;
            if (m_bBc1LpdPtYr) return true;
            if (m_bBc1LpdPtMo) return true;
            if (m_bBc1LpdPtDa) return true;
            if (m_bBc1NpdProcCent) return true;
            if (m_bBc1NpdProcYr) return true;
            if (m_bBc1NpdProcMo) return true;
            if (m_bBc1NpdProcDa) return true;
            if (m_bStAfAcctTrlrNo) return true;
            if (m_bStPbPassbookAcct) return true;
            if (m_bStImFundingFlag) return true;
            if (m_bNraCertName1) return true;
            if (m_bNraCertName2) return true;
            if (m_bTaxCountry) return true;
            if (m_bProvinceCd) return true;
            if (m_bNaTrlrCountry) return true;
            if (m_bStStmtTrlrSiBegBal) return true;
            if (m_bStmLastMonyActvDate) return true;
            if (m_bUserCharField1) return true;
            if (m_bUserCharField2) return true;
            if (m_bUserCharField3) return true;
            if (m_bYesterdayFloatAmt) return true;
            if (m_bTodayFloatAmt) return true;
            if (m_bTotalBalance) return true;
            if (m_bStGovernmentId) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                if(CStNaTrlr[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 11; lOccurs++)
            {
                if(CStAfAcctTrlr[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDSTACTO", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "StControl1", m_szStControl1, &m_bStControl1);
                AddXMLField(pSess, "StControl2", m_szStControl2, &m_bStControl2);
                AddXMLField(pSess, "StControl3", m_szStControl3, &m_bStControl3);
                AddXMLField(pSess, "StControl4", m_szStControl4, &m_bStControl4);
                AddXMLField(pSess, "StAccountNo", m_szStAccountNo, &m_bStAccountNo);
                AddXMLField(pSess, "StStateCode", m_szStStateCode, &m_bStStateCode);
                AddXMLField(pSess, "StZipCodeFixed5", m_szStZipCodeFixed5, &m_bStZipCodeFixed5);
                AddXMLField(pSess, "StZipCodeDash", m_szStZipCodeDash, &m_bStZipCodeDash);
                AddXMLField(pSess, "StZipCodeLast4", m_szStZipCodeLast4, &m_bStZipCodeLast4);
                AddXMLField(pSess, "StCountryCode", m_szStCountryCode, &m_bStCountryCode);
                AddXMLField(pSess, "StBranch", m_szStBranch, &m_bStBranch);
                AddXMLField(pSess, "StAcctType", m_szStAcctType, &m_bStAcctType);
                AddXMLField(pSess, "StLcdCent", m_szStLcdCent, &m_bStLcdCent);
                AddXMLField(pSess, "StLcdYr", m_szStLcdYr, &m_bStLcdYr);
                AddXMLField(pSess, "StLcdMo", m_szStLcdMo, &m_bStLcdMo);
                AddXMLField(pSess, "StLcdDa", m_szStLcdDa, &m_bStLcdDa);
                AddXMLField(pSess, "StAmtLastDep", m_szStAmtLastDep, &m_bStAmtLastDep);
                AddXMLField(pSess, "StLcwCent", m_szStLcwCent, &m_bStLcwCent);
                AddXMLField(pSess, "StLcwYr", m_szStLcwYr, &m_bStLcwYr);
                AddXMLField(pSess, "StLcwMo", m_szStLcwMo, &m_bStLcwMo);
                AddXMLField(pSess, "StLcwDa", m_szStLcwDa, &m_bStLcwDa);
                AddXMLField(pSess, "StAmtLastWithdrawal", m_szStAmtLastWithdrawal, &m_bStAmtLastWithdrawal);
                AddXMLField(pSess, "StFtiCode", m_szStFtiCode, &m_bStFtiCode);
                AddXMLField(pSess, "StFtiPrefix", m_szStFtiPrefix, &m_bStFtiPrefix);
                AddXMLField(pSess, "StFtiSsn1", m_szStFtiSsn1, &m_bStFtiSsn1);
                AddXMLField(pSess, "StFtiSsn2", m_szStFtiSsn2, &m_bStFtiSsn2);
                AddXMLField(pSess, "StFtiSsn3", m_szStFtiSsn3, &m_bStFtiSsn3);
                AddXMLField(pSess, "StFtiSuffix", m_szStFtiSuffix, &m_bStFtiSuffix);
                AddXMLField(pSess, "StYtdIntPaid", m_szStYtdIntPaid, &m_bStYtdIntPaid);
                AddXMLField(pSess, "StLytdIntPaid", m_szStLytdIntPaid, &m_bStLytdIntPaid);
                AddXMLField(pSess, "StAoiDoCent", m_szStAoiDoCent, &m_bStAoiDoCent);
                AddXMLField(pSess, "StAoiDoYr", m_szStAoiDoYr, &m_bStAoiDoYr);
                AddXMLField(pSess, "StAoiDoMo", m_szStAoiDoMo, &m_bStAoiDoMo);
                AddXMLField(pSess, "StAoiDoDa", m_szStAoiDoDa, &m_bStAoiDoDa);
                AddXMLField(pSess, "StCaPaymentAmt", m_szStCaPaymentAmt, &m_bStCaPaymentAmt);
                AddXMLField(pSess, "StClosingBalance", m_szStClosingBalance, &m_bStClosingBalance);
                AddXMLField(pSess, "StCurrentRate", m_szStCurrentRate, &m_bStCurrentRate);
                AddXMLField(pSess, "StIntAccrAmt", m_szStIntAccrAmt, &m_bStIntAccrAmt);
                AddXMLField(pSess, "StIpdCent", m_szStIpdCent, &m_bStIpdCent);
                AddXMLField(pSess, "StIpdYr", m_szStIpdYr, &m_bStIpdYr);
                AddXMLField(pSess, "StIpdMo", m_szStIpdMo, &m_bStIpdMo);
                AddXMLField(pSess, "StIpdDa", m_szStIpdDa, &m_bStIpdDa);
                AddXMLField(pSess, "StMtdServChrg", m_szStMtdServChrg, &m_bStMtdServChrg);
                AddXMLField(pSess, "StIdDnpYear", m_szStIdDnpYear, &m_bStIdDnpYear);
                AddXMLField(pSess, "StIdDnpMo", m_szStIdDnpMo, &m_bStIdDnpMo);
                AddXMLField(pSess, "StIdDnpDa", m_szStIdDnpDa, &m_bStIdDnpDa);
                AddXMLField(pSess, "StCdAnticInt", m_szStCdAnticInt, &m_bStCdAnticInt);
                AddXMLField(pSess, "StScTrlrServChrg", m_szStScTrlrServChrg, &m_bStScTrlrServChrg);
                AddXMLField(pSess, "StStatus", m_szStStatus, &m_bStStatus);
                AddXMLField(pSess, "StOfficer", m_szStOfficer, &m_bStOfficer);
                AddXMLField(pSess, "StMntPeriod", m_szStMntPeriod, &m_bStMntPeriod);
                AddXMLField(pSess, "StMntIncr", m_szStMntIncr, &m_bStMntIncr);
                AddXMLField(pSess, "StMntAnnivDay", m_szStMntAnnivDay, &m_bStMntAnnivDay);
                AddXMLField(pSess, "StMatAutoRenew", m_szStMatAutoRenew, &m_bStMatAutoRenew);
                AddXMLField(pSess, "StMatDnmYear", m_szStMatDnmYear, &m_bStMatDnmYear);
                AddXMLField(pSess, "StMatDnmMo", m_szStMatDnmMo, &m_bStMatDnmMo);
                AddXMLField(pSess, "StMatDnmDa", m_szStMatDnmDa, &m_bStMatDnmDa);
                AddXMLField(pSess, "StLastRenewDate", m_szStLastRenewDate, &m_bStLastRenewDate);
                AddXMLField(pSess, "StRenewCurBal", m_szStRenewCurBal, &m_bStRenewCurBal);
                AddXMLField(pSess, "StRenewTimesRenew", m_szStRenewTimesRenew, &m_bStRenewTimesRenew);
                AddXMLField(pSess, "StCaNoOfPymts", m_szStCaNoOfPymts, &m_bStCaNoOfPymts);
                AddXMLField(pSess, "StCaLastPymtNo", m_szStCaLastPymtNo, &m_bStCaLastPymtNo);
                AddXMLField(pSess, "StCaNoOfPymtsMade", m_szStCaNoOfPymtsMade, &m_bStCaNoOfPymtsMade);
                AddXMLField(pSess, "StIntPayPrevPay", m_szStIntPayPrevPay, &m_bStIntPayPrevPay);
                AddXMLField(pSess, "StAcctCategory", m_szStAcctCategory, &m_bStAcctCategory);
                AddXMLField(pSess, "StCustLanguage", m_szStCustLanguage, &m_bStCustLanguage);
                AddXMLField(pSess, "StCustLangGroup", m_szStCustLangGroup, &m_bStCustLangGroup);
                AddXMLField(pSess, "StCurrCode", m_szStCurrCode, &m_bStCurrCode);
                AddXMLField(pSess, "StCurrDec", m_szStCurrDec, &m_bStCurrDec);
                AddXMLField(pSess, "StmFmFlag", m_szStmFmFlag, &m_bStmFmFlag);
                AddXMLField(pSess, "StmNameAddrFlag", m_szStmNameAddrFlag, &m_bStmNameAddrFlag);
                AddXMLField(pSess, "StmMemoFlag", m_szStmMemoFlag, &m_bStmMemoFlag);
                AddXMLField(pSess, "StmMonyFlag", m_szStmMonyFlag, &m_bStmMonyFlag);
                AddXMLField(pSess, "StmBackdateFlag", m_szStmBackdateFlag, &m_bStmBackdateFlag);
                AddXMLField(pSess, "StmRequestFlag", m_szStmRequestFlag, &m_bStmRequestFlag);
                AddXMLField(pSess, "StmPlanFlag", m_szStmPlanFlag, &m_bStmPlanFlag);
                AddXMLField(pSess, "StmDoNotCloseFlag", m_szStmDoNotCloseFlag, &m_bStmDoNotCloseFlag);
                AddXMLField(pSess, "StmClsFlag", m_szStmClsFlag, &m_bStmClsFlag);
                AddXMLField(pSess, "StmAvailBal", m_szStmAvailBal, &m_bStmAvailBal);
                AddXMLField(pSess, "StmLedgerBal", m_szStmLedgerBal, &m_bStmLedgerBal);
                AddXMLField(pSess, "StmProjAccrInt", m_szStmProjAccrInt, &m_bStmProjAccrInt);
                AddXMLField(pSess, "StmStopHoldSumFlag", m_szStmStopHoldSumFlag, &m_bStmStopHoldSumFlag);
                AddXMLField(pSess, "StmShsHoldFullBal", m_szStmShsHoldFullBal, &m_bStmShsHoldFullBal);
                AddXMLField(pSess, "StmShsHoldsAmt", m_szStmShsHoldsAmt, &m_bStmShsHoldsAmt);
                AddXMLField(pSess, "StmShsPledgeFullBal", m_szStmShsPledgeFullBal, &m_bStmShsPledgeFullBal);
                AddXMLField(pSess, "StmShsPledgeAmt", m_szStmShsPledgeAmt, &m_bStmShsPledgeAmt);
                AddXMLField(pSess, "StmMatDnmCent", m_szStmMatDnmCent, &m_bStmMatDnmCent);
                AddXMLField(pSess, "StmMatDnmYr", m_szStmMatDnmYr, &m_bStmMatDnmYr);
                AddXMLField(pSess, "StmMatDnmMo", m_szStmMatDnmMo, &m_bStmMatDnmMo);
                AddXMLField(pSess, "StmMatDnmDa", m_szStmMatDnmDa, &m_bStmMatDnmDa);
                AddXMLField(pSess, "StmIpCurAnnlRate2", m_szStmIpCurAnnlRate2, &m_bStmIpCurAnnlRate2);
                AddXMLField(pSess, "StGracePeriodFlag", m_szStGracePeriodFlag, &m_bStGracePeriodFlag);
                AddXMLField(pSess, "StGraceEndDate", m_szStGraceEndDate, &m_bStGraceEndDate);
                AddXMLField(pSess, "StShortName", m_szStShortName, &m_bStShortName);
                AddXMLField(pSess, "StmOffEmp", m_szStmOffEmp, &m_bStmOffEmp);
                AddXMLField(pSess, "StAnalysisAcct", m_szStAnalysisAcct, &m_bStAnalysisAcct);
                AddXMLField(pSess, "StmIraTrlrLstDistCc", m_szStmIraTrlrLstDistCc, &m_bStmIraTrlrLstDistCc);
                AddXMLField(pSess, "StmIraTrlrLstDistYy", m_szStmIraTrlrLstDistYy, &m_bStmIraTrlrLstDistYy);
                AddXMLField(pSess, "StmIraTrlrLstDistMo", m_szStmIraTrlrLstDistMo, &m_bStmIraTrlrLstDistMo);
                AddXMLField(pSess, "StmIraTrlrLstDistDa", m_szStmIraTrlrLstDistDa, &m_bStmIraTrlrLstDistDa);
                AddXMLField(pSess, "StIraTrPkRetPlanId", m_szStIraTrPkRetPlanId, &m_bStIraTrPkRetPlanId);
                AddXMLField(pSess, "StIraTrPkIrsSeqNo", m_szStIraTrPkIrsSeqNo, &m_bStIraTrPkIrsSeqNo);
                AddXMLField(pSess, "StIraTrPkEmpPlanId", m_szStIraTrPkEmpPlanId, &m_bStIraTrPkEmpPlanId);
                AddXMLField(pSess, "StIraTrlrPrimaryInd", m_szStIraTrlrPrimaryInd, &m_bStIraTrlrPrimaryInd);
                AddXMLField(pSess, "StIraTrlrStatusCd", m_szStIraTrlrStatusCd, &m_bStIraTrlrStatusCd);
                AddXMLField(pSess, "StmTotalPenalty", m_szStmTotalPenalty, &m_bStmTotalPenalty);
                AddXMLField(pSess, "StRegion", m_szStRegion, &m_bStRegion);
                AddXMLField(pSess, "Bc1ProcCent", m_szBc1ProcCent, &m_bBc1ProcCent);
                AddXMLField(pSess, "Bc1ProcYr", m_szBc1ProcYr, &m_bBc1ProcYr);
                AddXMLField(pSess, "Bc1ProcMo", m_szBc1ProcMo, &m_bBc1ProcMo);
                AddXMLField(pSess, "Bc1ProcDa", m_szBc1ProcDa, &m_bBc1ProcDa);
                AddXMLField(pSess, "StScTrlrNscdCent", m_szStScTrlrNscdCent, &m_bStScTrlrNscdCent);
                AddXMLField(pSess, "StStmtTrlrSiLsdYr", m_szStStmtTrlrSiLsdYr, &m_bStStmtTrlrSiLsdYr);
                AddXMLField(pSess, "StStmtTrlrSiLsdMo", m_szStStmtTrlrSiLsdMo, &m_bStStmtTrlrSiLsdMo);
                AddXMLField(pSess, "StStmtTrlrSiLsdDa", m_szStStmtTrlrSiLsdDa, &m_bStStmtTrlrSiLsdDa);
                AddXMLField(pSess, "StGraceWdPeriod", m_szStGraceWdPeriod, &m_bStGraceWdPeriod);
                AddXMLField(pSess, "StTrlrCtlIraFlg", m_szStTrlrCtlIraFlg, &m_bStTrlrCtlIraFlg);
                AddXMLField(pSess, "StTrlrCtlServChrgFlg", m_szStTrlrCtlServChrgFlg, &m_bStTrlrCtlServChrgFlg);
                AddXMLField(pSess, "StScTrlrWaiveScFlg", m_szStScTrlrWaiveScFlg, &m_bStScTrlrWaiveScFlg);
                AddXMLField(pSess, "StScTrlrWaiveScRsn", m_szStScTrlrWaiveScRsn, &m_bStScTrlrWaiveScRsn);
                AddXMLField(pSess, "StStmtTrlrCycleNo", m_nStStmtTrlrCycleNo, &m_bStStmtTrlrCycleNo);
                AddXMLField(pSess, "StStmtTrlrPullCode", m_szStStmtTrlrPullCode, &m_bStStmtTrlrPullCode);
                AddXMLField(pSess, "StTrlrCtlStmtFlg", m_szStTrlrCtlStmtFlg, &m_bStTrlrCtlStmtFlg);
                AddXMLField(pSess, "StHpnAreaCode", m_szStHpnAreaCode, &m_bStHpnAreaCode);
                AddXMLField(pSess, "StHomePhone", m_szStHomePhone, &m_bStHomePhone);
                AddXMLField(pSess, "StHomeExtension", m_szStHomeExtension, &m_bStHomeExtension);
                AddXMLField(pSess, "StOpnAreaCode", m_szStOpnAreaCode, &m_bStOpnAreaCode);
                AddXMLField(pSess, "StOfficePhone", m_szStOfficePhone, &m_bStOfficePhone);
                AddXMLField(pSess, "StOfficeExtension", m_szStOfficeExtension, &m_bStOfficeExtension);
                AddXMLField(pSess, "StTinCert", m_szStTinCert, &m_bStTinCert);
                AddXMLField(pSess, "StIraTrlrType", m_szStIraTrlrType, &m_bStIraTrlrType);
                AddXMLField(pSess, "StIraTrlrDecDisab", m_szStIraTrlrDecDisab, &m_bStIraTrlrDecDisab);
                AddXMLField(pSess, "StRequiredSigns", m_szStRequiredSigns, &m_bStRequiredSigns);
                AddXMLField(pSess, "StmCollectedBal", m_szStmCollectedBal, &m_bStmCollectedBal);
                AddXMLField(pSess, "AvgBal", m_szAvgBal, &m_bAvgBal);
                AddXMLField(pSess, "StStmtTrlrMailFlag", m_szStStmtTrlrMailFlag, &m_bStStmtTrlrMailFlag);
                AddXMLField(pSess, "StDcCent", m_szStDcCent, &m_bStDcCent);
                AddXMLField(pSess, "StDcYr", m_szStDcYr, &m_bStDcYr);
                AddXMLField(pSess, "StDcMo", m_szStDcMo, &m_bStDcMo);
                AddXMLField(pSess, "StDcDa", m_szStDcDa, &m_bStDcDa);
                AddXMLField(pSess, "StBkupWthldFlag", m_szStBkupWthldFlag, &m_bStBkupWthldFlag);
                AddXMLField(pSess, "StTaxReason", m_szStTaxReason, &m_bStTaxReason);
                AddXMLField(pSess, "StIntParamDailyAccr", m_szStIntParamDailyAccr, &m_bStIntParamDailyAccr);
                AddXMLField(pSess, "StIntDistSchedCd", m_szStIntDistSchedCd, &m_bStIntDistSchedCd);
                AddXMLField(pSess, "StIntDistIncr", m_szStIntDistIncr, &m_bStIntDistIncr);
                AddXMLField(pSess, "StIntDistCd", m_szStIntDistCd, &m_bStIntDistCd);
                AddXMLField(pSess, "StIraTrlrScDistSdCd", m_szStIraTrlrScDistSdCd, &m_bStIraTrlrScDistSdCd);
                AddXMLField(pSess, "Bc1Aba", m_szBc1Aba, &m_bBc1Aba);
                AddXMLField(pSess, "Bc1RunCent", m_szBc1RunCent, &m_bBc1RunCent);
                AddXMLField(pSess, "Bc1RunYr", m_szBc1RunYr, &m_bBc1RunYr);
                AddXMLField(pSess, "Bc1RunMo", m_szBc1RunMo, &m_bBc1RunMo);
                AddXMLField(pSess, "Bc1RunDa", m_szBc1RunDa, &m_bBc1RunDa);
                AddXMLField(pSess, "Bc1LpdPtCent", m_szBc1LpdPtCent, &m_bBc1LpdPtCent);
                AddXMLField(pSess, "Bc1LpdPtYr", m_szBc1LpdPtYr, &m_bBc1LpdPtYr);
                AddXMLField(pSess, "Bc1LpdPtMo", m_szBc1LpdPtMo, &m_bBc1LpdPtMo);
                AddXMLField(pSess, "Bc1LpdPtDa", m_szBc1LpdPtDa, &m_bBc1LpdPtDa);
                AddXMLField(pSess, "Bc1NpdProcCent", m_szBc1NpdProcCent, &m_bBc1NpdProcCent);
                AddXMLField(pSess, "Bc1NpdProcYr", m_szBc1NpdProcYr, &m_bBc1NpdProcYr);
                AddXMLField(pSess, "Bc1NpdProcMo", m_szBc1NpdProcMo, &m_bBc1NpdProcMo);
                AddXMLField(pSess, "Bc1NpdProcDa", m_szBc1NpdProcDa, &m_bBc1NpdProcDa);
                AddXMLField(pSess, "StAfAcctTrlrNo", m_szStAfAcctTrlrNo, &m_bStAfAcctTrlrNo);
                AddXMLField(pSess, "StPbPassbookAcct", m_szStPbPassbookAcct, &m_bStPbPassbookAcct);
                AddXMLField(pSess, "StImFundingFlag", m_szStImFundingFlag, &m_bStImFundingFlag);
                AddXMLField(pSess, "NraCertName1", m_szNraCertName1, &m_bNraCertName1);
                AddXMLField(pSess, "NraCertName2", m_szNraCertName2, &m_bNraCertName2);
                AddXMLField(pSess, "TaxCountry", m_szTaxCountry, &m_bTaxCountry);
                AddXMLField(pSess, "ProvinceCd", m_szProvinceCd, &m_bProvinceCd);
                AddXMLField(pSess, "NaTrlrCountry", m_szNaTrlrCountry, &m_bNaTrlrCountry);
                AddXMLField(pSess, "StStmtTrlrSiBegBal", m_szStStmtTrlrSiBegBal, &m_bStStmtTrlrSiBegBal);
                AddXMLField(pSess, "StmLastMonyActvDate", m_szStmLastMonyActvDate, &m_bStmLastMonyActvDate);
                AddXMLField(pSess, "UserCharField1", m_szUserCharField1, &m_bUserCharField1);
                AddXMLField(pSess, "UserCharField2", m_szUserCharField2, &m_bUserCharField2);
                AddXMLField(pSess, "UserCharField3", m_szUserCharField3, &m_bUserCharField3);
                AddXMLField(pSess, "YesterdayFloatAmt", m_szYesterdayFloatAmt, &m_bYesterdayFloatAmt);
                AddXMLField(pSess, "TodayFloatAmt", m_szTodayFloatAmt, &m_bTodayFloatAmt);
                AddXMLField(pSess, "TotalBalance", m_szTotalBalance, &m_bTotalBalance);
                AddXMLField(pSess, "StGovernmentId", m_szStGovernmentId, &m_bStGovernmentId);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 9; lOccurs++)
                {
                    CStNaTrlr[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 11; lOccurs++)
                {
                    CStAfAcctTrlr[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDSTACTO");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDSTACTO", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "StControl1", m_szStControl1);
                GetXMLField(pSess, "StControl2", m_szStControl2);
                GetXMLField(pSess, "StControl3", m_szStControl3);
                GetXMLField(pSess, "StControl4", m_szStControl4);
                GetXMLField(pSess, "StAccountNo", m_szStAccountNo);
                GetXMLField(pSess, "StStateCode", m_szStStateCode);
                GetXMLField(pSess, "StZipCodeFixed5", m_szStZipCodeFixed5);
                GetXMLField(pSess, "StZipCodeDash", m_szStZipCodeDash);
                GetXMLField(pSess, "StZipCodeLast4", m_szStZipCodeLast4);
                GetXMLField(pSess, "StCountryCode", m_szStCountryCode);
                GetXMLField(pSess, "StBranch", m_szStBranch);
                GetXMLField(pSess, "StAcctType", m_szStAcctType);
                GetXMLField(pSess, "StLcdCent", m_szStLcdCent);
                GetXMLField(pSess, "StLcdYr", m_szStLcdYr);
                GetXMLField(pSess, "StLcdMo", m_szStLcdMo);
                GetXMLField(pSess, "StLcdDa", m_szStLcdDa);
                GetXMLField(pSess, "StAmtLastDep", m_szStAmtLastDep);
                GetXMLField(pSess, "StLcwCent", m_szStLcwCent);
                GetXMLField(pSess, "StLcwYr", m_szStLcwYr);
                GetXMLField(pSess, "StLcwMo", m_szStLcwMo);
                GetXMLField(pSess, "StLcwDa", m_szStLcwDa);
                GetXMLField(pSess, "StAmtLastWithdrawal", m_szStAmtLastWithdrawal);
                GetXMLField(pSess, "StFtiCode", m_szStFtiCode);
                GetXMLField(pSess, "StFtiPrefix", m_szStFtiPrefix);
                GetXMLField(pSess, "StFtiSsn1", m_szStFtiSsn1);
                GetXMLField(pSess, "StFtiSsn2", m_szStFtiSsn2);
                GetXMLField(pSess, "StFtiSsn3", m_szStFtiSsn3);
                GetXMLField(pSess, "StFtiSuffix", m_szStFtiSuffix);
                GetXMLField(pSess, "StYtdIntPaid", m_szStYtdIntPaid);
                GetXMLField(pSess, "StLytdIntPaid", m_szStLytdIntPaid);
                GetXMLField(pSess, "StAoiDoCent", m_szStAoiDoCent);
                GetXMLField(pSess, "StAoiDoYr", m_szStAoiDoYr);
                GetXMLField(pSess, "StAoiDoMo", m_szStAoiDoMo);
                GetXMLField(pSess, "StAoiDoDa", m_szStAoiDoDa);
                GetXMLField(pSess, "StCaPaymentAmt", m_szStCaPaymentAmt);
                GetXMLField(pSess, "StClosingBalance", m_szStClosingBalance);
                GetXMLField(pSess, "StCurrentRate", m_szStCurrentRate);
                GetXMLField(pSess, "StIntAccrAmt", m_szStIntAccrAmt);
                GetXMLField(pSess, "StIpdCent", m_szStIpdCent);
                GetXMLField(pSess, "StIpdYr", m_szStIpdYr);
                GetXMLField(pSess, "StIpdMo", m_szStIpdMo);
                GetXMLField(pSess, "StIpdDa", m_szStIpdDa);
                GetXMLField(pSess, "StMtdServChrg", m_szStMtdServChrg);
                GetXMLField(pSess, "StIdDnpYear", m_szStIdDnpYear);
                GetXMLField(pSess, "StIdDnpMo", m_szStIdDnpMo);
                GetXMLField(pSess, "StIdDnpDa", m_szStIdDnpDa);
                GetXMLField(pSess, "StCdAnticInt", m_szStCdAnticInt);
                GetXMLField(pSess, "StScTrlrServChrg", m_szStScTrlrServChrg);
                GetXMLField(pSess, "StStatus", m_szStStatus);
                GetXMLField(pSess, "StOfficer", m_szStOfficer);
                GetXMLField(pSess, "StMntPeriod", m_szStMntPeriod);
                GetXMLField(pSess, "StMntIncr", m_szStMntIncr);
                GetXMLField(pSess, "StMntAnnivDay", m_szStMntAnnivDay);
                GetXMLField(pSess, "StMatAutoRenew", m_szStMatAutoRenew);
                GetXMLField(pSess, "StMatDnmYear", m_szStMatDnmYear);
                GetXMLField(pSess, "StMatDnmMo", m_szStMatDnmMo);
                GetXMLField(pSess, "StMatDnmDa", m_szStMatDnmDa);
                GetXMLField(pSess, "StLastRenewDate", m_szStLastRenewDate);
                GetXMLField(pSess, "StRenewCurBal", m_szStRenewCurBal);
                GetXMLField(pSess, "StRenewTimesRenew", m_szStRenewTimesRenew);
                GetXMLField(pSess, "StCaNoOfPymts", m_szStCaNoOfPymts);
                GetXMLField(pSess, "StCaLastPymtNo", m_szStCaLastPymtNo);
                GetXMLField(pSess, "StCaNoOfPymtsMade", m_szStCaNoOfPymtsMade);
                GetXMLField(pSess, "StIntPayPrevPay", m_szStIntPayPrevPay);
                GetXMLField(pSess, "StAcctCategory", m_szStAcctCategory);
                GetXMLField(pSess, "StCustLanguage", m_szStCustLanguage);
                GetXMLField(pSess, "StCustLangGroup", m_szStCustLangGroup);
                GetXMLField(pSess, "StCurrCode", m_szStCurrCode);
                GetXMLField(pSess, "StCurrDec", m_szStCurrDec);
                GetXMLField(pSess, "StmFmFlag", m_szStmFmFlag);
                GetXMLField(pSess, "StmNameAddrFlag", m_szStmNameAddrFlag);
                GetXMLField(pSess, "StmMemoFlag", m_szStmMemoFlag);
                GetXMLField(pSess, "StmMonyFlag", m_szStmMonyFlag);
                GetXMLField(pSess, "StmBackdateFlag", m_szStmBackdateFlag);
                GetXMLField(pSess, "StmRequestFlag", m_szStmRequestFlag);
                GetXMLField(pSess, "StmPlanFlag", m_szStmPlanFlag);
                GetXMLField(pSess, "StmDoNotCloseFlag", m_szStmDoNotCloseFlag);
                GetXMLField(pSess, "StmClsFlag", m_szStmClsFlag);
                GetXMLField(pSess, "StmAvailBal", m_szStmAvailBal);
                GetXMLField(pSess, "StmLedgerBal", m_szStmLedgerBal);
                GetXMLField(pSess, "StmProjAccrInt", m_szStmProjAccrInt);
                GetXMLField(pSess, "StmStopHoldSumFlag", m_szStmStopHoldSumFlag);
                GetXMLField(pSess, "StmShsHoldFullBal", m_szStmShsHoldFullBal);
                GetXMLField(pSess, "StmShsHoldsAmt", m_szStmShsHoldsAmt);
                GetXMLField(pSess, "StmShsPledgeFullBal", m_szStmShsPledgeFullBal);
                GetXMLField(pSess, "StmShsPledgeAmt", m_szStmShsPledgeAmt);
                GetXMLField(pSess, "StmMatDnmCent", m_szStmMatDnmCent);
                GetXMLField(pSess, "StmMatDnmYr", m_szStmMatDnmYr);
                GetXMLField(pSess, "StmMatDnmMo", m_szStmMatDnmMo);
                GetXMLField(pSess, "StmMatDnmDa", m_szStmMatDnmDa);
                GetXMLField(pSess, "StmIpCurAnnlRate2", m_szStmIpCurAnnlRate2);
                GetXMLField(pSess, "StGracePeriodFlag", m_szStGracePeriodFlag);
                GetXMLField(pSess, "StGraceEndDate", m_szStGraceEndDate);
                GetXMLField(pSess, "StShortName", m_szStShortName);
                GetXMLField(pSess, "StmOffEmp", m_szStmOffEmp);
                GetXMLField(pSess, "StAnalysisAcct", m_szStAnalysisAcct);
                GetXMLField(pSess, "StmIraTrlrLstDistCc", m_szStmIraTrlrLstDistCc);
                GetXMLField(pSess, "StmIraTrlrLstDistYy", m_szStmIraTrlrLstDistYy);
                GetXMLField(pSess, "StmIraTrlrLstDistMo", m_szStmIraTrlrLstDistMo);
                GetXMLField(pSess, "StmIraTrlrLstDistDa", m_szStmIraTrlrLstDistDa);
                GetXMLField(pSess, "StIraTrPkRetPlanId", m_szStIraTrPkRetPlanId);
                GetXMLField(pSess, "StIraTrPkIrsSeqNo", m_szStIraTrPkIrsSeqNo);
                GetXMLField(pSess, "StIraTrPkEmpPlanId", m_szStIraTrPkEmpPlanId);
                GetXMLField(pSess, "StIraTrlrPrimaryInd", m_szStIraTrlrPrimaryInd);
                GetXMLField(pSess, "StIraTrlrStatusCd", m_szStIraTrlrStatusCd);
                GetXMLField(pSess, "StmTotalPenalty", m_szStmTotalPenalty);
                GetXMLField(pSess, "StRegion", m_szStRegion);
                GetXMLField(pSess, "Bc1ProcCent", m_szBc1ProcCent);
                GetXMLField(pSess, "Bc1ProcYr", m_szBc1ProcYr);
                GetXMLField(pSess, "Bc1ProcMo", m_szBc1ProcMo);
                GetXMLField(pSess, "Bc1ProcDa", m_szBc1ProcDa);
                GetXMLField(pSess, "StScTrlrNscdCent", m_szStScTrlrNscdCent);
                GetXMLField(pSess, "StStmtTrlrSiLsdYr", m_szStStmtTrlrSiLsdYr);
                GetXMLField(pSess, "StStmtTrlrSiLsdMo", m_szStStmtTrlrSiLsdMo);
                GetXMLField(pSess, "StStmtTrlrSiLsdDa", m_szStStmtTrlrSiLsdDa);
                GetXMLField(pSess, "StGraceWdPeriod", m_szStGraceWdPeriod);
                GetXMLField(pSess, "StTrlrCtlIraFlg", m_szStTrlrCtlIraFlg);
                GetXMLField(pSess, "StTrlrCtlServChrgFlg", m_szStTrlrCtlServChrgFlg);
                GetXMLField(pSess, "StScTrlrWaiveScFlg", m_szStScTrlrWaiveScFlg);
                GetXMLField(pSess, "StScTrlrWaiveScRsn", m_szStScTrlrWaiveScRsn);
                GetXMLField(pSess, "StStmtTrlrCycleNo", &m_nStStmtTrlrCycleNo);
                GetXMLField(pSess, "StStmtTrlrPullCode", m_szStStmtTrlrPullCode);
                GetXMLField(pSess, "StTrlrCtlStmtFlg", m_szStTrlrCtlStmtFlg);
                GetXMLField(pSess, "StHpnAreaCode", m_szStHpnAreaCode);
                GetXMLField(pSess, "StHomePhone", m_szStHomePhone);
                GetXMLField(pSess, "StHomeExtension", m_szStHomeExtension);
                GetXMLField(pSess, "StOpnAreaCode", m_szStOpnAreaCode);
                GetXMLField(pSess, "StOfficePhone", m_szStOfficePhone);
                GetXMLField(pSess, "StOfficeExtension", m_szStOfficeExtension);
                GetXMLField(pSess, "StTinCert", m_szStTinCert);
                GetXMLField(pSess, "StIraTrlrType", m_szStIraTrlrType);
                GetXMLField(pSess, "StIraTrlrDecDisab", m_szStIraTrlrDecDisab);
                GetXMLField(pSess, "StRequiredSigns", m_szStRequiredSigns);
                GetXMLField(pSess, "StmCollectedBal", m_szStmCollectedBal);
                GetXMLField(pSess, "AvgBal", m_szAvgBal);
                GetXMLField(pSess, "StStmtTrlrMailFlag", m_szStStmtTrlrMailFlag);
                GetXMLField(pSess, "StDcCent", m_szStDcCent);
                GetXMLField(pSess, "StDcYr", m_szStDcYr);
                GetXMLField(pSess, "StDcMo", m_szStDcMo);
                GetXMLField(pSess, "StDcDa", m_szStDcDa);
                GetXMLField(pSess, "StBkupWthldFlag", m_szStBkupWthldFlag);
                GetXMLField(pSess, "StTaxReason", m_szStTaxReason);
                GetXMLField(pSess, "StIntParamDailyAccr", m_szStIntParamDailyAccr);
                GetXMLField(pSess, "StIntDistSchedCd", m_szStIntDistSchedCd);
                GetXMLField(pSess, "StIntDistIncr", m_szStIntDistIncr);
                GetXMLField(pSess, "StIntDistCd", m_szStIntDistCd);
                GetXMLField(pSess, "StIraTrlrScDistSdCd", m_szStIraTrlrScDistSdCd);
                GetXMLField(pSess, "Bc1Aba", m_szBc1Aba);
                GetXMLField(pSess, "Bc1RunCent", m_szBc1RunCent);
                GetXMLField(pSess, "Bc1RunYr", m_szBc1RunYr);
                GetXMLField(pSess, "Bc1RunMo", m_szBc1RunMo);
                GetXMLField(pSess, "Bc1RunDa", m_szBc1RunDa);
                GetXMLField(pSess, "Bc1LpdPtCent", m_szBc1LpdPtCent);
                GetXMLField(pSess, "Bc1LpdPtYr", m_szBc1LpdPtYr);
                GetXMLField(pSess, "Bc1LpdPtMo", m_szBc1LpdPtMo);
                GetXMLField(pSess, "Bc1LpdPtDa", m_szBc1LpdPtDa);
                GetXMLField(pSess, "Bc1NpdProcCent", m_szBc1NpdProcCent);
                GetXMLField(pSess, "Bc1NpdProcYr", m_szBc1NpdProcYr);
                GetXMLField(pSess, "Bc1NpdProcMo", m_szBc1NpdProcMo);
                GetXMLField(pSess, "Bc1NpdProcDa", m_szBc1NpdProcDa);
                GetXMLField(pSess, "StAfAcctTrlrNo", m_szStAfAcctTrlrNo);
                GetXMLField(pSess, "StPbPassbookAcct", m_szStPbPassbookAcct);
                GetXMLField(pSess, "StImFundingFlag", m_szStImFundingFlag);
                GetXMLField(pSess, "NraCertName1", m_szNraCertName1);
                GetXMLField(pSess, "NraCertName2", m_szNraCertName2);
                GetXMLField(pSess, "TaxCountry", m_szTaxCountry);
                GetXMLField(pSess, "ProvinceCd", m_szProvinceCd);
                GetXMLField(pSess, "NaTrlrCountry", m_szNaTrlrCountry);
                GetXMLField(pSess, "StStmtTrlrSiBegBal", m_szStStmtTrlrSiBegBal);
                GetXMLField(pSess, "StmLastMonyActvDate", m_szStmLastMonyActvDate);
                GetXMLField(pSess, "UserCharField1", m_szUserCharField1);
                GetXMLField(pSess, "UserCharField2", m_szUserCharField2);
                GetXMLField(pSess, "UserCharField3", m_szUserCharField3);
                GetXMLField(pSess, "YesterdayFloatAmt", m_szYesterdayFloatAmt);
                GetXMLField(pSess, "TodayFloatAmt", m_szTodayFloatAmt);
                GetXMLField(pSess, "TotalBalance", m_szTotalBalance);
                GetXMLField(pSess, "StGovernmentId", m_szStGovernmentId);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 9; lOccurs++)
                {
                    CStNaTrlr[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 11; lOccurs++)
                {
                    CStAfAcctTrlr[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDSTACTO");
            };
        }
        
        //**************** Start AsdStNaTrlr Definition ****************
        //                 NAME/ADDRESS TYPE, SEQUENCE, AND INFORMATION (1 OF 8)
        
        class AsdStNaTrlr
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bStNaTrlrType;
            char      m_szStNaTrlrType[1+1];
            bool      m_bMstNaSeq;
            char      m_szMstNaSeq[1+1];
            bool      m_bStNaTrlrLine;
            char      m_szStNaTrlrLine[40+1];
            bool      m_bStNaTrlrSsNameCd;
            char      m_szStNaTrlrSsNameCd[1+1];
        
          public:
            long      m_lIndex;

            AsdStNaTrlr ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bStNaTrlrType = false;
                strcpy(m_szStNaTrlrType, "");
                m_bMstNaSeq = false;
                strcpy(m_szMstNaSeq, "");
                m_bStNaTrlrLine = false;
                strcpy(m_szStNaTrlrLine, "");
                m_bStNaTrlrSsNameCd = false;
                strcpy(m_szStNaTrlrSsNameCd, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    TYPE OF NAME/ADDRESS LINE
            long lStNaTrlrType () { return 1; };
            RWCString StNaTrlrType (void)
            {
                return m_szStNaTrlrType;
            }
            long StNaTrlrType (const RWCString& rwc)
            {
                return SetString(rwc, m_szStNaTrlrType, sizeof(m_szStNaTrlrType), &m_bStNaTrlrType);
            }
            
            //    SEQUENCE OF LINE WITHIN TYPE
            long lMstNaSeq () { return 1; };
            RWCString MstNaSeq (void)
            {
                return m_szMstNaSeq;
            }
            long MstNaSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szMstNaSeq, sizeof(m_szMstNaSeq), &m_bMstNaSeq);
            }
            
            //    NAME/ADDRESS LINE
            long lStNaTrlrLine () { return 40; };
            RWCString StNaTrlrLine (void)
            {
                return m_szStNaTrlrLine;
            }
            long StNaTrlrLine (const RWCString& rwc)
            {
                return SetString(rwc, m_szStNaTrlrLine, sizeof(m_szStNaTrlrLine), &m_bStNaTrlrLine);
            }
            
            //    SOCIAL SECURITY NAME CODE
            long lStNaTrlrSsNameCd () { return 1; };
            RWCString StNaTrlrSsNameCd (void)
            {
                return m_szStNaTrlrSsNameCd;
            }
            long StNaTrlrSsNameCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szStNaTrlrSsNameCd, sizeof(m_szStNaTrlrSsNameCd), &m_bStNaTrlrSsNameCd);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bStNaTrlrType) return true;
                if (m_bMstNaSeq) return true;
                if (m_bStNaTrlrLine) return true;
                if (m_bStNaTrlrSsNameCd) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "StNaTrlr", m_lIndex);
                    AddXMLField(pSess, "StNaTrlrType", m_szStNaTrlrType, &m_bStNaTrlrType);
                    AddXMLField(pSess, "MstNaSeq", m_szMstNaSeq, &m_bMstNaSeq);
                    AddXMLField(pSess, "StNaTrlrLine", m_szStNaTrlrLine, &m_bStNaTrlrLine);
                    AddXMLField(pSess, "StNaTrlrSsNameCd", m_szStNaTrlrSsNameCd, &m_bStNaTrlrSsNameCd);
                    AddXMLCloseRecord(pSess, "StNaTrlr");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "StNaTrlr", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "StNaTrlrType", m_szStNaTrlrType);
                    GetXMLField(pSess, "MstNaSeq", m_szMstNaSeq);
                    GetXMLField(pSess, "StNaTrlrLine", m_szStNaTrlrLine);
                    GetXMLField(pSess, "StNaTrlrSsNameCd", m_szStNaTrlrSsNameCd);
                    CloseXMLRecord(pSess, "StNaTrlr");
                };
            }
        };

        AsdStNaTrlr  CStNaTrlr[9];
        AsdStNaTrlr *StNaTrlr[9];
        
        //**************** End AsdStNaTrlr Definition ****************
        
        
        //**************** Start AsdStAfAcctTrlr Definition ****************
        //                 AFFILIATE ACCOUNT TRAILER
        
        class AsdStAfAcctTrlr
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bStAfActType;
            char      m_szStAfActType[2+1];
            bool      m_bStAfSystemId;
            char      m_szStAfSystemId[2+1];
            bool      m_bStAfAcctControl;
            char      m_szStAfAcctControl[31+1];
            bool      m_bStAfAmt;
            char      m_szStAfAmt[17+1];
            bool      m_bStAfSchedFreqCd;
            char      m_szStAfSchedFreqCd[1+1];
            bool      m_bStAfSchedDay1;
            char      m_szStAfSchedDay1[2+1];
            bool      m_bStAfSchedDay2;
            char      m_szStAfSchedDay2[2+1];
            bool      m_bStAfFreq;
            char      m_szStAfFreq[2+1];
            bool      m_bStAfNextXferDt;
            char      m_szStAfNextXferDt[8+1];
            bool      m_bStAfTrlrScFixExp;
            char      m_szStAfTrlrScFixExp[1+1];
            bool      m_bStAfExpDt;
            char      m_szStAfExpDt[8+1];
            bool      m_bStAfOrigXferCnt;
            char      m_szStAfOrigXferCnt[4+1];
            bool      m_bStAfRemainXferCnt;
            char      m_szStAfRemainXferCnt[4+1];
            bool      m_bFill2;
            char      m_szFill2[2+1];
        
          public:
            long      m_lIndex;

            AsdStAfAcctTrlr ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bStAfActType = false;
                strcpy(m_szStAfActType, "");
                m_bStAfSystemId = false;
                strcpy(m_szStAfSystemId, "");
                m_bStAfAcctControl = false;
                strcpy(m_szStAfAcctControl, "");
                m_bStAfAmt = false;
                strcpy(m_szStAfAmt, "+0000000000000.00");
                m_bStAfSchedFreqCd = false;
                strcpy(m_szStAfSchedFreqCd, "");
                m_bStAfSchedDay1 = false;
                strcpy(m_szStAfSchedDay1, "");
                m_bStAfSchedDay2 = false;
                strcpy(m_szStAfSchedDay2, "");
                m_bStAfFreq = false;
                strcpy(m_szStAfFreq, "");
                m_bStAfNextXferDt = false;
                strcpy(m_szStAfNextXferDt, "");
                m_bStAfTrlrScFixExp = false;
                strcpy(m_szStAfTrlrScFixExp, "");
                m_bStAfExpDt = false;
                strcpy(m_szStAfExpDt, "");
                m_bStAfOrigXferCnt = false;
                strcpy(m_szStAfOrigXferCnt, "+000");
                m_bStAfRemainXferCnt = false;
                strcpy(m_szStAfRemainXferCnt, "+000");
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    REQUIRED FIELD SPECIFYING THE TYPE OF AFFILIATE ACCOUNT
            long lStAfActType () { return 2; };
            RWCString StAfActType (void)
            {
                return m_szStAfActType;
            }
            long StAfActType (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfActType, sizeof(m_szStAfActType), &m_bStAfActType);
            }
            
            //    AFF ACCT TRLR SYSTEM
            long lStAfSystemId () { return 2; };
            RWCString StAfSystemId (void)
            {
                return m_szStAfSystemId;
            }
            long StAfSystemId (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfSystemId, sizeof(m_szStAfSystemId), &m_bStAfSystemId);
            }
            
            //    REQUIRED CONTROL FIELD OF THE AFFILIATE ACCOUNT
            long lStAfAcctControl () { return 31; };
            RWCString StAfAcctControl (void)
            {
                return m_szStAfAcctControl;
            }
            long StAfAcctControl (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfAcctControl, sizeof(m_szStAfAcctControl), &m_bStAfAcctControl);
            }
            
            //    AMOUNT FOR TYPE 2,5,11, AND 12
            long lStAfAmt () { return 17; };
            RWCString StAfAmt (void)
            {
                return AceZeroSupp(m_szStAfAmt, &m_szSuppressBuff[0]);
            }
            RWCString StAfAmtRaw (void)
            {
                return m_szStAfAmt;
            }
            long StAfAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfAmt, sizeof(m_szStAfAmt), &m_bStAfAmt);
            }
            
            //    FREQUENCY CODE
            long lStAfSchedFreqCd () { return 1; };
            RWCString StAfSchedFreqCd (void)
            {
                return m_szStAfSchedFreqCd;
            }
            long StAfSchedFreqCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfSchedFreqCd, sizeof(m_szStAfSchedFreqCd), &m_bStAfSchedFreqCd);
            }
            
            //    DAY OF FREQUENCY SCHEDULE
            long lStAfSchedDay1 () { return 2; };
            RWCString StAfSchedDay1 (void)
            {
                return m_szStAfSchedDay1;
            }
            long StAfSchedDay1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfSchedDay1, sizeof(m_szStAfSchedDay1), &m_bStAfSchedDay1);
            }
            
            //    DAY OF FREQUENCY SCHEDULE
            long lStAfSchedDay2 () { return 2; };
            RWCString StAfSchedDay2 (void)
            {
                return m_szStAfSchedDay2;
            }
            long StAfSchedDay2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfSchedDay2, sizeof(m_szStAfSchedDay2), &m_bStAfSchedDay2);
            }
            
            //    FREQUENCY CODE
            long lStAfFreq () { return 2; };
            RWCString StAfFreq (void)
            {
                return m_szStAfFreq;
            }
            long StAfFreq (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfFreq, sizeof(m_szStAfFreq), &m_bStAfFreq);
            }
            
            //    AFFILIATE ACCT TRLR SCHED NEXT TRANSFER DATE - CCYYMMDD
            long lStAfNextXferDt () { return 8; };
            RWCString StAfNextXferDt (void)
            {
                return m_szStAfNextXferDt;
            }
            long StAfNextXferDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfNextXferDt, sizeof(m_szStAfNextXferDt), &m_bStAfNextXferDt);
            }
            
            //    FIXED EXPIRATION DATE
            long lStAfTrlrScFixExp () { return 1; };
            RWCString StAfTrlrScFixExp (void)
            {
                return m_szStAfTrlrScFixExp;
            }
            long StAfTrlrScFixExp (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfTrlrScFixExp, sizeof(m_szStAfTrlrScFixExp), &m_bStAfTrlrScFixExp);
            }
            
            //    AFFILIATE TRLR SCHEDULED EXPIRATION DATE - CCYYMMDD
            long lStAfExpDt () { return 8; };
            RWCString StAfExpDt (void)
            {
                return m_szStAfExpDt;
            }
            long StAfExpDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfExpDt, sizeof(m_szStAfExpDt), &m_bStAfExpDt);
            }
            
            //    TOTAL NUMBER OF TRANSFERS TO BE MADE
            long lStAfOrigXferCnt () { return 4; };
            RWCString StAfOrigXferCnt (void)
            {
                return AceZeroSupp(m_szStAfOrigXferCnt, &m_szSuppressBuff[0]);
            }
            RWCString StAfOrigXferCntRaw (void)
            {
                return m_szStAfOrigXferCnt;
            }
            long StAfOrigXferCnt (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfOrigXferCnt, sizeof(m_szStAfOrigXferCnt), &m_bStAfOrigXferCnt);
            }
            
            //    NUMBER OF TRANSFERS TO BE MADE
            long lStAfRemainXferCnt () { return 4; };
            RWCString StAfRemainXferCnt (void)
            {
                return AceZeroSupp(m_szStAfRemainXferCnt, &m_szSuppressBuff[0]);
            }
            RWCString StAfRemainXferCntRaw (void)
            {
                return m_szStAfRemainXferCnt;
            }
            long StAfRemainXferCnt (const RWCString& rwc)
            {
                return SetString(rwc, m_szStAfRemainXferCnt, sizeof(m_szStAfRemainXferCnt), &m_bStAfRemainXferCnt);
            }
            
            long lFill2 () { return 2; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bStAfActType) return true;
                if (m_bStAfSystemId) return true;
                if (m_bStAfAcctControl) return true;
                if (m_bStAfAmt) return true;
                if (m_bStAfSchedFreqCd) return true;
                if (m_bStAfSchedDay1) return true;
                if (m_bStAfSchedDay2) return true;
                if (m_bStAfFreq) return true;
                if (m_bStAfNextXferDt) return true;
                if (m_bStAfTrlrScFixExp) return true;
                if (m_bStAfExpDt) return true;
                if (m_bStAfOrigXferCnt) return true;
                if (m_bStAfRemainXferCnt) return true;
                if (m_bFill2) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "StAfAcctTrlr", m_lIndex);
                    AddXMLField(pSess, "StAfActType", m_szStAfActType, &m_bStAfActType);
                    AddXMLField(pSess, "StAfSystemId", m_szStAfSystemId, &m_bStAfSystemId);
                    AddXMLField(pSess, "StAfAcctControl", m_szStAfAcctControl, &m_bStAfAcctControl);
                    AddXMLField(pSess, "StAfAmt", m_szStAfAmt, &m_bStAfAmt);
                    AddXMLField(pSess, "StAfSchedFreqCd", m_szStAfSchedFreqCd, &m_bStAfSchedFreqCd);
                    AddXMLField(pSess, "StAfSchedDay1", m_szStAfSchedDay1, &m_bStAfSchedDay1);
                    AddXMLField(pSess, "StAfSchedDay2", m_szStAfSchedDay2, &m_bStAfSchedDay2);
                    AddXMLField(pSess, "StAfFreq", m_szStAfFreq, &m_bStAfFreq);
                    AddXMLField(pSess, "StAfNextXferDt", m_szStAfNextXferDt, &m_bStAfNextXferDt);
                    AddXMLField(pSess, "StAfTrlrScFixExp", m_szStAfTrlrScFixExp, &m_bStAfTrlrScFixExp);
                    AddXMLField(pSess, "StAfExpDt", m_szStAfExpDt, &m_bStAfExpDt);
                    AddXMLField(pSess, "StAfOrigXferCnt", m_szStAfOrigXferCnt, &m_bStAfOrigXferCnt);
                    AddXMLField(pSess, "StAfRemainXferCnt", m_szStAfRemainXferCnt, &m_bStAfRemainXferCnt);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    AddXMLCloseRecord(pSess, "StAfAcctTrlr");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "StAfAcctTrlr", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "StAfActType", m_szStAfActType);
                    GetXMLField(pSess, "StAfSystemId", m_szStAfSystemId);
                    GetXMLField(pSess, "StAfAcctControl", m_szStAfAcctControl);
                    GetXMLField(pSess, "StAfAmt", m_szStAfAmt);
                    GetXMLField(pSess, "StAfSchedFreqCd", m_szStAfSchedFreqCd);
                    GetXMLField(pSess, "StAfSchedDay1", m_szStAfSchedDay1);
                    GetXMLField(pSess, "StAfSchedDay2", m_szStAfSchedDay2);
                    GetXMLField(pSess, "StAfFreq", m_szStAfFreq);
                    GetXMLField(pSess, "StAfNextXferDt", m_szStAfNextXferDt);
                    GetXMLField(pSess, "StAfTrlrScFixExp", m_szStAfTrlrScFixExp);
                    GetXMLField(pSess, "StAfExpDt", m_szStAfExpDt);
                    GetXMLField(pSess, "StAfOrigXferCnt", m_szStAfOrigXferCnt);
                    GetXMLField(pSess, "StAfRemainXferCnt", m_szStAfRemainXferCnt);
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    CloseXMLRecord(pSess, "StAfAcctTrlr");
                };
            }
        };

        AsdStAfAcctTrlr  CStAfAcctTrlr[11];
        AsdStAfAcctTrlr *StAfAcctTrlr[11];
        
        //**************** End AsdStAfAcctTrlr Definition ****************
        
    };

    AsdSDSTACTO CSDSTACTO;
    AsdSDSTACTO *SDSTACTO;
    
    //**************** End AsdSDSTACTO Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCSTMSData Definition ****************

typedef AsdSDPCSTMSData *LPSDPCSTMS;
typedef AsdSDPCSTMSData::AsdTSHeader *LPSDPCSTMS_TSHeader;
typedef AsdSDPCSTMSData::AsdSDSTINP *LPSDPCSTMS_SDSTINP;
typedef AsdSDPCSTMSData::AsdSDSTINP::AsdRangeValues *LPSDPCSTMS_SDSTINP_RangeValues;
typedef AsdSDPCSTMSData::AsdSDSTACTO *LPSDPCSTMS_SDSTACTO;
typedef AsdSDPCSTMSData::AsdSDSTACTO::AsdStNaTrlr *LPSDPCSTMS_SDSTACTO_StNaTrlr;
typedef AsdSDPCSTMSData::AsdSDSTACTO::AsdStAfAcctTrlr *LPSDPCSTMS_SDSTACTO_StAfAcctTrlr;
typedef AsdSDPCSTMSData::AsdTSMDA *LPSDPCSTMS_TSMDA;
typedef AsdSDPCSTMSData::AsdTSMDA::AsdMdaTrmMsg *LPSDPCSTMS_TSMDA_MdaTrmMsg;
typedef AsdSDPCSTMSData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCSTMS_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCSTMSData_H

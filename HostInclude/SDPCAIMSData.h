#ifndef AsdSDPCAIMSData_H
#define AsdSDPCAIMSData_H

#include <stdlib.h>
#ifdef  AsdSDPCAIMS_INTEGRITY_STRING
#undef  AsdSDPCAIMS_INTEGRITY_STRING
#endif
#define AsdSDPCAIMS_INTEGRITY_STRING        ""

#ifdef  AsdSDPCAIMS_CRC_STRING
#undef  AsdSDPCAIMS_CRC_STRING
#endif
#define AsdSDPCAIMS_CRC_STRING "2365404126"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCAIMSData Definition ****************
//                 ALS Account Inquiry

//                 SDPCAIMSData.h generated by AceGen2 ver. 2.5.09

class AsdSDPCAIMSData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCAIMSData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCAIMS.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCAIMS_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDAMTRII = &CSDAMTRII;
        SDAMMSIO = &CSDAMMSIO;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCAIMSData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDAMTRII.Reinit();
            CSDAMMSIO.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCAIMS_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAIMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDAMTRII.Save(&m_Sess);
        CSDAMMSIO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCAIMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDAMTRII.Load(&m_Sess);
                        CSDAMMSIO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCAIMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAIMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDAMTRII.Save(&m_Sess);
        CSDAMMSIO.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCAIMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDAMTRII.Load(&m_Sess);
                        CSDAMMSIO.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCAIMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAIMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDAMTRII Definition ****************
    //                 SD  INPUT INTERFACE WITH ALS                                
    
    //    SDAMTRII.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:19
    class AsdSDAMTRII
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRtCtl1;
        char      m_szRtCtl1[2+1];
        bool      m_bRtCtl2;
        char      m_szRtCtl2[3+1];
        bool      m_bRtCtl3;
        char      m_szRtCtl3[3+1];
        bool      m_bRtCtl4;
        char      m_szRtCtl4[4+1];
        bool      m_bRtAcctNum;
        char      m_szRtAcctNum[14+1];
        bool      m_bTrEffDate;
        char      m_szTrEffDate[8+1];
        bool      m_bTrExtSeq;
        char      m_szTrExtSeq[4+1];
        bool      m_bTrIntSeq;
        char      m_szTrIntSeq[4+1];
        bool      m_bTrRevCd;
        char      m_szTrRevCd[1+1];
        bool      m_bKeyedReadFlag;
        char      m_szKeyedReadFlag[1+1];
        bool      m_bSdInterfaceInd;
        char      m_szSdInterfaceInd[3+1];
        bool      m_bSdAmtLow;
        char      m_szSdAmtLow[17+1];
        bool      m_bSdAmtHigh;
        char      m_szSdAmtHigh[17+1];
        bool      m_bSdDateLow;
        char      m_szSdDateLow[10+1];
        bool      m_bSdDateHigh;
        char      m_szSdDateHigh[10+1];
        bool      m_bSelectFlag;
        char      m_szSelectFlag[1+1];
        bool      m_bSdProcessDate;
        char      m_szSdProcessDate[8+1];
        bool      m_bFill0;
        char      m_szFill0[30+1];
    
      public:
        long      m_lIndex;

        AsdSDAMTRII ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRtCtl1 = false;
            strcpy(m_szRtCtl1, "");
            m_bRtCtl2 = false;
            strcpy(m_szRtCtl2, "");
            m_bRtCtl3 = false;
            strcpy(m_szRtCtl3, "");
            m_bRtCtl4 = false;
            strcpy(m_szRtCtl4, "");
            m_bRtAcctNum = false;
            strcpy(m_szRtAcctNum, "");
            m_bTrEffDate = false;
            strcpy(m_szTrEffDate, "00000000");
            m_bTrExtSeq = false;
            strcpy(m_szTrExtSeq, "0000");
            m_bTrIntSeq = false;
            strcpy(m_szTrIntSeq, "0000");
            m_bTrRevCd = false;
            strcpy(m_szTrRevCd, "");
            m_bKeyedReadFlag = false;
            strcpy(m_szKeyedReadFlag, "");
            m_bSdInterfaceInd = false;
            strcpy(m_szSdInterfaceInd, "");
            m_bSdAmtLow = false;
            strcpy(m_szSdAmtLow, "+0000000000000.00");
            m_bSdAmtHigh = false;
            strcpy(m_szSdAmtHigh, "+0000000000000.00");
            m_bSdDateLow = false;
            strcpy(m_szSdDateLow, "+000000000");
            m_bSdDateHigh = false;
            strcpy(m_szSdDateHigh, "+000000000");
            m_bSelectFlag = false;
            strcpy(m_szSelectFlag, "");
            m_bSdProcessDate = false;
            strcpy(m_szSdProcessDate, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRtCtl1 = false;
            strcpy(m_szRtCtl1, "");
            m_bRtCtl2 = false;
            strcpy(m_szRtCtl2, "");
            m_bRtCtl3 = false;
            strcpy(m_szRtCtl3, "");
            m_bRtCtl4 = false;
            strcpy(m_szRtCtl4, "");
            m_bRtAcctNum = false;
            strcpy(m_szRtAcctNum, "");
            m_bTrEffDate = false;
            strcpy(m_szTrEffDate, "00000000");
            m_bTrExtSeq = false;
            strcpy(m_szTrExtSeq, "0000");
            m_bTrIntSeq = false;
            strcpy(m_szTrIntSeq, "0000");
            m_bTrRevCd = false;
            strcpy(m_szTrRevCd, "");
            m_bKeyedReadFlag = false;
            strcpy(m_szKeyedReadFlag, "");
            m_bSdInterfaceInd = false;
            strcpy(m_szSdInterfaceInd, "");
            m_bSdAmtLow = false;
            strcpy(m_szSdAmtLow, "+0000000000000.00");
            m_bSdAmtHigh = false;
            strcpy(m_szSdAmtHigh, "+0000000000000.00");
            m_bSdDateLow = false;
            strcpy(m_szSdDateLow, "+000000000");
            m_bSdDateHigh = false;
            strcpy(m_szSdDateHigh, "+000000000");
            m_bSelectFlag = false;
            strcpy(m_szSelectFlag, "");
            m_bSdProcessDate = false;
            strcpy(m_szSdProcessDate, "");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
        }

        
        //    INSTITUTION-DEFINED FIRST LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl1 () { return 2; };
        RWCString RtCtl1 (void)
        {
            return m_szRtCtl1;
        }
        long RtCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl1, sizeof(m_szRtCtl1), &m_bRtCtl1);
        }
        
        //    INSTITUTION-DEFINED SECOND LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl2 () { return 3; };
        RWCString RtCtl2 (void)
        {
            return m_szRtCtl2;
        }
        long RtCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl2, sizeof(m_szRtCtl2), &m_bRtCtl2);
        }
        
        //    INSTITUTION-DEFINED THIRD LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl3 () { return 3; };
        RWCString RtCtl3 (void)
        {
            return m_szRtCtl3;
        }
        long RtCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl3, sizeof(m_szRtCtl3), &m_bRtCtl3);
        }
        
        //    INSTITUTION-DEFINED FOURTH LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl4 () { return 4; };
        RWCString RtCtl4 (void)
        {
            return m_szRtCtl4;
        }
        long RtCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl4, sizeof(m_szRtCtl4), &m_bRtCtl4);
        }
        
        //    NUMBER THAT UNIQUELY IDENTIFIES AN ACCOUNT.
        long lRtAcctNum () { return 14; };
        RWCString RtAcctNum (void)
        {
            return m_szRtAcctNum;
        }
        long RtAcctNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAcctNum, sizeof(m_szRtAcctNum), &m_bRtAcctNum);
        }
        
        //    EFFECTIVE DATE OF THE TRANSACTION.
        long lTrEffDate () { return 8; };
        RWCString TrEffDate (void)
        {
            return m_szTrEffDate;
        }
        long TrEffDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrEffDate, sizeof(m_szTrEffDate), &m_bTrEffDate);
        }
        
        //    EXTERNAL POSTING SEQUENCE OF THIS TRANSACTION.
        long lTrExtSeq () { return 4; };
        RWCString TrExtSeq (void)
        {
            return m_szTrExtSeq;
        }
        long TrExtSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrExtSeq, sizeof(m_szTrExtSeq), &m_bTrExtSeq);
        }
        
        //    INTERNAL POSTING SEQUENCE OF THIS TRANSACTION.
        long lTrIntSeq () { return 4; };
        RWCString TrIntSeq (void)
        {
            return m_szTrIntSeq;
        }
        long TrIntSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrIntSeq, sizeof(m_szTrIntSeq), &m_bTrIntSeq);
        }
        
        //    TRANSACTION POSTING REVERSAL CODE
        long lTrRevCd () { return 1; };
        RWCString TrRevCd (void)
        {
            return m_szTrRevCd;
        }
        long TrRevCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrRevCd, sizeof(m_szTrRevCd), &m_bTrRevCd);
        }
        
        //    INDICTES WE ARE DOING A KEYED READ
        long lKeyedReadFlag () { return 1; };
        RWCString KeyedReadFlag (void)
        {
            return m_szKeyedReadFlag;
        }
        long KeyedReadFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szKeyedReadFlag, sizeof(m_szKeyedReadFlag), &m_bKeyedReadFlag);
        }
        
        //    INDICATES WHETHER THE APPLICATION INTERFACES TO SD .
        long lSdInterfaceInd () { return 3; };
        RWCString SdInterfaceInd (void)
        {
            return m_szSdInterfaceInd;
        }
        long SdInterfaceInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdInterfaceInd, sizeof(m_szSdInterfaceInd), &m_bSdInterfaceInd);
        }
        
        //    LOW DOLLAR AMOUNT IN TRANSACTION SEARCH RANGE.
        long lSdAmtLow () { return 17; };
        RWCString SdAmtLow (void)
        {
            return AceZeroSupp(m_szSdAmtLow, &m_szSuppressBuff[0]);
        }
        RWCString SdAmtLowRaw (void)
        {
            return m_szSdAmtLow;
        }
        long SdAmtLow (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdAmtLow, sizeof(m_szSdAmtLow), &m_bSdAmtLow);
        }
        
        //    HIGH DOLLAR AMOUNT IN TRANSACTION SEARCH RANGE.
        long lSdAmtHigh () { return 17; };
        RWCString SdAmtHigh (void)
        {
            return AceZeroSupp(m_szSdAmtHigh, &m_szSuppressBuff[0]);
        }
        RWCString SdAmtHighRaw (void)
        {
            return m_szSdAmtHigh;
        }
        long SdAmtHigh (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdAmtHigh, sizeof(m_szSdAmtHigh), &m_bSdAmtHigh);
        }
        
        //    LOW POST DATE IN TRANSACTION SEARCH RANGE.
        long lSdDateLow () { return 10; };
        RWCString SdDateLow (void)
        {
            return AceZeroSupp(m_szSdDateLow, &m_szSuppressBuff[0]);
        }
        RWCString SdDateLowRaw (void)
        {
            return m_szSdDateLow;
        }
        long SdDateLow (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdDateLow, sizeof(m_szSdDateLow), &m_bSdDateLow);
        }
        
        //    HIGH POST DATE IN TRANSACTION SEARCH RANGE.
        long lSdDateHigh () { return 10; };
        RWCString SdDateHigh (void)
        {
            return AceZeroSupp(m_szSdDateHigh, &m_szSuppressBuff[0]);
        }
        RWCString SdDateHighRaw (void)
        {
            return m_szSdDateHigh;
        }
        long SdDateHigh (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdDateHigh, sizeof(m_szSdDateHigh), &m_bSdDateHigh);
        }
        
        //    IDENTIFIES THE TYPE OF TRAN REQUESTED.
        long lSelectFlag () { return 1; };
        RWCString SelectFlag (void)
        {
            return m_szSelectFlag;
        }
        long SelectFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szSelectFlag, sizeof(m_szSelectFlag), &m_bSelectFlag);
        }
        
        //    CURRENT PROCESSING DATE.
        long lSdProcessDate () { return 8; };
        RWCString SdProcessDate (void)
        {
            return m_szSdProcessDate;
        }
        long SdProcessDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdProcessDate, sizeof(m_szSdProcessDate), &m_bSdProcessDate);
        }
        
        long lFill0 () { return 30; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRtCtl1) return true;
            if (m_bRtCtl2) return true;
            if (m_bRtCtl3) return true;
            if (m_bRtCtl4) return true;
            if (m_bRtAcctNum) return true;
            if (m_bTrEffDate) return true;
            if (m_bTrExtSeq) return true;
            if (m_bTrIntSeq) return true;
            if (m_bTrRevCd) return true;
            if (m_bKeyedReadFlag) return true;
            if (m_bSdInterfaceInd) return true;
            if (m_bSdAmtLow) return true;
            if (m_bSdAmtHigh) return true;
            if (m_bSdDateLow) return true;
            if (m_bSdDateHigh) return true;
            if (m_bSelectFlag) return true;
            if (m_bSdProcessDate) return true;
            if (m_bFill0) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDAMTRII", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RtCtl1", m_szRtCtl1, &m_bRtCtl1);
                AddXMLField(pSess, "RtCtl2", m_szRtCtl2, &m_bRtCtl2);
                AddXMLField(pSess, "RtCtl3", m_szRtCtl3, &m_bRtCtl3);
                AddXMLField(pSess, "RtCtl4", m_szRtCtl4, &m_bRtCtl4);
                AddXMLField(pSess, "RtAcctNum", m_szRtAcctNum, &m_bRtAcctNum);
                AddXMLField(pSess, "TrEffDate", m_szTrEffDate, &m_bTrEffDate);
                AddXMLField(pSess, "TrExtSeq", m_szTrExtSeq, &m_bTrExtSeq);
                AddXMLField(pSess, "TrIntSeq", m_szTrIntSeq, &m_bTrIntSeq);
                AddXMLField(pSess, "TrRevCd", m_szTrRevCd, &m_bTrRevCd);
                AddXMLField(pSess, "KeyedReadFlag", m_szKeyedReadFlag, &m_bKeyedReadFlag);
                AddXMLField(pSess, "SdInterfaceInd", m_szSdInterfaceInd, &m_bSdInterfaceInd);
                AddXMLField(pSess, "SdAmtLow", m_szSdAmtLow, &m_bSdAmtLow);
                AddXMLField(pSess, "SdAmtHigh", m_szSdAmtHigh, &m_bSdAmtHigh);
                AddXMLField(pSess, "SdDateLow", m_szSdDateLow, &m_bSdDateLow);
                AddXMLField(pSess, "SdDateHigh", m_szSdDateHigh, &m_bSdDateHigh);
                AddXMLField(pSess, "SelectFlag", m_szSelectFlag, &m_bSelectFlag);
                AddXMLField(pSess, "SdProcessDate", m_szSdProcessDate, &m_bSdProcessDate);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLCloseRecord(pSess, "SDAMTRII");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDAMTRII", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RtCtl1", m_szRtCtl1);
                GetXMLField(pSess, "RtCtl2", m_szRtCtl2);
                GetXMLField(pSess, "RtCtl3", m_szRtCtl3);
                GetXMLField(pSess, "RtCtl4", m_szRtCtl4);
                GetXMLField(pSess, "RtAcctNum", m_szRtAcctNum);
                GetXMLField(pSess, "TrEffDate", m_szTrEffDate);
                GetXMLField(pSess, "TrExtSeq", m_szTrExtSeq);
                GetXMLField(pSess, "TrIntSeq", m_szTrIntSeq);
                GetXMLField(pSess, "TrRevCd", m_szTrRevCd);
                GetXMLField(pSess, "KeyedReadFlag", m_szKeyedReadFlag);
                GetXMLField(pSess, "SdInterfaceInd", m_szSdInterfaceInd);
                GetXMLField(pSess, "SdAmtLow", m_szSdAmtLow);
                GetXMLField(pSess, "SdAmtHigh", m_szSdAmtHigh);
                GetXMLField(pSess, "SdDateLow", m_szSdDateLow);
                GetXMLField(pSess, "SdDateHigh", m_szSdDateHigh);
                GetXMLField(pSess, "SelectFlag", m_szSelectFlag);
                GetXMLField(pSess, "SdProcessDate", m_szSdProcessDate);
                GetXMLField(pSess, "Fill0", m_szFill0);
                CloseXMLRecord(pSess, "SDAMTRII");
            };
        }
    };

    AsdSDAMTRII CSDAMTRII;
    AsdSDAMTRII *SDAMTRII;
    
    //**************** End AsdSDAMTRII Definition ****************

    
    //**************** Start AsdSDAMMSIO Definition ****************
    //                 SD  INTERFACE WITH ALS - MASTER                             
    
    //    SDAMMSIO.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 02/25/03 09:14:36
    class AsdSDAMMSIO
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRtCtl1;
        char      m_szRtCtl1[2+1];
        bool      m_bRtCtl2;
        char      m_szRtCtl2[3+1];
        bool      m_bRtCtl3;
        char      m_szRtCtl3[3+1];
        bool      m_bRtCtl4;
        char      m_szRtCtl4[4+1];
        bool      m_bRtAcctNum;
        char      m_szRtAcctNum[14+1];
        bool      m_bCfCtl1;
        char      m_szCfCtl1[2+1];
        bool      m_bCfCtl2;
        char      m_szCfCtl2[3+1];
        bool      m_bCfCtl3;
        char      m_szCfCtl3[3+1];
        bool      m_bCfCtl4;
        char      m_szCfCtl4[4+1];
        bool      m_bCfCustNum;
        char      m_szCfCustNum[14+1];
        bool      m_bRtEditedAcctNum;
        char      m_szRtEditedAcctNum[18+1];
        bool      m_bRtAcctStat;
        char      m_szRtAcctStat[2+1];
        bool      m_bRtLoanRate;
        char      m_szRtLoanRate[13+1];
        bool      m_bRtIntType;
        char      m_szRtIntType[1+1];
        bool      m_bRtPoffDlyAmt;
        char      m_szRtPoffDlyAmt[19+1];
        bool      m_bRtCurrMaturDate;
        char      m_szRtCurrMaturDate[8+1];
        bool      m_bRtNxtDueDate;
        char      m_szRtNxtDueDate[8+1];
        bool      m_bRtCurrDueAmt;
        char      m_szRtCurrDueAmt[17+1];
        bool      m_bRtLstPmtDate;
        char      m_szRtLstPmtDate[8+1];
        bool      m_bRtLstPmtAmt;
        char      m_szRtLstPmtAmt[17+1];
        bool      m_bRtOldstDueDate;
        char      m_szRtOldstDueDate[8+1];
        bool      m_bRtCollCd;
        char      m_szRtCollCd[4+1];
        bool      m_bRtAcctProd;
        char      m_szRtAcctProd[4+1];
        bool      m_bRtAcctType;
        char      m_szRtAcctType[3+1];
        bool      m_bRtProcType;
        char      m_szRtProcType[2+1];
        bool      m_bRtAccrStat;
        char      m_szRtAccrStat[2+1];
        bool      m_bRtProcStat;
        char      m_szRtProcStat[2+1];
        bool      m_bRtStopPayInd;
        char      m_szRtStopPayInd[1+1];
        bool      m_bRtOrigTerm;
        char      m_szRtOrigTerm[4+1];
        bool      m_bRtCurrTerm;
        char      m_szRtCurrTerm[4+1];
        bool      m_bRtKoStatCd;
        char      m_szRtKoStatCd[1+1];
        bool      m_bRtTotPrin;
        char      m_szRtTotPrin[17+1];
        bool      m_bRtTotIntRec;
        char      m_szRtTotIntRec[17+1];
        bool      m_bRtTotIntReb;
        char      m_szRtTotIntReb[17+1];
        bool      m_bRtTotIdrRec;
        char      m_szRtTotIdrRec[17+1];
        bool      m_bRtTotIdrReb;
        char      m_szRtTotIdrReb[17+1];
        bool      m_bRtTotSbdyInt;
        char      m_szRtTotSbdyInt[17+1];
        bool      m_bRtTotCostOfFunds;
        char      m_szRtTotCostOfFunds[17+1];
        bool      m_bRtTotInsIntRec;
        char      m_szRtTotInsIntRec[17+1];
        bool      m_bRtTotInsIntReb;
        char      m_szRtTotInsIntReb[17+1];
        bool      m_bRtTotAccrIns;
        char      m_szRtTotAccrIns[17+1];
        bool      m_bRtTotInsReb;
        char      m_szRtTotInsReb[17+1];
        bool      m_bRtTotAssdLtChrg;
        char      m_szRtTotAssdLtChrg[17+1];
        bool      m_bRtTotAccrLtChrg;
        char      m_szRtTotAccrLtChrg[17+1];
        bool      m_bRtTotLtAccrBal;
        char      m_szRtTotLtAccrBal[17+1];
        bool      m_bRtTotAccrFeeRec;
        char      m_szRtTotAccrFeeRec[17+1];
        bool      m_bRtTotAssdFeeRec;
        char      m_szRtTotAssdFeeRec[17+1];
        bool      m_bRtTotFeeReb;
        char      m_szRtTotFeeReb[17+1];
        bool      m_bRtTotCmBal;
        char      m_szRtTotCmBal[17+1];
        bool      m_bRtTotCoffAmt;
        char      m_szRtTotCoffAmt[17+1];
        bool      m_bRtRateChgNtcType;
        char      m_szRtRateChgNtcType[1+1];
        bool      m_bCfPrimOfficer;
        char      m_szCfPrimOfficer[5+1];
        bool      m_bRtNxtCoupDate;
        char      m_szRtNxtCoupDate[8+1];
        bool      m_bRtOrigMaturDate;
        char      m_szRtOrigMaturDate[8+1];
        bool      m_bRtOrigProcdAmt;
        char      m_szRtOrigProcdAmt[17+1];
        bool      m_bRtOrigLoanAmt;
        char      m_szRtOrigLoanAmt[17+1];
        bool      m_bRtAcctEffDate;
        char      m_szRtAcctEffDate[8+1];
        bool      m_bRtNxtAutoDrDate;
        char      m_szRtNxtAutoDrDate[8+1];
        bool      m_bRtPoffAmt;
        char      m_szRtPoffAmt[17+1];
        bool      m_bRtTotAccrCoffAmt;
        char      m_szRtTotAccrCoffAmt[17+1];
        bool      m_bRtClassCd;
        char      m_szRtClassCd[2+1];
        bool      m_bRtEconAccrInd;
        char      m_szRtEconAccrInd[1+1];
        bool      m_bRtYtdInt;
        char      m_szRtYtdInt[15+1];
        bool      m_bRtPrevYrInt;
        char      m_szRtPrevYrInt[15+1];
        bool      m_bRtActlPmtsRem;
        char      m_szRtActlPmtsRem[4+1];
        bool      m_bRtCurrency;
        char      m_szRtCurrency[3+1];
        bool      m_bRtCurrencyDec;
        char      m_szRtCurrencyDec[1+1];
        bool      m_bCfNumLines;
        char      m_szCfNumLines[2+1];
        bool      m_bCfCntry;
        char      m_szCfCntry[5+1];
        bool      m_bCfHostCntryInd;
        char      m_szCfHostCntryInd[1+1];
        bool      m_bCfTaxIdNum;
        char      m_szCfTaxIdNum[10+1];
        bool      m_bCfLangCd;
        char      m_szCfLangCd[2+1];
        bool      m_bCfLangGroup;
        char      m_szCfLangGroup[1+1];
        bool      m_bBdMeth;
        char      m_szBdMeth[2+1];
        bool      m_bBdBillType;
        char      m_szBdBillType[2+1];
        bool      m_bBdNxtDueDate;
        char      m_szBdNxtDueDate[8+1];
        bool      m_bBdPrevDueDate;
        char      m_szBdPrevDueDate[8+1];
        bool      m_bBdOrigNumPmts;
        char      m_szBdOrigNumPmts[4+1];
        bool      m_bBdOrigBillAmt;
        char      m_szBdOrigBillAmt[17+1];
        bool      m_bBdNumPmtsRem;
        char      m_szBdNumPmtsRem[4+1];
        bool      m_bBdNxtBillDate;
        char      m_szBdNxtBillDate[8+1];
        bool      m_bBdNumCoup;
        char      m_szBdNumCoup[4+1];
        bool      m_bBdCoupThruDate;
        char      m_szBdCoupThruDate[8+1];
        bool      m_bBdCoupStartDate;
        char      m_szBdCoupStartDate[8+1];
        bool      m_bBdNxtThruDate;
        char      m_szBdNxtThruDate[8+1];
        bool      m_bBdNxtStartDate;
        char      m_szBdNxtStartDate[8+1];
        bool      m_bBdAutoMeth;
        char      m_szBdAutoMeth[2+1];
        bool      m_bBdAutoDays;
        char      m_szBdAutoDays[4+1];
        bool      m_bBlStopDate;
        char      m_szBlStopDate[8+1];
        bool      m_bBlStartDate;
        char      m_szBlStartDate[8+1];
        bool      m_bBlFrstDueDate;
        char      m_szBlFrstDueDate[8+1];
        bool      m_bBlFreq;
        char      m_szBlFreq[1+1];
        bool      m_bBlIncr;
        char      m_szBlIncr[4+1];
        bool      m_bBlDay;
        char      m_szBlDay[2+1];
        bool      m_bBlPmtMeth;
        char      m_szBlPmtMeth[1+1];
        bool      m_bBlNumPmts;
        char      m_szBlNumPmts[4+1];
        bool      m_bBlFlatAmt;
        char      m_szBlFlatAmt[17+1];
        bool      m_bAfSeqNum;
        char      m_szAfSeqNum[2+1];
        bool      m_bAfCtls;
        char      m_szAfCtls[12+1];
        bool      m_bAfAcct;
        char      m_szAfAcct[19+1];
        bool      m_bAfSys;
        char      m_szAfSys[2+1];
        bool      m_bAfAutoAba;
        char      m_szAfAutoAba[10+1];
        bool      m_bAfAcInd;
        char      m_szAfAcInd[1+1];
        bool      m_bAfAdInd;
        char      m_szAfAdInd[1+1];
        bool      m_bAfMatAdInd;
        char      m_szAfMatAdInd[1+1];
        bool      m_bAfCompBalInd;
        char      m_szAfCompBalInd[1+1];
        bool      m_bDqHistDayCtr[6];
        char      m_szDqHistDayCtr[6][4+1];
        bool      m_bDqHistCycCtr[6];
        char      m_szDqHistCycCtr[6][4+1];
        bool      m_bDqTotDaysPdue;
        char      m_szDqTotDaysPdue[6+1];
        bool      m_bDqTotCycPdue;
        char      m_szDqTotCycPdue[6+1];
        bool      m_bDqNumPmtsPdue;
        char      m_szDqNumPmtsPdue[4+1];
        bool      m_bDqTotAmtPdue;
        char      m_szDqTotAmtPdue[17+1];
        bool      m_bDqDayBndy[6];
        char      m_szDqDayBndy[6][4+1];
        bool      m_bDqCycBndy[6];
        char      m_szDqCycBndy[6][4+1];
        bool      m_bAcOrigRate;
        char      m_szAcOrigRate[13+1];
        bool      m_bBaOrigCmAmt;
        char      m_szBaOrigCmAmt[17+1];
        bool      m_bBaCurrCmAmt;
        char      m_szBaCurrCmAmt[17+1];
        bool      m_bBaAvailBal;
        char      m_szBaAvailBal[17+1];
        bool      m_bBaUsedBal;
        char      m_szBaUsedBal[17+1];
        bool      m_bBaOutBal;
        char      m_szBaOutBal[17+1];
        bool      m_bBaOvrlnBal;
        char      m_szBaOvrlnBal[17+1];
        bool      m_bBaUncolBal;
        char      m_szBaUncolBal[17+1];
        bool      m_bBaHoldBal;
        char      m_szBaHoldBal[17+1];
        bool      m_bCoDesc1;
        char      m_szCoDesc1[60+1];
        bool      m_bCoItemNo;
        char      m_szCoItemNo[7+1];
        bool      m_bCoRecCd;
        char      m_szCoRecCd[1+1];
        bool      m_bEcAccrYtdInt;
        char      m_szEcAccrYtdInt[15+1];
        bool      m_bEcAccrPrevYrInt;
        char      m_szEcAccrPrevYrInt[15+1];
        bool      m_bSdCurrInterestBal;
        char      m_szSdCurrInterestBal[17+1];
        bool      m_bSdLateChargesBal;
        char      m_szSdLateChargesBal[17+1];
        bool      m_bSdOtherFeesBal;
        char      m_szSdOtherFeesBal[17+1];
        bool      m_bSdHomePhone;
        char      m_szSdHomePhone[21+1];
        bool      m_bSdWorkPhone;
        char      m_szSdWorkPhone[21+1];
        bool      m_bCfRegionCd;
        char      m_szCfRegionCd[4+1];
        bool      m_bProcessThruDate;
        char      m_szProcessThruDate[8+1];
        bool      m_bPcCurrThruDate;
        char      m_szPcCurrThruDate[8+1];
        bool      m_bPcPrevThruDate;
        char      m_szPcPrevThruDate[8+1];
        bool      m_bPcNxtThruDate;
        char      m_szPcNxtThruDate[8+1];
        bool      m_bInAba;
        char      m_szInAba[16+1];
        bool      m_bCfRelType;
        char      m_szCfRelType[1+1];
        bool      m_bPdDesc;
        char      m_szPdDesc[20+1];
        bool      m_bRtLegalStat;
        char      m_szRtLegalStat[2+1];
        bool      m_bAcType;
        char      m_szAcType[3+1];
        bool      m_bAcCd;
        char      m_szAcCd[2+1];
        bool      m_bCfShortName;
        char      m_szCfShortName[13+1];
        bool      m_bCfTaxIdPrfx;
        char      m_szCfTaxIdPrfx[1+1];
        bool      m_bCfTaxIdSufx;
        char      m_szCfTaxIdSufx[1+1];
        bool      m_bCfCrScore;
        char      m_szCfCrScore[5+1];
        bool      m_bCfBirthDate;
        char      m_szCfBirthDate[8+1];
        bool      m_bCfRace;
        char      m_szCfRace[1+1];
        bool      m_bCfPersCmclCd;
        char      m_szCfPersCmclCd[1+1];
        bool      m_bCfTaxIdValid;
        char      m_szCfTaxIdValid[1+1];
        bool      m_bCfPrimBr;
        char      m_szCfPrimBr[5+1];
        bool      m_bCfOfficerEmpCd;
        char      m_szCfOfficerEmpCd[1+1];
        bool      m_bCfSex;
        char      m_szCfSex[1+1];
        bool      m_bCfMaritStat;
        char      m_szCfMaritStat[1+1];
        bool      m_bCfFrgnAddrInd;
        char      m_szCfFrgnAddrInd[1+1];
        bool      m_bCfTaxIdName;
        char      m_szCfTaxIdName[40+1];
        bool      m_bCfTaxIdNameCtl;
        char      m_szCfTaxIdNameCtl[4+1];
        bool      m_bCfSkipTraceCd;
        char      m_szCfSkipTraceCd[2+1];
        bool      m_bCfFrstSlDisbDate;
        char      m_szCfFrstSlDisbDate[8+1];
        bool      m_bCfInsEligCd;
        char      m_szCfInsEligCd[1+1];
        bool      m_bCfAddrNum;
        char      m_szCfAddrNum[3+1];
        bool      m_bShareCustInfoCd;
        char      m_szShareCustInfoCd[1+1];
        bool      m_bShareInfoMaintDt;
        char      m_szShareInfoMaintDt[8+1];
        bool      m_bUserCharField1;
        char      m_szUserCharField1[15+1];
        bool      m_bUserCharField2;
        char      m_szUserCharField2[15+1];
        bool      m_bUserCharField3;
        char      m_szUserCharField3[15+1];
        bool      m_bUserNumField1;
        char      m_szUserNumField1[17+1];
        bool      m_bUserNumField2;
        char      m_szUserNumField2[17+1];
        bool      m_bUserNumField3;
        char      m_szUserNumField3[17+1];
        bool      m_bFill0;
        char      m_szFill0[30+1];
        bool      m_bFill1;
        char      m_szFill1[30+1];
        bool      m_bDeathCode;
        char      m_szDeathCode[3+1];
        bool      m_bDeathCodeDesc;
        char      m_szDeathCodeDesc[40+1];
        bool      m_bLegalStatusDesc;
        char      m_szLegalStatusDesc[40+1];
        bool      m_bNextAccrualDate;
        char      m_szNextAccrualDate[8+1];
        bool      m_bMsgCode;
        char      m_szMsgCode[2+1];
        bool      m_bMsgCodeDesc;
        char      m_szMsgCodeDesc[40+1];
        bool      m_bRtProcStatDesc;
        char      m_szRtProcStatDesc[40+1];
        bool      m_bRtClassCodeDesc;
        char      m_szRtClassCodeDesc[40+1];
        bool      m_bRtAccrualStatDesc;
        char      m_szRtAccrualStatDesc[40+1];
        bool      m_bTdrStatus;
        char      m_szTdrStatus[4+1];
        bool      m_bTdrDesc;
        char      m_szTdrDesc[40+1];
        bool      m_bNplStatus;
        char      m_szNplStatus[2+1];
        bool      m_bNplDesc;
        char      m_szNplDesc[40+1];
        bool      m_bLoanClassCode;
        char      m_szLoanClassCode[2+1];
        bool      m_bLoanClassDesc;
        char      m_szLoanClassDesc[40+1];
        bool      m_bPenaltyDate;
        char      m_szPenaltyDate[8+1];
        bool      m_bSkipGroupCode;
        char      m_szSkipGroupCode[1+1];
        bool      m_bSkipGroupDesc;
        char      m_szSkipGroupDesc[40+1];
        bool      m_bRtCollCodeDesc;
        char      m_szRtCollCodeDesc[40+1];
        bool      m_bAi1;
        char      m_szAi1[17+1];
        bool      m_bAi2;
        char      m_szAi2[17+1];
        bool      m_bAi3;
        char      m_szAi3[17+1];
        bool      m_bTotalInterest;
        char      m_szTotalInterest[17+1];
        bool      m_bPenaltyRate;
        char      m_szPenaltyRate[13+1];
        bool      m_bFee;
        char      m_szFee[17+1];
        bool      m_bGroupCode1;
        char      m_szGroupCode1[3+1];
        bool      m_bGroupCode2;
        char      m_szGroupCode2[3+1];
        bool      m_bDqIntPdueDays;
        char      m_szDqIntPdueDays[6+1];
        bool      m_bDqIntPdueDate;
        char      m_szDqIntPdueDate[8+1];
    
      public:
        long      m_lIndex;

        AsdSDAMMSIO ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRtCtl1 = false;
            strcpy(m_szRtCtl1, "");
            m_bRtCtl2 = false;
            strcpy(m_szRtCtl2, "");
            m_bRtCtl3 = false;
            strcpy(m_szRtCtl3, "");
            m_bRtCtl4 = false;
            strcpy(m_szRtCtl4, "");
            m_bRtAcctNum = false;
            strcpy(m_szRtAcctNum, "");
            m_bCfCtl1 = false;
            strcpy(m_szCfCtl1, "");
            m_bCfCtl2 = false;
            strcpy(m_szCfCtl2, "");
            m_bCfCtl3 = false;
            strcpy(m_szCfCtl3, "");
            m_bCfCtl4 = false;
            strcpy(m_szCfCtl4, "");
            m_bCfCustNum = false;
            strcpy(m_szCfCustNum, "");
            m_bRtEditedAcctNum = false;
            strcpy(m_szRtEditedAcctNum, "");
            m_bRtAcctStat = false;
            strcpy(m_szRtAcctStat, "");
            m_bRtLoanRate = false;
            strcpy(m_szRtLoanRate, "+0000.0000000");
            m_bRtIntType = false;
            strcpy(m_szRtIntType, "");
            m_bRtPoffDlyAmt = false;
            strcpy(m_szRtPoffDlyAmt, "+0000000000.0000000");
            m_bRtCurrMaturDate = false;
            strcpy(m_szRtCurrMaturDate, "");
            m_bRtNxtDueDate = false;
            strcpy(m_szRtNxtDueDate, "");
            m_bRtCurrDueAmt = false;
            strcpy(m_szRtCurrDueAmt, "+0000000000000.00");
            m_bRtLstPmtDate = false;
            strcpy(m_szRtLstPmtDate, "");
            m_bRtLstPmtAmt = false;
            strcpy(m_szRtLstPmtAmt, "+0000000000000.00");
            m_bRtOldstDueDate = false;
            strcpy(m_szRtOldstDueDate, "");
            m_bRtCollCd = false;
            strcpy(m_szRtCollCd, "");
            m_bRtAcctProd = false;
            strcpy(m_szRtAcctProd, "");
            m_bRtAcctType = false;
            strcpy(m_szRtAcctType, "");
            m_bRtProcType = false;
            strcpy(m_szRtProcType, "");
            m_bRtAccrStat = false;
            strcpy(m_szRtAccrStat, "");
            m_bRtProcStat = false;
            strcpy(m_szRtProcStat, "");
            m_bRtStopPayInd = false;
            strcpy(m_szRtStopPayInd, "");
            m_bRtOrigTerm = false;
            strcpy(m_szRtOrigTerm, "+000");
            m_bRtCurrTerm = false;
            strcpy(m_szRtCurrTerm, "+000");
            m_bRtKoStatCd = false;
            strcpy(m_szRtKoStatCd, "");
            m_bRtTotPrin = false;
            strcpy(m_szRtTotPrin, "+0000000000000.00");
            m_bRtTotIntRec = false;
            strcpy(m_szRtTotIntRec, "+0000000000000.00");
            m_bRtTotIntReb = false;
            strcpy(m_szRtTotIntReb, "+0000000000000.00");
            m_bRtTotIdrRec = false;
            strcpy(m_szRtTotIdrRec, "+0000000000000.00");
            m_bRtTotIdrReb = false;
            strcpy(m_szRtTotIdrReb, "+0000000000000.00");
            m_bRtTotSbdyInt = false;
            strcpy(m_szRtTotSbdyInt, "+0000000000000.00");
            m_bRtTotCostOfFunds = false;
            strcpy(m_szRtTotCostOfFunds, "+0000000000000.00");
            m_bRtTotInsIntRec = false;
            strcpy(m_szRtTotInsIntRec, "+0000000000000.00");
            m_bRtTotInsIntReb = false;
            strcpy(m_szRtTotInsIntReb, "+0000000000000.00");
            m_bRtTotAccrIns = false;
            strcpy(m_szRtTotAccrIns, "+0000000000000.00");
            m_bRtTotInsReb = false;
            strcpy(m_szRtTotInsReb, "+0000000000000.00");
            m_bRtTotAssdLtChrg = false;
            strcpy(m_szRtTotAssdLtChrg, "+0000000000000.00");
            m_bRtTotAccrLtChrg = false;
            strcpy(m_szRtTotAccrLtChrg, "+0000000000000.00");
            m_bRtTotLtAccrBal = false;
            strcpy(m_szRtTotLtAccrBal, "+0000000000000.00");
            m_bRtTotAccrFeeRec = false;
            strcpy(m_szRtTotAccrFeeRec, "+0000000000000.00");
            m_bRtTotAssdFeeRec = false;
            strcpy(m_szRtTotAssdFeeRec, "+0000000000000.00");
            m_bRtTotFeeReb = false;
            strcpy(m_szRtTotFeeReb, "+0000000000000.00");
            m_bRtTotCmBal = false;
            strcpy(m_szRtTotCmBal, "+0000000000000.00");
            m_bRtTotCoffAmt = false;
            strcpy(m_szRtTotCoffAmt, "+0000000000000.00");
            m_bRtRateChgNtcType = false;
            strcpy(m_szRtRateChgNtcType, "");
            m_bCfPrimOfficer = false;
            strcpy(m_szCfPrimOfficer, "");
            m_bRtNxtCoupDate = false;
            strcpy(m_szRtNxtCoupDate, "");
            m_bRtOrigMaturDate = false;
            strcpy(m_szRtOrigMaturDate, "");
            m_bRtOrigProcdAmt = false;
            strcpy(m_szRtOrigProcdAmt, "+0000000000000.00");
            m_bRtOrigLoanAmt = false;
            strcpy(m_szRtOrigLoanAmt, "+0000000000000.00");
            m_bRtAcctEffDate = false;
            strcpy(m_szRtAcctEffDate, "");
            m_bRtNxtAutoDrDate = false;
            strcpy(m_szRtNxtAutoDrDate, "");
            m_bRtPoffAmt = false;
            strcpy(m_szRtPoffAmt, "+0000000000000.00");
            m_bRtTotAccrCoffAmt = false;
            strcpy(m_szRtTotAccrCoffAmt, "+0000000000000.00");
            m_bRtClassCd = false;
            strcpy(m_szRtClassCd, "");
            m_bRtEconAccrInd = false;
            strcpy(m_szRtEconAccrInd, "");
            m_bRtYtdInt = false;
            strcpy(m_szRtYtdInt, "+00000000000.00");
            m_bRtPrevYrInt = false;
            strcpy(m_szRtPrevYrInt, "+00000000000.00");
            m_bRtActlPmtsRem = false;
            strcpy(m_szRtActlPmtsRem, "+000");
            m_bRtCurrency = false;
            strcpy(m_szRtCurrency, "");
            m_bRtCurrencyDec = false;
            strcpy(m_szRtCurrencyDec, "");
            m_bCfNumLines = false;
            strcpy(m_szCfNumLines, "+0");
            m_bCfCntry = false;
            strcpy(m_szCfCntry, "");
            m_bCfHostCntryInd = false;
            strcpy(m_szCfHostCntryInd, "");
            m_bCfTaxIdNum = false;
            strcpy(m_szCfTaxIdNum, "");
            m_bCfLangCd = false;
            strcpy(m_szCfLangCd, "");
            m_bCfLangGroup = false;
            strcpy(m_szCfLangGroup, "");
            m_bBdMeth = false;
            strcpy(m_szBdMeth, "");
            m_bBdBillType = false;
            strcpy(m_szBdBillType, "");
            m_bBdNxtDueDate = false;
            strcpy(m_szBdNxtDueDate, "");
            m_bBdPrevDueDate = false;
            strcpy(m_szBdPrevDueDate, "");
            m_bBdOrigNumPmts = false;
            strcpy(m_szBdOrigNumPmts, "+000");
            m_bBdOrigBillAmt = false;
            strcpy(m_szBdOrigBillAmt, "+0000000000000.00");
            m_bBdNumPmtsRem = false;
            strcpy(m_szBdNumPmtsRem, "+000");
            m_bBdNxtBillDate = false;
            strcpy(m_szBdNxtBillDate, "");
            m_bBdNumCoup = false;
            strcpy(m_szBdNumCoup, "+000");
            m_bBdCoupThruDate = false;
            strcpy(m_szBdCoupThruDate, "");
            m_bBdCoupStartDate = false;
            strcpy(m_szBdCoupStartDate, "");
            m_bBdNxtThruDate = false;
            strcpy(m_szBdNxtThruDate, "");
            m_bBdNxtStartDate = false;
            strcpy(m_szBdNxtStartDate, "");
            m_bBdAutoMeth = false;
            strcpy(m_szBdAutoMeth, "");
            m_bBdAutoDays = false;
            strcpy(m_szBdAutoDays, "+000");
            m_bBlStopDate = false;
            strcpy(m_szBlStopDate, "");
            m_bBlStartDate = false;
            strcpy(m_szBlStartDate, "");
            m_bBlFrstDueDate = false;
            strcpy(m_szBlFrstDueDate, "");
            m_bBlFreq = false;
            strcpy(m_szBlFreq, "");
            m_bBlIncr = false;
            strcpy(m_szBlIncr, "+000");
            m_bBlDay = false;
            strcpy(m_szBlDay, "");
            m_bBlPmtMeth = false;
            strcpy(m_szBlPmtMeth, "");
            m_bBlNumPmts = false;
            strcpy(m_szBlNumPmts, "+000");
            m_bBlFlatAmt = false;
            strcpy(m_szBlFlatAmt, "+0000000000000.00");
            m_bAfSeqNum = false;
            strcpy(m_szAfSeqNum, "00");
            m_bAfCtls = false;
            strcpy(m_szAfCtls, "");
            m_bAfAcct = false;
            strcpy(m_szAfAcct, "");
            m_bAfSys = false;
            strcpy(m_szAfSys, "");
            m_bAfAutoAba = false;
            strcpy(m_szAfAutoAba, "+000000000");
            m_bAfAcInd = false;
            strcpy(m_szAfAcInd, "");
            m_bAfAdInd = false;
            strcpy(m_szAfAdInd, "");
            m_bAfMatAdInd = false;
            strcpy(m_szAfMatAdInd, "");
            m_bAfCompBalInd = false;
            strcpy(m_szAfCompBalInd, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                m_bDqHistDayCtr[lOccurs] = false;
                strcpy(m_szDqHistDayCtr[lOccurs], "+000");
            }
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                m_bDqHistCycCtr[lOccurs] = false;
                strcpy(m_szDqHistCycCtr[lOccurs], "+000");
            }
            m_bDqTotDaysPdue = false;
            strcpy(m_szDqTotDaysPdue, "+00000");
            m_bDqTotCycPdue = false;
            strcpy(m_szDqTotCycPdue, "+00000");
            m_bDqNumPmtsPdue = false;
            strcpy(m_szDqNumPmtsPdue, "+000");
            m_bDqTotAmtPdue = false;
            strcpy(m_szDqTotAmtPdue, "+0000000000000.00");
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                m_bDqDayBndy[lOccurs] = false;
                strcpy(m_szDqDayBndy[lOccurs], "+000");
            }
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                m_bDqCycBndy[lOccurs] = false;
                strcpy(m_szDqCycBndy[lOccurs], "+000");
            }
            m_bAcOrigRate = false;
            strcpy(m_szAcOrigRate, "+0000.0000000");
            m_bBaOrigCmAmt = false;
            strcpy(m_szBaOrigCmAmt, "+0000000000000.00");
            m_bBaCurrCmAmt = false;
            strcpy(m_szBaCurrCmAmt, "+0000000000000.00");
            m_bBaAvailBal = false;
            strcpy(m_szBaAvailBal, "+0000000000000.00");
            m_bBaUsedBal = false;
            strcpy(m_szBaUsedBal, "+0000000000000.00");
            m_bBaOutBal = false;
            strcpy(m_szBaOutBal, "+0000000000000.00");
            m_bBaOvrlnBal = false;
            strcpy(m_szBaOvrlnBal, "+0000000000000.00");
            m_bBaUncolBal = false;
            strcpy(m_szBaUncolBal, "+0000000000000.00");
            m_bBaHoldBal = false;
            strcpy(m_szBaHoldBal, "+0000000000000.00");
            m_bCoDesc1 = false;
            strcpy(m_szCoDesc1, "");
            m_bCoItemNo = false;
            strcpy(m_szCoItemNo, "0000000");
            m_bCoRecCd = false;
            strcpy(m_szCoRecCd, "");
            m_bEcAccrYtdInt = false;
            strcpy(m_szEcAccrYtdInt, "+00000000000.00");
            m_bEcAccrPrevYrInt = false;
            strcpy(m_szEcAccrPrevYrInt, "+00000000000.00");
            m_bSdCurrInterestBal = false;
            strcpy(m_szSdCurrInterestBal, "+0000000000000.00");
            m_bSdLateChargesBal = false;
            strcpy(m_szSdLateChargesBal, "+0000000000000.00");
            m_bSdOtherFeesBal = false;
            strcpy(m_szSdOtherFeesBal, "+0000000000000.00");
            m_bSdHomePhone = false;
            strcpy(m_szSdHomePhone, "");
            m_bSdWorkPhone = false;
            strcpy(m_szSdWorkPhone, "");
            m_bCfRegionCd = false;
            strcpy(m_szCfRegionCd, "");
            m_bProcessThruDate = false;
            strcpy(m_szProcessThruDate, "");
            m_bPcCurrThruDate = false;
            strcpy(m_szPcCurrThruDate, "");
            m_bPcPrevThruDate = false;
            strcpy(m_szPcPrevThruDate, "00000000");
            m_bPcNxtThruDate = false;
            strcpy(m_szPcNxtThruDate, "00000000");
            m_bInAba = false;
            strcpy(m_szInAba, "+000000000000000");
            m_bCfRelType = false;
            strcpy(m_szCfRelType, "");
            m_bPdDesc = false;
            strcpy(m_szPdDesc, "");
            m_bRtLegalStat = false;
            strcpy(m_szRtLegalStat, "");
            m_bAcType = false;
            strcpy(m_szAcType, "");
            m_bAcCd = false;
            strcpy(m_szAcCd, "00");
            m_bCfShortName = false;
            strcpy(m_szCfShortName, "");
            m_bCfTaxIdPrfx = false;
            strcpy(m_szCfTaxIdPrfx, "");
            m_bCfTaxIdSufx = false;
            strcpy(m_szCfTaxIdSufx, "");
            m_bCfCrScore = false;
            strcpy(m_szCfCrScore, "");
            m_bCfBirthDate = false;
            strcpy(m_szCfBirthDate, "00000000");
            m_bCfRace = false;
            strcpy(m_szCfRace, "");
            m_bCfPersCmclCd = false;
            strcpy(m_szCfPersCmclCd, "");
            m_bCfTaxIdValid = false;
            strcpy(m_szCfTaxIdValid, "");
            m_bCfPrimBr = false;
            strcpy(m_szCfPrimBr, "");
            m_bCfOfficerEmpCd = false;
            strcpy(m_szCfOfficerEmpCd, "");
            m_bCfSex = false;
            strcpy(m_szCfSex, "");
            m_bCfMaritStat = false;
            strcpy(m_szCfMaritStat, "");
            m_bCfFrgnAddrInd = false;
            strcpy(m_szCfFrgnAddrInd, "");
            m_bCfTaxIdName = false;
            strcpy(m_szCfTaxIdName, "");
            m_bCfTaxIdNameCtl = false;
            strcpy(m_szCfTaxIdNameCtl, "");
            m_bCfSkipTraceCd = false;
            strcpy(m_szCfSkipTraceCd, "");
            m_bCfFrstSlDisbDate = false;
            strcpy(m_szCfFrstSlDisbDate, "00000000");
            m_bCfInsEligCd = false;
            strcpy(m_szCfInsEligCd, "");
            m_bCfAddrNum = false;
            strcpy(m_szCfAddrNum, "000");
            m_bShareCustInfoCd = false;
            strcpy(m_szShareCustInfoCd, "");
            m_bShareInfoMaintDt = false;
            strcpy(m_szShareInfoMaintDt, "");
            m_bUserCharField1 = false;
            strcpy(m_szUserCharField1, "");
            m_bUserCharField2 = false;
            strcpy(m_szUserCharField2, "");
            m_bUserCharField3 = false;
            strcpy(m_szUserCharField3, "");
            m_bUserNumField1 = false;
            strcpy(m_szUserNumField1, "+0000000000000.00");
            m_bUserNumField2 = false;
            strcpy(m_szUserNumField2, "+0000000000000.00");
            m_bUserNumField3 = false;
            strcpy(m_szUserNumField3, "+0000000000000.00");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            m_bDeathCode = false;
            strcpy(m_szDeathCode, "");
            m_bDeathCodeDesc = false;
            strcpy(m_szDeathCodeDesc, "");
            m_bLegalStatusDesc = false;
            strcpy(m_szLegalStatusDesc, "");
            m_bNextAccrualDate = false;
            strcpy(m_szNextAccrualDate, "");
            m_bMsgCode = false;
            strcpy(m_szMsgCode, "");
            m_bMsgCodeDesc = false;
            strcpy(m_szMsgCodeDesc, "");
            m_bRtProcStatDesc = false;
            strcpy(m_szRtProcStatDesc, "");
            m_bRtClassCodeDesc = false;
            strcpy(m_szRtClassCodeDesc, "");
            m_bRtAccrualStatDesc = false;
            strcpy(m_szRtAccrualStatDesc, "");
            m_bTdrStatus = false;
            strcpy(m_szTdrStatus, "");
            m_bTdrDesc = false;
            strcpy(m_szTdrDesc, "");
            m_bNplStatus = false;
            strcpy(m_szNplStatus, "");
            m_bNplDesc = false;
            strcpy(m_szNplDesc, "");
            m_bLoanClassCode = false;
            strcpy(m_szLoanClassCode, "");
            m_bLoanClassDesc = false;
            strcpy(m_szLoanClassDesc, "");
            m_bPenaltyDate = false;
            strcpy(m_szPenaltyDate, "");
            m_bSkipGroupCode = false;
            strcpy(m_szSkipGroupCode, "");
            m_bSkipGroupDesc = false;
            strcpy(m_szSkipGroupDesc, "");
            m_bRtCollCodeDesc = false;
            strcpy(m_szRtCollCodeDesc, "");
            m_bAi1 = false;
            strcpy(m_szAi1, "+0000000000000.00");
            m_bAi2 = false;
            strcpy(m_szAi2, "+0000000000000.00");
            m_bAi3 = false;
            strcpy(m_szAi3, "+0000000000000.00");
            m_bTotalInterest = false;
            strcpy(m_szTotalInterest, "+0000000000000.00");
            m_bPenaltyRate = false;
            strcpy(m_szPenaltyRate, "+0000.0000000");
            m_bFee = false;
            strcpy(m_szFee, "+0000000000000.00");
            m_bGroupCode1 = false;
            strcpy(m_szGroupCode1, "");
            m_bGroupCode2 = false;
            strcpy(m_szGroupCode2, "");
            m_bDqIntPdueDays = false;
            strcpy(m_szDqIntPdueDays, "+00000");
            m_bDqIntPdueDate = false;
            strcpy(m_szDqIntPdueDate, "");
        
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                CfLineInfo[lOccurs]  = &CCfLineInfo[lOccurs];
                CCfLineInfo[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRtCtl1 = false;
            strcpy(m_szRtCtl1, "");
            m_bRtCtl2 = false;
            strcpy(m_szRtCtl2, "");
            m_bRtCtl3 = false;
            strcpy(m_szRtCtl3, "");
            m_bRtCtl4 = false;
            strcpy(m_szRtCtl4, "");
            m_bRtAcctNum = false;
            strcpy(m_szRtAcctNum, "");
            m_bCfCtl1 = false;
            strcpy(m_szCfCtl1, "");
            m_bCfCtl2 = false;
            strcpy(m_szCfCtl2, "");
            m_bCfCtl3 = false;
            strcpy(m_szCfCtl3, "");
            m_bCfCtl4 = false;
            strcpy(m_szCfCtl4, "");
            m_bCfCustNum = false;
            strcpy(m_szCfCustNum, "");
            m_bRtEditedAcctNum = false;
            strcpy(m_szRtEditedAcctNum, "");
            m_bRtAcctStat = false;
            strcpy(m_szRtAcctStat, "");
            m_bRtLoanRate = false;
            strcpy(m_szRtLoanRate, "+0000.0000000");
            m_bRtIntType = false;
            strcpy(m_szRtIntType, "");
            m_bRtPoffDlyAmt = false;
            strcpy(m_szRtPoffDlyAmt, "+0000000000.0000000");
            m_bRtCurrMaturDate = false;
            strcpy(m_szRtCurrMaturDate, "");
            m_bRtNxtDueDate = false;
            strcpy(m_szRtNxtDueDate, "");
            m_bRtCurrDueAmt = false;
            strcpy(m_szRtCurrDueAmt, "+0000000000000.00");
            m_bRtLstPmtDate = false;
            strcpy(m_szRtLstPmtDate, "");
            m_bRtLstPmtAmt = false;
            strcpy(m_szRtLstPmtAmt, "+0000000000000.00");
            m_bRtOldstDueDate = false;
            strcpy(m_szRtOldstDueDate, "");
            m_bRtCollCd = false;
            strcpy(m_szRtCollCd, "");
            m_bRtAcctProd = false;
            strcpy(m_szRtAcctProd, "");
            m_bRtAcctType = false;
            strcpy(m_szRtAcctType, "");
            m_bRtProcType = false;
            strcpy(m_szRtProcType, "");
            m_bRtAccrStat = false;
            strcpy(m_szRtAccrStat, "");
            m_bRtProcStat = false;
            strcpy(m_szRtProcStat, "");
            m_bRtStopPayInd = false;
            strcpy(m_szRtStopPayInd, "");
            m_bRtOrigTerm = false;
            strcpy(m_szRtOrigTerm, "+000");
            m_bRtCurrTerm = false;
            strcpy(m_szRtCurrTerm, "+000");
            m_bRtKoStatCd = false;
            strcpy(m_szRtKoStatCd, "");
            m_bRtTotPrin = false;
            strcpy(m_szRtTotPrin, "+0000000000000.00");
            m_bRtTotIntRec = false;
            strcpy(m_szRtTotIntRec, "+0000000000000.00");
            m_bRtTotIntReb = false;
            strcpy(m_szRtTotIntReb, "+0000000000000.00");
            m_bRtTotIdrRec = false;
            strcpy(m_szRtTotIdrRec, "+0000000000000.00");
            m_bRtTotIdrReb = false;
            strcpy(m_szRtTotIdrReb, "+0000000000000.00");
            m_bRtTotSbdyInt = false;
            strcpy(m_szRtTotSbdyInt, "+0000000000000.00");
            m_bRtTotCostOfFunds = false;
            strcpy(m_szRtTotCostOfFunds, "+0000000000000.00");
            m_bRtTotInsIntRec = false;
            strcpy(m_szRtTotInsIntRec, "+0000000000000.00");
            m_bRtTotInsIntReb = false;
            strcpy(m_szRtTotInsIntReb, "+0000000000000.00");
            m_bRtTotAccrIns = false;
            strcpy(m_szRtTotAccrIns, "+0000000000000.00");
            m_bRtTotInsReb = false;
            strcpy(m_szRtTotInsReb, "+0000000000000.00");
            m_bRtTotAssdLtChrg = false;
            strcpy(m_szRtTotAssdLtChrg, "+0000000000000.00");
            m_bRtTotAccrLtChrg = false;
            strcpy(m_szRtTotAccrLtChrg, "+0000000000000.00");
            m_bRtTotLtAccrBal = false;
            strcpy(m_szRtTotLtAccrBal, "+0000000000000.00");
            m_bRtTotAccrFeeRec = false;
            strcpy(m_szRtTotAccrFeeRec, "+0000000000000.00");
            m_bRtTotAssdFeeRec = false;
            strcpy(m_szRtTotAssdFeeRec, "+0000000000000.00");
            m_bRtTotFeeReb = false;
            strcpy(m_szRtTotFeeReb, "+0000000000000.00");
            m_bRtTotCmBal = false;
            strcpy(m_szRtTotCmBal, "+0000000000000.00");
            m_bRtTotCoffAmt = false;
            strcpy(m_szRtTotCoffAmt, "+0000000000000.00");
            m_bRtRateChgNtcType = false;
            strcpy(m_szRtRateChgNtcType, "");
            m_bCfPrimOfficer = false;
            strcpy(m_szCfPrimOfficer, "");
            m_bRtNxtCoupDate = false;
            strcpy(m_szRtNxtCoupDate, "");
            m_bRtOrigMaturDate = false;
            strcpy(m_szRtOrigMaturDate, "");
            m_bRtOrigProcdAmt = false;
            strcpy(m_szRtOrigProcdAmt, "+0000000000000.00");
            m_bRtOrigLoanAmt = false;
            strcpy(m_szRtOrigLoanAmt, "+0000000000000.00");
            m_bRtAcctEffDate = false;
            strcpy(m_szRtAcctEffDate, "");
            m_bRtNxtAutoDrDate = false;
            strcpy(m_szRtNxtAutoDrDate, "");
            m_bRtPoffAmt = false;
            strcpy(m_szRtPoffAmt, "+0000000000000.00");
            m_bRtTotAccrCoffAmt = false;
            strcpy(m_szRtTotAccrCoffAmt, "+0000000000000.00");
            m_bRtClassCd = false;
            strcpy(m_szRtClassCd, "");
            m_bRtEconAccrInd = false;
            strcpy(m_szRtEconAccrInd, "");
            m_bRtYtdInt = false;
            strcpy(m_szRtYtdInt, "+00000000000.00");
            m_bRtPrevYrInt = false;
            strcpy(m_szRtPrevYrInt, "+00000000000.00");
            m_bRtActlPmtsRem = false;
            strcpy(m_szRtActlPmtsRem, "+000");
            m_bRtCurrency = false;
            strcpy(m_szRtCurrency, "");
            m_bRtCurrencyDec = false;
            strcpy(m_szRtCurrencyDec, "");
            m_bCfNumLines = false;
            strcpy(m_szCfNumLines, "+0");
            m_bCfCntry = false;
            strcpy(m_szCfCntry, "");
            m_bCfHostCntryInd = false;
            strcpy(m_szCfHostCntryInd, "");
            m_bCfTaxIdNum = false;
            strcpy(m_szCfTaxIdNum, "");
            m_bCfLangCd = false;
            strcpy(m_szCfLangCd, "");
            m_bCfLangGroup = false;
            strcpy(m_szCfLangGroup, "");
            m_bBdMeth = false;
            strcpy(m_szBdMeth, "");
            m_bBdBillType = false;
            strcpy(m_szBdBillType, "");
            m_bBdNxtDueDate = false;
            strcpy(m_szBdNxtDueDate, "");
            m_bBdPrevDueDate = false;
            strcpy(m_szBdPrevDueDate, "");
            m_bBdOrigNumPmts = false;
            strcpy(m_szBdOrigNumPmts, "+000");
            m_bBdOrigBillAmt = false;
            strcpy(m_szBdOrigBillAmt, "+0000000000000.00");
            m_bBdNumPmtsRem = false;
            strcpy(m_szBdNumPmtsRem, "+000");
            m_bBdNxtBillDate = false;
            strcpy(m_szBdNxtBillDate, "");
            m_bBdNumCoup = false;
            strcpy(m_szBdNumCoup, "+000");
            m_bBdCoupThruDate = false;
            strcpy(m_szBdCoupThruDate, "");
            m_bBdCoupStartDate = false;
            strcpy(m_szBdCoupStartDate, "");
            m_bBdNxtThruDate = false;
            strcpy(m_szBdNxtThruDate, "");
            m_bBdNxtStartDate = false;
            strcpy(m_szBdNxtStartDate, "");
            m_bBdAutoMeth = false;
            strcpy(m_szBdAutoMeth, "");
            m_bBdAutoDays = false;
            strcpy(m_szBdAutoDays, "+000");
            m_bBlStopDate = false;
            strcpy(m_szBlStopDate, "");
            m_bBlStartDate = false;
            strcpy(m_szBlStartDate, "");
            m_bBlFrstDueDate = false;
            strcpy(m_szBlFrstDueDate, "");
            m_bBlFreq = false;
            strcpy(m_szBlFreq, "");
            m_bBlIncr = false;
            strcpy(m_szBlIncr, "+000");
            m_bBlDay = false;
            strcpy(m_szBlDay, "");
            m_bBlPmtMeth = false;
            strcpy(m_szBlPmtMeth, "");
            m_bBlNumPmts = false;
            strcpy(m_szBlNumPmts, "+000");
            m_bBlFlatAmt = false;
            strcpy(m_szBlFlatAmt, "+0000000000000.00");
            m_bAfSeqNum = false;
            strcpy(m_szAfSeqNum, "00");
            m_bAfCtls = false;
            strcpy(m_szAfCtls, "");
            m_bAfAcct = false;
            strcpy(m_szAfAcct, "");
            m_bAfSys = false;
            strcpy(m_szAfSys, "");
            m_bAfAutoAba = false;
            strcpy(m_szAfAutoAba, "+000000000");
            m_bAfAcInd = false;
            strcpy(m_szAfAcInd, "");
            m_bAfAdInd = false;
            strcpy(m_szAfAdInd, "");
            m_bAfMatAdInd = false;
            strcpy(m_szAfMatAdInd, "");
            m_bAfCompBalInd = false;
            strcpy(m_szAfCompBalInd, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 6; lOccurs++ )
            {
                m_bDqHistDayCtr[lOccurs] = false;
                strcpy(m_szDqHistDayCtr[lOccurs], "+000");
            }
        
            for ( lOccurs = 0; lOccurs < 6; lOccurs++ )
            {
                m_bDqHistCycCtr[lOccurs] = false;
                strcpy(m_szDqHistCycCtr[lOccurs], "+000");
            }
            m_bDqTotDaysPdue = false;
            strcpy(m_szDqTotDaysPdue, "+00000");
            m_bDqTotCycPdue = false;
            strcpy(m_szDqTotCycPdue, "+00000");
            m_bDqNumPmtsPdue = false;
            strcpy(m_szDqNumPmtsPdue, "+000");
            m_bDqTotAmtPdue = false;
            strcpy(m_szDqTotAmtPdue, "+0000000000000.00");
        
            for ( lOccurs = 0; lOccurs < 6; lOccurs++ )
            {
                m_bDqDayBndy[lOccurs] = false;
                strcpy(m_szDqDayBndy[lOccurs], "+000");
            }
        
            for ( lOccurs = 0; lOccurs < 6; lOccurs++ )
            {
                m_bDqCycBndy[lOccurs] = false;
                strcpy(m_szDqCycBndy[lOccurs], "+000");
            }
            m_bAcOrigRate = false;
            strcpy(m_szAcOrigRate, "+0000.0000000");
            m_bBaOrigCmAmt = false;
            strcpy(m_szBaOrigCmAmt, "+0000000000000.00");
            m_bBaCurrCmAmt = false;
            strcpy(m_szBaCurrCmAmt, "+0000000000000.00");
            m_bBaAvailBal = false;
            strcpy(m_szBaAvailBal, "+0000000000000.00");
            m_bBaUsedBal = false;
            strcpy(m_szBaUsedBal, "+0000000000000.00");
            m_bBaOutBal = false;
            strcpy(m_szBaOutBal, "+0000000000000.00");
            m_bBaOvrlnBal = false;
            strcpy(m_szBaOvrlnBal, "+0000000000000.00");
            m_bBaUncolBal = false;
            strcpy(m_szBaUncolBal, "+0000000000000.00");
            m_bBaHoldBal = false;
            strcpy(m_szBaHoldBal, "+0000000000000.00");
            m_bCoDesc1 = false;
            strcpy(m_szCoDesc1, "");
            m_bCoItemNo = false;
            strcpy(m_szCoItemNo, "0000000");
            m_bCoRecCd = false;
            strcpy(m_szCoRecCd, "");
            m_bEcAccrYtdInt = false;
            strcpy(m_szEcAccrYtdInt, "+00000000000.00");
            m_bEcAccrPrevYrInt = false;
            strcpy(m_szEcAccrPrevYrInt, "+00000000000.00");
            m_bSdCurrInterestBal = false;
            strcpy(m_szSdCurrInterestBal, "+0000000000000.00");
            m_bSdLateChargesBal = false;
            strcpy(m_szSdLateChargesBal, "+0000000000000.00");
            m_bSdOtherFeesBal = false;
            strcpy(m_szSdOtherFeesBal, "+0000000000000.00");
            m_bSdHomePhone = false;
            strcpy(m_szSdHomePhone, "");
            m_bSdWorkPhone = false;
            strcpy(m_szSdWorkPhone, "");
            m_bCfRegionCd = false;
            strcpy(m_szCfRegionCd, "");
            m_bProcessThruDate = false;
            strcpy(m_szProcessThruDate, "");
            m_bPcCurrThruDate = false;
            strcpy(m_szPcCurrThruDate, "");
            m_bPcPrevThruDate = false;
            strcpy(m_szPcPrevThruDate, "00000000");
            m_bPcNxtThruDate = false;
            strcpy(m_szPcNxtThruDate, "00000000");
            m_bInAba = false;
            strcpy(m_szInAba, "+000000000000000");
            m_bCfRelType = false;
            strcpy(m_szCfRelType, "");
            m_bPdDesc = false;
            strcpy(m_szPdDesc, "");
            m_bRtLegalStat = false;
            strcpy(m_szRtLegalStat, "");
            m_bAcType = false;
            strcpy(m_szAcType, "");
            m_bAcCd = false;
            strcpy(m_szAcCd, "00");
            m_bCfShortName = false;
            strcpy(m_szCfShortName, "");
            m_bCfTaxIdPrfx = false;
            strcpy(m_szCfTaxIdPrfx, "");
            m_bCfTaxIdSufx = false;
            strcpy(m_szCfTaxIdSufx, "");
            m_bCfCrScore = false;
            strcpy(m_szCfCrScore, "");
            m_bCfBirthDate = false;
            strcpy(m_szCfBirthDate, "00000000");
            m_bCfRace = false;
            strcpy(m_szCfRace, "");
            m_bCfPersCmclCd = false;
            strcpy(m_szCfPersCmclCd, "");
            m_bCfTaxIdValid = false;
            strcpy(m_szCfTaxIdValid, "");
            m_bCfPrimBr = false;
            strcpy(m_szCfPrimBr, "");
            m_bCfOfficerEmpCd = false;
            strcpy(m_szCfOfficerEmpCd, "");
            m_bCfSex = false;
            strcpy(m_szCfSex, "");
            m_bCfMaritStat = false;
            strcpy(m_szCfMaritStat, "");
            m_bCfFrgnAddrInd = false;
            strcpy(m_szCfFrgnAddrInd, "");
            m_bCfTaxIdName = false;
            strcpy(m_szCfTaxIdName, "");
            m_bCfTaxIdNameCtl = false;
            strcpy(m_szCfTaxIdNameCtl, "");
            m_bCfSkipTraceCd = false;
            strcpy(m_szCfSkipTraceCd, "");
            m_bCfFrstSlDisbDate = false;
            strcpy(m_szCfFrstSlDisbDate, "00000000");
            m_bCfInsEligCd = false;
            strcpy(m_szCfInsEligCd, "");
            m_bCfAddrNum = false;
            strcpy(m_szCfAddrNum, "000");
            m_bShareCustInfoCd = false;
            strcpy(m_szShareCustInfoCd, "");
            m_bShareInfoMaintDt = false;
            strcpy(m_szShareInfoMaintDt, "");
            m_bUserCharField1 = false;
            strcpy(m_szUserCharField1, "");
            m_bUserCharField2 = false;
            strcpy(m_szUserCharField2, "");
            m_bUserCharField3 = false;
            strcpy(m_szUserCharField3, "");
            m_bUserNumField1 = false;
            strcpy(m_szUserNumField1, "+0000000000000.00");
            m_bUserNumField2 = false;
            strcpy(m_szUserNumField2, "+0000000000000.00");
            m_bUserNumField3 = false;
            strcpy(m_szUserNumField3, "+0000000000000.00");
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            m_bDeathCode = false;
            strcpy(m_szDeathCode, "");
            m_bDeathCodeDesc = false;
            strcpy(m_szDeathCodeDesc, "");
            m_bLegalStatusDesc = false;
            strcpy(m_szLegalStatusDesc, "");
            m_bNextAccrualDate = false;
            strcpy(m_szNextAccrualDate, "");
            m_bMsgCode = false;
            strcpy(m_szMsgCode, "");
            m_bMsgCodeDesc = false;
            strcpy(m_szMsgCodeDesc, "");
            m_bRtProcStatDesc = false;
            strcpy(m_szRtProcStatDesc, "");
            m_bRtClassCodeDesc = false;
            strcpy(m_szRtClassCodeDesc, "");
            m_bRtAccrualStatDesc = false;
            strcpy(m_szRtAccrualStatDesc, "");
            m_bTdrStatus = false;
            strcpy(m_szTdrStatus, "");
            m_bTdrDesc = false;
            strcpy(m_szTdrDesc, "");
            m_bNplStatus = false;
            strcpy(m_szNplStatus, "");
            m_bNplDesc = false;
            strcpy(m_szNplDesc, "");
            m_bLoanClassCode = false;
            strcpy(m_szLoanClassCode, "");
            m_bLoanClassDesc = false;
            strcpy(m_szLoanClassDesc, "");
            m_bPenaltyDate = false;
            strcpy(m_szPenaltyDate, "");
            m_bSkipGroupCode = false;
            strcpy(m_szSkipGroupCode, "");
            m_bSkipGroupDesc = false;
            strcpy(m_szSkipGroupDesc, "");
            m_bRtCollCodeDesc = false;
            strcpy(m_szRtCollCodeDesc, "");
            m_bAi1 = false;
            strcpy(m_szAi1, "+0000000000000.00");
            m_bAi2 = false;
            strcpy(m_szAi2, "+0000000000000.00");
            m_bAi3 = false;
            strcpy(m_szAi3, "+0000000000000.00");
            m_bTotalInterest = false;
            strcpy(m_szTotalInterest, "+0000000000000.00");
            m_bPenaltyRate = false;
            strcpy(m_szPenaltyRate, "+0000.0000000");
            m_bFee = false;
            strcpy(m_szFee, "+0000000000000.00");
            m_bGroupCode1 = false;
            strcpy(m_szGroupCode1, "");
            m_bGroupCode2 = false;
            strcpy(m_szGroupCode2, "");
            m_bDqIntPdueDays = false;
            strcpy(m_szDqIntPdueDays, "+00000");
            m_bDqIntPdueDate = false;
            strcpy(m_szDqIntPdueDate, "");
        
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                CfLineInfo[lOccurs]  = &CCfLineInfo[lOccurs];
                CCfLineInfo[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    INSTITUTION-DEFINED FIRST LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl1 () { return 2; };
        RWCString RtCtl1 (void)
        {
            return m_szRtCtl1;
        }
        long RtCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl1, sizeof(m_szRtCtl1), &m_bRtCtl1);
        }
        
        //    INSTITUTION-DEFINED SECOND LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl2 () { return 3; };
        RWCString RtCtl2 (void)
        {
            return m_szRtCtl2;
        }
        long RtCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl2, sizeof(m_szRtCtl2), &m_bRtCtl2);
        }
        
        //    INSTITUTION-DEFINED THIRD LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl3 () { return 3; };
        RWCString RtCtl3 (void)
        {
            return m_szRtCtl3;
        }
        long RtCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl3, sizeof(m_szRtCtl3), &m_bRtCtl3);
        }
        
        //    INSTITUTION-DEFINED FOURTH LEVEL OF CONTROL FOR THE ACCOUNT.
        long lRtCtl4 () { return 4; };
        RWCString RtCtl4 (void)
        {
            return m_szRtCtl4;
        }
        long RtCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCtl4, sizeof(m_szRtCtl4), &m_bRtCtl4);
        }
        
        //    NUMBER THAT UNIQUELY IDENTIFIES AN ACCOUNT.
        long lRtAcctNum () { return 14; };
        RWCString RtAcctNum (void)
        {
            return m_szRtAcctNum;
        }
        long RtAcctNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAcctNum, sizeof(m_szRtAcctNum), &m_bRtAcctNum);
        }
        
        //    INSTITUTION-DEFINED FIRST LEVEL OF CONTROL FOR THE CUSTOMER.
        long lCfCtl1 () { return 2; };
        RWCString CfCtl1 (void)
        {
            return m_szCfCtl1;
        }
        long CfCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCtl1, sizeof(m_szCfCtl1), &m_bCfCtl1);
        }
        
        //    INSTITUTION-DEFINED SECOND LEVEL CONTR0L FOR THE CUSTOMER.
        long lCfCtl2 () { return 3; };
        RWCString CfCtl2 (void)
        {
            return m_szCfCtl2;
        }
        long CfCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCtl2, sizeof(m_szCfCtl2), &m_bCfCtl2);
        }
        
        //    INSTITUTION-DEFINED THIRD LEVEL OF CONTROL FOR THE CUSTOMER.
        long lCfCtl3 () { return 3; };
        RWCString CfCtl3 (void)
        {
            return m_szCfCtl3;
        }
        long CfCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCtl3, sizeof(m_szCfCtl3), &m_bCfCtl3);
        }
        
        //    INSTITUTION-DEFINED FOURTH LEVEL CONTROL FOR THE CUSTOMER.
        long lCfCtl4 () { return 4; };
        RWCString CfCtl4 (void)
        {
            return m_szCfCtl4;
        }
        long CfCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCtl4, sizeof(m_szCfCtl4), &m_bCfCtl4);
        }
        
        //    UNIQUE NUMBER IDENTIFYING THE CUSTOMER.
        long lCfCustNum () { return 14; };
        RWCString CfCustNum (void)
        {
            return m_szCfCustNum;
        }
        long CfCustNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCustNum, sizeof(m_szCfCustNum), &m_bCfCustNum);
        }
        
        //    EDITED ACCOUNT NUMBER.
        long lRtEditedAcctNum () { return 18; };
        RWCString RtEditedAcctNum (void)
        {
            return m_szRtEditedAcctNum;
        }
        long RtEditedAcctNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtEditedAcctNum, sizeof(m_szRtEditedAcctNum), &m_bRtEditedAcctNum);
        }
        
        //    CURRENT STATUS OF THE LOAN.
        long lRtAcctStat () { return 2; };
        RWCString RtAcctStat (void)
        {
            return m_szRtAcctStat;
        }
        long RtAcctStat (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAcctStat, sizeof(m_szRtAcctStat), &m_bRtAcctStat);
        }
        
        //    ANNUAL PERCENTAGE RATE FOR THE LOAN.
        long lRtLoanRate () { return 13; };
        RWCString RtLoanRate (void)
        {
            return AceZeroSupp(m_szRtLoanRate, &m_szSuppressBuff[0]);
        }
        RWCString RtLoanRateRaw (void)
        {
            return m_szRtLoanRate;
        }
        long RtLoanRate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtLoanRate, sizeof(m_szRtLoanRate), &m_bRtLoanRate);
        }
        
        //    TYPE OF INTEREST THAT ACCRUES ON THE LOAN.
        long lRtIntType () { return 1; };
        RWCString RtIntType (void)
        {
            return m_szRtIntType;
        }
        long RtIntType (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtIntType, sizeof(m_szRtIntType), &m_bRtIntType);
        }
        
        //    DAILY AMOUNT OF INTEREST ADDED TO CALCULATE PAYOFF.
        long lRtPoffDlyAmt () { return 19; };
        RWCString RtPoffDlyAmt (void)
        {
            return AceZeroSupp(m_szRtPoffDlyAmt, &m_szSuppressBuff[0]);
        }
        RWCString RtPoffDlyAmtRaw (void)
        {
            return m_szRtPoffDlyAmt;
        }
        long RtPoffDlyAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtPoffDlyAmt, sizeof(m_szRtPoffDlyAmt), &m_bRtPoffDlyAmt);
        }
        
        //    CURRENT DATE THE LOAN IS SCHEDULED TO MATURE.
        long lRtCurrMaturDate () { return 8; };
        RWCString RtCurrMaturDate (void)
        {
            return m_szRtCurrMaturDate;
        }
        long RtCurrMaturDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCurrMaturDate, sizeof(m_szRtCurrMaturDate), &m_bRtCurrMaturDate);
        }
        
        //    NEXT SCHEDULED DUE DATE.
        long lRtNxtDueDate () { return 8; };
        RWCString RtNxtDueDate (void)
        {
            return m_szRtNxtDueDate;
        }
        long RtNxtDueDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtNxtDueDate, sizeof(m_szRtNxtDueDate), &m_bRtNxtDueDate);
        }
        
        //    AMOUNT OF THE CURRENT PAYMENT THAT IS DUE.
        long lRtCurrDueAmt () { return 17; };
        RWCString RtCurrDueAmt (void)
        {
            return AceZeroSupp(m_szRtCurrDueAmt, &m_szSuppressBuff[0]);
        }
        RWCString RtCurrDueAmtRaw (void)
        {
            return m_szRtCurrDueAmt;
        }
        long RtCurrDueAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCurrDueAmt, sizeof(m_szRtCurrDueAmt), &m_bRtCurrDueAmt);
        }
        
        //    DATE OF THE LAST PAYMENT.
        long lRtLstPmtDate () { return 8; };
        RWCString RtLstPmtDate (void)
        {
            return m_szRtLstPmtDate;
        }
        long RtLstPmtDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtLstPmtDate, sizeof(m_szRtLstPmtDate), &m_bRtLstPmtDate);
        }
        
        //    AMOUNT OF THE LAST PAYMENT.
        long lRtLstPmtAmt () { return 17; };
        RWCString RtLstPmtAmt (void)
        {
            return AceZeroSupp(m_szRtLstPmtAmt, &m_szSuppressBuff[0]);
        }
        RWCString RtLstPmtAmtRaw (void)
        {
            return m_szRtLstPmtAmt;
        }
        long RtLstPmtAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtLstPmtAmt, sizeof(m_szRtLstPmtAmt), &m_bRtLstPmtAmt);
        }
        
        //    OLDEST PAST DUE DATE IF OVERDUE OR NEXT DUE DATE IF CURRENT.
        long lRtOldstDueDate () { return 8; };
        RWCString RtOldstDueDate (void)
        {
            return m_szRtOldstDueDate;
        }
        long RtOldstDueDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtOldstDueDate, sizeof(m_szRtOldstDueDate), &m_bRtOldstDueDate);
        }
        
        //    IDENTIFIES TYPE OF COLLATERAL USED TO SECURE LOAN.
        long lRtCollCd () { return 4; };
        RWCString RtCollCd (void)
        {
            return m_szRtCollCd;
        }
        long RtCollCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCollCd, sizeof(m_szRtCollCd), &m_bRtCollCd);
        }
        
        //    USER-DEFINED CODE IDENTIFYING THE PRODUCT TYPE.
        long lRtAcctProd () { return 4; };
        RWCString RtAcctProd (void)
        {
            return m_szRtAcctProd;
        }
        long RtAcctProd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAcctProd, sizeof(m_szRtAcctProd), &m_bRtAcctProd);
        }
        
        //    USER-DEFINED CODE IDENTIFYING THE ACCOUNT TYPE.
        long lRtAcctType () { return 3; };
        RWCString RtAcctType (void)
        {
            return m_szRtAcctType;
        }
        long RtAcctType (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAcctType, sizeof(m_szRtAcctType), &m_bRtAcctType);
        }
        
        //    TYPE OF PROCESSING FOR THE ACCOUNT.
        long lRtProcType () { return 2; };
        RWCString RtProcType (void)
        {
            return m_szRtProcType;
        }
        long RtProcType (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtProcType, sizeof(m_szRtProcType), &m_bRtProcType);
        }
        
        //    ACCURED STATUS OF THE ACCOUNT.
        long lRtAccrStat () { return 2; };
        RWCString RtAccrStat (void)
        {
            return m_szRtAccrStat;
        }
        long RtAccrStat (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAccrStat, sizeof(m_szRtAccrStat), &m_bRtAccrStat);
        }
        
        //    PROCESSING STATUS OF THE ACCOUNT.
        long lRtProcStat () { return 2; };
        RWCString RtProcStat (void)
        {
            return m_szRtProcStat;
        }
        long RtProcStat (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtProcStat, sizeof(m_szRtProcStat), &m_bRtProcStat);
        }
        
        //    INDICATES WHETHER STOP PAYS EXIST FOR THE LOAN.
        long lRtStopPayInd () { return 1; };
        RWCString RtStopPayInd (void)
        {
            return m_szRtStopPayInd;
        }
        long RtStopPayInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtStopPayInd, sizeof(m_szRtStopPayInd), &m_bRtStopPayInd);
        }
        
        //    ORIGINAL TERM OF THE LOAN IN MONTHS.
        long lRtOrigTerm () { return 4; };
        RWCString RtOrigTerm (void)
        {
            return AceZeroSupp(m_szRtOrigTerm, &m_szSuppressBuff[0]);
        }
        RWCString RtOrigTermRaw (void)
        {
            return m_szRtOrigTerm;
        }
        long RtOrigTerm (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtOrigTerm, sizeof(m_szRtOrigTerm), &m_bRtOrigTerm);
        }
        
        //    CURRENT TERM OF THE LOAN IN MONTHS.
        long lRtCurrTerm () { return 4; };
        RWCString RtCurrTerm (void)
        {
            return AceZeroSupp(m_szRtCurrTerm, &m_szSuppressBuff[0]);
        }
        RWCString RtCurrTermRaw (void)
        {
            return m_szRtCurrTerm;
        }
        long RtCurrTerm (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCurrTerm, sizeof(m_szRtCurrTerm), &m_bRtCurrTerm);
        }
        
        //    INENTIFIES WHETHER ACCOUNT IS SENT TO THE KO SYSTEM AND WHY.
        long lRtKoStatCd () { return 1; };
        RWCString RtKoStatCd (void)
        {
            return m_szRtKoStatCd;
        }
        long RtKoStatCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtKoStatCd, sizeof(m_szRtKoStatCd), &m_bRtKoStatCd);
        }
        
        //    CURRENT PRINCIPAL BAL NORMALLY INCLUDED IN RECEIVABLE BAL.
        long lRtTotPrin () { return 17; };
        RWCString RtTotPrin (void)
        {
            return AceZeroSupp(m_szRtTotPrin, &m_szSuppressBuff[0]);
        }
        RWCString RtTotPrinRaw (void)
        {
            return m_szRtTotPrin;
        }
        long RtTotPrin (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotPrin, sizeof(m_szRtTotPrin), &m_bRtTotPrin);
        }
        
        //    TOTAL INTEREST ACCRUED BUT NOT PAID.
        long lRtTotIntRec () { return 17; };
        RWCString RtTotIntRec (void)
        {
            return AceZeroSupp(m_szRtTotIntRec, &m_szSuppressBuff[0]);
        }
        RWCString RtTotIntRecRaw (void)
        {
            return m_szRtTotIntRec;
        }
        long RtTotIntRec (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotIntRec, sizeof(m_szRtTotIntRec), &m_bRtTotIntRec);
        }
        
        //    INTEREST REBATE BALANCE NOT INCLUDED IN RECEIVABLE BALANCE.
        long lRtTotIntReb () { return 17; };
        RWCString RtTotIntReb (void)
        {
            return AceZeroSupp(m_szRtTotIntReb, &m_szSuppressBuff[0]);
        }
        RWCString RtTotIntRebRaw (void)
        {
            return m_szRtTotIntReb;
        }
        long RtTotIntReb (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotIntReb, sizeof(m_szRtTotIntReb), &m_bRtTotIntReb);
        }
        
        //    TOTAL DEALER INTEREST ACCRUED BUT NOT PAID.
        long lRtTotIdrRec () { return 17; };
        RWCString RtTotIdrRec (void)
        {
            return AceZeroSupp(m_szRtTotIdrRec, &m_szSuppressBuff[0]);
        }
        RWCString RtTotIdrRecRaw (void)
        {
            return m_szRtTotIdrRec;
        }
        long RtTotIdrRec (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotIdrRec, sizeof(m_szRtTotIdrRec), &m_bRtTotIdrRec);
        }
        
        //    DEALER RESERVE REBATES NOT INCLUDED IN RECEIVABLE BALANCE.
        long lRtTotIdrReb () { return 17; };
        RWCString RtTotIdrReb (void)
        {
            return AceZeroSupp(m_szRtTotIdrReb, &m_szSuppressBuff[0]);
        }
        RWCString RtTotIdrRebRaw (void)
        {
            return m_szRtTotIdrReb;
        }
        long RtTotIdrReb (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotIdrReb, sizeof(m_szRtTotIdrReb), &m_bRtTotIdrReb);
        }
        
        //    GOV SUBSIDZED INT USUALLY IN RECVABLE BAL FOR STUDENT LOANS.
        long lRtTotSbdyInt () { return 17; };
        RWCString RtTotSbdyInt (void)
        {
            return AceZeroSupp(m_szRtTotSbdyInt, &m_szSuppressBuff[0]);
        }
        RWCString RtTotSbdyIntRaw (void)
        {
            return m_szRtTotSbdyInt;
        }
        long RtTotSbdyInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotSbdyInt, sizeof(m_szRtTotSbdyInt), &m_bRtTotSbdyInt);
        }
        
        //    ACCURUED COST-OF-FUNDS NOT INCLUDED IN RECEIVABLE BALANCE.
        long lRtTotCostOfFunds () { return 17; };
        RWCString RtTotCostOfFunds (void)
        {
            return AceZeroSupp(m_szRtTotCostOfFunds, &m_szSuppressBuff[0]);
        }
        RWCString RtTotCostOfFundsRaw (void)
        {
            return m_szRtTotCostOfFunds;
        }
        long RtTotCostOfFunds (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotCostOfFunds, sizeof(m_szRtTotCostOfFunds), &m_bRtTotCostOfFunds);
        }
        
        //    TOTAL INSURANCE FINANCE CHARGE ACCRUED BUT NOT PAID.
        long lRtTotInsIntRec () { return 17; };
        RWCString RtTotInsIntRec (void)
        {
            return AceZeroSupp(m_szRtTotInsIntRec, &m_szSuppressBuff[0]);
        }
        RWCString RtTotInsIntRecRaw (void)
        {
            return m_szRtTotInsIntRec;
        }
        long RtTotInsIntRec (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotInsIntRec, sizeof(m_szRtTotInsIntRec), &m_bRtTotInsIntRec);
        }
        
        //    INSURANCE FIN CHARGE REBATES NOT INCLUDED IN RECEIVABLE BAL.
        long lRtTotInsIntReb () { return 17; };
        RWCString RtTotInsIntReb (void)
        {
            return AceZeroSupp(m_szRtTotInsIntReb, &m_szSuppressBuff[0]);
        }
        RWCString RtTotInsIntRebRaw (void)
        {
            return m_szRtTotInsIntReb;
        }
        long RtTotInsIntReb (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotInsIntReb, sizeof(m_szRtTotInsIntReb), &m_bRtTotInsIntReb);
        }
        
        //    TOTAL INSURANCE ACCRUED BUT NOT PAID.
        long lRtTotAccrIns () { return 17; };
        RWCString RtTotAccrIns (void)
        {
            return AceZeroSupp(m_szRtTotAccrIns, &m_szSuppressBuff[0]);
        }
        RWCString RtTotAccrInsRaw (void)
        {
            return m_szRtTotAccrIns;
        }
        long RtTotAccrIns (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotAccrIns, sizeof(m_szRtTotAccrIns), &m_bRtTotAccrIns);
        }
        
        //    INSURANCE REBATE BALANCE NOT INCLUDED IN RECEIVABLE BALANCE.
        long lRtTotInsReb () { return 17; };
        RWCString RtTotInsReb (void)
        {
            return AceZeroSupp(m_szRtTotInsReb, &m_szSuppressBuff[0]);
        }
        RWCString RtTotInsRebRaw (void)
        {
            return m_szRtTotInsReb;
        }
        long RtTotInsReb (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotInsReb, sizeof(m_szRtTotInsReb), &m_bRtTotInsReb);
        }
        
        //    TOTAL LATE CHARGE ASSESSED BUT NOT PAID.
        long lRtTotAssdLtChrg () { return 17; };
        RWCString RtTotAssdLtChrg (void)
        {
            return AceZeroSupp(m_szRtTotAssdLtChrg, &m_szSuppressBuff[0]);
        }
        RWCString RtTotAssdLtChrgRaw (void)
        {
            return m_szRtTotAssdLtChrg;
        }
        long RtTotAssdLtChrg (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotAssdLtChrg, sizeof(m_szRtTotAssdLtChrg), &m_bRtTotAssdLtChrg);
        }
        
        //    TOTAL LATE CHARGES ACCRUED BUT NOT PAID.
        long lRtTotAccrLtChrg () { return 17; };
        RWCString RtTotAccrLtChrg (void)
        {
            return AceZeroSupp(m_szRtTotAccrLtChrg, &m_szSuppressBuff[0]);
        }
        RWCString RtTotAccrLtChrgRaw (void)
        {
            return m_szRtTotAccrLtChrg;
        }
        long RtTotAccrLtChrg (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotAccrLtChrg, sizeof(m_szRtTotAccrLtChrg), &m_bRtTotAccrLtChrg);
        }
        
        //    LATE CHARGE ACCRUAL BALANCE NOT INCLUDED IN RECEIVABLE BAL.
        long lRtTotLtAccrBal () { return 17; };
        RWCString RtTotLtAccrBal (void)
        {
            return AceZeroSupp(m_szRtTotLtAccrBal, &m_szSuppressBuff[0]);
        }
        RWCString RtTotLtAccrBalRaw (void)
        {
            return m_szRtTotLtAccrBal;
        }
        long RtTotLtAccrBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotLtAccrBal, sizeof(m_szRtTotLtAccrBal), &m_bRtTotLtAccrBal);
        }
        
        //    TOTAL FEES ACCRUED BUT NOT PAID.
        long lRtTotAccrFeeRec () { return 17; };
        RWCString RtTotAccrFeeRec (void)
        {
            return AceZeroSupp(m_szRtTotAccrFeeRec, &m_szSuppressBuff[0]);
        }
        RWCString RtTotAccrFeeRecRaw (void)
        {
            return m_szRtTotAccrFeeRec;
        }
        long RtTotAccrFeeRec (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotAccrFeeRec, sizeof(m_szRtTotAccrFeeRec), &m_bRtTotAccrFeeRec);
        }
        
        //    TOTAL FEES ASSESSED BUT NOT PAID.
        long lRtTotAssdFeeRec () { return 17; };
        RWCString RtTotAssdFeeRec (void)
        {
            return AceZeroSupp(m_szRtTotAssdFeeRec, &m_szSuppressBuff[0]);
        }
        RWCString RtTotAssdFeeRecRaw (void)
        {
            return m_szRtTotAssdFeeRec;
        }
        long RtTotAssdFeeRec (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotAssdFeeRec, sizeof(m_szRtTotAssdFeeRec), &m_bRtTotAssdFeeRec);
        }
        
        //    FEES, EARNINGS, OR REBATES NOT INCLUDED IN RECEIVABLE BAL.
        long lRtTotFeeReb () { return 17; };
        RWCString RtTotFeeReb (void)
        {
            return AceZeroSupp(m_szRtTotFeeReb, &m_szSuppressBuff[0]);
        }
        RWCString RtTotFeeRebRaw (void)
        {
            return m_szRtTotFeeReb;
        }
        long RtTotFeeReb (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotFeeReb, sizeof(m_szRtTotFeeReb), &m_bRtTotFeeReb);
        }
        
        //    CURRENT COMMITMENT BALANCE NOT INCLUDED IN RECEIVABLE BAL.
        long lRtTotCmBal () { return 17; };
        RWCString RtTotCmBal (void)
        {
            return AceZeroSupp(m_szRtTotCmBal, &m_szSuppressBuff[0]);
        }
        RWCString RtTotCmBalRaw (void)
        {
            return m_szRtTotCmBal;
        }
        long RtTotCmBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotCmBal, sizeof(m_szRtTotCmBal), &m_bRtTotCmBal);
        }
        
        //    TOTAL CHARGED OFF AMOUNT FOR ALL FUNDS FOR AN ACCOUNT.
        long lRtTotCoffAmt () { return 17; };
        RWCString RtTotCoffAmt (void)
        {
            return AceZeroSupp(m_szRtTotCoffAmt, &m_szSuppressBuff[0]);
        }
        RWCString RtTotCoffAmtRaw (void)
        {
            return m_szRtTotCoffAmt;
        }
        long RtTotCoffAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotCoffAmt, sizeof(m_szRtTotCoffAmt), &m_bRtTotCoffAmt);
        }
        
        //    TYPE OF RATE CHANGE NOTICE.
        long lRtRateChgNtcType () { return 1; };
        RWCString RtRateChgNtcType (void)
        {
            return m_szRtRateChgNtcType;
        }
        long RtRateChgNtcType (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtRateChgNtcType, sizeof(m_szRtRateChgNtcType), &m_bRtRateChgNtcType);
        }
        
        //    IDENTIFIES THE PRIMARY OFFICER RESPONSIBLE FOR THE LOAN.
        long lCfPrimOfficer () { return 5; };
        RWCString CfPrimOfficer (void)
        {
            return m_szCfPrimOfficer;
        }
        long CfPrimOfficer (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPrimOfficer, sizeof(m_szCfPrimOfficer), &m_bCfPrimOfficer);
        }
        
        //    NEXT DATE WHEN COUPONS ARE GENERATED FOR THE LOAN.
        long lRtNxtCoupDate () { return 8; };
        RWCString RtNxtCoupDate (void)
        {
            return m_szRtNxtCoupDate;
        }
        long RtNxtCoupDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtNxtCoupDate, sizeof(m_szRtNxtCoupDate), &m_bRtNxtCoupDate);
        }
        
        //    THE ORIGINAL DATE THE LOAN WAS SCHEDULED TO MATURE.
        long lRtOrigMaturDate () { return 8; };
        RWCString RtOrigMaturDate (void)
        {
            return m_szRtOrigMaturDate;
        }
        long RtOrigMaturDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtOrigMaturDate, sizeof(m_szRtOrigMaturDate), &m_bRtOrigMaturDate);
        }
        
        //    ORIGINAL AMOUNT OF PROCEEDS FOR THE LOAN.
        long lRtOrigProcdAmt () { return 17; };
        RWCString RtOrigProcdAmt (void)
        {
            return AceZeroSupp(m_szRtOrigProcdAmt, &m_szSuppressBuff[0]);
        }
        RWCString RtOrigProcdAmtRaw (void)
        {
            return m_szRtOrigProcdAmt;
        }
        long RtOrigProcdAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtOrigProcdAmt, sizeof(m_szRtOrigProcdAmt), &m_bRtOrigProcdAmt);
        }
        
        //    ORIGINAL AMOUNT OF LOAN.
        long lRtOrigLoanAmt () { return 17; };
        RWCString RtOrigLoanAmt (void)
        {
            return AceZeroSupp(m_szRtOrigLoanAmt, &m_szSuppressBuff[0]);
        }
        RWCString RtOrigLoanAmtRaw (void)
        {
            return m_szRtOrigLoanAmt;
        }
        long RtOrigLoanAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtOrigLoanAmt, sizeof(m_szRtOrigLoanAmt), &m_bRtOrigLoanAmt);
        }
        
        //    EFFECTIVE DATE OF THE LOAN.
        long lRtAcctEffDate () { return 8; };
        RWCString RtAcctEffDate (void)
        {
            return m_szRtAcctEffDate;
        }
        long RtAcctEffDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAcctEffDate, sizeof(m_szRtAcctEffDate), &m_bRtAcctEffDate);
        }
        
        //    DATE THE ACCOUNT WILL BE AUTO DEBITED.
        long lRtNxtAutoDrDate () { return 8; };
        RWCString RtNxtAutoDrDate (void)
        {
            return m_szRtNxtAutoDrDate;
        }
        long RtNxtAutoDrDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtNxtAutoDrDate, sizeof(m_szRtNxtAutoDrDate), &m_bRtNxtAutoDrDate);
        }
        
        //    THE PAYOFF AMOUNT AS OF THE NEXT PROCESSING DATE.
        long lRtPoffAmt () { return 17; };
        RWCString RtPoffAmt (void)
        {
            return AceZeroSupp(m_szRtPoffAmt, &m_szSuppressBuff[0]);
        }
        RWCString RtPoffAmtRaw (void)
        {
            return m_szRtPoffAmt;
        }
        long RtPoffAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtPoffAmt, sizeof(m_szRtPoffAmt), &m_bRtPoffAmt);
        }
        
        //    TOTAL AMOUNT ACCRUED ON THE CHARGED OFF FUNDS.
        long lRtTotAccrCoffAmt () { return 17; };
        RWCString RtTotAccrCoffAmt (void)
        {
            return AceZeroSupp(m_szRtTotAccrCoffAmt, &m_szSuppressBuff[0]);
        }
        RWCString RtTotAccrCoffAmtRaw (void)
        {
            return m_szRtTotAccrCoffAmt;
        }
        long RtTotAccrCoffAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtTotAccrCoffAmt, sizeof(m_szRtTotAccrCoffAmt), &m_bRtTotAccrCoffAmt);
        }
        
        //    USER-DEF CREDIT INFORMATION CODE USED TO CLASSIFY THE LOAN.
        long lRtClassCd () { return 2; };
        RWCString RtClassCd (void)
        {
            return m_szRtClassCd;
        }
        long RtClassCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtClassCd, sizeof(m_szRtClassCd), &m_bRtClassCd);
        }
        
        //    INDICATES WHETHER AN ECONOMIC ACCRUAL GROUP EXISTS FOR ACCT.
        long lRtEconAccrInd () { return 1; };
        RWCString RtEconAccrInd (void)
        {
            return m_szRtEconAccrInd;
        }
        long RtEconAccrInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtEconAccrInd, sizeof(m_szRtEconAccrInd), &m_bRtEconAccrInd);
        }
        
        //    YTD INT PAID IF SIMP INT LOAN OR INT ACCRD IF DISCOUNT LOAN.
        long lRtYtdInt () { return 15; };
        RWCString RtYtdInt (void)
        {
            return AceZeroSupp(m_szRtYtdInt, &m_szSuppressBuff[0]);
        }
        RWCString RtYtdIntRaw (void)
        {
            return m_szRtYtdInt;
        }
        long RtYtdInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtYtdInt, sizeof(m_szRtYtdInt), &m_bRtYtdInt);
        }
        
        //    AMOUNT OF INTEREST PAID ON THE LOAN THE PREVIOUS YEAR.
        long lRtPrevYrInt () { return 15; };
        RWCString RtPrevYrInt (void)
        {
            return AceZeroSupp(m_szRtPrevYrInt, &m_szSuppressBuff[0]);
        }
        RWCString RtPrevYrIntRaw (void)
        {
            return m_szRtPrevYrInt;
        }
        long RtPrevYrInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtPrevYrInt, sizeof(m_szRtPrevYrInt), &m_bRtPrevYrInt);
        }
        
        //    ACTUAL NUMBER OF PAYMENTS REMAINING.
        long lRtActlPmtsRem () { return 4; };
        RWCString RtActlPmtsRem (void)
        {
            return AceZeroSupp(m_szRtActlPmtsRem, &m_szSuppressBuff[0]);
        }
        RWCString RtActlPmtsRemRaw (void)
        {
            return m_szRtActlPmtsRem;
        }
        long RtActlPmtsRem (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtActlPmtsRem, sizeof(m_szRtActlPmtsRem), &m_bRtActlPmtsRem);
        }
        
        //    CURRENCY FOR THE ACCOUNT (U.S. DOLLARS, JAPANESE YEN, ETC.).
        long lRtCurrency () { return 3; };
        RWCString RtCurrency (void)
        {
            return m_szRtCurrency;
        }
        long RtCurrency (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCurrency, sizeof(m_szRtCurrency), &m_bRtCurrency);
        }
        
        //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY.
        long lRtCurrencyDec () { return 1; };
        RWCString RtCurrencyDec (void)
        {
            return m_szRtCurrencyDec;
        }
        long RtCurrencyDec (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCurrencyDec, sizeof(m_szRtCurrencyDec), &m_bRtCurrencyDec);
        }
        
        //    NUMBER OF NAME/ADDRESS LINES INCLUDED FOR THE CUSTOMER.
        long lCfNumLines () { return 2; };
        RWCString CfNumLines (void)
        {
            return AceZeroSupp(m_szCfNumLines, &m_szSuppressBuff[0]);
        }
        RWCString CfNumLinesRaw (void)
        {
            return m_szCfNumLines;
        }
        long CfNumLines (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfNumLines, sizeof(m_szCfNumLines), &m_bCfNumLines);
        }
        
        //    COUNTRY WHERE THE ADDRESS IS LOCATED IF OTHER THAN THE U.S.
        long lCfCntry () { return 5; };
        RWCString CfCntry (void)
        {
            return m_szCfCntry;
        }
        long CfCntry (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCntry, sizeof(m_szCfCntry), &m_bCfCntry);
        }
        
        //    INDICATES WHETHER THE ADDRESS IS OUTSIDE OF THE U.S.A.
        long lCfHostCntryInd () { return 1; };
        RWCString CfHostCntryInd (void)
        {
            return m_szCfHostCntryInd;
        }
        long CfHostCntryInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfHostCntryInd, sizeof(m_szCfHostCntryInd), &m_bCfHostCntryInd);
        }
        
        //    CUSTOMER'S SOCIAL SECURITY OR TAX IDENTIFICATION NUMBER.
        long lCfTaxIdNum () { return 10; };
        RWCString CfTaxIdNum (void)
        {
            return m_szCfTaxIdNum;
        }
        long CfTaxIdNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdNum, sizeof(m_szCfTaxIdNum), &m_bCfTaxIdNum);
        }
        
        //    CUSTOMER LANGUAGE (ENGLISH, SPANISH, ETC.).
        long lCfLangCd () { return 2; };
        RWCString CfLangCd (void)
        {
            return m_szCfLangCd;
        }
        long CfLangCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfLangCd, sizeof(m_szCfLangCd), &m_bCfLangCd);
        }
        
        //    CUSTOMER LANGUAGE GROUP.
        long lCfLangGroup () { return 1; };
        RWCString CfLangGroup (void)
        {
            return m_szCfLangGroup;
        }
        long CfLangGroup (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfLangGroup, sizeof(m_szCfLangGroup), &m_bCfLangGroup);
        }
        
        //    METHOD OF BILLING FOR THE CUSTOMER BILL GROUP.
        long lBdMeth () { return 2; };
        RWCString BdMeth (void)
        {
            return m_szBdMeth;
        }
        long BdMeth (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdMeth, sizeof(m_szBdMeth), &m_bBdMeth);
        }
        
        //    TYPE OF PROCESSING REQUIRED TO PRODUCE DESIRED BILL TYPE.
        long lBdBillType () { return 2; };
        RWCString BdBillType (void)
        {
            return m_szBdBillType;
        }
        long BdBillType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdBillType, sizeof(m_szBdBillType), &m_bBdBillType);
        }
        
        //    NEXT DATE A PAYMENT IS DUE.
        long lBdNxtDueDate () { return 8; };
        RWCString BdNxtDueDate (void)
        {
            return m_szBdNxtDueDate;
        }
        long BdNxtDueDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdNxtDueDate, sizeof(m_szBdNxtDueDate), &m_bBdNxtDueDate);
        }
        
        //    LAST DATE A PAYMENT WAS DUE.
        long lBdPrevDueDate () { return 8; };
        RWCString BdPrevDueDate (void)
        {
            return m_szBdPrevDueDate;
        }
        long BdPrevDueDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdPrevDueDate, sizeof(m_szBdPrevDueDate), &m_bBdPrevDueDate);
        }
        
        //    ORIGINAL NUMBER OF PAYMENTS.
        long lBdOrigNumPmts () { return 4; };
        RWCString BdOrigNumPmts (void)
        {
            return AceZeroSupp(m_szBdOrigNumPmts, &m_szSuppressBuff[0]);
        }
        RWCString BdOrigNumPmtsRaw (void)
        {
            return m_szBdOrigNumPmts;
        }
        long BdOrigNumPmts (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdOrigNumPmts, sizeof(m_szBdOrigNumPmts), &m_bBdOrigNumPmts);
        }
        
        //    ORIGINAL BILL AMOUNT.
        long lBdOrigBillAmt () { return 17; };
        RWCString BdOrigBillAmt (void)
        {
            return AceZeroSupp(m_szBdOrigBillAmt, &m_szSuppressBuff[0]);
        }
        RWCString BdOrigBillAmtRaw (void)
        {
            return m_szBdOrigBillAmt;
        }
        long BdOrigBillAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdOrigBillAmt, sizeof(m_szBdOrigBillAmt), &m_bBdOrigBillAmt);
        }
        
        //    NUMBER OF SCHEDULED PAYMENTS REMAINING ON THE LOAN.
        long lBdNumPmtsRem () { return 4; };
        RWCString BdNumPmtsRem (void)
        {
            return AceZeroSupp(m_szBdNumPmtsRem, &m_szSuppressBuff[0]);
        }
        RWCString BdNumPmtsRemRaw (void)
        {
            return m_szBdNumPmtsRem;
        }
        long BdNumPmtsRem (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdNumPmtsRem, sizeof(m_szBdNumPmtsRem), &m_bBdNumPmtsRem);
        }
        
        //    BILLING DATE OF THE BILLING HISTORY RECORD.
        long lBdNxtBillDate () { return 8; };
        RWCString BdNxtBillDate (void)
        {
            return m_szBdNxtBillDate;
        }
        long BdNxtBillDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdNxtBillDate, sizeof(m_szBdNxtBillDate), &m_bBdNxtBillDate);
        }
        
        //    NUMBER OF COUPONS TO BE ORDERED ON THE COUPON CREATE DATE.
        long lBdNumCoup () { return 4; };
        RWCString BdNumCoup (void)
        {
            return AceZeroSupp(m_szBdNumCoup, &m_szSuppressBuff[0]);
        }
        RWCString BdNumCoupRaw (void)
        {
            return m_szBdNumCoup;
        }
        long BdNumCoup (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdNumCoup, sizeof(m_szBdNumCoup), &m_bBdNumCoup);
        }
        
        //    DUE DATE THROUGH WHICH COUPONS ARE PRODUCED.
        long lBdCoupThruDate () { return 8; };
        RWCString BdCoupThruDate (void)
        {
            return m_szBdCoupThruDate;
        }
        long BdCoupThruDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdCoupThruDate, sizeof(m_szBdCoupThruDate), &m_bBdCoupThruDate);
        }
        
        //    DUE DATE ON THE FIRST COUPON OF THE CURRENT BOOK.
        long lBdCoupStartDate () { return 8; };
        RWCString BdCoupStartDate (void)
        {
            return m_szBdCoupStartDate;
        }
        long BdCoupStartDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdCoupStartDate, sizeof(m_szBdCoupStartDate), &m_bBdCoupStartDate);
        }
        
        //    END DATE OF THE NEXT COUPON BOOK.
        long lBdNxtThruDate () { return 8; };
        RWCString BdNxtThruDate (void)
        {
            return m_szBdNxtThruDate;
        }
        long BdNxtThruDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdNxtThruDate, sizeof(m_szBdNxtThruDate), &m_bBdNxtThruDate);
        }
        
        //    START DATE OF THE NEXT COUPON BOOK.
        long lBdNxtStartDate () { return 8; };
        RWCString BdNxtStartDate (void)
        {
            return m_szBdNxtStartDate;
        }
        long BdNxtStartDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdNxtStartDate, sizeof(m_szBdNxtStartDate), &m_bBdNxtStartDate);
        }
        
        //    METHOD USED TO AUTO DEBIT AN ACCOUNT FOR THE BILL AMOUNT.
        long lBdAutoMeth () { return 2; };
        RWCString BdAutoMeth (void)
        {
            return m_szBdAutoMeth;
        }
        long BdAutoMeth (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdAutoMeth, sizeof(m_szBdAutoMeth), &m_bBdAutoMeth);
        }
        
        //    # OF DAYS BEFORE DUE DATE AUTO TRANS IS SENT FOR PROCESSING.
        long lBdAutoDays () { return 4; };
        RWCString BdAutoDays (void)
        {
            return AceZeroSupp(m_szBdAutoDays, &m_szSuppressBuff[0]);
        }
        RWCString BdAutoDaysRaw (void)
        {
            return m_szBdAutoDays;
        }
        long BdAutoDays (const RWCString& rwc)
        {
            return SetString(rwc, m_szBdAutoDays, sizeof(m_szBdAutoDays), &m_bBdAutoDays);
        }
        
        //    BILLING SCHEDULE EXPIRATION DATE.
        long lBlStopDate () { return 8; };
        RWCString BlStopDate (void)
        {
            return m_szBlStopDate;
        }
        long BlStopDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlStopDate, sizeof(m_szBlStopDate), &m_bBlStopDate);
        }
        
        //    FIRST DAY OF THE REPAYMENT SCHEDULE.
        long lBlStartDate () { return 8; };
        RWCString BlStartDate (void)
        {
            return m_szBlStartDate;
        }
        long BlStartDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlStartDate, sizeof(m_szBlStartDate), &m_bBlStartDate);
        }
        
        //    FIRST DAY OF THE BILLING SCHEDULE.
        long lBlFrstDueDate () { return 8; };
        RWCString BlFrstDueDate (void)
        {
            return m_szBlFrstDueDate;
        }
        long BlFrstDueDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlFrstDueDate, sizeof(m_szBlFrstDueDate), &m_bBlFrstDueDate);
        }
        
        //    USED WITH BLINCR AND BLDAY TO DETERMINE DUE DATES.
        long lBlFreq () { return 1; };
        RWCString BlFreq (void)
        {
            return m_szBlFreq;
        }
        long BlFreq (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlFreq, sizeof(m_szBlFreq), &m_bBlFreq);
        }
        
        //    USED WITH BLFREQ TO DETERMINE DUE DATES.
        long lBlIncr () { return 4; };
        RWCString BlIncr (void)
        {
            return AceZeroSupp(m_szBlIncr, &m_szSuppressBuff[0]);
        }
        RWCString BlIncrRaw (void)
        {
            return m_szBlIncr;
        }
        long BlIncr (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlIncr, sizeof(m_szBlIncr), &m_bBlIncr);
        }
        
        //    DAY OF MONTH USED FOR SPECIAL FREQUENCYS, E.G. END OF MONTH.
        long lBlDay () { return 2; };
        RWCString BlDay (void)
        {
            return m_szBlDay;
        }
        long BlDay (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlDay, sizeof(m_szBlDay), &m_bBlDay);
        }
        
        //    USED TO DETERMINE DUE AMOUNTS.
        long lBlPmtMeth () { return 1; };
        RWCString BlPmtMeth (void)
        {
            return m_szBlPmtMeth;
        }
        long BlPmtMeth (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlPmtMeth, sizeof(m_szBlPmtMeth), &m_bBlPmtMeth);
        }
        
        //    NUMBER OF PAYMENTS INCLUDED IN THE SCHEDULE.
        long lBlNumPmts () { return 4; };
        RWCString BlNumPmts (void)
        {
            return AceZeroSupp(m_szBlNumPmts, &m_szSuppressBuff[0]);
        }
        RWCString BlNumPmtsRaw (void)
        {
            return m_szBlNumPmts;
        }
        long BlNumPmts (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlNumPmts, sizeof(m_szBlNumPmts), &m_bBlNumPmts);
        }
        
        //    AMOUNT TO BE BILLED OR PRINCIPAL PORTION OF BILL.
        long lBlFlatAmt () { return 17; };
        RWCString BlFlatAmt (void)
        {
            return AceZeroSupp(m_szBlFlatAmt, &m_szSuppressBuff[0]);
        }
        RWCString BlFlatAmtRaw (void)
        {
            return m_szBlFlatAmt;
        }
        long BlFlatAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szBlFlatAmt, sizeof(m_szBlFlatAmt), &m_bBlFlatAmt);
        }
        
        //    SEQUENCE NUMBER THAT IDENTIFIES THE AFFILIATE ACCOUNT.
        long lAfSeqNum () { return 2; };
        RWCString AfSeqNum (void)
        {
            return m_szAfSeqNum;
        }
        long AfSeqNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfSeqNum, sizeof(m_szAfSeqNum), &m_bAfSeqNum);
        }
        
        //    AFFILIATE ACCT CONTROLS ASSOCIATED WITH THE SPECIFIED ACCT.
        long lAfCtls () { return 12; };
        RWCString AfCtls (void)
        {
            return m_szAfCtls;
        }
        long AfCtls (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfCtls, sizeof(m_szAfCtls), &m_bAfCtls);
        }
        
        //    AFFILIATE ACCOUNT NUMBER ASSOCIATED WITH THE SPECIFIED ACCT.
        long lAfAcct () { return 19; };
        RWCString AfAcct (void)
        {
            return m_szAfAcct;
        }
        long AfAcct (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfAcct, sizeof(m_szAfAcct), &m_bAfAcct);
        }
        
        //    SYSTEM IN WHICH THE AFFILIATED ACCOUNT IS LOCATED.
        long lAfSys () { return 2; };
        RWCString AfSys (void)
        {
            return m_szAfSys;
        }
        long AfSys (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfSys, sizeof(m_szAfSys), &m_bAfSys);
        }
        
        //    AUTO DEBIT/CREDIT ABA NUMBER.
        long lAfAutoAba () { return 10; };
        RWCString AfAutoAba (void)
        {
            return AceZeroSupp(m_szAfAutoAba, &m_szSuppressBuff[0]);
        }
        RWCString AfAutoAbaRaw (void)
        {
            return m_szAfAutoAba;
        }
        long AfAutoAba (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfAutoAba, sizeof(m_szAfAutoAba), &m_bAfAutoAba);
        }
        
        //    INDICATES WHETHER AFFILIATE ACCOUNT IS USED FOR AUTO CREDIT.
        long lAfAcInd () { return 1; };
        RWCString AfAcInd (void)
        {
            return m_szAfAcInd;
        }
        long AfAcInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfAcInd, sizeof(m_szAfAcInd), &m_bAfAcInd);
        }
        
        //    INDICATES WHETHER AFFILIATE ACCOUNT IS USED FOR AUTO DEBIT.
        long lAfAdInd () { return 1; };
        RWCString AfAdInd (void)
        {
            return m_szAfAdInd;
        }
        long AfAdInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfAdInd, sizeof(m_szAfAdInd), &m_bAfAdInd);
        }
        
        //    INDICATES WHETHER AFF ACCT IS USED FOR MATURITY AUTO DEBIT.
        long lAfMatAdInd () { return 1; };
        RWCString AfMatAdInd (void)
        {
            return m_szAfMatAdInd;
        }
        long AfMatAdInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfMatAdInd, sizeof(m_szAfMatAdInd), &m_bAfMatAdInd);
        }
        
        //    INDICATES WHETHER AFF ACCT IS USED FOR COMPENSATING BALANCE.
        long lAfCompBalInd () { return 1; };
        RWCString AfCompBalInd (void)
        {
            return m_szAfCompBalInd;
        }
        long AfCompBalInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szAfCompBalInd, sizeof(m_szAfCompBalInd), &m_bAfCompBalInd);
        }
        
        //    NUMBER OF TIMES PAYMENTS WERE X NUMBER OF DAYS PAST DUE.
        long lDqHistDayCtr () { return 4; };
        RWCString DqHistDayCtr (long i)
        {
            if (i >= 0 && i < 6)
                return AceZeroSupp(m_szDqHistDayCtr[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString DqHistDayCtrRaw (long i)
        {
            if (i >= 0 && i < 6)
                return m_szDqHistDayCtr[i];
            else
                return "";
        }
        long DqHistDayCtr (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 6)
                return SetString(rwc, m_szDqHistDayCtr[i], sizeof(m_szDqHistDayCtr[i]), &m_bDqHistDayCtr[i]);
            else
                return -1;
        }
        
        //    NUMBER OF TIMES PAYMENTS WERE X NUMBER OF CYCLES PAST DUE.
        long lDqHistCycCtr () { return 4; };
        RWCString DqHistCycCtr (long i)
        {
            if (i >= 0 && i < 6)
                return AceZeroSupp(m_szDqHistCycCtr[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString DqHistCycCtrRaw (long i)
        {
            if (i >= 0 && i < 6)
                return m_szDqHistCycCtr[i];
            else
                return "";
        }
        long DqHistCycCtr (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 6)
                return SetString(rwc, m_szDqHistCycCtr[i], sizeof(m_szDqHistCycCtr[i]), &m_bDqHistCycCtr[i]);
            else
                return -1;
        }
        
        //    NUMBER OF DAYS THE MOST OVERDUE PAYMENT IS PAST DUE.
        long lDqTotDaysPdue () { return 6; };
        RWCString DqTotDaysPdue (void)
        {
            return AceZeroSupp(m_szDqTotDaysPdue, &m_szSuppressBuff[0]);
        }
        RWCString DqTotDaysPdueRaw (void)
        {
            return m_szDqTotDaysPdue;
        }
        long DqTotDaysPdue (const RWCString& rwc)
        {
            return SetString(rwc, m_szDqTotDaysPdue, sizeof(m_szDqTotDaysPdue), &m_bDqTotDaysPdue);
        }
        
        //    NUMBER OF CYCLES THE MOST OVERDUE PAYMENT IS PAST DUE.
        long lDqTotCycPdue () { return 6; };
        RWCString DqTotCycPdue (void)
        {
            return AceZeroSupp(m_szDqTotCycPdue, &m_szSuppressBuff[0]);
        }
        RWCString DqTotCycPdueRaw (void)
        {
            return m_szDqTotCycPdue;
        }
        long DqTotCycPdue (const RWCString& rwc)
        {
            return SetString(rwc, m_szDqTotCycPdue, sizeof(m_szDqTotCycPdue), &m_bDqTotCycPdue);
        }
        
        //    TOTAL NUMBER OF PAYMENTS PAST DUE.
        long lDqNumPmtsPdue () { return 4; };
        RWCString DqNumPmtsPdue (void)
        {
            return AceZeroSupp(m_szDqNumPmtsPdue, &m_szSuppressBuff[0]);
        }
        RWCString DqNumPmtsPdueRaw (void)
        {
            return m_szDqNumPmtsPdue;
        }
        long DqNumPmtsPdue (const RWCString& rwc)
        {
            return SetString(rwc, m_szDqNumPmtsPdue, sizeof(m_szDqNumPmtsPdue), &m_bDqNumPmtsPdue);
        }
        
        //    TOTAL DOLLAR AMOUNT OF ALL PAST DUE AMOUNTS.
        long lDqTotAmtPdue () { return 17; };
        RWCString DqTotAmtPdue (void)
        {
            return AceZeroSupp(m_szDqTotAmtPdue, &m_szSuppressBuff[0]);
        }
        RWCString DqTotAmtPdueRaw (void)
        {
            return m_szDqTotAmtPdue;
        }
        long DqTotAmtPdue (const RWCString& rwc)
        {
            return SetString(rwc, m_szDqTotAmtPdue, sizeof(m_szDqTotAmtPdue), &m_bDqTotAmtPdue);
        }
        
        //    NUMBER OF DAYS REPRESENTED BY THE PAST DUE BOUNDARY.
        long lDqDayBndy () { return 4; };
        RWCString DqDayBndy (long i)
        {
            if (i >= 0 && i < 6)
                return AceZeroSupp(m_szDqDayBndy[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString DqDayBndyRaw (long i)
        {
            if (i >= 0 && i < 6)
                return m_szDqDayBndy[i];
            else
                return "";
        }
        long DqDayBndy (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 6)
                return SetString(rwc, m_szDqDayBndy[i], sizeof(m_szDqDayBndy[i]), &m_bDqDayBndy[i]);
            else
                return -1;
        }
        
        //    NUMBER OF CYCLES REPRESENTED BY THE PAST DUE BOUNDRY.
        long lDqCycBndy () { return 4; };
        RWCString DqCycBndy (long i)
        {
            if (i >= 0 && i < 6)
                return AceZeroSupp(m_szDqCycBndy[i], &m_szSuppressBuff[0]);
            else
                return "";
        }
        RWCString DqCycBndyRaw (long i)
        {
            if (i >= 0 && i < 6)
                return m_szDqCycBndy[i];
            else
                return "";
        }
        long DqCycBndy (const RWCString& rwc, long i)
        {
            if (i >= 0 && i < 6)
                return SetString(rwc, m_szDqCycBndy[i], sizeof(m_szDqCycBndy[i]), &m_bDqCycBndy[i]);
            else
                return -1;
        }
        
        //    ONE THIRTIETH OF THE FIRST MONTHS EARNINGS FOR THIS ACCRUAL.
        long lAcOrigRate () { return 13; };
        RWCString AcOrigRate (void)
        {
            return AceZeroSupp(m_szAcOrigRate, &m_szSuppressBuff[0]);
        }
        RWCString AcOrigRateRaw (void)
        {
            return m_szAcOrigRate;
        }
        long AcOrigRate (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcOrigRate, sizeof(m_szAcOrigRate), &m_bAcOrigRate);
        }
        
        //    ORIGINAL COMMITMENT BALANCE FOR THIS BALANCE TYPE.
        long lBaOrigCmAmt () { return 17; };
        RWCString BaOrigCmAmt (void)
        {
            return AceZeroSupp(m_szBaOrigCmAmt, &m_szSuppressBuff[0]);
        }
        RWCString BaOrigCmAmtRaw (void)
        {
            return m_szBaOrigCmAmt;
        }
        long BaOrigCmAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szBaOrigCmAmt, sizeof(m_szBaOrigCmAmt), &m_bBaOrigCmAmt);
        }
        
        //    CURRENT COMMITMENT AMOUNT.
        long lBaCurrCmAmt () { return 17; };
        RWCString BaCurrCmAmt (void)
        {
            return AceZeroSupp(m_szBaCurrCmAmt, &m_szSuppressBuff[0]);
        }
        RWCString BaCurrCmAmtRaw (void)
        {
            return m_szBaCurrCmAmt;
        }
        long BaCurrCmAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szBaCurrCmAmt, sizeof(m_szBaCurrCmAmt), &m_bBaCurrCmAmt);
        }
        
        //    CURRENT AMOUNT AVAILABLE FOR WITHDRAWAL.
        long lBaAvailBal () { return 17; };
        RWCString BaAvailBal (void)
        {
            return AceZeroSupp(m_szBaAvailBal, &m_szSuppressBuff[0]);
        }
        RWCString BaAvailBalRaw (void)
        {
            return m_szBaAvailBal;
        }
        long BaAvailBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szBaAvailBal, sizeof(m_szBaAvailBal), &m_bBaAvailBal);
        }
        
        //    TOTAL AMT DRAWN OVER LIFE OF THE COMMITMENT FOR BAL TYPE.
        long lBaUsedBal () { return 17; };
        RWCString BaUsedBal (void)
        {
            return AceZeroSupp(m_szBaUsedBal, &m_szSuppressBuff[0]);
        }
        RWCString BaUsedBalRaw (void)
        {
            return m_szBaUsedBal;
        }
        long BaUsedBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szBaUsedBal, sizeof(m_szBaUsedBal), &m_bBaUsedBal);
        }
        
        //    AMOUNT WITHDRAWN UNDER THE LINE OF CREDIT BUT NOT REPAID.
        long lBaOutBal () { return 17; };
        RWCString BaOutBal (void)
        {
            return AceZeroSupp(m_szBaOutBal, &m_szSuppressBuff[0]);
        }
        RWCString BaOutBalRaw (void)
        {
            return m_szBaOutBal;
        }
        long BaOutBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szBaOutBal, sizeof(m_szBaOutBal), &m_bBaOutBal);
        }
        
        //    AMOUNT WITHDRAWN THAT EXCEEDS AMOUNT AVAILABLE FOR THIS LOC.
        long lBaOvrlnBal () { return 17; };
        RWCString BaOvrlnBal (void)
        {
            return AceZeroSupp(m_szBaOvrlnBal, &m_szSuppressBuff[0]);
        }
        RWCString BaOvrlnBalRaw (void)
        {
            return m_szBaOvrlnBal;
        }
        long BaOvrlnBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szBaOvrlnBal, sizeof(m_szBaOvrlnBal), &m_bBaOvrlnBal);
        }
        
        //    AMOUNT PAID BUT NOT COLLECTED FOR THE BALANCE TYPE.
        long lBaUncolBal () { return 17; };
        RWCString BaUncolBal (void)
        {
            return AceZeroSupp(m_szBaUncolBal, &m_szSuppressBuff[0]);
        }
        RWCString BaUncolBalRaw (void)
        {
            return m_szBaUncolBal;
        }
        long BaUncolBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szBaUncolBal, sizeof(m_szBaUncolBal), &m_bBaUncolBal);
        }
        
        //    TOTAL AMOUNT FOR THE BALANCE TYPE ON WHICH A HOLD IS PLACED.
        long lBaHoldBal () { return 17; };
        RWCString BaHoldBal (void)
        {
            return AceZeroSupp(m_szBaHoldBal, &m_szSuppressBuff[0]);
        }
        RWCString BaHoldBalRaw (void)
        {
            return m_szBaHoldBal;
        }
        long BaHoldBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szBaHoldBal, sizeof(m_szBaHoldBal), &m_bBaHoldBal);
        }
        
        //    USER-DEFINED DESCRIPTION OF THE COLLATERAL.
        long lCoDesc1 () { return 60; };
        RWCString CoDesc1 (void)
        {
            return m_szCoDesc1;
        }
        long CoDesc1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCoDesc1, sizeof(m_szCoDesc1), &m_bCoDesc1);
        }
        
        //    NUMBER IDENTIFYING THE COLLATERAL ITEM.
        long lCoItemNo () { return 7; };
        RWCString CoItemNo (void)
        {
            return m_szCoItemNo;
        }
        long CoItemNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szCoItemNo, sizeof(m_szCoItemNo), &m_bCoItemNo);
        }
        
        //    INDICATES WHETHER KEEPING COLLATERAL IS REQUIRED/RECEIVED.
        long lCoRecCd () { return 1; };
        RWCString CoRecCd (void)
        {
            return m_szCoRecCd;
        }
        long CoRecCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCoRecCd, sizeof(m_szCoRecCd), &m_bCoRecCd);
        }
        
        //    YEAR-TO-DATE AMOUNT OF ECONOMIC ACCRUAL INTEREST.
        long lEcAccrYtdInt () { return 15; };
        RWCString EcAccrYtdInt (void)
        {
            return AceZeroSupp(m_szEcAccrYtdInt, &m_szSuppressBuff[0]);
        }
        RWCString EcAccrYtdIntRaw (void)
        {
            return m_szEcAccrYtdInt;
        }
        long EcAccrYtdInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szEcAccrYtdInt, sizeof(m_szEcAccrYtdInt), &m_bEcAccrYtdInt);
        }
        
        //    PREVIOUS YEAR'S AMOUNT OF ECONOMIC ACCRUAL INTEREST.
        long lEcAccrPrevYrInt () { return 15; };
        RWCString EcAccrPrevYrInt (void)
        {
            return AceZeroSupp(m_szEcAccrPrevYrInt, &m_szSuppressBuff[0]);
        }
        RWCString EcAccrPrevYrIntRaw (void)
        {
            return m_szEcAccrPrevYrInt;
        }
        long EcAccrPrevYrInt (const RWCString& rwc)
        {
            return SetString(rwc, m_szEcAccrPrevYrInt, sizeof(m_szEcAccrPrevYrInt), &m_bEcAccrPrevYrInt);
        }
        
        //    TOTAL AMOUNT OF CURRENT INTEREST.
        long lSdCurrInterestBal () { return 17; };
        RWCString SdCurrInterestBal (void)
        {
            return AceZeroSupp(m_szSdCurrInterestBal, &m_szSuppressBuff[0]);
        }
        RWCString SdCurrInterestBalRaw (void)
        {
            return m_szSdCurrInterestBal;
        }
        long SdCurrInterestBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdCurrInterestBal, sizeof(m_szSdCurrInterestBal), &m_bSdCurrInterestBal);
        }
        
        //    TOTAL AMOUNT OF LATE CHARGES.
        long lSdLateChargesBal () { return 17; };
        RWCString SdLateChargesBal (void)
        {
            return AceZeroSupp(m_szSdLateChargesBal, &m_szSuppressBuff[0]);
        }
        RWCString SdLateChargesBalRaw (void)
        {
            return m_szSdLateChargesBal;
        }
        long SdLateChargesBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdLateChargesBal, sizeof(m_szSdLateChargesBal), &m_bSdLateChargesBal);
        }
        
        //    TOTAL AMOUNT OF OTHER FEES.
        long lSdOtherFeesBal () { return 17; };
        RWCString SdOtherFeesBal (void)
        {
            return AceZeroSupp(m_szSdOtherFeesBal, &m_szSuppressBuff[0]);
        }
        RWCString SdOtherFeesBalRaw (void)
        {
            return m_szSdOtherFeesBal;
        }
        long SdOtherFeesBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdOtherFeesBal, sizeof(m_szSdOtherFeesBal), &m_bSdOtherFeesBal);
        }
        
        //    CUSTOMER'S HOME PHONE.
        long lSdHomePhone () { return 21; };
        RWCString SdHomePhone (void)
        {
            return m_szSdHomePhone;
        }
        long SdHomePhone (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdHomePhone, sizeof(m_szSdHomePhone), &m_bSdHomePhone);
        }
        
        //    CUSTOMER'S WORK PHONE.
        long lSdWorkPhone () { return 21; };
        RWCString SdWorkPhone (void)
        {
            return m_szSdWorkPhone;
        }
        long SdWorkPhone (const RWCString& rwc)
        {
            return SetString(rwc, m_szSdWorkPhone, sizeof(m_szSdWorkPhone), &m_bSdWorkPhone);
        }
        
        //    REGION CODE.
        long lCfRegionCd () { return 4; };
        RWCString CfRegionCd (void)
        {
            return m_szCfRegionCd;
        }
        long CfRegionCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfRegionCd, sizeof(m_szCfRegionCd), &m_bCfRegionCd);
        }
        
        //    ALS PROCESS THROUGH DATE.
        long lProcessThruDate () { return 8; };
        RWCString ProcessThruDate (void)
        {
            return m_szProcessThruDate;
        }
        long ProcessThruDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szProcessThruDate, sizeof(m_szProcessThruDate), &m_bProcessThruDate);
        }
        
        //    PROCESS THROUGH DATE FOR THE CURRENT PROCESS DATE.
        long lPcCurrThruDate () { return 8; };
        RWCString PcCurrThruDate (void)
        {
            return m_szPcCurrThruDate;
        }
        long PcCurrThruDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szPcCurrThruDate, sizeof(m_szPcCurrThruDate), &m_bPcCurrThruDate);
        }
        
        //    THE PROCESS THROUGH DATE OF THE PREVIOUS RUN.
        long lPcPrevThruDate () { return 8; };
        RWCString PcPrevThruDate (void)
        {
            return m_szPcPrevThruDate;
        }
        long PcPrevThruDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szPcPrevThruDate, sizeof(m_szPcPrevThruDate), &m_bPcPrevThruDate);
        }
        
        //    THE DATE THE SYSTEM IS TO NEXT PROCESS THRU.
        long lPcNxtThruDate () { return 8; };
        RWCString PcNxtThruDate (void)
        {
            return m_szPcNxtThruDate;
        }
        long PcNxtThruDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szPcNxtThruDate, sizeof(m_szPcNxtThruDate), &m_bPcNxtThruDate);
        }
        
        //    INSTITUTION AMERICAN BANKERS ASSOCIATION NUMBER.
        long lInAba () { return 16; };
        RWCString InAba (void)
        {
            return AceZeroSupp(m_szInAba, &m_szSuppressBuff[0]);
        }
        RWCString InAbaRaw (void)
        {
            return m_szInAba;
        }
        long InAba (const RWCString& rwc)
        {
            return SetString(rwc, m_szInAba, sizeof(m_szInAba), &m_bInAba);
        }
        
        //    RELATIONSHIP TYPE
        long lCfRelType () { return 1; };
        RWCString CfRelType (void)
        {
            return m_szCfRelType;
        }
        long CfRelType (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfRelType, sizeof(m_szCfRelType), &m_bCfRelType);
        }
        
        //    DESCRIPTION OF PRODUCT
        long lPdDesc () { return 20; };
        RWCString PdDesc (void)
        {
            return m_szPdDesc;
        }
        long PdDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szPdDesc, sizeof(m_szPdDesc), &m_bPdDesc);
        }
        
        //    LEGAL ACCOUNT STATUS
        long lRtLegalStat () { return 2; };
        RWCString RtLegalStat (void)
        {
            return m_szRtLegalStat;
        }
        long RtLegalStat (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtLegalStat, sizeof(m_szRtLegalStat), &m_bRtLegalStat);
        }
        
        //    TYPE OF THE ACCRUAL, SUCH AS INTEREST, FEES, INSURANCE, ETC.
        long lAcType () { return 3; };
        RWCString AcType (void)
        {
            return m_szAcType;
        }
        long AcType (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcType, sizeof(m_szAcType), &m_bAcType);
        }
        
        //    USER DEFINED CODE WHICH FURTHER IDENTIFIES THE ACCRUAL.
        long lAcCd () { return 2; };
        RWCString AcCd (void)
        {
            return m_szAcCd;
        }
        long AcCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcCd, sizeof(m_szAcCd), &m_bAcCd);
        }
        
        //    SHORT NAME - WILL BE GENERATED IF NOT ENTERED.
        long lCfShortName () { return 13; };
        RWCString CfShortName (void)
        {
            return m_szCfShortName;
        }
        long CfShortName (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfShortName, sizeof(m_szCfShortName), &m_bCfShortName);
        }
        
        //    TAX IDENTIFICATION CODE PREFIX.
        long lCfTaxIdPrfx () { return 1; };
        RWCString CfTaxIdPrfx (void)
        {
            return m_szCfTaxIdPrfx;
        }
        long CfTaxIdPrfx (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdPrfx, sizeof(m_szCfTaxIdPrfx), &m_bCfTaxIdPrfx);
        }
        
        //    TAX IDENTIFICATION CODE SUFFIX.
        long lCfTaxIdSufx () { return 1; };
        RWCString CfTaxIdSufx (void)
        {
            return m_szCfTaxIdSufx;
        }
        long CfTaxIdSufx (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdSufx, sizeof(m_szCfTaxIdSufx), &m_bCfTaxIdSufx);
        }
        
        //    CREDIT RATING SCORE.
        long lCfCrScore () { return 5; };
        RWCString CfCrScore (void)
        {
            return m_szCfCrScore;
        }
        long CfCrScore (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCrScore, sizeof(m_szCfCrScore), &m_bCfCrScore);
        }
        
        //    BIRTH DATE.
        long lCfBirthDate () { return 8; };
        RWCString CfBirthDate (void)
        {
            return m_szCfBirthDate;
        }
        long CfBirthDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfBirthDate, sizeof(m_szCfBirthDate), &m_bCfBirthDate);
        }
        
        //    RACIAL CODE.
        long lCfRace () { return 1; };
        RWCString CfRace (void)
        {
            return m_szCfRace;
        }
        long CfRace (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfRace, sizeof(m_szCfRace), &m_bCfRace);
        }
        
        //    PERSONAL OR COMMERCIAL NAME CODE.
        long lCfPersCmclCd () { return 1; };
        RWCString CfPersCmclCd (void)
        {
            return m_szCfPersCmclCd;
        }
        long CfPersCmclCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPersCmclCd, sizeof(m_szCfPersCmclCd), &m_bCfPersCmclCd);
        }
        
        //    IS TAX ID NUMBER VALID.
        long lCfTaxIdValid () { return 1; };
        RWCString CfTaxIdValid (void)
        {
            return m_szCfTaxIdValid;
        }
        long CfTaxIdValid (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdValid, sizeof(m_szCfTaxIdValid), &m_bCfTaxIdValid);
        }
        
        //    PRIMARY BRANCH CODE.
        long lCfPrimBr () { return 5; };
        RWCString CfPrimBr (void)
        {
            return m_szCfPrimBr;
        }
        long CfPrimBr (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPrimBr, sizeof(m_szCfPrimBr), &m_bCfPrimBr);
        }
        
        //    OFFICER OR EMPLOYEE CODE.
        long lCfOfficerEmpCd () { return 1; };
        RWCString CfOfficerEmpCd (void)
        {
            return m_szCfOfficerEmpCd;
        }
        long CfOfficerEmpCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfOfficerEmpCd, sizeof(m_szCfOfficerEmpCd), &m_bCfOfficerEmpCd);
        }
        
        //    SEX CODE - M = MALE, F = FEMALE.
        long lCfSex () { return 1; };
        RWCString CfSex (void)
        {
            return m_szCfSex;
        }
        long CfSex (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfSex, sizeof(m_szCfSex), &m_bCfSex);
        }
        
        //    MARITAL STATUS CODE.
        long lCfMaritStat () { return 1; };
        RWCString CfMaritStat (void)
        {
            return m_szCfMaritStat;
        }
        long CfMaritStat (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfMaritStat, sizeof(m_szCfMaritStat), &m_bCfMaritStat);
        }
        
        //    TELLS WHETHER ADDRESS IS OUTSIDE THE U.S.A.
        long lCfFrgnAddrInd () { return 1; };
        RWCString CfFrgnAddrInd (void)
        {
            return m_szCfFrgnAddrInd;
        }
        long CfFrgnAddrInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfFrgnAddrInd, sizeof(m_szCfFrgnAddrInd), &m_bCfFrgnAddrInd);
        }
        
        //    NAME ASSIGNED TO THE TAX ID NUMBER.
        long lCfTaxIdName () { return 40; };
        RWCString CfTaxIdName (void)
        {
            return m_szCfTaxIdName;
        }
        long CfTaxIdName (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdName, sizeof(m_szCfTaxIdName), &m_bCfTaxIdName);
        }
        
        //    4 SIGNIFICANT DIGITS OF TAX ID NAME.
        long lCfTaxIdNameCtl () { return 4; };
        RWCString CfTaxIdNameCtl (void)
        {
            return m_szCfTaxIdNameCtl;
        }
        long CfTaxIdNameCtl (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdNameCtl, sizeof(m_szCfTaxIdNameCtl), &m_bCfTaxIdNameCtl);
        }
        
        //    SKIP TRACE CODE.
        long lCfSkipTraceCd () { return 2; };
        RWCString CfSkipTraceCd (void)
        {
            return m_szCfSkipTraceCd;
        }
        long CfSkipTraceCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfSkipTraceCd, sizeof(m_szCfSkipTraceCd), &m_bCfSkipTraceCd);
        }
        
        //    FIRST STUDENT LOAN DISBURSEMENT DATE
        long lCfFrstSlDisbDate () { return 8; };
        RWCString CfFrstSlDisbDate (void)
        {
            return m_szCfFrstSlDisbDate;
        }
        long CfFrstSlDisbDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfFrstSlDisbDate, sizeof(m_szCfFrstSlDisbDate), &m_bCfFrstSlDisbDate);
        }
        
        //    INSURANCE ELIGIBILITY CODE.
        long lCfInsEligCd () { return 1; };
        RWCString CfInsEligCd (void)
        {
            return m_szCfInsEligCd;
        }
        long CfInsEligCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfInsEligCd, sizeof(m_szCfInsEligCd), &m_bCfInsEligCd);
        }
        
        //    CUSTOMER ADDRESS NUMBER
        long lCfAddrNum () { return 3; };
        RWCString CfAddrNum (void)
        {
            return m_szCfAddrNum;
        }
        long CfAddrNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfAddrNum, sizeof(m_szCfAddrNum), &m_bCfAddrNum);
        }
        
        //    SHARE CUSTOMER INFORMATION CODE
        long lShareCustInfoCd () { return 1; };
        RWCString ShareCustInfoCd (void)
        {
            return m_szShareCustInfoCd;
        }
        long ShareCustInfoCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szShareCustInfoCd, sizeof(m_szShareCustInfoCd), &m_bShareCustInfoCd);
        }
        
        //    SHARE CUSTOMER INFO MAINTENANCE DATE
        long lShareInfoMaintDt () { return 8; };
        RWCString ShareInfoMaintDt (void)
        {
            return m_szShareInfoMaintDt;
        }
        long ShareInfoMaintDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szShareInfoMaintDt, sizeof(m_szShareInfoMaintDt), &m_bShareInfoMaintDt);
        }
        
        //    USER CHARACTER FIELD 1.
        long lUserCharField1 () { return 15; };
        RWCString UserCharField1 (void)
        {
            return m_szUserCharField1;
        }
        long UserCharField1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField1, sizeof(m_szUserCharField1), &m_bUserCharField1);
        }
        
        //    USER CHARACTER FIELD 2.
        long lUserCharField2 () { return 15; };
        RWCString UserCharField2 (void)
        {
            return m_szUserCharField2;
        }
        long UserCharField2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField2, sizeof(m_szUserCharField2), &m_bUserCharField2);
        }
        
        //    USER CHARACTER FIELD 3.
        long lUserCharField3 () { return 15; };
        RWCString UserCharField3 (void)
        {
            return m_szUserCharField3;
        }
        long UserCharField3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserCharField3, sizeof(m_szUserCharField3), &m_bUserCharField3);
        }
        
        //    USER NUMERIC FIELD 1.
        long lUserNumField1 () { return 17; };
        RWCString UserNumField1 (void)
        {
            return AceZeroSupp(m_szUserNumField1, &m_szSuppressBuff[0]);
        }
        RWCString UserNumField1Raw (void)
        {
            return m_szUserNumField1;
        }
        long UserNumField1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserNumField1, sizeof(m_szUserNumField1), &m_bUserNumField1);
        }
        
        //    USER NUMERIC FIELD 2.
        long lUserNumField2 () { return 17; };
        RWCString UserNumField2 (void)
        {
            return AceZeroSupp(m_szUserNumField2, &m_szSuppressBuff[0]);
        }
        RWCString UserNumField2Raw (void)
        {
            return m_szUserNumField2;
        }
        long UserNumField2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserNumField2, sizeof(m_szUserNumField2), &m_bUserNumField2);
        }
        
        //    USER NUMERIC FIELD 3.
        long lUserNumField3 () { return 17; };
        RWCString UserNumField3 (void)
        {
            return AceZeroSupp(m_szUserNumField3, &m_szSuppressBuff[0]);
        }
        RWCString UserNumField3Raw (void)
        {
            return m_szUserNumField3;
        }
        long UserNumField3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserNumField3, sizeof(m_szUserNumField3), &m_bUserNumField3);
        }
        
        long lFill0 () { return 30; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        long lFill1 () { return 30; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        //    DEATH CODE
        long lDeathCode () { return 3; };
        RWCString DeathCode (void)
        {
            return m_szDeathCode;
        }
        long DeathCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szDeathCode, sizeof(m_szDeathCode), &m_bDeathCode);
        }
        
        //    DEATH CODE DESCRIPTION
        long lDeathCodeDesc () { return 40; };
        RWCString DeathCodeDesc (void)
        {
            return m_szDeathCodeDesc;
        }
        long DeathCodeDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szDeathCodeDesc, sizeof(m_szDeathCodeDesc), &m_bDeathCodeDesc);
        }
        
        //    LEGAL STATUS DESCRIPTION
        long lLegalStatusDesc () { return 40; };
        RWCString LegalStatusDesc (void)
        {
            return m_szLegalStatusDesc;
        }
        long LegalStatusDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szLegalStatusDesc, sizeof(m_szLegalStatusDesc), &m_bLegalStatusDesc);
        }
        
        //    NEXT ACCRUAL DATE
        long lNextAccrualDate () { return 8; };
        RWCString NextAccrualDate (void)
        {
            return m_szNextAccrualDate;
        }
        long NextAccrualDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szNextAccrualDate, sizeof(m_szNextAccrualDate), &m_bNextAccrualDate);
        }
        
        //    MESSAGE CODE
        long lMsgCode () { return 2; };
        RWCString MsgCode (void)
        {
            return m_szMsgCode;
        }
        long MsgCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMsgCode, sizeof(m_szMsgCode), &m_bMsgCode);
        }
        
        //    MESSAGE CODE DESCRIPTION
        long lMsgCodeDesc () { return 40; };
        RWCString MsgCodeDesc (void)
        {
            return m_szMsgCodeDesc;
        }
        long MsgCodeDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szMsgCodeDesc, sizeof(m_szMsgCodeDesc), &m_bMsgCodeDesc);
        }
        
        //    PROC STAT DESCRIPTION
        long lRtProcStatDesc () { return 40; };
        RWCString RtProcStatDesc (void)
        {
            return m_szRtProcStatDesc;
        }
        long RtProcStatDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtProcStatDesc, sizeof(m_szRtProcStatDesc), &m_bRtProcStatDesc);
        }
        
        //    RT CLASS CODE DESCRIPTION
        long lRtClassCodeDesc () { return 40; };
        RWCString RtClassCodeDesc (void)
        {
            return m_szRtClassCodeDesc;
        }
        long RtClassCodeDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtClassCodeDesc, sizeof(m_szRtClassCodeDesc), &m_bRtClassCodeDesc);
        }
        
        //    RT ACCRUAL STATUS DESCRIPTION
        long lRtAccrualStatDesc () { return 40; };
        RWCString RtAccrualStatDesc (void)
        {
            return m_szRtAccrualStatDesc;
        }
        long RtAccrualStatDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtAccrualStatDesc, sizeof(m_szRtAccrualStatDesc), &m_bRtAccrualStatDesc);
        }
        
        //    TDR STATUS
        long lTdrStatus () { return 4; };
        RWCString TdrStatus (void)
        {
            return m_szTdrStatus;
        }
        long TdrStatus (const RWCString& rwc)
        {
            return SetString(rwc, m_szTdrStatus, sizeof(m_szTdrStatus), &m_bTdrStatus);
        }
        
        //    TDR DESCRIPTION
        long lTdrDesc () { return 40; };
        RWCString TdrDesc (void)
        {
            return m_szTdrDesc;
        }
        long TdrDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szTdrDesc, sizeof(m_szTdrDesc), &m_bTdrDesc);
        }
        
        //    NPL STATUS
        long lNplStatus () { return 2; };
        RWCString NplStatus (void)
        {
            return m_szNplStatus;
        }
        long NplStatus (const RWCString& rwc)
        {
            return SetString(rwc, m_szNplStatus, sizeof(m_szNplStatus), &m_bNplStatus);
        }
        
        //    NPL DESCRIPTION
        long lNplDesc () { return 40; };
        RWCString NplDesc (void)
        {
            return m_szNplDesc;
        }
        long NplDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szNplDesc, sizeof(m_szNplDesc), &m_bNplDesc);
        }
        
        //    LOAN CLASS CODE
        long lLoanClassCode () { return 2; };
        RWCString LoanClassCode (void)
        {
            return m_szLoanClassCode;
        }
        long LoanClassCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanClassCode, sizeof(m_szLoanClassCode), &m_bLoanClassCode);
        }
        
        //    LOAN CLASS DESCRIPTION
        long lLoanClassDesc () { return 40; };
        RWCString LoanClassDesc (void)
        {
            return m_szLoanClassDesc;
        }
        long LoanClassDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanClassDesc, sizeof(m_szLoanClassDesc), &m_bLoanClassDesc);
        }
        
        //    PENALTY DATE
        long lPenaltyDate () { return 8; };
        RWCString PenaltyDate (void)
        {
            return m_szPenaltyDate;
        }
        long PenaltyDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szPenaltyDate, sizeof(m_szPenaltyDate), &m_bPenaltyDate);
        }
        
        //    SKIP GROUP CODE
        long lSkipGroupCode () { return 1; };
        RWCString SkipGroupCode (void)
        {
            return m_szSkipGroupCode;
        }
        long SkipGroupCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szSkipGroupCode, sizeof(m_szSkipGroupCode), &m_bSkipGroupCode);
        }
        
        //    SKIP GROUP DESCRIPTION
        long lSkipGroupDesc () { return 40; };
        RWCString SkipGroupDesc (void)
        {
            return m_szSkipGroupDesc;
        }
        long SkipGroupDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szSkipGroupDesc, sizeof(m_szSkipGroupDesc), &m_bSkipGroupDesc);
        }
        
        //    RT COLLATERAL CODE DESCRIPTION
        long lRtCollCodeDesc () { return 40; };
        RWCString RtCollCodeDesc (void)
        {
            return m_szRtCollCodeDesc;
        }
        long RtCollCodeDesc (const RWCString& rwc)
        {
            return SetString(rwc, m_szRtCollCodeDesc, sizeof(m_szRtCollCodeDesc), &m_bRtCollCodeDesc);
        }
        
        //    AI1
        long lAi1 () { return 17; };
        RWCString Ai1 (void)
        {
            return AceZeroSupp(m_szAi1, &m_szSuppressBuff[0]);
        }
        RWCString Ai1Raw (void)
        {
            return m_szAi1;
        }
        long Ai1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szAi1, sizeof(m_szAi1), &m_bAi1);
        }
        
        //    AI2
        long lAi2 () { return 17; };
        RWCString Ai2 (void)
        {
            return AceZeroSupp(m_szAi2, &m_szSuppressBuff[0]);
        }
        RWCString Ai2Raw (void)
        {
            return m_szAi2;
        }
        long Ai2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szAi2, sizeof(m_szAi2), &m_bAi2);
        }
        
        //    AI3
        long lAi3 () { return 17; };
        RWCString Ai3 (void)
        {
            return AceZeroSupp(m_szAi3, &m_szSuppressBuff[0]);
        }
        RWCString Ai3Raw (void)
        {
            return m_szAi3;
        }
        long Ai3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szAi3, sizeof(m_szAi3), &m_bAi3);
        }
        
        //    TOTAL INTEREST
        long lTotalInterest () { return 17; };
        RWCString TotalInterest (void)
        {
            return AceZeroSupp(m_szTotalInterest, &m_szSuppressBuff[0]);
        }
        RWCString TotalInterestRaw (void)
        {
            return m_szTotalInterest;
        }
        long TotalInterest (const RWCString& rwc)
        {
            return SetString(rwc, m_szTotalInterest, sizeof(m_szTotalInterest), &m_bTotalInterest);
        }
        
        //    PENALTY RATE
        long lPenaltyRate () { return 13; };
        RWCString PenaltyRate (void)
        {
            return AceZeroSupp(m_szPenaltyRate, &m_szSuppressBuff[0]);
        }
        RWCString PenaltyRateRaw (void)
        {
            return m_szPenaltyRate;
        }
        long PenaltyRate (const RWCString& rwc)
        {
            return SetString(rwc, m_szPenaltyRate, sizeof(m_szPenaltyRate), &m_bPenaltyRate);
        }
        
        //    FEE
        long lFee () { return 17; };
        RWCString Fee (void)
        {
            return AceZeroSupp(m_szFee, &m_szSuppressBuff[0]);
        }
        RWCString FeeRaw (void)
        {
            return m_szFee;
        }
        long Fee (const RWCString& rwc)
        {
            return SetString(rwc, m_szFee, sizeof(m_szFee), &m_bFee);
        }
        
        //    GROUP CODE 1
        long lGroupCode1 () { return 3; };
        RWCString GroupCode1 (void)
        {
            return m_szGroupCode1;
        }
        long GroupCode1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szGroupCode1, sizeof(m_szGroupCode1), &m_bGroupCode1);
        }
        
        //    GROUP CODE 2
        long lGroupCode2 () { return 3; };
        RWCString GroupCode2 (void)
        {
            return m_szGroupCode2;
        }
        long GroupCode2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szGroupCode2, sizeof(m_szGroupCode2), &m_bGroupCode2);
        }
        
        //    DQ INTEREST PAST DUE DAYS
        long lDqIntPdueDays () { return 6; };
        RWCString DqIntPdueDays (void)
        {
            return AceZeroSupp(m_szDqIntPdueDays, &m_szSuppressBuff[0]);
        }
        RWCString DqIntPdueDaysRaw (void)
        {
            return m_szDqIntPdueDays;
        }
        long DqIntPdueDays (const RWCString& rwc)
        {
            return SetString(rwc, m_szDqIntPdueDays, sizeof(m_szDqIntPdueDays), &m_bDqIntPdueDays);
        }
        
        //    DQ INTEREST PAST DUE DATE
        long lDqIntPdueDate () { return 8; };
        RWCString DqIntPdueDate (void)
        {
            return m_szDqIntPdueDate;
        }
        long DqIntPdueDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szDqIntPdueDate, sizeof(m_szDqIntPdueDate), &m_bDqIntPdueDate);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRtCtl1) return true;
            if (m_bRtCtl2) return true;
            if (m_bRtCtl3) return true;
            if (m_bRtCtl4) return true;
            if (m_bRtAcctNum) return true;
            if (m_bCfCtl1) return true;
            if (m_bCfCtl2) return true;
            if (m_bCfCtl3) return true;
            if (m_bCfCtl4) return true;
            if (m_bCfCustNum) return true;
            if (m_bRtEditedAcctNum) return true;
            if (m_bRtAcctStat) return true;
            if (m_bRtLoanRate) return true;
            if (m_bRtIntType) return true;
            if (m_bRtPoffDlyAmt) return true;
            if (m_bRtCurrMaturDate) return true;
            if (m_bRtNxtDueDate) return true;
            if (m_bRtCurrDueAmt) return true;
            if (m_bRtLstPmtDate) return true;
            if (m_bRtLstPmtAmt) return true;
            if (m_bRtOldstDueDate) return true;
            if (m_bRtCollCd) return true;
            if (m_bRtAcctProd) return true;
            if (m_bRtAcctType) return true;
            if (m_bRtProcType) return true;
            if (m_bRtAccrStat) return true;
            if (m_bRtProcStat) return true;
            if (m_bRtStopPayInd) return true;
            if (m_bRtOrigTerm) return true;
            if (m_bRtCurrTerm) return true;
            if (m_bRtKoStatCd) return true;
            if (m_bRtTotPrin) return true;
            if (m_bRtTotIntRec) return true;
            if (m_bRtTotIntReb) return true;
            if (m_bRtTotIdrRec) return true;
            if (m_bRtTotIdrReb) return true;
            if (m_bRtTotSbdyInt) return true;
            if (m_bRtTotCostOfFunds) return true;
            if (m_bRtTotInsIntRec) return true;
            if (m_bRtTotInsIntReb) return true;
            if (m_bRtTotAccrIns) return true;
            if (m_bRtTotInsReb) return true;
            if (m_bRtTotAssdLtChrg) return true;
            if (m_bRtTotAccrLtChrg) return true;
            if (m_bRtTotLtAccrBal) return true;
            if (m_bRtTotAccrFeeRec) return true;
            if (m_bRtTotAssdFeeRec) return true;
            if (m_bRtTotFeeReb) return true;
            if (m_bRtTotCmBal) return true;
            if (m_bRtTotCoffAmt) return true;
            if (m_bRtRateChgNtcType) return true;
            if (m_bCfPrimOfficer) return true;
            if (m_bRtNxtCoupDate) return true;
            if (m_bRtOrigMaturDate) return true;
            if (m_bRtOrigProcdAmt) return true;
            if (m_bRtOrigLoanAmt) return true;
            if (m_bRtAcctEffDate) return true;
            if (m_bRtNxtAutoDrDate) return true;
            if (m_bRtPoffAmt) return true;
            if (m_bRtTotAccrCoffAmt) return true;
            if (m_bRtClassCd) return true;
            if (m_bRtEconAccrInd) return true;
            if (m_bRtYtdInt) return true;
            if (m_bRtPrevYrInt) return true;
            if (m_bRtActlPmtsRem) return true;
            if (m_bRtCurrency) return true;
            if (m_bRtCurrencyDec) return true;
            if (m_bCfNumLines) return true;
            if (m_bCfCntry) return true;
            if (m_bCfHostCntryInd) return true;
            if (m_bCfTaxIdNum) return true;
            if (m_bCfLangCd) return true;
            if (m_bCfLangGroup) return true;
            if (m_bBdMeth) return true;
            if (m_bBdBillType) return true;
            if (m_bBdNxtDueDate) return true;
            if (m_bBdPrevDueDate) return true;
            if (m_bBdOrigNumPmts) return true;
            if (m_bBdOrigBillAmt) return true;
            if (m_bBdNumPmtsRem) return true;
            if (m_bBdNxtBillDate) return true;
            if (m_bBdNumCoup) return true;
            if (m_bBdCoupThruDate) return true;
            if (m_bBdCoupStartDate) return true;
            if (m_bBdNxtThruDate) return true;
            if (m_bBdNxtStartDate) return true;
            if (m_bBdAutoMeth) return true;
            if (m_bBdAutoDays) return true;
            if (m_bBlStopDate) return true;
            if (m_bBlStartDate) return true;
            if (m_bBlFrstDueDate) return true;
            if (m_bBlFreq) return true;
            if (m_bBlIncr) return true;
            if (m_bBlDay) return true;
            if (m_bBlPmtMeth) return true;
            if (m_bBlNumPmts) return true;
            if (m_bBlFlatAmt) return true;
            if (m_bAfSeqNum) return true;
            if (m_bAfCtls) return true;
            if (m_bAfAcct) return true;
            if (m_bAfSys) return true;
            if (m_bAfAutoAba) return true;
            if (m_bAfAcInd) return true;
            if (m_bAfAdInd) return true;
            if (m_bAfMatAdInd) return true;
            if (m_bAfCompBalInd) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
                if (m_bDqHistDayCtr[lOccurs]) return true;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
                if (m_bDqHistCycCtr[lOccurs]) return true;
            if (m_bDqTotDaysPdue) return true;
            if (m_bDqTotCycPdue) return true;
            if (m_bDqNumPmtsPdue) return true;
            if (m_bDqTotAmtPdue) return true;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
                if (m_bDqDayBndy[lOccurs]) return true;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
                if (m_bDqCycBndy[lOccurs]) return true;
            if (m_bAcOrigRate) return true;
            if (m_bBaOrigCmAmt) return true;
            if (m_bBaCurrCmAmt) return true;
            if (m_bBaAvailBal) return true;
            if (m_bBaUsedBal) return true;
            if (m_bBaOutBal) return true;
            if (m_bBaOvrlnBal) return true;
            if (m_bBaUncolBal) return true;
            if (m_bBaHoldBal) return true;
            if (m_bCoDesc1) return true;
            if (m_bCoItemNo) return true;
            if (m_bCoRecCd) return true;
            if (m_bEcAccrYtdInt) return true;
            if (m_bEcAccrPrevYrInt) return true;
            if (m_bSdCurrInterestBal) return true;
            if (m_bSdLateChargesBal) return true;
            if (m_bSdOtherFeesBal) return true;
            if (m_bSdHomePhone) return true;
            if (m_bSdWorkPhone) return true;
            if (m_bCfRegionCd) return true;
            if (m_bProcessThruDate) return true;
            if (m_bPcCurrThruDate) return true;
            if (m_bPcPrevThruDate) return true;
            if (m_bPcNxtThruDate) return true;
            if (m_bInAba) return true;
            if (m_bCfRelType) return true;
            if (m_bPdDesc) return true;
            if (m_bRtLegalStat) return true;
            if (m_bAcType) return true;
            if (m_bAcCd) return true;
            if (m_bCfShortName) return true;
            if (m_bCfTaxIdPrfx) return true;
            if (m_bCfTaxIdSufx) return true;
            if (m_bCfCrScore) return true;
            if (m_bCfBirthDate) return true;
            if (m_bCfRace) return true;
            if (m_bCfPersCmclCd) return true;
            if (m_bCfTaxIdValid) return true;
            if (m_bCfPrimBr) return true;
            if (m_bCfOfficerEmpCd) return true;
            if (m_bCfSex) return true;
            if (m_bCfMaritStat) return true;
            if (m_bCfFrgnAddrInd) return true;
            if (m_bCfTaxIdName) return true;
            if (m_bCfTaxIdNameCtl) return true;
            if (m_bCfSkipTraceCd) return true;
            if (m_bCfFrstSlDisbDate) return true;
            if (m_bCfInsEligCd) return true;
            if (m_bCfAddrNum) return true;
            if (m_bShareCustInfoCd) return true;
            if (m_bShareInfoMaintDt) return true;
            if (m_bUserCharField1) return true;
            if (m_bUserCharField2) return true;
            if (m_bUserCharField3) return true;
            if (m_bUserNumField1) return true;
            if (m_bUserNumField2) return true;
            if (m_bUserNumField3) return true;
            if (m_bFill0) return true;
            if (m_bFill1) return true;
            if (m_bDeathCode) return true;
            if (m_bDeathCodeDesc) return true;
            if (m_bLegalStatusDesc) return true;
            if (m_bNextAccrualDate) return true;
            if (m_bMsgCode) return true;
            if (m_bMsgCodeDesc) return true;
            if (m_bRtProcStatDesc) return true;
            if (m_bRtClassCodeDesc) return true;
            if (m_bRtAccrualStatDesc) return true;
            if (m_bTdrStatus) return true;
            if (m_bTdrDesc) return true;
            if (m_bNplStatus) return true;
            if (m_bNplDesc) return true;
            if (m_bLoanClassCode) return true;
            if (m_bLoanClassDesc) return true;
            if (m_bPenaltyDate) return true;
            if (m_bSkipGroupCode) return true;
            if (m_bSkipGroupDesc) return true;
            if (m_bRtCollCodeDesc) return true;
            if (m_bAi1) return true;
            if (m_bAi2) return true;
            if (m_bAi3) return true;
            if (m_bTotalInterest) return true;
            if (m_bPenaltyRate) return true;
            if (m_bFee) return true;
            if (m_bGroupCode1) return true;
            if (m_bGroupCode2) return true;
            if (m_bDqIntPdueDays) return true;
            if (m_bDqIntPdueDate) return true;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                if(CCfLineInfo[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDAMMSIO", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RtCtl1", m_szRtCtl1, &m_bRtCtl1);
                AddXMLField(pSess, "RtCtl2", m_szRtCtl2, &m_bRtCtl2);
                AddXMLField(pSess, "RtCtl3", m_szRtCtl3, &m_bRtCtl3);
                AddXMLField(pSess, "RtCtl4", m_szRtCtl4, &m_bRtCtl4);
                AddXMLField(pSess, "RtAcctNum", m_szRtAcctNum, &m_bRtAcctNum);
                AddXMLField(pSess, "CfCtl1", m_szCfCtl1, &m_bCfCtl1);
                AddXMLField(pSess, "CfCtl2", m_szCfCtl2, &m_bCfCtl2);
                AddXMLField(pSess, "CfCtl3", m_szCfCtl3, &m_bCfCtl3);
                AddXMLField(pSess, "CfCtl4", m_szCfCtl4, &m_bCfCtl4);
                AddXMLField(pSess, "CfCustNum", m_szCfCustNum, &m_bCfCustNum);
                AddXMLField(pSess, "RtEditedAcctNum", m_szRtEditedAcctNum, &m_bRtEditedAcctNum);
                AddXMLField(pSess, "RtAcctStat", m_szRtAcctStat, &m_bRtAcctStat);
                AddXMLField(pSess, "RtLoanRate", m_szRtLoanRate, &m_bRtLoanRate);
                AddXMLField(pSess, "RtIntType", m_szRtIntType, &m_bRtIntType);
                AddXMLField(pSess, "RtPoffDlyAmt", m_szRtPoffDlyAmt, &m_bRtPoffDlyAmt);
                AddXMLField(pSess, "RtCurrMaturDate", m_szRtCurrMaturDate, &m_bRtCurrMaturDate);
                AddXMLField(pSess, "RtNxtDueDate", m_szRtNxtDueDate, &m_bRtNxtDueDate);
                AddXMLField(pSess, "RtCurrDueAmt", m_szRtCurrDueAmt, &m_bRtCurrDueAmt);
                AddXMLField(pSess, "RtLstPmtDate", m_szRtLstPmtDate, &m_bRtLstPmtDate);
                AddXMLField(pSess, "RtLstPmtAmt", m_szRtLstPmtAmt, &m_bRtLstPmtAmt);
                AddXMLField(pSess, "RtOldstDueDate", m_szRtOldstDueDate, &m_bRtOldstDueDate);
                AddXMLField(pSess, "RtCollCd", m_szRtCollCd, &m_bRtCollCd);
                AddXMLField(pSess, "RtAcctProd", m_szRtAcctProd, &m_bRtAcctProd);
                AddXMLField(pSess, "RtAcctType", m_szRtAcctType, &m_bRtAcctType);
                AddXMLField(pSess, "RtProcType", m_szRtProcType, &m_bRtProcType);
                AddXMLField(pSess, "RtAccrStat", m_szRtAccrStat, &m_bRtAccrStat);
                AddXMLField(pSess, "RtProcStat", m_szRtProcStat, &m_bRtProcStat);
                AddXMLField(pSess, "RtStopPayInd", m_szRtStopPayInd, &m_bRtStopPayInd);
                AddXMLField(pSess, "RtOrigTerm", m_szRtOrigTerm, &m_bRtOrigTerm);
                AddXMLField(pSess, "RtCurrTerm", m_szRtCurrTerm, &m_bRtCurrTerm);
                AddXMLField(pSess, "RtKoStatCd", m_szRtKoStatCd, &m_bRtKoStatCd);
                AddXMLField(pSess, "RtTotPrin", m_szRtTotPrin, &m_bRtTotPrin);
                AddXMLField(pSess, "RtTotIntRec", m_szRtTotIntRec, &m_bRtTotIntRec);
                AddXMLField(pSess, "RtTotIntReb", m_szRtTotIntReb, &m_bRtTotIntReb);
                AddXMLField(pSess, "RtTotIdrRec", m_szRtTotIdrRec, &m_bRtTotIdrRec);
                AddXMLField(pSess, "RtTotIdrReb", m_szRtTotIdrReb, &m_bRtTotIdrReb);
                AddXMLField(pSess, "RtTotSbdyInt", m_szRtTotSbdyInt, &m_bRtTotSbdyInt);
                AddXMLField(pSess, "RtTotCostOfFunds", m_szRtTotCostOfFunds, &m_bRtTotCostOfFunds);
                AddXMLField(pSess, "RtTotInsIntRec", m_szRtTotInsIntRec, &m_bRtTotInsIntRec);
                AddXMLField(pSess, "RtTotInsIntReb", m_szRtTotInsIntReb, &m_bRtTotInsIntReb);
                AddXMLField(pSess, "RtTotAccrIns", m_szRtTotAccrIns, &m_bRtTotAccrIns);
                AddXMLField(pSess, "RtTotInsReb", m_szRtTotInsReb, &m_bRtTotInsReb);
                AddXMLField(pSess, "RtTotAssdLtChrg", m_szRtTotAssdLtChrg, &m_bRtTotAssdLtChrg);
                AddXMLField(pSess, "RtTotAccrLtChrg", m_szRtTotAccrLtChrg, &m_bRtTotAccrLtChrg);
                AddXMLField(pSess, "RtTotLtAccrBal", m_szRtTotLtAccrBal, &m_bRtTotLtAccrBal);
                AddXMLField(pSess, "RtTotAccrFeeRec", m_szRtTotAccrFeeRec, &m_bRtTotAccrFeeRec);
                AddXMLField(pSess, "RtTotAssdFeeRec", m_szRtTotAssdFeeRec, &m_bRtTotAssdFeeRec);
                AddXMLField(pSess, "RtTotFeeReb", m_szRtTotFeeReb, &m_bRtTotFeeReb);
                AddXMLField(pSess, "RtTotCmBal", m_szRtTotCmBal, &m_bRtTotCmBal);
                AddXMLField(pSess, "RtTotCoffAmt", m_szRtTotCoffAmt, &m_bRtTotCoffAmt);
                AddXMLField(pSess, "RtRateChgNtcType", m_szRtRateChgNtcType, &m_bRtRateChgNtcType);
                AddXMLField(pSess, "CfPrimOfficer", m_szCfPrimOfficer, &m_bCfPrimOfficer);
                AddXMLField(pSess, "RtNxtCoupDate", m_szRtNxtCoupDate, &m_bRtNxtCoupDate);
                AddXMLField(pSess, "RtOrigMaturDate", m_szRtOrigMaturDate, &m_bRtOrigMaturDate);
                AddXMLField(pSess, "RtOrigProcdAmt", m_szRtOrigProcdAmt, &m_bRtOrigProcdAmt);
                AddXMLField(pSess, "RtOrigLoanAmt", m_szRtOrigLoanAmt, &m_bRtOrigLoanAmt);
                AddXMLField(pSess, "RtAcctEffDate", m_szRtAcctEffDate, &m_bRtAcctEffDate);
                AddXMLField(pSess, "RtNxtAutoDrDate", m_szRtNxtAutoDrDate, &m_bRtNxtAutoDrDate);
                AddXMLField(pSess, "RtPoffAmt", m_szRtPoffAmt, &m_bRtPoffAmt);
                AddXMLField(pSess, "RtTotAccrCoffAmt", m_szRtTotAccrCoffAmt, &m_bRtTotAccrCoffAmt);
                AddXMLField(pSess, "RtClassCd", m_szRtClassCd, &m_bRtClassCd);
                AddXMLField(pSess, "RtEconAccrInd", m_szRtEconAccrInd, &m_bRtEconAccrInd);
                AddXMLField(pSess, "RtYtdInt", m_szRtYtdInt, &m_bRtYtdInt);
                AddXMLField(pSess, "RtPrevYrInt", m_szRtPrevYrInt, &m_bRtPrevYrInt);
                AddXMLField(pSess, "RtActlPmtsRem", m_szRtActlPmtsRem, &m_bRtActlPmtsRem);
                AddXMLField(pSess, "RtCurrency", m_szRtCurrency, &m_bRtCurrency);
                AddXMLField(pSess, "RtCurrencyDec", m_szRtCurrencyDec, &m_bRtCurrencyDec);
                AddXMLField(pSess, "CfNumLines", m_szCfNumLines, &m_bCfNumLines);
                AddXMLField(pSess, "CfCntry", m_szCfCntry, &m_bCfCntry);
                AddXMLField(pSess, "CfHostCntryInd", m_szCfHostCntryInd, &m_bCfHostCntryInd);
                AddXMLField(pSess, "CfTaxIdNum", m_szCfTaxIdNum, &m_bCfTaxIdNum);
                AddXMLField(pSess, "CfLangCd", m_szCfLangCd, &m_bCfLangCd);
                AddXMLField(pSess, "CfLangGroup", m_szCfLangGroup, &m_bCfLangGroup);
                AddXMLField(pSess, "BdMeth", m_szBdMeth, &m_bBdMeth);
                AddXMLField(pSess, "BdBillType", m_szBdBillType, &m_bBdBillType);
                AddXMLField(pSess, "BdNxtDueDate", m_szBdNxtDueDate, &m_bBdNxtDueDate);
                AddXMLField(pSess, "BdPrevDueDate", m_szBdPrevDueDate, &m_bBdPrevDueDate);
                AddXMLField(pSess, "BdOrigNumPmts", m_szBdOrigNumPmts, &m_bBdOrigNumPmts);
                AddXMLField(pSess, "BdOrigBillAmt", m_szBdOrigBillAmt, &m_bBdOrigBillAmt);
                AddXMLField(pSess, "BdNumPmtsRem", m_szBdNumPmtsRem, &m_bBdNumPmtsRem);
                AddXMLField(pSess, "BdNxtBillDate", m_szBdNxtBillDate, &m_bBdNxtBillDate);
                AddXMLField(pSess, "BdNumCoup", m_szBdNumCoup, &m_bBdNumCoup);
                AddXMLField(pSess, "BdCoupThruDate", m_szBdCoupThruDate, &m_bBdCoupThruDate);
                AddXMLField(pSess, "BdCoupStartDate", m_szBdCoupStartDate, &m_bBdCoupStartDate);
                AddXMLField(pSess, "BdNxtThruDate", m_szBdNxtThruDate, &m_bBdNxtThruDate);
                AddXMLField(pSess, "BdNxtStartDate", m_szBdNxtStartDate, &m_bBdNxtStartDate);
                AddXMLField(pSess, "BdAutoMeth", m_szBdAutoMeth, &m_bBdAutoMeth);
                AddXMLField(pSess, "BdAutoDays", m_szBdAutoDays, &m_bBdAutoDays);
                AddXMLField(pSess, "BlStopDate", m_szBlStopDate, &m_bBlStopDate);
                AddXMLField(pSess, "BlStartDate", m_szBlStartDate, &m_bBlStartDate);
                AddXMLField(pSess, "BlFrstDueDate", m_szBlFrstDueDate, &m_bBlFrstDueDate);
                AddXMLField(pSess, "BlFreq", m_szBlFreq, &m_bBlFreq);
                AddXMLField(pSess, "BlIncr", m_szBlIncr, &m_bBlIncr);
                AddXMLField(pSess, "BlDay", m_szBlDay, &m_bBlDay);
                AddXMLField(pSess, "BlPmtMeth", m_szBlPmtMeth, &m_bBlPmtMeth);
                AddXMLField(pSess, "BlNumPmts", m_szBlNumPmts, &m_bBlNumPmts);
                AddXMLField(pSess, "BlFlatAmt", m_szBlFlatAmt, &m_bBlFlatAmt);
                AddXMLField(pSess, "AfSeqNum", m_szAfSeqNum, &m_bAfSeqNum);
                AddXMLField(pSess, "AfCtls", m_szAfCtls, &m_bAfCtls);
                AddXMLField(pSess, "AfAcct", m_szAfAcct, &m_bAfAcct);
                AddXMLField(pSess, "AfSys", m_szAfSys, &m_bAfSys);
                AddXMLField(pSess, "AfAutoAba", m_szAfAutoAba, &m_bAfAutoAba);
                AddXMLField(pSess, "AfAcInd", m_szAfAcInd, &m_bAfAcInd);
                AddXMLField(pSess, "AfAdInd", m_szAfAdInd, &m_bAfAdInd);
                AddXMLField(pSess, "AfMatAdInd", m_szAfMatAdInd, &m_bAfMatAdInd);
                AddXMLField(pSess, "AfCompBalInd", m_szAfCompBalInd, &m_bAfCompBalInd);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    AddXMLField(pSess, "DqHistDayCtr", m_szDqHistDayCtr[lOccurs], &m_bDqHistDayCtr[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    AddXMLField(pSess, "DqHistCycCtr", m_szDqHistCycCtr[lOccurs], &m_bDqHistCycCtr[lOccurs], lOccurs);
                AddXMLField(pSess, "DqTotDaysPdue", m_szDqTotDaysPdue, &m_bDqTotDaysPdue);
                AddXMLField(pSess, "DqTotCycPdue", m_szDqTotCycPdue, &m_bDqTotCycPdue);
                AddXMLField(pSess, "DqNumPmtsPdue", m_szDqNumPmtsPdue, &m_bDqNumPmtsPdue);
                AddXMLField(pSess, "DqTotAmtPdue", m_szDqTotAmtPdue, &m_bDqTotAmtPdue);
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    AddXMLField(pSess, "DqDayBndy", m_szDqDayBndy[lOccurs], &m_bDqDayBndy[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    AddXMLField(pSess, "DqCycBndy", m_szDqCycBndy[lOccurs], &m_bDqCycBndy[lOccurs], lOccurs);
                AddXMLField(pSess, "AcOrigRate", m_szAcOrigRate, &m_bAcOrigRate);
                AddXMLField(pSess, "BaOrigCmAmt", m_szBaOrigCmAmt, &m_bBaOrigCmAmt);
                AddXMLField(pSess, "BaCurrCmAmt", m_szBaCurrCmAmt, &m_bBaCurrCmAmt);
                AddXMLField(pSess, "BaAvailBal", m_szBaAvailBal, &m_bBaAvailBal);
                AddXMLField(pSess, "BaUsedBal", m_szBaUsedBal, &m_bBaUsedBal);
                AddXMLField(pSess, "BaOutBal", m_szBaOutBal, &m_bBaOutBal);
                AddXMLField(pSess, "BaOvrlnBal", m_szBaOvrlnBal, &m_bBaOvrlnBal);
                AddXMLField(pSess, "BaUncolBal", m_szBaUncolBal, &m_bBaUncolBal);
                AddXMLField(pSess, "BaHoldBal", m_szBaHoldBal, &m_bBaHoldBal);
                AddXMLField(pSess, "CoDesc1", m_szCoDesc1, &m_bCoDesc1);
                AddXMLField(pSess, "CoItemNo", m_szCoItemNo, &m_bCoItemNo);
                AddXMLField(pSess, "CoRecCd", m_szCoRecCd, &m_bCoRecCd);
                AddXMLField(pSess, "EcAccrYtdInt", m_szEcAccrYtdInt, &m_bEcAccrYtdInt);
                AddXMLField(pSess, "EcAccrPrevYrInt", m_szEcAccrPrevYrInt, &m_bEcAccrPrevYrInt);
                AddXMLField(pSess, "SdCurrInterestBal", m_szSdCurrInterestBal, &m_bSdCurrInterestBal);
                AddXMLField(pSess, "SdLateChargesBal", m_szSdLateChargesBal, &m_bSdLateChargesBal);
                AddXMLField(pSess, "SdOtherFeesBal", m_szSdOtherFeesBal, &m_bSdOtherFeesBal);
                AddXMLField(pSess, "SdHomePhone", m_szSdHomePhone, &m_bSdHomePhone);
                AddXMLField(pSess, "SdWorkPhone", m_szSdWorkPhone, &m_bSdWorkPhone);
                AddXMLField(pSess, "CfRegionCd", m_szCfRegionCd, &m_bCfRegionCd);
                AddXMLField(pSess, "ProcessThruDate", m_szProcessThruDate, &m_bProcessThruDate);
                AddXMLField(pSess, "PcCurrThruDate", m_szPcCurrThruDate, &m_bPcCurrThruDate);
                AddXMLField(pSess, "PcPrevThruDate", m_szPcPrevThruDate, &m_bPcPrevThruDate);
                AddXMLField(pSess, "PcNxtThruDate", m_szPcNxtThruDate, &m_bPcNxtThruDate);
                AddXMLField(pSess, "InAba", m_szInAba, &m_bInAba);
                AddXMLField(pSess, "CfRelType", m_szCfRelType, &m_bCfRelType);
                AddXMLField(pSess, "PdDesc", m_szPdDesc, &m_bPdDesc);
                AddXMLField(pSess, "RtLegalStat", m_szRtLegalStat, &m_bRtLegalStat);
                AddXMLField(pSess, "AcType", m_szAcType, &m_bAcType);
                AddXMLField(pSess, "AcCd", m_szAcCd, &m_bAcCd);
                AddXMLField(pSess, "CfShortName", m_szCfShortName, &m_bCfShortName);
                AddXMLField(pSess, "CfTaxIdPrfx", m_szCfTaxIdPrfx, &m_bCfTaxIdPrfx);
                AddXMLField(pSess, "CfTaxIdSufx", m_szCfTaxIdSufx, &m_bCfTaxIdSufx);
                AddXMLField(pSess, "CfCrScore", m_szCfCrScore, &m_bCfCrScore);
                AddXMLField(pSess, "CfBirthDate", m_szCfBirthDate, &m_bCfBirthDate);
                AddXMLField(pSess, "CfRace", m_szCfRace, &m_bCfRace);
                AddXMLField(pSess, "CfPersCmclCd", m_szCfPersCmclCd, &m_bCfPersCmclCd);
                AddXMLField(pSess, "CfTaxIdValid", m_szCfTaxIdValid, &m_bCfTaxIdValid);
                AddXMLField(pSess, "CfPrimBr", m_szCfPrimBr, &m_bCfPrimBr);
                AddXMLField(pSess, "CfOfficerEmpCd", m_szCfOfficerEmpCd, &m_bCfOfficerEmpCd);
                AddXMLField(pSess, "CfSex", m_szCfSex, &m_bCfSex);
                AddXMLField(pSess, "CfMaritStat", m_szCfMaritStat, &m_bCfMaritStat);
                AddXMLField(pSess, "CfFrgnAddrInd", m_szCfFrgnAddrInd, &m_bCfFrgnAddrInd);
                AddXMLField(pSess, "CfTaxIdName", m_szCfTaxIdName, &m_bCfTaxIdName);
                AddXMLField(pSess, "CfTaxIdNameCtl", m_szCfTaxIdNameCtl, &m_bCfTaxIdNameCtl);
                AddXMLField(pSess, "CfSkipTraceCd", m_szCfSkipTraceCd, &m_bCfSkipTraceCd);
                AddXMLField(pSess, "CfFrstSlDisbDate", m_szCfFrstSlDisbDate, &m_bCfFrstSlDisbDate);
                AddXMLField(pSess, "CfInsEligCd", m_szCfInsEligCd, &m_bCfInsEligCd);
                AddXMLField(pSess, "CfAddrNum", m_szCfAddrNum, &m_bCfAddrNum);
                AddXMLField(pSess, "ShareCustInfoCd", m_szShareCustInfoCd, &m_bShareCustInfoCd);
                AddXMLField(pSess, "ShareInfoMaintDt", m_szShareInfoMaintDt, &m_bShareInfoMaintDt);
                AddXMLField(pSess, "UserCharField1", m_szUserCharField1, &m_bUserCharField1);
                AddXMLField(pSess, "UserCharField2", m_szUserCharField2, &m_bUserCharField2);
                AddXMLField(pSess, "UserCharField3", m_szUserCharField3, &m_bUserCharField3);
                AddXMLField(pSess, "UserNumField1", m_szUserNumField1, &m_bUserNumField1);
                AddXMLField(pSess, "UserNumField2", m_szUserNumField2, &m_bUserNumField2);
                AddXMLField(pSess, "UserNumField3", m_szUserNumField3, &m_bUserNumField3);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                AddXMLField(pSess, "DeathCode", m_szDeathCode, &m_bDeathCode);
                AddXMLField(pSess, "DeathCodeDesc", m_szDeathCodeDesc, &m_bDeathCodeDesc);
                AddXMLField(pSess, "LegalStatusDesc", m_szLegalStatusDesc, &m_bLegalStatusDesc);
                AddXMLField(pSess, "NextAccrualDate", m_szNextAccrualDate, &m_bNextAccrualDate);
                AddXMLField(pSess, "MsgCode", m_szMsgCode, &m_bMsgCode);
                AddXMLField(pSess, "MsgCodeDesc", m_szMsgCodeDesc, &m_bMsgCodeDesc);
                AddXMLField(pSess, "RtProcStatDesc", m_szRtProcStatDesc, &m_bRtProcStatDesc);
                AddXMLField(pSess, "RtClassCodeDesc", m_szRtClassCodeDesc, &m_bRtClassCodeDesc);
                AddXMLField(pSess, "RtAccrualStatDesc", m_szRtAccrualStatDesc, &m_bRtAccrualStatDesc);
                AddXMLField(pSess, "TdrStatus", m_szTdrStatus, &m_bTdrStatus);
                AddXMLField(pSess, "TdrDesc", m_szTdrDesc, &m_bTdrDesc);
                AddXMLField(pSess, "NplStatus", m_szNplStatus, &m_bNplStatus);
                AddXMLField(pSess, "NplDesc", m_szNplDesc, &m_bNplDesc);
                AddXMLField(pSess, "LoanClassCode", m_szLoanClassCode, &m_bLoanClassCode);
                AddXMLField(pSess, "LoanClassDesc", m_szLoanClassDesc, &m_bLoanClassDesc);
                AddXMLField(pSess, "PenaltyDate", m_szPenaltyDate, &m_bPenaltyDate);
                AddXMLField(pSess, "SkipGroupCode", m_szSkipGroupCode, &m_bSkipGroupCode);
                AddXMLField(pSess, "SkipGroupDesc", m_szSkipGroupDesc, &m_bSkipGroupDesc);
                AddXMLField(pSess, "RtCollCodeDesc", m_szRtCollCodeDesc, &m_bRtCollCodeDesc);
                AddXMLField(pSess, "Ai1", m_szAi1, &m_bAi1);
                AddXMLField(pSess, "Ai2", m_szAi2, &m_bAi2);
                AddXMLField(pSess, "Ai3", m_szAi3, &m_bAi3);
                AddXMLField(pSess, "TotalInterest", m_szTotalInterest, &m_bTotalInterest);
                AddXMLField(pSess, "PenaltyRate", m_szPenaltyRate, &m_bPenaltyRate);
                AddXMLField(pSess, "Fee", m_szFee, &m_bFee);
                AddXMLField(pSess, "GroupCode1", m_szGroupCode1, &m_bGroupCode1);
                AddXMLField(pSess, "GroupCode2", m_szGroupCode2, &m_bGroupCode2);
                AddXMLField(pSess, "DqIntPdueDays", m_szDqIntPdueDays, &m_bDqIntPdueDays);
                AddXMLField(pSess, "DqIntPdueDate", m_szDqIntPdueDate, &m_bDqIntPdueDate);
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                {
                    CCfLineInfo[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDAMMSIO");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDAMMSIO", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RtCtl1", m_szRtCtl1);
                GetXMLField(pSess, "RtCtl2", m_szRtCtl2);
                GetXMLField(pSess, "RtCtl3", m_szRtCtl3);
                GetXMLField(pSess, "RtCtl4", m_szRtCtl4);
                GetXMLField(pSess, "RtAcctNum", m_szRtAcctNum);
                GetXMLField(pSess, "CfCtl1", m_szCfCtl1);
                GetXMLField(pSess, "CfCtl2", m_szCfCtl2);
                GetXMLField(pSess, "CfCtl3", m_szCfCtl3);
                GetXMLField(pSess, "CfCtl4", m_szCfCtl4);
                GetXMLField(pSess, "CfCustNum", m_szCfCustNum);
                GetXMLField(pSess, "RtEditedAcctNum", m_szRtEditedAcctNum);
                GetXMLField(pSess, "RtAcctStat", m_szRtAcctStat);
                GetXMLField(pSess, "RtLoanRate", m_szRtLoanRate);
                GetXMLField(pSess, "RtIntType", m_szRtIntType);
                GetXMLField(pSess, "RtPoffDlyAmt", m_szRtPoffDlyAmt);
                GetXMLField(pSess, "RtCurrMaturDate", m_szRtCurrMaturDate);
                GetXMLField(pSess, "RtNxtDueDate", m_szRtNxtDueDate);
                GetXMLField(pSess, "RtCurrDueAmt", m_szRtCurrDueAmt);
                GetXMLField(pSess, "RtLstPmtDate", m_szRtLstPmtDate);
                GetXMLField(pSess, "RtLstPmtAmt", m_szRtLstPmtAmt);
                GetXMLField(pSess, "RtOldstDueDate", m_szRtOldstDueDate);
                GetXMLField(pSess, "RtCollCd", m_szRtCollCd);
                GetXMLField(pSess, "RtAcctProd", m_szRtAcctProd);
                GetXMLField(pSess, "RtAcctType", m_szRtAcctType);
                GetXMLField(pSess, "RtProcType", m_szRtProcType);
                GetXMLField(pSess, "RtAccrStat", m_szRtAccrStat);
                GetXMLField(pSess, "RtProcStat", m_szRtProcStat);
                GetXMLField(pSess, "RtStopPayInd", m_szRtStopPayInd);
                GetXMLField(pSess, "RtOrigTerm", m_szRtOrigTerm);
                GetXMLField(pSess, "RtCurrTerm", m_szRtCurrTerm);
                GetXMLField(pSess, "RtKoStatCd", m_szRtKoStatCd);
                GetXMLField(pSess, "RtTotPrin", m_szRtTotPrin);
                GetXMLField(pSess, "RtTotIntRec", m_szRtTotIntRec);
                GetXMLField(pSess, "RtTotIntReb", m_szRtTotIntReb);
                GetXMLField(pSess, "RtTotIdrRec", m_szRtTotIdrRec);
                GetXMLField(pSess, "RtTotIdrReb", m_szRtTotIdrReb);
                GetXMLField(pSess, "RtTotSbdyInt", m_szRtTotSbdyInt);
                GetXMLField(pSess, "RtTotCostOfFunds", m_szRtTotCostOfFunds);
                GetXMLField(pSess, "RtTotInsIntRec", m_szRtTotInsIntRec);
                GetXMLField(pSess, "RtTotInsIntReb", m_szRtTotInsIntReb);
                GetXMLField(pSess, "RtTotAccrIns", m_szRtTotAccrIns);
                GetXMLField(pSess, "RtTotInsReb", m_szRtTotInsReb);
                GetXMLField(pSess, "RtTotAssdLtChrg", m_szRtTotAssdLtChrg);
                GetXMLField(pSess, "RtTotAccrLtChrg", m_szRtTotAccrLtChrg);
                GetXMLField(pSess, "RtTotLtAccrBal", m_szRtTotLtAccrBal);
                GetXMLField(pSess, "RtTotAccrFeeRec", m_szRtTotAccrFeeRec);
                GetXMLField(pSess, "RtTotAssdFeeRec", m_szRtTotAssdFeeRec);
                GetXMLField(pSess, "RtTotFeeReb", m_szRtTotFeeReb);
                GetXMLField(pSess, "RtTotCmBal", m_szRtTotCmBal);
                GetXMLField(pSess, "RtTotCoffAmt", m_szRtTotCoffAmt);
                GetXMLField(pSess, "RtRateChgNtcType", m_szRtRateChgNtcType);
                GetXMLField(pSess, "CfPrimOfficer", m_szCfPrimOfficer);
                GetXMLField(pSess, "RtNxtCoupDate", m_szRtNxtCoupDate);
                GetXMLField(pSess, "RtOrigMaturDate", m_szRtOrigMaturDate);
                GetXMLField(pSess, "RtOrigProcdAmt", m_szRtOrigProcdAmt);
                GetXMLField(pSess, "RtOrigLoanAmt", m_szRtOrigLoanAmt);
                GetXMLField(pSess, "RtAcctEffDate", m_szRtAcctEffDate);
                GetXMLField(pSess, "RtNxtAutoDrDate", m_szRtNxtAutoDrDate);
                GetXMLField(pSess, "RtPoffAmt", m_szRtPoffAmt);
                GetXMLField(pSess, "RtTotAccrCoffAmt", m_szRtTotAccrCoffAmt);
                GetXMLField(pSess, "RtClassCd", m_szRtClassCd);
                GetXMLField(pSess, "RtEconAccrInd", m_szRtEconAccrInd);
                GetXMLField(pSess, "RtYtdInt", m_szRtYtdInt);
                GetXMLField(pSess, "RtPrevYrInt", m_szRtPrevYrInt);
                GetXMLField(pSess, "RtActlPmtsRem", m_szRtActlPmtsRem);
                GetXMLField(pSess, "RtCurrency", m_szRtCurrency);
                GetXMLField(pSess, "RtCurrencyDec", m_szRtCurrencyDec);
                GetXMLField(pSess, "CfNumLines", m_szCfNumLines);
                GetXMLField(pSess, "CfCntry", m_szCfCntry);
                GetXMLField(pSess, "CfHostCntryInd", m_szCfHostCntryInd);
                GetXMLField(pSess, "CfTaxIdNum", m_szCfTaxIdNum);
                GetXMLField(pSess, "CfLangCd", m_szCfLangCd);
                GetXMLField(pSess, "CfLangGroup", m_szCfLangGroup);
                GetXMLField(pSess, "BdMeth", m_szBdMeth);
                GetXMLField(pSess, "BdBillType", m_szBdBillType);
                GetXMLField(pSess, "BdNxtDueDate", m_szBdNxtDueDate);
                GetXMLField(pSess, "BdPrevDueDate", m_szBdPrevDueDate);
                GetXMLField(pSess, "BdOrigNumPmts", m_szBdOrigNumPmts);
                GetXMLField(pSess, "BdOrigBillAmt", m_szBdOrigBillAmt);
                GetXMLField(pSess, "BdNumPmtsRem", m_szBdNumPmtsRem);
                GetXMLField(pSess, "BdNxtBillDate", m_szBdNxtBillDate);
                GetXMLField(pSess, "BdNumCoup", m_szBdNumCoup);
                GetXMLField(pSess, "BdCoupThruDate", m_szBdCoupThruDate);
                GetXMLField(pSess, "BdCoupStartDate", m_szBdCoupStartDate);
                GetXMLField(pSess, "BdNxtThruDate", m_szBdNxtThruDate);
                GetXMLField(pSess, "BdNxtStartDate", m_szBdNxtStartDate);
                GetXMLField(pSess, "BdAutoMeth", m_szBdAutoMeth);
                GetXMLField(pSess, "BdAutoDays", m_szBdAutoDays);
                GetXMLField(pSess, "BlStopDate", m_szBlStopDate);
                GetXMLField(pSess, "BlStartDate", m_szBlStartDate);
                GetXMLField(pSess, "BlFrstDueDate", m_szBlFrstDueDate);
                GetXMLField(pSess, "BlFreq", m_szBlFreq);
                GetXMLField(pSess, "BlIncr", m_szBlIncr);
                GetXMLField(pSess, "BlDay", m_szBlDay);
                GetXMLField(pSess, "BlPmtMeth", m_szBlPmtMeth);
                GetXMLField(pSess, "BlNumPmts", m_szBlNumPmts);
                GetXMLField(pSess, "BlFlatAmt", m_szBlFlatAmt);
                GetXMLField(pSess, "AfSeqNum", m_szAfSeqNum);
                GetXMLField(pSess, "AfCtls", m_szAfCtls);
                GetXMLField(pSess, "AfAcct", m_szAfAcct);
                GetXMLField(pSess, "AfSys", m_szAfSys);
                GetXMLField(pSess, "AfAutoAba", m_szAfAutoAba);
                GetXMLField(pSess, "AfAcInd", m_szAfAcInd);
                GetXMLField(pSess, "AfAdInd", m_szAfAdInd);
                GetXMLField(pSess, "AfMatAdInd", m_szAfMatAdInd);
                GetXMLField(pSess, "AfCompBalInd", m_szAfCompBalInd);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    GetXMLField(pSess, "DqHistDayCtr", m_szDqHistDayCtr[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    GetXMLField(pSess, "DqHistCycCtr", m_szDqHistCycCtr[lOccurs], lOccurs);
                GetXMLField(pSess, "DqTotDaysPdue", m_szDqTotDaysPdue);
                GetXMLField(pSess, "DqTotCycPdue", m_szDqTotCycPdue);
                GetXMLField(pSess, "DqNumPmtsPdue", m_szDqNumPmtsPdue);
                GetXMLField(pSess, "DqTotAmtPdue", m_szDqTotAmtPdue);
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    GetXMLField(pSess, "DqDayBndy", m_szDqDayBndy[lOccurs], lOccurs);
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                    GetXMLField(pSess, "DqCycBndy", m_szDqCycBndy[lOccurs], lOccurs);
                GetXMLField(pSess, "AcOrigRate", m_szAcOrigRate);
                GetXMLField(pSess, "BaOrigCmAmt", m_szBaOrigCmAmt);
                GetXMLField(pSess, "BaCurrCmAmt", m_szBaCurrCmAmt);
                GetXMLField(pSess, "BaAvailBal", m_szBaAvailBal);
                GetXMLField(pSess, "BaUsedBal", m_szBaUsedBal);
                GetXMLField(pSess, "BaOutBal", m_szBaOutBal);
                GetXMLField(pSess, "BaOvrlnBal", m_szBaOvrlnBal);
                GetXMLField(pSess, "BaUncolBal", m_szBaUncolBal);
                GetXMLField(pSess, "BaHoldBal", m_szBaHoldBal);
                GetXMLField(pSess, "CoDesc1", m_szCoDesc1);
                GetXMLField(pSess, "CoItemNo", m_szCoItemNo);
                GetXMLField(pSess, "CoRecCd", m_szCoRecCd);
                GetXMLField(pSess, "EcAccrYtdInt", m_szEcAccrYtdInt);
                GetXMLField(pSess, "EcAccrPrevYrInt", m_szEcAccrPrevYrInt);
                GetXMLField(pSess, "SdCurrInterestBal", m_szSdCurrInterestBal);
                GetXMLField(pSess, "SdLateChargesBal", m_szSdLateChargesBal);
                GetXMLField(pSess, "SdOtherFeesBal", m_szSdOtherFeesBal);
                GetXMLField(pSess, "SdHomePhone", m_szSdHomePhone);
                GetXMLField(pSess, "SdWorkPhone", m_szSdWorkPhone);
                GetXMLField(pSess, "CfRegionCd", m_szCfRegionCd);
                GetXMLField(pSess, "ProcessThruDate", m_szProcessThruDate);
                GetXMLField(pSess, "PcCurrThruDate", m_szPcCurrThruDate);
                GetXMLField(pSess, "PcPrevThruDate", m_szPcPrevThruDate);
                GetXMLField(pSess, "PcNxtThruDate", m_szPcNxtThruDate);
                GetXMLField(pSess, "InAba", m_szInAba);
                GetXMLField(pSess, "CfRelType", m_szCfRelType);
                GetXMLField(pSess, "PdDesc", m_szPdDesc);
                GetXMLField(pSess, "RtLegalStat", m_szRtLegalStat);
                GetXMLField(pSess, "AcType", m_szAcType);
                GetXMLField(pSess, "AcCd", m_szAcCd);
                GetXMLField(pSess, "CfShortName", m_szCfShortName);
                GetXMLField(pSess, "CfTaxIdPrfx", m_szCfTaxIdPrfx);
                GetXMLField(pSess, "CfTaxIdSufx", m_szCfTaxIdSufx);
                GetXMLField(pSess, "CfCrScore", m_szCfCrScore);
                GetXMLField(pSess, "CfBirthDate", m_szCfBirthDate);
                GetXMLField(pSess, "CfRace", m_szCfRace);
                GetXMLField(pSess, "CfPersCmclCd", m_szCfPersCmclCd);
                GetXMLField(pSess, "CfTaxIdValid", m_szCfTaxIdValid);
                GetXMLField(pSess, "CfPrimBr", m_szCfPrimBr);
                GetXMLField(pSess, "CfOfficerEmpCd", m_szCfOfficerEmpCd);
                GetXMLField(pSess, "CfSex", m_szCfSex);
                GetXMLField(pSess, "CfMaritStat", m_szCfMaritStat);
                GetXMLField(pSess, "CfFrgnAddrInd", m_szCfFrgnAddrInd);
                GetXMLField(pSess, "CfTaxIdName", m_szCfTaxIdName);
                GetXMLField(pSess, "CfTaxIdNameCtl", m_szCfTaxIdNameCtl);
                GetXMLField(pSess, "CfSkipTraceCd", m_szCfSkipTraceCd);
                GetXMLField(pSess, "CfFrstSlDisbDate", m_szCfFrstSlDisbDate);
                GetXMLField(pSess, "CfInsEligCd", m_szCfInsEligCd);
                GetXMLField(pSess, "CfAddrNum", m_szCfAddrNum);
                GetXMLField(pSess, "ShareCustInfoCd", m_szShareCustInfoCd);
                GetXMLField(pSess, "ShareInfoMaintDt", m_szShareInfoMaintDt);
                GetXMLField(pSess, "UserCharField1", m_szUserCharField1);
                GetXMLField(pSess, "UserCharField2", m_szUserCharField2);
                GetXMLField(pSess, "UserCharField3", m_szUserCharField3);
                GetXMLField(pSess, "UserNumField1", m_szUserNumField1);
                GetXMLField(pSess, "UserNumField2", m_szUserNumField2);
                GetXMLField(pSess, "UserNumField3", m_szUserNumField3);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "Fill1", m_szFill1);
                GetXMLField(pSess, "DeathCode", m_szDeathCode);
                GetXMLField(pSess, "DeathCodeDesc", m_szDeathCodeDesc);
                GetXMLField(pSess, "LegalStatusDesc", m_szLegalStatusDesc);
                GetXMLField(pSess, "NextAccrualDate", m_szNextAccrualDate);
                GetXMLField(pSess, "MsgCode", m_szMsgCode);
                GetXMLField(pSess, "MsgCodeDesc", m_szMsgCodeDesc);
                GetXMLField(pSess, "RtProcStatDesc", m_szRtProcStatDesc);
                GetXMLField(pSess, "RtClassCodeDesc", m_szRtClassCodeDesc);
                GetXMLField(pSess, "RtAccrualStatDesc", m_szRtAccrualStatDesc);
                GetXMLField(pSess, "TdrStatus", m_szTdrStatus);
                GetXMLField(pSess, "TdrDesc", m_szTdrDesc);
                GetXMLField(pSess, "NplStatus", m_szNplStatus);
                GetXMLField(pSess, "NplDesc", m_szNplDesc);
                GetXMLField(pSess, "LoanClassCode", m_szLoanClassCode);
                GetXMLField(pSess, "LoanClassDesc", m_szLoanClassDesc);
                GetXMLField(pSess, "PenaltyDate", m_szPenaltyDate);
                GetXMLField(pSess, "SkipGroupCode", m_szSkipGroupCode);
                GetXMLField(pSess, "SkipGroupDesc", m_szSkipGroupDesc);
                GetXMLField(pSess, "RtCollCodeDesc", m_szRtCollCodeDesc);
                GetXMLField(pSess, "Ai1", m_szAi1);
                GetXMLField(pSess, "Ai2", m_szAi2);
                GetXMLField(pSess, "Ai3", m_szAi3);
                GetXMLField(pSess, "TotalInterest", m_szTotalInterest);
                GetXMLField(pSess, "PenaltyRate", m_szPenaltyRate);
                GetXMLField(pSess, "Fee", m_szFee);
                GetXMLField(pSess, "GroupCode1", m_szGroupCode1);
                GetXMLField(pSess, "GroupCode2", m_szGroupCode2);
                GetXMLField(pSess, "DqIntPdueDays", m_szDqIntPdueDays);
                GetXMLField(pSess, "DqIntPdueDate", m_szDqIntPdueDate);
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                {
                    CCfLineInfo[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDAMMSIO");
            };
        }
        
        //**************** Start AsdCfLineInfo Definition ****************
        //                 TABLE CONTAINING LINE INFORMATION.
        
        class AsdCfLineInfo
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bCfLineType;
            char      m_szCfLineType[1+1];
            bool      m_bCfLineSeq;
            char      m_szCfLineSeq[2+1];
            bool      m_bCfLineData;
            char      m_szCfLineData[40+1];
        
          public:
            long      m_lIndex;

            AsdCfLineInfo ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCfLineType = false;
                strcpy(m_szCfLineType, "");
                m_bCfLineSeq = false;
                strcpy(m_szCfLineSeq, "+0");
                m_bCfLineData = false;
                strcpy(m_szCfLineData, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    TYPE OF INFORMATION ON THE NAME/ADDRESS LINE.
            long lCfLineType () { return 1; };
            RWCString CfLineType (void)
            {
                return m_szCfLineType;
            }
            long CfLineType (const RWCString& rwc)
            {
                return SetString(rwc, m_szCfLineType, sizeof(m_szCfLineType), &m_bCfLineType);
            }
            
            //    SEQUENCE OF THE NAME/ADDRESS LINE.
            long lCfLineSeq () { return 2; };
            RWCString CfLineSeq (void)
            {
                return AceZeroSupp(m_szCfLineSeq, &m_szSuppressBuff[0]);
            }
            RWCString CfLineSeqRaw (void)
            {
                return m_szCfLineSeq;
            }
            long CfLineSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szCfLineSeq, sizeof(m_szCfLineSeq), &m_bCfLineSeq);
            }
            
            //    NAME, ADDRESS, OR SPECIAL INSTRUCTIONS FOR THE CUSTOMER.
            long lCfLineData () { return 40; };
            RWCString CfLineData (void)
            {
                return m_szCfLineData;
            }
            long CfLineData (const RWCString& rwc)
            {
                return SetString(rwc, m_szCfLineData, sizeof(m_szCfLineData), &m_bCfLineData);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bCfLineType) return true;
                if (m_bCfLineSeq) return true;
                if (m_bCfLineData) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "CfLineInfo", m_lIndex);
                    AddXMLField(pSess, "CfLineType", m_szCfLineType, &m_bCfLineType);
                    AddXMLField(pSess, "CfLineSeq", m_szCfLineSeq, &m_bCfLineSeq);
                    AddXMLField(pSess, "CfLineData", m_szCfLineData, &m_bCfLineData);
                    AddXMLCloseRecord(pSess, "CfLineInfo");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "CfLineInfo", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "CfLineType", m_szCfLineType);
                    GetXMLField(pSess, "CfLineSeq", m_szCfLineSeq);
                    GetXMLField(pSess, "CfLineData", m_szCfLineData);
                    CloseXMLRecord(pSess, "CfLineInfo");
                };
            }
        };

        AsdCfLineInfo  CCfLineInfo[6];
        AsdCfLineInfo *CfLineInfo[6];
        
        //**************** End AsdCfLineInfo Definition ****************
        
    };

    AsdSDAMMSIO CSDAMMSIO;
    AsdSDAMMSIO *SDAMMSIO;
    
    //**************** End AsdSDAMMSIO Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCAIMSData Definition ****************

typedef AsdSDPCAIMSData *LPSDPCAIMS;
typedef AsdSDPCAIMSData::AsdTSHeader *LPSDPCAIMS_TSHeader;
typedef AsdSDPCAIMSData::AsdSDAMTRII *LPSDPCAIMS_SDAMTRII;
typedef AsdSDPCAIMSData::AsdSDAMMSIO *LPSDPCAIMS_SDAMMSIO;
typedef AsdSDPCAIMSData::AsdSDAMMSIO::AsdCfLineInfo *LPSDPCAIMS_SDAMMSIO_CfLineInfo;
typedef AsdSDPCAIMSData::AsdTSMDA *LPSDPCAIMS_TSMDA;
typedef AsdSDPCAIMSData::AsdTSMDA::AsdMdaTrmMsg *LPSDPCAIMS_TSMDA_MdaTrmMsg;
typedef AsdSDPCAIMSData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCAIMS_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCAIMSData_H

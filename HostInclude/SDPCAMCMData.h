#ifndef AsdSDPCAMCMData_H
#define AsdSDPCAMCMData_H

#include <stdlib.h>
#ifdef  AsdSDPCAMCM_INTEGRITY_STRING
#undef  AsdSDPCAMCM_INTEGRITY_STRING
#endif
#define AsdSDPCAMCM_INTEGRITY_STRING        ""

#ifdef  AsdSDPCAMCM_CRC_STRING
#undef  AsdSDPCAMCM_CRC_STRING
#endif
#define AsdSDPCAMCM_CRC_STRING "4152181429"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCAMCMData Definition ****************
//                 ALS Name/Address Maintenance

//                 SDPCAMCMData.h generated by AceGen2 ver. 2.5.09

class AsdSDPCAMCMData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCAMCMData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCAMCM.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCAMCM_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDAMCMII = &CSDAMCMII;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCAMCMData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDAMCMII.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCAMCM_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAMCM_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDAMCMII.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCAMCM", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDAMCMII.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCAMCM");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAMCM_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDAMCMII.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCAMCM", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDAMCMII.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCAMCM");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCAMCM_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDAMCMII Definition ****************
    //                 SD ALS CUSTOMER UPDATE                                      
    
    //    SDAMCMII.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:19
    class AsdSDAMCMII
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bCfCtl1;
        char      m_szCfCtl1[2+1];
        bool      m_bCfCtl2;
        char      m_szCfCtl2[3+1];
        bool      m_bCfCtl3;
        char      m_szCfCtl3[3+1];
        bool      m_bCfCtl4;
        char      m_szCfCtl4[4+1];
        bool      m_bCfCustNum;
        char      m_szCfCustNum[14+1];
        bool      m_bTrActionCd;
        char      m_szTrActionCd[1+1];
        bool      m_bTrEffDate;
        char      m_szTrEffDate[8+1];
        bool      m_bCfNumLines;
        char      m_szCfNumLines[2+1];
        bool      m_bCfCntry;
        char      m_szCfCntry[5+1];
        bool      m_bCfFrgnAddrInd;
        char      m_szCfFrgnAddrInd[1+1];
        bool      m_bCfPrimAreaCd;
        char      m_szCfPrimAreaCd[3+1];
        bool      m_bCfPrimPhoneNum;
        char      m_szCfPrimPhoneNum[8+1];
        bool      m_bCfPrimPhoneExt;
        char      m_szCfPrimPhoneExt[5+1];
        bool      m_bCfBusAreaCd;
        char      m_szCfBusAreaCd[3+1];
        bool      m_bCfBusPhoneNum;
        char      m_szCfBusPhoneNum[8+1];
        bool      m_bCfBusPhoneExt;
        char      m_szCfBusPhoneExt[5+1];
        bool      m_bCfShortName;
        char      m_szCfShortName[13+1];
        bool      m_bCfSkipTraceCd;
        char      m_szCfSkipTraceCd[2+1];
        bool      m_bCfPersCmclCd;
        char      m_szCfPersCmclCd[1+1];
        bool      m_bCfTaxIdValid;
        char      m_szCfTaxIdValid[1+1];
        bool      m_bCfTaxIdPrfx;
        char      m_szCfTaxIdPrfx[1+1];
        bool      m_bCfTaxIdSufx;
        char      m_szCfTaxIdSufx[1+1];
        bool      m_bCfTaxIdNum;
        char      m_szCfTaxIdNum[10+1];
        bool      m_bCfTaxIdNameCtl;
        char      m_szCfTaxIdNameCtl[4+1];
        bool      m_bCfTaxIdName;
        char      m_szCfTaxIdName[40+1];
        bool      m_bCfPrimOfficer;
        char      m_szCfPrimOfficer[5+1];
        bool      m_bCfPrimBr;
        char      m_szCfPrimBr[5+1];
        bool      m_bCfFrstSlDisbDate;
        char      m_szCfFrstSlDisbDate[8+1];
        bool      m_bCfCrScore;
        char      m_szCfCrScore[5+1];
        bool      m_bCfOfficerEmpCd;
        char      m_szCfOfficerEmpCd[1+1];
        bool      m_bCfInsEligCd;
        char      m_szCfInsEligCd[1+1];
        bool      m_bCfBirthDate;
        char      m_szCfBirthDate[8+1];
        bool      m_bCfSex;
        char      m_szCfSex[1+1];
        bool      m_bCfRace;
        char      m_szCfRace[1+1];
        bool      m_bCfMaritStat;
        char      m_szCfMaritStat[1+1];
        bool      m_bCfLangCd;
        char      m_szCfLangCd[2+1];
        bool      m_bShareCustInfoCd;
        char      m_szShareCustInfoCd[1+1];
        bool      m_bShareInfoMaintDt;
        char      m_szShareInfoMaintDt[8+1];
    
      public:
        long      m_lIndex;

        AsdSDAMCMII ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCfCtl1 = false;
            strcpy(m_szCfCtl1, "00");
            m_bCfCtl2 = false;
            strcpy(m_szCfCtl2, "000");
            m_bCfCtl3 = false;
            strcpy(m_szCfCtl3, "000");
            m_bCfCtl4 = false;
            strcpy(m_szCfCtl4, "0000");
            m_bCfCustNum = false;
            strcpy(m_szCfCustNum, "00000000000000");
            m_bTrActionCd = false;
            strcpy(m_szTrActionCd, "");
            m_bTrEffDate = false;
            strcpy(m_szTrEffDate, "00000000");
            m_bCfNumLines = false;
            strcpy(m_szCfNumLines, "+0");
            m_bCfCntry = false;
            strcpy(m_szCfCntry, "");
            m_bCfFrgnAddrInd = false;
            strcpy(m_szCfFrgnAddrInd, "");
            m_bCfPrimAreaCd = false;
            strcpy(m_szCfPrimAreaCd, "");
            m_bCfPrimPhoneNum = false;
            strcpy(m_szCfPrimPhoneNum, "");
            m_bCfPrimPhoneExt = false;
            strcpy(m_szCfPrimPhoneExt, "");
            m_bCfBusAreaCd = false;
            strcpy(m_szCfBusAreaCd, "");
            m_bCfBusPhoneNum = false;
            strcpy(m_szCfBusPhoneNum, "");
            m_bCfBusPhoneExt = false;
            strcpy(m_szCfBusPhoneExt, "");
            m_bCfShortName = false;
            strcpy(m_szCfShortName, "");
            m_bCfSkipTraceCd = false;
            strcpy(m_szCfSkipTraceCd, "");
            m_bCfPersCmclCd = false;
            strcpy(m_szCfPersCmclCd, "");
            m_bCfTaxIdValid = false;
            strcpy(m_szCfTaxIdValid, "");
            m_bCfTaxIdPrfx = false;
            strcpy(m_szCfTaxIdPrfx, "");
            m_bCfTaxIdSufx = false;
            strcpy(m_szCfTaxIdSufx, "");
            m_bCfTaxIdNum = false;
            strcpy(m_szCfTaxIdNum, "");
            m_bCfTaxIdNameCtl = false;
            strcpy(m_szCfTaxIdNameCtl, "");
            m_bCfTaxIdName = false;
            strcpy(m_szCfTaxIdName, "");
            m_bCfPrimOfficer = false;
            strcpy(m_szCfPrimOfficer, "");
            m_bCfPrimBr = false;
            strcpy(m_szCfPrimBr, "");
            m_bCfFrstSlDisbDate = false;
            strcpy(m_szCfFrstSlDisbDate, "");
            m_bCfCrScore = false;
            strcpy(m_szCfCrScore, "");
            m_bCfOfficerEmpCd = false;
            strcpy(m_szCfOfficerEmpCd, "");
            m_bCfInsEligCd = false;
            strcpy(m_szCfInsEligCd, "");
            m_bCfBirthDate = false;
            strcpy(m_szCfBirthDate, "");
            m_bCfSex = false;
            strcpy(m_szCfSex, "");
            m_bCfRace = false;
            strcpy(m_szCfRace, "");
            m_bCfMaritStat = false;
            strcpy(m_szCfMaritStat, "");
            m_bCfLangCd = false;
            strcpy(m_szCfLangCd, "");
            m_bShareCustInfoCd = false;
            strcpy(m_szShareCustInfoCd, "");
            m_bShareInfoMaintDt = false;
            strcpy(m_szShareInfoMaintDt, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                CfLineInfo[lOccurs]  = &CCfLineInfo[lOccurs];
                CCfLineInfo[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCfCtl1 = false;
            strcpy(m_szCfCtl1, "00");
            m_bCfCtl2 = false;
            strcpy(m_szCfCtl2, "000");
            m_bCfCtl3 = false;
            strcpy(m_szCfCtl3, "000");
            m_bCfCtl4 = false;
            strcpy(m_szCfCtl4, "0000");
            m_bCfCustNum = false;
            strcpy(m_szCfCustNum, "00000000000000");
            m_bTrActionCd = false;
            strcpy(m_szTrActionCd, "");
            m_bTrEffDate = false;
            strcpy(m_szTrEffDate, "00000000");
            m_bCfNumLines = false;
            strcpy(m_szCfNumLines, "+0");
            m_bCfCntry = false;
            strcpy(m_szCfCntry, "");
            m_bCfFrgnAddrInd = false;
            strcpy(m_szCfFrgnAddrInd, "");
            m_bCfPrimAreaCd = false;
            strcpy(m_szCfPrimAreaCd, "");
            m_bCfPrimPhoneNum = false;
            strcpy(m_szCfPrimPhoneNum, "");
            m_bCfPrimPhoneExt = false;
            strcpy(m_szCfPrimPhoneExt, "");
            m_bCfBusAreaCd = false;
            strcpy(m_szCfBusAreaCd, "");
            m_bCfBusPhoneNum = false;
            strcpy(m_szCfBusPhoneNum, "");
            m_bCfBusPhoneExt = false;
            strcpy(m_szCfBusPhoneExt, "");
            m_bCfShortName = false;
            strcpy(m_szCfShortName, "");
            m_bCfSkipTraceCd = false;
            strcpy(m_szCfSkipTraceCd, "");
            m_bCfPersCmclCd = false;
            strcpy(m_szCfPersCmclCd, "");
            m_bCfTaxIdValid = false;
            strcpy(m_szCfTaxIdValid, "");
            m_bCfTaxIdPrfx = false;
            strcpy(m_szCfTaxIdPrfx, "");
            m_bCfTaxIdSufx = false;
            strcpy(m_szCfTaxIdSufx, "");
            m_bCfTaxIdNum = false;
            strcpy(m_szCfTaxIdNum, "");
            m_bCfTaxIdNameCtl = false;
            strcpy(m_szCfTaxIdNameCtl, "");
            m_bCfTaxIdName = false;
            strcpy(m_szCfTaxIdName, "");
            m_bCfPrimOfficer = false;
            strcpy(m_szCfPrimOfficer, "");
            m_bCfPrimBr = false;
            strcpy(m_szCfPrimBr, "");
            m_bCfFrstSlDisbDate = false;
            strcpy(m_szCfFrstSlDisbDate, "");
            m_bCfCrScore = false;
            strcpy(m_szCfCrScore, "");
            m_bCfOfficerEmpCd = false;
            strcpy(m_szCfOfficerEmpCd, "");
            m_bCfInsEligCd = false;
            strcpy(m_szCfInsEligCd, "");
            m_bCfBirthDate = false;
            strcpy(m_szCfBirthDate, "");
            m_bCfSex = false;
            strcpy(m_szCfSex, "");
            m_bCfRace = false;
            strcpy(m_szCfRace, "");
            m_bCfMaritStat = false;
            strcpy(m_szCfMaritStat, "");
            m_bCfLangCd = false;
            strcpy(m_szCfLangCd, "");
            m_bShareCustInfoCd = false;
            strcpy(m_szShareCustInfoCd, "");
            m_bShareInfoMaintDt = false;
            strcpy(m_szShareInfoMaintDt, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                CfLineInfo[lOccurs]  = &CCfLineInfo[lOccurs];
                CCfLineInfo[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    INSTITUTION-DEFINED FIRST LEVEL OF CONTROL FOR THE CUSTOMER.
        long lCfCtl1 () { return 2; };
        RWCString CfCtl1 (void)
        {
            return m_szCfCtl1;
        }
        long CfCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCtl1, sizeof(m_szCfCtl1), &m_bCfCtl1);
        }
        
        //    INSTITUTION-DEFINED SECOND LEVEL CONTR0L FOR THE CUSTOMER.
        long lCfCtl2 () { return 3; };
        RWCString CfCtl2 (void)
        {
            return m_szCfCtl2;
        }
        long CfCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCtl2, sizeof(m_szCfCtl2), &m_bCfCtl2);
        }
        
        //    INSTITUTION-DEFINED THIRD LEVEL OF CONTROL FOR THE CUSTOMER.
        long lCfCtl3 () { return 3; };
        RWCString CfCtl3 (void)
        {
            return m_szCfCtl3;
        }
        long CfCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCtl3, sizeof(m_szCfCtl3), &m_bCfCtl3);
        }
        
        //    INSTITUTION-DEFINED FOURTH LEVEL CONTROL FOR THE CUSTOMER.
        long lCfCtl4 () { return 4; };
        RWCString CfCtl4 (void)
        {
            return m_szCfCtl4;
        }
        long CfCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCtl4, sizeof(m_szCfCtl4), &m_bCfCtl4);
        }
        
        //    UNIQUE NUMBER IDENTIFYING THE CUSTOMER.
        long lCfCustNum () { return 14; };
        RWCString CfCustNum (void)
        {
            return m_szCfCustNum;
        }
        long CfCustNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCustNum, sizeof(m_szCfCustNum), &m_bCfCustNum);
        }
        
        //    ACTION CODE FOR THIS TRANSACTION.
        long lTrActionCd () { return 1; };
        RWCString TrActionCd (void)
        {
            return m_szTrActionCd;
        }
        long TrActionCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrActionCd, sizeof(m_szTrActionCd), &m_bTrActionCd);
        }
        
        //    EFFECTIVE DATE OF THE TRANSACTION.
        long lTrEffDate () { return 8; };
        RWCString TrEffDate (void)
        {
            return m_szTrEffDate;
        }
        long TrEffDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szTrEffDate, sizeof(m_szTrEffDate), &m_bTrEffDate);
        }
        
        //    NUMBER OF NAME/ADDRESS LINES INCLUDED FOR THE CUSTOMER.
        long lCfNumLines () { return 2; };
        RWCString CfNumLines (void)
        {
            return AceZeroSupp(m_szCfNumLines, &m_szSuppressBuff[0]);
        }
        RWCString CfNumLinesRaw (void)
        {
            return m_szCfNumLines;
        }
        long CfNumLines (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfNumLines, sizeof(m_szCfNumLines), &m_bCfNumLines);
        }
        
        //    COUNTRY WHERE THE ADDRESS IS LOCATED IF OTHER THAN THE U.S.
        long lCfCntry () { return 5; };
        RWCString CfCntry (void)
        {
            return m_szCfCntry;
        }
        long CfCntry (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCntry, sizeof(m_szCfCntry), &m_bCfCntry);
        }
        
        //    TELLS WHETHER ADDRESS IS OUTSIDE THE U.S.A.
        long lCfFrgnAddrInd () { return 1; };
        RWCString CfFrgnAddrInd (void)
        {
            return m_szCfFrgnAddrInd;
        }
        long CfFrgnAddrInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfFrgnAddrInd, sizeof(m_szCfFrgnAddrInd), &m_bCfFrgnAddrInd);
        }
        
        //    PRIMARY TELEPHONE AREA CODE.
        long lCfPrimAreaCd () { return 3; };
        RWCString CfPrimAreaCd (void)
        {
            return m_szCfPrimAreaCd;
        }
        long CfPrimAreaCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPrimAreaCd, sizeof(m_szCfPrimAreaCd), &m_bCfPrimAreaCd);
        }
        
        //    PRIMARY TELEPHONE NUMBER.
        long lCfPrimPhoneNum () { return 8; };
        RWCString CfPrimPhoneNum (void)
        {
            return m_szCfPrimPhoneNum;
        }
        long CfPrimPhoneNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPrimPhoneNum, sizeof(m_szCfPrimPhoneNum), &m_bCfPrimPhoneNum);
        }
        
        //    PRIMARY TELEPHONE NUMBER EXTENSION.
        long lCfPrimPhoneExt () { return 5; };
        RWCString CfPrimPhoneExt (void)
        {
            return m_szCfPrimPhoneExt;
        }
        long CfPrimPhoneExt (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPrimPhoneExt, sizeof(m_szCfPrimPhoneExt), &m_bCfPrimPhoneExt);
        }
        
        //    BUSINESS TELEPHONE AREA CODE.
        long lCfBusAreaCd () { return 3; };
        RWCString CfBusAreaCd (void)
        {
            return m_szCfBusAreaCd;
        }
        long CfBusAreaCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfBusAreaCd, sizeof(m_szCfBusAreaCd), &m_bCfBusAreaCd);
        }
        
        //    BUSINESS TELEPHONE NUMBER.
        long lCfBusPhoneNum () { return 8; };
        RWCString CfBusPhoneNum (void)
        {
            return m_szCfBusPhoneNum;
        }
        long CfBusPhoneNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfBusPhoneNum, sizeof(m_szCfBusPhoneNum), &m_bCfBusPhoneNum);
        }
        
        //    BUSINESS TELEPHONE NUMBER EXTENSION.
        long lCfBusPhoneExt () { return 5; };
        RWCString CfBusPhoneExt (void)
        {
            return m_szCfBusPhoneExt;
        }
        long CfBusPhoneExt (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfBusPhoneExt, sizeof(m_szCfBusPhoneExt), &m_bCfBusPhoneExt);
        }
        
        //    SHORT NAME - WILL BE GENERATED IF NOT ENTERED.
        long lCfShortName () { return 13; };
        RWCString CfShortName (void)
        {
            return m_szCfShortName;
        }
        long CfShortName (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfShortName, sizeof(m_szCfShortName), &m_bCfShortName);
        }
        
        //    SKIP TRACE CODE.
        long lCfSkipTraceCd () { return 2; };
        RWCString CfSkipTraceCd (void)
        {
            return m_szCfSkipTraceCd;
        }
        long CfSkipTraceCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfSkipTraceCd, sizeof(m_szCfSkipTraceCd), &m_bCfSkipTraceCd);
        }
        
        //    PERSONAL OR COMMERCIAL NAME CODE.
        long lCfPersCmclCd () { return 1; };
        RWCString CfPersCmclCd (void)
        {
            return m_szCfPersCmclCd;
        }
        long CfPersCmclCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPersCmclCd, sizeof(m_szCfPersCmclCd), &m_bCfPersCmclCd);
        }
        
        //    IS TAX ID NUMBER VALID.
        long lCfTaxIdValid () { return 1; };
        RWCString CfTaxIdValid (void)
        {
            return m_szCfTaxIdValid;
        }
        long CfTaxIdValid (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdValid, sizeof(m_szCfTaxIdValid), &m_bCfTaxIdValid);
        }
        
        //    TAX IDENTIFICATION CODE PREFIX.
        long lCfTaxIdPrfx () { return 1; };
        RWCString CfTaxIdPrfx (void)
        {
            return m_szCfTaxIdPrfx;
        }
        long CfTaxIdPrfx (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdPrfx, sizeof(m_szCfTaxIdPrfx), &m_bCfTaxIdPrfx);
        }
        
        //    TAX IDENTIFICATION CODE SUFFIX.
        long lCfTaxIdSufx () { return 1; };
        RWCString CfTaxIdSufx (void)
        {
            return m_szCfTaxIdSufx;
        }
        long CfTaxIdSufx (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdSufx, sizeof(m_szCfTaxIdSufx), &m_bCfTaxIdSufx);
        }
        
        //    CUSTOMER'S SOCIAL SECURITY OR TAX IDENTIFICATION NUMBER.
        long lCfTaxIdNum () { return 10; };
        RWCString CfTaxIdNum (void)
        {
            return m_szCfTaxIdNum;
        }
        long CfTaxIdNum (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdNum, sizeof(m_szCfTaxIdNum), &m_bCfTaxIdNum);
        }
        
        //    4 SIGNIFICANT DIGITS OF TAX ID NAME.
        long lCfTaxIdNameCtl () { return 4; };
        RWCString CfTaxIdNameCtl (void)
        {
            return m_szCfTaxIdNameCtl;
        }
        long CfTaxIdNameCtl (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdNameCtl, sizeof(m_szCfTaxIdNameCtl), &m_bCfTaxIdNameCtl);
        }
        
        //    NAME ASSIGNED TO THE TAX ID NUMBER.
        long lCfTaxIdName () { return 40; };
        RWCString CfTaxIdName (void)
        {
            return m_szCfTaxIdName;
        }
        long CfTaxIdName (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfTaxIdName, sizeof(m_szCfTaxIdName), &m_bCfTaxIdName);
        }
        
        //    IDENTIFIES THE PRIMARY OFFICER RESPONSIBLE FOR THE LOAN.
        long lCfPrimOfficer () { return 5; };
        RWCString CfPrimOfficer (void)
        {
            return m_szCfPrimOfficer;
        }
        long CfPrimOfficer (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPrimOfficer, sizeof(m_szCfPrimOfficer), &m_bCfPrimOfficer);
        }
        
        //    PRIMARY BRANCH CODE.
        long lCfPrimBr () { return 5; };
        RWCString CfPrimBr (void)
        {
            return m_szCfPrimBr;
        }
        long CfPrimBr (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfPrimBr, sizeof(m_szCfPrimBr), &m_bCfPrimBr);
        }
        
        //    FIRST STUDENT LOAN DISBURSEMENT DATE
        long lCfFrstSlDisbDate () { return 8; };
        RWCString CfFrstSlDisbDate (void)
        {
            return m_szCfFrstSlDisbDate;
        }
        long CfFrstSlDisbDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfFrstSlDisbDate, sizeof(m_szCfFrstSlDisbDate), &m_bCfFrstSlDisbDate);
        }
        
        //    CREDIT RATING SCORE.
        long lCfCrScore () { return 5; };
        RWCString CfCrScore (void)
        {
            return m_szCfCrScore;
        }
        long CfCrScore (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfCrScore, sizeof(m_szCfCrScore), &m_bCfCrScore);
        }
        
        //    OFFICER OR EMPLOYEE CODE.
        long lCfOfficerEmpCd () { return 1; };
        RWCString CfOfficerEmpCd (void)
        {
            return m_szCfOfficerEmpCd;
        }
        long CfOfficerEmpCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfOfficerEmpCd, sizeof(m_szCfOfficerEmpCd), &m_bCfOfficerEmpCd);
        }
        
        //    INSURANCE ELIGIBILITY CODE.
        long lCfInsEligCd () { return 1; };
        RWCString CfInsEligCd (void)
        {
            return m_szCfInsEligCd;
        }
        long CfInsEligCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfInsEligCd, sizeof(m_szCfInsEligCd), &m_bCfInsEligCd);
        }
        
        //    BIRTH DATE.
        long lCfBirthDate () { return 8; };
        RWCString CfBirthDate (void)
        {
            return m_szCfBirthDate;
        }
        long CfBirthDate (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfBirthDate, sizeof(m_szCfBirthDate), &m_bCfBirthDate);
        }
        
        //    SEX CODE - M = MALE, F = FEMALE.
        long lCfSex () { return 1; };
        RWCString CfSex (void)
        {
            return m_szCfSex;
        }
        long CfSex (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfSex, sizeof(m_szCfSex), &m_bCfSex);
        }
        
        //    RACIAL CODE.
        long lCfRace () { return 1; };
        RWCString CfRace (void)
        {
            return m_szCfRace;
        }
        long CfRace (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfRace, sizeof(m_szCfRace), &m_bCfRace);
        }
        
        //    MARITAL STATUS CODE.
        long lCfMaritStat () { return 1; };
        RWCString CfMaritStat (void)
        {
            return m_szCfMaritStat;
        }
        long CfMaritStat (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfMaritStat, sizeof(m_szCfMaritStat), &m_bCfMaritStat);
        }
        
        //    CUSTOMER LANGUAGE (ENGLISH, SPANISH, ETC.).
        long lCfLangCd () { return 2; };
        RWCString CfLangCd (void)
        {
            return m_szCfLangCd;
        }
        long CfLangCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCfLangCd, sizeof(m_szCfLangCd), &m_bCfLangCd);
        }
        
        //    SHARE CUSTOMER INFORMATION CODE
        long lShareCustInfoCd () { return 1; };
        RWCString ShareCustInfoCd (void)
        {
            return m_szShareCustInfoCd;
        }
        long ShareCustInfoCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szShareCustInfoCd, sizeof(m_szShareCustInfoCd), &m_bShareCustInfoCd);
        }
        
        //    SHARE CUSTOMER INFO MAINTENANCE DATE
        long lShareInfoMaintDt () { return 8; };
        RWCString ShareInfoMaintDt (void)
        {
            return m_szShareInfoMaintDt;
        }
        long ShareInfoMaintDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szShareInfoMaintDt, sizeof(m_szShareInfoMaintDt), &m_bShareInfoMaintDt);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bCfCtl1) return true;
            if (m_bCfCtl2) return true;
            if (m_bCfCtl3) return true;
            if (m_bCfCtl4) return true;
            if (m_bCfCustNum) return true;
            if (m_bTrActionCd) return true;
            if (m_bTrEffDate) return true;
            if (m_bCfNumLines) return true;
            if (m_bCfCntry) return true;
            if (m_bCfFrgnAddrInd) return true;
            if (m_bCfPrimAreaCd) return true;
            if (m_bCfPrimPhoneNum) return true;
            if (m_bCfPrimPhoneExt) return true;
            if (m_bCfBusAreaCd) return true;
            if (m_bCfBusPhoneNum) return true;
            if (m_bCfBusPhoneExt) return true;
            if (m_bCfShortName) return true;
            if (m_bCfSkipTraceCd) return true;
            if (m_bCfPersCmclCd) return true;
            if (m_bCfTaxIdValid) return true;
            if (m_bCfTaxIdPrfx) return true;
            if (m_bCfTaxIdSufx) return true;
            if (m_bCfTaxIdNum) return true;
            if (m_bCfTaxIdNameCtl) return true;
            if (m_bCfTaxIdName) return true;
            if (m_bCfPrimOfficer) return true;
            if (m_bCfPrimBr) return true;
            if (m_bCfFrstSlDisbDate) return true;
            if (m_bCfCrScore) return true;
            if (m_bCfOfficerEmpCd) return true;
            if (m_bCfInsEligCd) return true;
            if (m_bCfBirthDate) return true;
            if (m_bCfSex) return true;
            if (m_bCfRace) return true;
            if (m_bCfMaritStat) return true;
            if (m_bCfLangCd) return true;
            if (m_bShareCustInfoCd) return true;
            if (m_bShareInfoMaintDt) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 6; lOccurs++)
            {
                if(CCfLineInfo[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDAMCMII", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "CfCtl1", m_szCfCtl1, &m_bCfCtl1);
                AddXMLField(pSess, "CfCtl2", m_szCfCtl2, &m_bCfCtl2);
                AddXMLField(pSess, "CfCtl3", m_szCfCtl3, &m_bCfCtl3);
                AddXMLField(pSess, "CfCtl4", m_szCfCtl4, &m_bCfCtl4);
                AddXMLField(pSess, "CfCustNum", m_szCfCustNum, &m_bCfCustNum);
                AddXMLField(pSess, "TrActionCd", m_szTrActionCd, &m_bTrActionCd);
                AddXMLField(pSess, "TrEffDate", m_szTrEffDate, &m_bTrEffDate);
                AddXMLField(pSess, "CfNumLines", m_szCfNumLines, &m_bCfNumLines);
                AddXMLField(pSess, "CfCntry", m_szCfCntry, &m_bCfCntry);
                AddXMLField(pSess, "CfFrgnAddrInd", m_szCfFrgnAddrInd, &m_bCfFrgnAddrInd);
                AddXMLField(pSess, "CfPrimAreaCd", m_szCfPrimAreaCd, &m_bCfPrimAreaCd);
                AddXMLField(pSess, "CfPrimPhoneNum", m_szCfPrimPhoneNum, &m_bCfPrimPhoneNum);
                AddXMLField(pSess, "CfPrimPhoneExt", m_szCfPrimPhoneExt, &m_bCfPrimPhoneExt);
                AddXMLField(pSess, "CfBusAreaCd", m_szCfBusAreaCd, &m_bCfBusAreaCd);
                AddXMLField(pSess, "CfBusPhoneNum", m_szCfBusPhoneNum, &m_bCfBusPhoneNum);
                AddXMLField(pSess, "CfBusPhoneExt", m_szCfBusPhoneExt, &m_bCfBusPhoneExt);
                AddXMLField(pSess, "CfShortName", m_szCfShortName, &m_bCfShortName);
                AddXMLField(pSess, "CfSkipTraceCd", m_szCfSkipTraceCd, &m_bCfSkipTraceCd);
                AddXMLField(pSess, "CfPersCmclCd", m_szCfPersCmclCd, &m_bCfPersCmclCd);
                AddXMLField(pSess, "CfTaxIdValid", m_szCfTaxIdValid, &m_bCfTaxIdValid);
                AddXMLField(pSess, "CfTaxIdPrfx", m_szCfTaxIdPrfx, &m_bCfTaxIdPrfx);
                AddXMLField(pSess, "CfTaxIdSufx", m_szCfTaxIdSufx, &m_bCfTaxIdSufx);
                AddXMLField(pSess, "CfTaxIdNum", m_szCfTaxIdNum, &m_bCfTaxIdNum);
                AddXMLField(pSess, "CfTaxIdNameCtl", m_szCfTaxIdNameCtl, &m_bCfTaxIdNameCtl);
                AddXMLField(pSess, "CfTaxIdName", m_szCfTaxIdName, &m_bCfTaxIdName);
                AddXMLField(pSess, "CfPrimOfficer", m_szCfPrimOfficer, &m_bCfPrimOfficer);
                AddXMLField(pSess, "CfPrimBr", m_szCfPrimBr, &m_bCfPrimBr);
                AddXMLField(pSess, "CfFrstSlDisbDate", m_szCfFrstSlDisbDate, &m_bCfFrstSlDisbDate);
                AddXMLField(pSess, "CfCrScore", m_szCfCrScore, &m_bCfCrScore);
                AddXMLField(pSess, "CfOfficerEmpCd", m_szCfOfficerEmpCd, &m_bCfOfficerEmpCd);
                AddXMLField(pSess, "CfInsEligCd", m_szCfInsEligCd, &m_bCfInsEligCd);
                AddXMLField(pSess, "CfBirthDate", m_szCfBirthDate, &m_bCfBirthDate);
                AddXMLField(pSess, "CfSex", m_szCfSex, &m_bCfSex);
                AddXMLField(pSess, "CfRace", m_szCfRace, &m_bCfRace);
                AddXMLField(pSess, "CfMaritStat", m_szCfMaritStat, &m_bCfMaritStat);
                AddXMLField(pSess, "CfLangCd", m_szCfLangCd, &m_bCfLangCd);
                AddXMLField(pSess, "ShareCustInfoCd", m_szShareCustInfoCd, &m_bShareCustInfoCd);
                AddXMLField(pSess, "ShareInfoMaintDt", m_szShareInfoMaintDt, &m_bShareInfoMaintDt);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                {
                    CCfLineInfo[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDAMCMII");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDAMCMII", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "CfCtl1", m_szCfCtl1);
                GetXMLField(pSess, "CfCtl2", m_szCfCtl2);
                GetXMLField(pSess, "CfCtl3", m_szCfCtl3);
                GetXMLField(pSess, "CfCtl4", m_szCfCtl4);
                GetXMLField(pSess, "CfCustNum", m_szCfCustNum);
                GetXMLField(pSess, "TrActionCd", m_szTrActionCd);
                GetXMLField(pSess, "TrEffDate", m_szTrEffDate);
                GetXMLField(pSess, "CfNumLines", m_szCfNumLines);
                GetXMLField(pSess, "CfCntry", m_szCfCntry);
                GetXMLField(pSess, "CfFrgnAddrInd", m_szCfFrgnAddrInd);
                GetXMLField(pSess, "CfPrimAreaCd", m_szCfPrimAreaCd);
                GetXMLField(pSess, "CfPrimPhoneNum", m_szCfPrimPhoneNum);
                GetXMLField(pSess, "CfPrimPhoneExt", m_szCfPrimPhoneExt);
                GetXMLField(pSess, "CfBusAreaCd", m_szCfBusAreaCd);
                GetXMLField(pSess, "CfBusPhoneNum", m_szCfBusPhoneNum);
                GetXMLField(pSess, "CfBusPhoneExt", m_szCfBusPhoneExt);
                GetXMLField(pSess, "CfShortName", m_szCfShortName);
                GetXMLField(pSess, "CfSkipTraceCd", m_szCfSkipTraceCd);
                GetXMLField(pSess, "CfPersCmclCd", m_szCfPersCmclCd);
                GetXMLField(pSess, "CfTaxIdValid", m_szCfTaxIdValid);
                GetXMLField(pSess, "CfTaxIdPrfx", m_szCfTaxIdPrfx);
                GetXMLField(pSess, "CfTaxIdSufx", m_szCfTaxIdSufx);
                GetXMLField(pSess, "CfTaxIdNum", m_szCfTaxIdNum);
                GetXMLField(pSess, "CfTaxIdNameCtl", m_szCfTaxIdNameCtl);
                GetXMLField(pSess, "CfTaxIdName", m_szCfTaxIdName);
                GetXMLField(pSess, "CfPrimOfficer", m_szCfPrimOfficer);
                GetXMLField(pSess, "CfPrimBr", m_szCfPrimBr);
                GetXMLField(pSess, "CfFrstSlDisbDate", m_szCfFrstSlDisbDate);
                GetXMLField(pSess, "CfCrScore", m_szCfCrScore);
                GetXMLField(pSess, "CfOfficerEmpCd", m_szCfOfficerEmpCd);
                GetXMLField(pSess, "CfInsEligCd", m_szCfInsEligCd);
                GetXMLField(pSess, "CfBirthDate", m_szCfBirthDate);
                GetXMLField(pSess, "CfSex", m_szCfSex);
                GetXMLField(pSess, "CfRace", m_szCfRace);
                GetXMLField(pSess, "CfMaritStat", m_szCfMaritStat);
                GetXMLField(pSess, "CfLangCd", m_szCfLangCd);
                GetXMLField(pSess, "ShareCustInfoCd", m_szShareCustInfoCd);
                GetXMLField(pSess, "ShareInfoMaintDt", m_szShareInfoMaintDt);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 6; lOccurs++)
                {
                    CCfLineInfo[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDAMCMII");
            };
        }
        
        //**************** Start AsdCfLineInfo Definition ****************
        //                 TABLE CONTAINING LINE INFORMATION.
        
        class AsdCfLineInfo
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bCfLineType;
            char      m_szCfLineType[1+1];
            bool      m_bCfLineSeq;
            char      m_szCfLineSeq[2+1];
            bool      m_bCfLineData;
            char      m_szCfLineData[40+1];
        
          public:
            long      m_lIndex;

            AsdCfLineInfo ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCfLineType = false;
                strcpy(m_szCfLineType, "");
                m_bCfLineSeq = false;
                strcpy(m_szCfLineSeq, "+0");
                m_bCfLineData = false;
                strcpy(m_szCfLineData, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    TYPE OF INFORMATION ON THE NAME/ADDRESS LINE.
            long lCfLineType () { return 1; };
            RWCString CfLineType (void)
            {
                return m_szCfLineType;
            }
            long CfLineType (const RWCString& rwc)
            {
                return SetString(rwc, m_szCfLineType, sizeof(m_szCfLineType), &m_bCfLineType);
            }
            
            //    SEQUENCE OF THE NAME/ADDRESS LINE.
            long lCfLineSeq () { return 2; };
            RWCString CfLineSeq (void)
            {
                return AceZeroSupp(m_szCfLineSeq, &m_szSuppressBuff[0]);
            }
            RWCString CfLineSeqRaw (void)
            {
                return m_szCfLineSeq;
            }
            long CfLineSeq (const RWCString& rwc)
            {
                return SetString(rwc, m_szCfLineSeq, sizeof(m_szCfLineSeq), &m_bCfLineSeq);
            }
            
            //    NAME, ADDRESS, OR SPECIAL INSTRUCTIONS FOR THE CUSTOMER.
            long lCfLineData () { return 40; };
            RWCString CfLineData (void)
            {
                return m_szCfLineData;
            }
            long CfLineData (const RWCString& rwc)
            {
                return SetString(rwc, m_szCfLineData, sizeof(m_szCfLineData), &m_bCfLineData);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bCfLineType) return true;
                if (m_bCfLineSeq) return true;
                if (m_bCfLineData) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "CfLineInfo", m_lIndex);
                    AddXMLField(pSess, "CfLineType", m_szCfLineType, &m_bCfLineType);
                    AddXMLField(pSess, "CfLineSeq", m_szCfLineSeq, &m_bCfLineSeq);
                    AddXMLField(pSess, "CfLineData", m_szCfLineData, &m_bCfLineData);
                    AddXMLCloseRecord(pSess, "CfLineInfo");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "CfLineInfo", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "CfLineType", m_szCfLineType);
                    GetXMLField(pSess, "CfLineSeq", m_szCfLineSeq);
                    GetXMLField(pSess, "CfLineData", m_szCfLineData);
                    CloseXMLRecord(pSess, "CfLineInfo");
                };
            }
        };

        AsdCfLineInfo  CCfLineInfo[6];
        AsdCfLineInfo *CfLineInfo[6];
        
        //**************** End AsdCfLineInfo Definition ****************
        
    };

    AsdSDAMCMII CSDAMCMII;
    AsdSDAMCMII *SDAMCMII;
    
    //**************** End AsdSDAMCMII Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCAMCMData Definition ****************

typedef AsdSDPCAMCMData *LPSDPCAMCM;
typedef AsdSDPCAMCMData::AsdTSHeader *LPSDPCAMCM_TSHeader;
typedef AsdSDPCAMCMData::AsdSDAMCMII *LPSDPCAMCM_SDAMCMII;
typedef AsdSDPCAMCMData::AsdSDAMCMII::AsdCfLineInfo *LPSDPCAMCM_SDAMCMII_CfLineInfo;
typedef AsdSDPCAMCMData::AsdTSMDA *LPSDPCAMCM_TSMDA;
typedef AsdSDPCAMCMData::AsdTSMDA::AsdMdaTrmMsg *LPSDPCAMCM_TSMDA_MdaTrmMsg;
typedef AsdSDPCAMCMData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCAMCM_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCAMCMData_H

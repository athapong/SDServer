#ifndef AsdSDPCIICLData_H
#define AsdSDPCIICLData_H

#include <stdlib.h>
#ifdef  AsdSDPCIICL_INTEGRITY_STRING
#undef  AsdSDPCIICL_INTEGRITY_STRING
#endif
#define AsdSDPCIICL_INTEGRITY_STRING        ""

#ifdef  AsdSDPCIICL_CRC_STRING
#undef  AsdSDPCIICL_CRC_STRING
#endif
#define AsdSDPCIICL_CRC_STRING "1570225533"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCIICLData Definition ****************
//                 IM Account Close

//                 SDPCIICLData.h generated by AceGen2 ver. 2.5.09

class AsdSDPCIICLData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCIICLData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCIICL.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCIICL_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        SDIMCLIB = &CSDIMCLIB;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCIICLData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CSDIMCLIB.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCIICL_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIICL_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDIMCLIB.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIICL", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDIMCLIB.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIICL");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIICL_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CSDIMCLIB.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIICL", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CSDIMCLIB.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIICL");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIICL_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdSDIMCLIB Definition ****************
    //                 SERVICE DELIVERY IM CLOSING INQUIRY DAG                     
    
    //    SDIMCLIB.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:19
    class AsdSDIMCLIB
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bControl1;
        char      m_szControl1[2+1];
        bool      m_bControl2;
        char      m_szControl2[3+1];
        bool      m_bControl3;
        char      m_szControl3[3+1];
        bool      m_bControl4;
        char      m_szControl4[4+1];
        bool      m_bAcctNo;
        char      m_szAcctNo[10+1];
        bool      m_bDdaBal;
        char      m_szDdaBal[17+1];
        bool      m_bIodProjAccr;
        char      m_szIodProjAccr[17+1];
        bool      m_bIodCtdTax;
        char      m_szIodCtdTax[17+1];
        bool      m_bOdCycAcr;
        char      m_szOdCycAcr[15+1];
        bool      m_bIodPendTax;
        char      m_szIodPendTax[17+1];
        bool      m_bDdaTotal;
        char      m_szDdaTotal[17+1];
        bool      m_bIntCurBal;
        char      m_szIntCurBal[17+1];
        bool      m_bProjAccr;
        char      m_szProjAccr[17+1];
        bool      m_bSavCtdTax;
        char      m_szSavCtdTax[17+1];
        bool      m_bSavPendTax;
        char      m_szSavPendTax[17+1];
        bool      m_bSavTotal;
        char      m_szSavTotal[17+1];
        bool      m_bPrinBal;
        char      m_szPrinBal[17+1];
        bool      m_bIntrstBal;
        char      m_szIntrstBal[17+1];
        bool      m_bIns1;
        char      m_szIns1[17+1];
        bool      m_bIns2;
        char      m_szIns2[17+1];
        bool      m_bFees;
        char      m_szFees[17+1];
        bool      m_bPayoffAmt;
        char      m_szPayoffAmt[17+1];
        bool      m_bHoldAmt;
        char      m_szHoldAmt[17+1];
        bool      m_bNoOfAffiliateAccts;
        char      m_szNoOfAffiliateAccts[1+1];
        bool      m_bNoOfTransferAccts;
        char      m_szNoOfTransferAccts[1+1];
        bool      m_bNoOfCombStmtAccts;
        char      m_szNoOfCombStmtAccts[2+1];
    
      public:
        long      m_lIndex;

        AsdSDIMCLIB ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bControl1 = false;
            strcpy(m_szControl1, "00");
            m_bControl2 = false;
            strcpy(m_szControl2, "000");
            m_bControl3 = false;
            strcpy(m_szControl3, "000");
            m_bControl4 = false;
            strcpy(m_szControl4, "0000");
            m_bAcctNo = false;
            strcpy(m_szAcctNo, "0000000000");
            m_bDdaBal = false;
            strcpy(m_szDdaBal, "+0000000000000.00");
            m_bIodProjAccr = false;
            strcpy(m_szIodProjAccr, "+0000000000000.00");
            m_bIodCtdTax = false;
            strcpy(m_szIodCtdTax, "+0000000000000.00");
            m_bOdCycAcr = false;
            strcpy(m_szOdCycAcr, "+0000000.000000");
            m_bIodPendTax = false;
            strcpy(m_szIodPendTax, "+0000000000000.00");
            m_bDdaTotal = false;
            strcpy(m_szDdaTotal, "+0000000000000.00");
            m_bIntCurBal = false;
            strcpy(m_szIntCurBal, "+0000000000000.00");
            m_bProjAccr = false;
            strcpy(m_szProjAccr, "+0000000000000.00");
            m_bSavCtdTax = false;
            strcpy(m_szSavCtdTax, "+0000000000000.00");
            m_bSavPendTax = false;
            strcpy(m_szSavPendTax, "+0000000000000.00");
            m_bSavTotal = false;
            strcpy(m_szSavTotal, "+0000000000000.00");
            m_bPrinBal = false;
            strcpy(m_szPrinBal, "+0000000000000.00");
            m_bIntrstBal = false;
            strcpy(m_szIntrstBal, "+0000000000000.00");
            m_bIns1 = false;
            strcpy(m_szIns1, "+0000000000000.00");
            m_bIns2 = false;
            strcpy(m_szIns2, "+0000000000000.00");
            m_bFees = false;
            strcpy(m_szFees, "+0000000000000.00");
            m_bPayoffAmt = false;
            strcpy(m_szPayoffAmt, "+0000000000000.00");
            m_bHoldAmt = false;
            strcpy(m_szHoldAmt, "+0000000000000.00");
            m_bNoOfAffiliateAccts = false;
            strcpy(m_szNoOfAffiliateAccts, "0");
            m_bNoOfTransferAccts = false;
            strcpy(m_szNoOfTransferAccts, "0");
            m_bNoOfCombStmtAccts = false;
            strcpy(m_szNoOfCombStmtAccts, "00");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                TransferAffiliateAccounts[lOccurs]  = &CTransferAffiliateAccounts[lOccurs];
                CTransferAffiliateAccounts[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 15; lOccurs++)
            {
                CombinedStatementAccounts[lOccurs]  = &CCombinedStatementAccounts[lOccurs];
                CCombinedStatementAccounts[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bControl1 = false;
            strcpy(m_szControl1, "00");
            m_bControl2 = false;
            strcpy(m_szControl2, "000");
            m_bControl3 = false;
            strcpy(m_szControl3, "000");
            m_bControl4 = false;
            strcpy(m_szControl4, "0000");
            m_bAcctNo = false;
            strcpy(m_szAcctNo, "0000000000");
            m_bDdaBal = false;
            strcpy(m_szDdaBal, "+0000000000000.00");
            m_bIodProjAccr = false;
            strcpy(m_szIodProjAccr, "+0000000000000.00");
            m_bIodCtdTax = false;
            strcpy(m_szIodCtdTax, "+0000000000000.00");
            m_bOdCycAcr = false;
            strcpy(m_szOdCycAcr, "+0000000.000000");
            m_bIodPendTax = false;
            strcpy(m_szIodPendTax, "+0000000000000.00");
            m_bDdaTotal = false;
            strcpy(m_szDdaTotal, "+0000000000000.00");
            m_bIntCurBal = false;
            strcpy(m_szIntCurBal, "+0000000000000.00");
            m_bProjAccr = false;
            strcpy(m_szProjAccr, "+0000000000000.00");
            m_bSavCtdTax = false;
            strcpy(m_szSavCtdTax, "+0000000000000.00");
            m_bSavPendTax = false;
            strcpy(m_szSavPendTax, "+0000000000000.00");
            m_bSavTotal = false;
            strcpy(m_szSavTotal, "+0000000000000.00");
            m_bPrinBal = false;
            strcpy(m_szPrinBal, "+0000000000000.00");
            m_bIntrstBal = false;
            strcpy(m_szIntrstBal, "+0000000000000.00");
            m_bIns1 = false;
            strcpy(m_szIns1, "+0000000000000.00");
            m_bIns2 = false;
            strcpy(m_szIns2, "+0000000000000.00");
            m_bFees = false;
            strcpy(m_szFees, "+0000000000000.00");
            m_bPayoffAmt = false;
            strcpy(m_szPayoffAmt, "+0000000000000.00");
            m_bHoldAmt = false;
            strcpy(m_szHoldAmt, "+0000000000000.00");
            m_bNoOfAffiliateAccts = false;
            strcpy(m_szNoOfAffiliateAccts, "0");
            m_bNoOfTransferAccts = false;
            strcpy(m_szNoOfTransferAccts, "0");
            m_bNoOfCombStmtAccts = false;
            strcpy(m_szNoOfCombStmtAccts, "00");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                TransferAffiliateAccounts[lOccurs]  = &CTransferAffiliateAccounts[lOccurs];
                CTransferAffiliateAccounts[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 15; lOccurs++)
            {
                CombinedStatementAccounts[lOccurs]  = &CCombinedStatementAccounts[lOccurs];
                CCombinedStatementAccounts[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    CONTROL 1
        long lControl1 () { return 2; };
        RWCString Control1 (void)
        {
            return m_szControl1;
        }
        long Control1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl1, sizeof(m_szControl1), &m_bControl1);
        }
        
        //    CONTROL 2
        long lControl2 () { return 3; };
        RWCString Control2 (void)
        {
            return m_szControl2;
        }
        long Control2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl2, sizeof(m_szControl2), &m_bControl2);
        }
        
        //    CONTROL 3
        long lControl3 () { return 3; };
        RWCString Control3 (void)
        {
            return m_szControl3;
        }
        long Control3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl3, sizeof(m_szControl3), &m_bControl3);
        }
        
        //    CONTROL 4
        long lControl4 () { return 4; };
        RWCString Control4 (void)
        {
            return m_szControl4;
        }
        long Control4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szControl4, sizeof(m_szControl4), &m_bControl4);
        }
        
        //    ACCOUNT NUMBER
        long lAcctNo () { return 10; };
        RWCString AcctNo (void)
        {
            return m_szAcctNo;
        }
        long AcctNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcctNo, sizeof(m_szAcctNo), &m_bAcctNo);
        }
        
        //    DDA BALANCE
        long lDdaBal () { return 17; };
        RWCString DdaBal (void)
        {
            return AceZeroSupp(m_szDdaBal, &m_szSuppressBuff[0]);
        }
        RWCString DdaBalRaw (void)
        {
            return m_szDdaBal;
        }
        long DdaBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDdaBal, sizeof(m_szDdaBal), &m_bDdaBal);
        }
        
        //    IOD PROJECTED INTEREST ACCRUED
        long lIodProjAccr () { return 17; };
        RWCString IodProjAccr (void)
        {
            return AceZeroSupp(m_szIodProjAccr, &m_szSuppressBuff[0]);
        }
        RWCString IodProjAccrRaw (void)
        {
            return m_szIodProjAccr;
        }
        long IodProjAccr (const RWCString& rwc)
        {
            return SetString(rwc, m_szIodProjAccr, sizeof(m_szIodProjAccr), &m_bIodProjAccr);
        }
        
        //    IOD BACKUP WITHHOLDING TAX
        long lIodCtdTax () { return 17; };
        RWCString IodCtdTax (void)
        {
            return AceZeroSupp(m_szIodCtdTax, &m_szSuppressBuff[0]);
        }
        RWCString IodCtdTaxRaw (void)
        {
            return m_szIodCtdTax;
        }
        long IodCtdTax (const RWCString& rwc)
        {
            return SetString(rwc, m_szIodCtdTax, sizeof(m_szIodCtdTax), &m_bIodCtdTax);
        }
        
        //    OVERDRAFT INTEREST ACCRUED THIS CYCLE
        long lOdCycAcr () { return 15; };
        RWCString OdCycAcr (void)
        {
            return AceZeroSupp(m_szOdCycAcr, &m_szSuppressBuff[0]);
        }
        RWCString OdCycAcrRaw (void)
        {
            return m_szOdCycAcr;
        }
        long OdCycAcr (const RWCString& rwc)
        {
            return SetString(rwc, m_szOdCycAcr, sizeof(m_szOdCycAcr), &m_bOdCycAcr);
        }
        
        //    IOD PENDING TAX COMPUTED IN INTEREST PAYMENTS
        long lIodPendTax () { return 17; };
        RWCString IodPendTax (void)
        {
            return AceZeroSupp(m_szIodPendTax, &m_szSuppressBuff[0]);
        }
        RWCString IodPendTaxRaw (void)
        {
            return m_szIodPendTax;
        }
        long IodPendTax (const RWCString& rwc)
        {
            return SetString(rwc, m_szIodPendTax, sizeof(m_szIodPendTax), &m_bIodPendTax);
        }
        
        //    NET DDA TOTAL BALANCE
        long lDdaTotal () { return 17; };
        RWCString DdaTotal (void)
        {
            return AceZeroSupp(m_szDdaTotal, &m_szSuppressBuff[0]);
        }
        RWCString DdaTotalRaw (void)
        {
            return m_szDdaTotal;
        }
        long DdaTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szDdaTotal, sizeof(m_szDdaTotal), &m_bDdaTotal);
        }
        
        //    CURRENT SAVINGS BALANCE
        long lIntCurBal () { return 17; };
        RWCString IntCurBal (void)
        {
            return AceZeroSupp(m_szIntCurBal, &m_szSuppressBuff[0]);
        }
        RWCString IntCurBalRaw (void)
        {
            return m_szIntCurBal;
        }
        long IntCurBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szIntCurBal, sizeof(m_szIntCurBal), &m_bIntCurBal);
        }
        
        //    SAVINGS PROJECTED ACCRUED INTEREST
        long lProjAccr () { return 17; };
        RWCString ProjAccr (void)
        {
            return AceZeroSupp(m_szProjAccr, &m_szSuppressBuff[0]);
        }
        RWCString ProjAccrRaw (void)
        {
            return m_szProjAccr;
        }
        long ProjAccr (const RWCString& rwc)
        {
            return SetString(rwc, m_szProjAccr, sizeof(m_szProjAccr), &m_bProjAccr);
        }
        
        //    SAVINGS BACKUP WITHHOLDING TAX
        long lSavCtdTax () { return 17; };
        RWCString SavCtdTax (void)
        {
            return AceZeroSupp(m_szSavCtdTax, &m_szSuppressBuff[0]);
        }
        RWCString SavCtdTaxRaw (void)
        {
            return m_szSavCtdTax;
        }
        long SavCtdTax (const RWCString& rwc)
        {
            return SetString(rwc, m_szSavCtdTax, sizeof(m_szSavCtdTax), &m_bSavCtdTax);
        }
        
        //    SAVINGS PENDING TAX
        long lSavPendTax () { return 17; };
        RWCString SavPendTax (void)
        {
            return AceZeroSupp(m_szSavPendTax, &m_szSuppressBuff[0]);
        }
        RWCString SavPendTaxRaw (void)
        {
            return m_szSavPendTax;
        }
        long SavPendTax (const RWCString& rwc)
        {
            return SetString(rwc, m_szSavPendTax, sizeof(m_szSavPendTax), &m_bSavPendTax);
        }
        
        //    NET SAVINGS TOTAL BALANCE
        long lSavTotal () { return 17; };
        RWCString SavTotal (void)
        {
            return AceZeroSupp(m_szSavTotal, &m_szSuppressBuff[0]);
        }
        RWCString SavTotalRaw (void)
        {
            return m_szSavTotal;
        }
        long SavTotal (const RWCString& rwc)
        {
            return SetString(rwc, m_szSavTotal, sizeof(m_szSavTotal), &m_bSavTotal);
        }
        
        //    UNPAID LOAN PRINCIPAL BALANCE
        long lPrinBal () { return 17; };
        RWCString PrinBal (void)
        {
            return AceZeroSupp(m_szPrinBal, &m_szSuppressBuff[0]);
        }
        RWCString PrinBalRaw (void)
        {
            return m_szPrinBal;
        }
        long PrinBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szPrinBal, sizeof(m_szPrinBal), &m_bPrinBal);
        }
        
        //    LOAN INTEREST BALANCE
        long lIntrstBal () { return 17; };
        RWCString IntrstBal (void)
        {
            return AceZeroSupp(m_szIntrstBal, &m_szSuppressBuff[0]);
        }
        RWCString IntrstBalRaw (void)
        {
            return m_szIntrstBal;
        }
        long IntrstBal (const RWCString& rwc)
        {
            return SetString(rwc, m_szIntrstBal, sizeof(m_szIntrstBal), &m_bIntrstBal);
        }
        
        //    AMOUNT DUE FOR INSURANCE 1 ON LOAN
        long lIns1 () { return 17; };
        RWCString Ins1 (void)
        {
            return AceZeroSupp(m_szIns1, &m_szSuppressBuff[0]);
        }
        RWCString Ins1Raw (void)
        {
            return m_szIns1;
        }
        long Ins1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szIns1, sizeof(m_szIns1), &m_bIns1);
        }
        
        //    AMOUNT DUE FOR INSURANCE 2 ON LOAN
        long lIns2 () { return 17; };
        RWCString Ins2 (void)
        {
            return AceZeroSupp(m_szIns2, &m_szSuppressBuff[0]);
        }
        RWCString Ins2Raw (void)
        {
            return m_szIns2;
        }
        long Ins2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szIns2, sizeof(m_szIns2), &m_bIns2);
        }
        
        //    AMOUNT DUE FOR OTHER FESS ON LOAN
        long lFees () { return 17; };
        RWCString Fees (void)
        {
            return AceZeroSupp(m_szFees, &m_szSuppressBuff[0]);
        }
        RWCString FeesRaw (void)
        {
            return m_szFees;
        }
        long Fees (const RWCString& rwc)
        {
            return SetString(rwc, m_szFees, sizeof(m_szFees), &m_bFees);
        }
        
        //    TOTAL LOAN PAYOFF AMOUNT
        long lPayoffAmt () { return 17; };
        RWCString PayoffAmt (void)
        {
            return AceZeroSupp(m_szPayoffAmt, &m_szSuppressBuff[0]);
        }
        RWCString PayoffAmtRaw (void)
        {
            return m_szPayoffAmt;
        }
        long PayoffAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szPayoffAmt, sizeof(m_szPayoffAmt), &m_bPayoffAmt);
        }
        
        //    TOTAL AMOUNT OF CURRENT HOLDS
        long lHoldAmt () { return 17; };
        RWCString HoldAmt (void)
        {
            return AceZeroSupp(m_szHoldAmt, &m_szSuppressBuff[0]);
        }
        RWCString HoldAmtRaw (void)
        {
            return m_szHoldAmt;
        }
        long HoldAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szHoldAmt, sizeof(m_szHoldAmt), &m_bHoldAmt);
        }
        
        //    NBR OF AFFILIATE ACCTS IN TRANSFER/AFFL TRLR
        long lNoOfAffiliateAccts () { return 1; };
        RWCString NoOfAffiliateAccts (void)
        {
            return m_szNoOfAffiliateAccts;
        }
        long NoOfAffiliateAccts (const RWCString& rwc)
        {
            return SetString(rwc, m_szNoOfAffiliateAccts, sizeof(m_szNoOfAffiliateAccts), &m_bNoOfAffiliateAccts);
        }
        
        //    NBR OF TRANSFER ACCTS IN TRANSFER/AFFL TRLR
        long lNoOfTransferAccts () { return 1; };
        RWCString NoOfTransferAccts (void)
        {
            return m_szNoOfTransferAccts;
        }
        long NoOfTransferAccts (const RWCString& rwc)
        {
            return SetString(rwc, m_szNoOfTransferAccts, sizeof(m_szNoOfTransferAccts), &m_bNoOfTransferAccts);
        }
        
        //    NBR OF COMBINED STATEMENT ACCOUNTS IN TRAILER
        long lNoOfCombStmtAccts () { return 2; };
        RWCString NoOfCombStmtAccts (void)
        {
            return m_szNoOfCombStmtAccts;
        }
        long NoOfCombStmtAccts (const RWCString& rwc)
        {
            return SetString(rwc, m_szNoOfCombStmtAccts, sizeof(m_szNoOfCombStmtAccts), &m_bNoOfCombStmtAccts);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bControl1) return true;
            if (m_bControl2) return true;
            if (m_bControl3) return true;
            if (m_bControl4) return true;
            if (m_bAcctNo) return true;
            if (m_bDdaBal) return true;
            if (m_bIodProjAccr) return true;
            if (m_bIodCtdTax) return true;
            if (m_bOdCycAcr) return true;
            if (m_bIodPendTax) return true;
            if (m_bDdaTotal) return true;
            if (m_bIntCurBal) return true;
            if (m_bProjAccr) return true;
            if (m_bSavCtdTax) return true;
            if (m_bSavPendTax) return true;
            if (m_bSavTotal) return true;
            if (m_bPrinBal) return true;
            if (m_bIntrstBal) return true;
            if (m_bIns1) return true;
            if (m_bIns2) return true;
            if (m_bFees) return true;
            if (m_bPayoffAmt) return true;
            if (m_bHoldAmt) return true;
            if (m_bNoOfAffiliateAccts) return true;
            if (m_bNoOfTransferAccts) return true;
            if (m_bNoOfCombStmtAccts) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 9; lOccurs++)
            {
                if(CTransferAffiliateAccounts[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 15; lOccurs++)
            {
                if(CCombinedStatementAccounts[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDIMCLIB", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "Control1", m_szControl1, &m_bControl1);
                AddXMLField(pSess, "Control2", m_szControl2, &m_bControl2);
                AddXMLField(pSess, "Control3", m_szControl3, &m_bControl3);
                AddXMLField(pSess, "Control4", m_szControl4, &m_bControl4);
                AddXMLField(pSess, "AcctNo", m_szAcctNo, &m_bAcctNo);
                AddXMLField(pSess, "DdaBal", m_szDdaBal, &m_bDdaBal);
                AddXMLField(pSess, "IodProjAccr", m_szIodProjAccr, &m_bIodProjAccr);
                AddXMLField(pSess, "IodCtdTax", m_szIodCtdTax, &m_bIodCtdTax);
                AddXMLField(pSess, "OdCycAcr", m_szOdCycAcr, &m_bOdCycAcr);
                AddXMLField(pSess, "IodPendTax", m_szIodPendTax, &m_bIodPendTax);
                AddXMLField(pSess, "DdaTotal", m_szDdaTotal, &m_bDdaTotal);
                AddXMLField(pSess, "IntCurBal", m_szIntCurBal, &m_bIntCurBal);
                AddXMLField(pSess, "ProjAccr", m_szProjAccr, &m_bProjAccr);
                AddXMLField(pSess, "SavCtdTax", m_szSavCtdTax, &m_bSavCtdTax);
                AddXMLField(pSess, "SavPendTax", m_szSavPendTax, &m_bSavPendTax);
                AddXMLField(pSess, "SavTotal", m_szSavTotal, &m_bSavTotal);
                AddXMLField(pSess, "PrinBal", m_szPrinBal, &m_bPrinBal);
                AddXMLField(pSess, "IntrstBal", m_szIntrstBal, &m_bIntrstBal);
                AddXMLField(pSess, "Ins1", m_szIns1, &m_bIns1);
                AddXMLField(pSess, "Ins2", m_szIns2, &m_bIns2);
                AddXMLField(pSess, "Fees", m_szFees, &m_bFees);
                AddXMLField(pSess, "PayoffAmt", m_szPayoffAmt, &m_bPayoffAmt);
                AddXMLField(pSess, "HoldAmt", m_szHoldAmt, &m_bHoldAmt);
                AddXMLField(pSess, "NoOfAffiliateAccts", m_szNoOfAffiliateAccts, &m_bNoOfAffiliateAccts);
                AddXMLField(pSess, "NoOfTransferAccts", m_szNoOfTransferAccts, &m_bNoOfTransferAccts);
                AddXMLField(pSess, "NoOfCombStmtAccts", m_szNoOfCombStmtAccts, &m_bNoOfCombStmtAccts);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 9; lOccurs++)
                {
                    CTransferAffiliateAccounts[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 15; lOccurs++)
                {
                    CCombinedStatementAccounts[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDIMCLIB");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDIMCLIB", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "Control1", m_szControl1);
                GetXMLField(pSess, "Control2", m_szControl2);
                GetXMLField(pSess, "Control3", m_szControl3);
                GetXMLField(pSess, "Control4", m_szControl4);
                GetXMLField(pSess, "AcctNo", m_szAcctNo);
                GetXMLField(pSess, "DdaBal", m_szDdaBal);
                GetXMLField(pSess, "IodProjAccr", m_szIodProjAccr);
                GetXMLField(pSess, "IodCtdTax", m_szIodCtdTax);
                GetXMLField(pSess, "OdCycAcr", m_szOdCycAcr);
                GetXMLField(pSess, "IodPendTax", m_szIodPendTax);
                GetXMLField(pSess, "DdaTotal", m_szDdaTotal);
                GetXMLField(pSess, "IntCurBal", m_szIntCurBal);
                GetXMLField(pSess, "ProjAccr", m_szProjAccr);
                GetXMLField(pSess, "SavCtdTax", m_szSavCtdTax);
                GetXMLField(pSess, "SavPendTax", m_szSavPendTax);
                GetXMLField(pSess, "SavTotal", m_szSavTotal);
                GetXMLField(pSess, "PrinBal", m_szPrinBal);
                GetXMLField(pSess, "IntrstBal", m_szIntrstBal);
                GetXMLField(pSess, "Ins1", m_szIns1);
                GetXMLField(pSess, "Ins2", m_szIns2);
                GetXMLField(pSess, "Fees", m_szFees);
                GetXMLField(pSess, "PayoffAmt", m_szPayoffAmt);
                GetXMLField(pSess, "HoldAmt", m_szHoldAmt);
                GetXMLField(pSess, "NoOfAffiliateAccts", m_szNoOfAffiliateAccts);
                GetXMLField(pSess, "NoOfTransferAccts", m_szNoOfTransferAccts);
                GetXMLField(pSess, "NoOfCombStmtAccts", m_szNoOfCombStmtAccts);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 9; lOccurs++)
                {
                    CTransferAffiliateAccounts[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 15; lOccurs++)
                {
                    CCombinedStatementAccounts[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDIMCLIB");
            };
        }
        
        //**************** Start AsdTransferAffiliateAccounts Definition ****************
        //                 TRANSFER/AFFILIATE ACCOUNTS
        
        class AsdTransferAffiliateAccounts
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bTrnsfrAfflFlag;
            char      m_szTrnsfrAfflFlag[1+1];
            bool      m_bLinkSysId;
            char      m_szLinkSysId[2+1];
            bool      m_bLinkageCntl;
            char      m_szLinkageCntl[35+1];
            bool      m_bTransferAmt;
            char      m_szTransferAmt[17+1];
            bool      m_bLinkSchdCode;
            char      m_szLinkSchdCode[1+1];
            bool      m_bLinkSchdDay1;
            char      m_szLinkSchdDay1[2+1];
            bool      m_bLinkSchdDay2;
            char      m_szLinkSchdDay2[2+1];
            bool      m_bLinkSchdIncr;
            char      m_szLinkSchdIncr[1+1];
            bool      m_bLinkSchdMon;
            char      m_szLinkSchdMon[1+1];
            bool      m_bEffectiveCent;
            char      m_szEffectiveCent[2+1];
            bool      m_bEffectiveYr;
            char      m_szEffectiveYr[2+1];
            bool      m_bEffectiveMo;
            char      m_szEffectiveMo[2+1];
            bool      m_bEffectiveDa;
            char      m_szEffectiveDa[2+1];
            bool      m_bExpirationCent;
            char      m_szExpirationCent[2+1];
            bool      m_bExpirationYr;
            char      m_szExpirationYr[2+1];
            bool      m_bExpirationMo;
            char      m_szExpirationMo[2+1];
            bool      m_bExpirationDa;
            char      m_szExpirationDa[2+1];
            bool      m_bRemainingNo;
            char      m_szRemainingNo[4+1];
        
          public:
            long      m_lIndex;

            AsdTransferAffiliateAccounts ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bTrnsfrAfflFlag = false;
                strcpy(m_szTrnsfrAfflFlag, "0");
                m_bLinkSysId = false;
                strcpy(m_szLinkSysId, "");
                m_bLinkageCntl = false;
                strcpy(m_szLinkageCntl, "");
                m_bTransferAmt = false;
                strcpy(m_szTransferAmt, "+0000000000000.00");
                m_bLinkSchdCode = false;
                strcpy(m_szLinkSchdCode, "");
                m_bLinkSchdDay1 = false;
                strcpy(m_szLinkSchdDay1, "");
                m_bLinkSchdDay2 = false;
                strcpy(m_szLinkSchdDay2, "");
                m_bLinkSchdIncr = false;
                strcpy(m_szLinkSchdIncr, "");
                m_bLinkSchdMon = false;
                strcpy(m_szLinkSchdMon, "");
                m_bEffectiveCent = false;
                strcpy(m_szEffectiveCent, "");
                m_bEffectiveYr = false;
                strcpy(m_szEffectiveYr, "");
                m_bEffectiveMo = false;
                strcpy(m_szEffectiveMo, "");
                m_bEffectiveDa = false;
                strcpy(m_szEffectiveDa, "");
                m_bExpirationCent = false;
                strcpy(m_szExpirationCent, "");
                m_bExpirationYr = false;
                strcpy(m_szExpirationYr, "");
                m_bExpirationMo = false;
                strcpy(m_szExpirationMo, "");
                m_bExpirationDa = false;
                strcpy(m_szExpirationDa, "");
                m_bRemainingNo = false;
                strcpy(m_szRemainingNo, "+000");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    TYPE OF TRAILER TYPE - TRANSFER OR AFFILIATE
            long lTrnsfrAfflFlag () { return 1; };
            RWCString TrnsfrAfflFlag (void)
            {
                return m_szTrnsfrAfflFlag;
            }
            long TrnsfrAfflFlag (const RWCString& rwc)
            {
                return SetString(rwc, m_szTrnsfrAfflFlag, sizeof(m_szTrnsfrAfflFlag), &m_bTrnsfrAfflFlag);
            }
            
            //    TRANSFER/AFFILIATE LINK SYS ID
            long lLinkSysId () { return 2; };
            RWCString LinkSysId (void)
            {
                return m_szLinkSysId;
            }
            long LinkSysId (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkSysId, sizeof(m_szLinkSysId), &m_bLinkSysId);
            }
            
            //    TRANSFER/AFFILIATE LINKAGE CONTROL
            long lLinkageCntl () { return 35; };
            RWCString LinkageCntl (void)
            {
                return m_szLinkageCntl;
            }
            long LinkageCntl (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkageCntl, sizeof(m_szLinkageCntl), &m_bLinkageCntl);
            }
            
            //    TRANSFER/AFFILIATE TRANSFER AMOUNT
            long lTransferAmt () { return 17; };
            RWCString TransferAmt (void)
            {
                return AceZeroSupp(m_szTransferAmt, &m_szSuppressBuff[0]);
            }
            RWCString TransferAmtRaw (void)
            {
                return m_szTransferAmt;
            }
            long TransferAmt (const RWCString& rwc)
            {
                return SetString(rwc, m_szTransferAmt, sizeof(m_szTransferAmt), &m_bTransferAmt);
            }
            
            //    TRANSFER/AFFILIATE LINK SCHEDULE CODE
            long lLinkSchdCode () { return 1; };
            RWCString LinkSchdCode (void)
            {
                return m_szLinkSchdCode;
            }
            long LinkSchdCode (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkSchdCode, sizeof(m_szLinkSchdCode), &m_bLinkSchdCode);
            }
            
            //    TRANSFER/AFFILIATE LINK SCHEDULE DAY 1
            long lLinkSchdDay1 () { return 2; };
            RWCString LinkSchdDay1 (void)
            {
                return m_szLinkSchdDay1;
            }
            long LinkSchdDay1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkSchdDay1, sizeof(m_szLinkSchdDay1), &m_bLinkSchdDay1);
            }
            
            //    TRANSFER/AFFILIATE LINK SCHEDULE DAY 2
            long lLinkSchdDay2 () { return 2; };
            RWCString LinkSchdDay2 (void)
            {
                return m_szLinkSchdDay2;
            }
            long LinkSchdDay2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkSchdDay2, sizeof(m_szLinkSchdDay2), &m_bLinkSchdDay2);
            }
            
            //    TRANSFER/AFFILIATE LINK SCHEDULE INCREMENT
            long lLinkSchdIncr () { return 1; };
            RWCString LinkSchdIncr (void)
            {
                return m_szLinkSchdIncr;
            }
            long LinkSchdIncr (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkSchdIncr, sizeof(m_szLinkSchdIncr), &m_bLinkSchdIncr);
            }
            
            //    TRANSFER/AFFILIATE LINK SCHEDULE MONTH
            long lLinkSchdMon () { return 1; };
            RWCString LinkSchdMon (void)
            {
                return m_szLinkSchdMon;
            }
            long LinkSchdMon (const RWCString& rwc)
            {
                return SetString(rwc, m_szLinkSchdMon, sizeof(m_szLinkSchdMon), &m_bLinkSchdMon);
            }
            
            //    TRANSFER/AFFILIATE EFFECTIVE CENTURY
            long lEffectiveCent () { return 2; };
            RWCString EffectiveCent (void)
            {
                return m_szEffectiveCent;
            }
            long EffectiveCent (const RWCString& rwc)
            {
                return SetString(rwc, m_szEffectiveCent, sizeof(m_szEffectiveCent), &m_bEffectiveCent);
            }
            
            //    TRANSFER/AFFILIATE EFFECTIVE YEAR
            long lEffectiveYr () { return 2; };
            RWCString EffectiveYr (void)
            {
                return m_szEffectiveYr;
            }
            long EffectiveYr (const RWCString& rwc)
            {
                return SetString(rwc, m_szEffectiveYr, sizeof(m_szEffectiveYr), &m_bEffectiveYr);
            }
            
            //    TRANSFER/AFFILIATE EFFECTIVE MONTH
            long lEffectiveMo () { return 2; };
            RWCString EffectiveMo (void)
            {
                return m_szEffectiveMo;
            }
            long EffectiveMo (const RWCString& rwc)
            {
                return SetString(rwc, m_szEffectiveMo, sizeof(m_szEffectiveMo), &m_bEffectiveMo);
            }
            
            //    TRANSFER/AFFILIATE EFFECTIVE DAY
            long lEffectiveDa () { return 2; };
            RWCString EffectiveDa (void)
            {
                return m_szEffectiveDa;
            }
            long EffectiveDa (const RWCString& rwc)
            {
                return SetString(rwc, m_szEffectiveDa, sizeof(m_szEffectiveDa), &m_bEffectiveDa);
            }
            
            //    TRANSFER/AFFILIATE EXPIRATION CENT
            long lExpirationCent () { return 2; };
            RWCString ExpirationCent (void)
            {
                return m_szExpirationCent;
            }
            long ExpirationCent (const RWCString& rwc)
            {
                return SetString(rwc, m_szExpirationCent, sizeof(m_szExpirationCent), &m_bExpirationCent);
            }
            
            //    TRANSFER/AFFILIATE EXPIRATION YEAR
            long lExpirationYr () { return 2; };
            RWCString ExpirationYr (void)
            {
                return m_szExpirationYr;
            }
            long ExpirationYr (const RWCString& rwc)
            {
                return SetString(rwc, m_szExpirationYr, sizeof(m_szExpirationYr), &m_bExpirationYr);
            }
            
            //    TRANSFER/AFFILIATE EXPIRATION MONTH
            long lExpirationMo () { return 2; };
            RWCString ExpirationMo (void)
            {
                return m_szExpirationMo;
            }
            long ExpirationMo (const RWCString& rwc)
            {
                return SetString(rwc, m_szExpirationMo, sizeof(m_szExpirationMo), &m_bExpirationMo);
            }
            
            //    TRANSFER/AFFILIATE EXPIRATION DAY
            long lExpirationDa () { return 2; };
            RWCString ExpirationDa (void)
            {
                return m_szExpirationDa;
            }
            long ExpirationDa (const RWCString& rwc)
            {
                return SetString(rwc, m_szExpirationDa, sizeof(m_szExpirationDa), &m_bExpirationDa);
            }
            
            //    TRANSFER/AFFILIATE REMAINING NUMBER OF TRANSFERS
            long lRemainingNo () { return 4; };
            RWCString RemainingNo (void)
            {
                return AceZeroSupp(m_szRemainingNo, &m_szSuppressBuff[0]);
            }
            RWCString RemainingNoRaw (void)
            {
                return m_szRemainingNo;
            }
            long RemainingNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szRemainingNo, sizeof(m_szRemainingNo), &m_bRemainingNo);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bTrnsfrAfflFlag) return true;
                if (m_bLinkSysId) return true;
                if (m_bLinkageCntl) return true;
                if (m_bTransferAmt) return true;
                if (m_bLinkSchdCode) return true;
                if (m_bLinkSchdDay1) return true;
                if (m_bLinkSchdDay2) return true;
                if (m_bLinkSchdIncr) return true;
                if (m_bLinkSchdMon) return true;
                if (m_bEffectiveCent) return true;
                if (m_bEffectiveYr) return true;
                if (m_bEffectiveMo) return true;
                if (m_bEffectiveDa) return true;
                if (m_bExpirationCent) return true;
                if (m_bExpirationYr) return true;
                if (m_bExpirationMo) return true;
                if (m_bExpirationDa) return true;
                if (m_bRemainingNo) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "TransferAffiliateAccounts", m_lIndex);
                    AddXMLField(pSess, "TrnsfrAfflFlag", m_szTrnsfrAfflFlag, &m_bTrnsfrAfflFlag);
                    AddXMLField(pSess, "LinkSysId", m_szLinkSysId, &m_bLinkSysId);
                    AddXMLField(pSess, "LinkageCntl", m_szLinkageCntl, &m_bLinkageCntl);
                    AddXMLField(pSess, "TransferAmt", m_szTransferAmt, &m_bTransferAmt);
                    AddXMLField(pSess, "LinkSchdCode", m_szLinkSchdCode, &m_bLinkSchdCode);
                    AddXMLField(pSess, "LinkSchdDay1", m_szLinkSchdDay1, &m_bLinkSchdDay1);
                    AddXMLField(pSess, "LinkSchdDay2", m_szLinkSchdDay2, &m_bLinkSchdDay2);
                    AddXMLField(pSess, "LinkSchdIncr", m_szLinkSchdIncr, &m_bLinkSchdIncr);
                    AddXMLField(pSess, "LinkSchdMon", m_szLinkSchdMon, &m_bLinkSchdMon);
                    AddXMLField(pSess, "EffectiveCent", m_szEffectiveCent, &m_bEffectiveCent);
                    AddXMLField(pSess, "EffectiveYr", m_szEffectiveYr, &m_bEffectiveYr);
                    AddXMLField(pSess, "EffectiveMo", m_szEffectiveMo, &m_bEffectiveMo);
                    AddXMLField(pSess, "EffectiveDa", m_szEffectiveDa, &m_bEffectiveDa);
                    AddXMLField(pSess, "ExpirationCent", m_szExpirationCent, &m_bExpirationCent);
                    AddXMLField(pSess, "ExpirationYr", m_szExpirationYr, &m_bExpirationYr);
                    AddXMLField(pSess, "ExpirationMo", m_szExpirationMo, &m_bExpirationMo);
                    AddXMLField(pSess, "ExpirationDa", m_szExpirationDa, &m_bExpirationDa);
                    AddXMLField(pSess, "RemainingNo", m_szRemainingNo, &m_bRemainingNo);
                    AddXMLCloseRecord(pSess, "TransferAffiliateAccounts");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "TransferAffiliateAccounts", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "TrnsfrAfflFlag", m_szTrnsfrAfflFlag);
                    GetXMLField(pSess, "LinkSysId", m_szLinkSysId);
                    GetXMLField(pSess, "LinkageCntl", m_szLinkageCntl);
                    GetXMLField(pSess, "TransferAmt", m_szTransferAmt);
                    GetXMLField(pSess, "LinkSchdCode", m_szLinkSchdCode);
                    GetXMLField(pSess, "LinkSchdDay1", m_szLinkSchdDay1);
                    GetXMLField(pSess, "LinkSchdDay2", m_szLinkSchdDay2);
                    GetXMLField(pSess, "LinkSchdIncr", m_szLinkSchdIncr);
                    GetXMLField(pSess, "LinkSchdMon", m_szLinkSchdMon);
                    GetXMLField(pSess, "EffectiveCent", m_szEffectiveCent);
                    GetXMLField(pSess, "EffectiveYr", m_szEffectiveYr);
                    GetXMLField(pSess, "EffectiveMo", m_szEffectiveMo);
                    GetXMLField(pSess, "EffectiveDa", m_szEffectiveDa);
                    GetXMLField(pSess, "ExpirationCent", m_szExpirationCent);
                    GetXMLField(pSess, "ExpirationYr", m_szExpirationYr);
                    GetXMLField(pSess, "ExpirationMo", m_szExpirationMo);
                    GetXMLField(pSess, "ExpirationDa", m_szExpirationDa);
                    GetXMLField(pSess, "RemainingNo", m_szRemainingNo);
                    CloseXMLRecord(pSess, "TransferAffiliateAccounts");
                };
            }
        };

        AsdTransferAffiliateAccounts  CTransferAffiliateAccounts[9];
        AsdTransferAffiliateAccounts *TransferAffiliateAccounts[9];
        
        //**************** End AsdTransferAffiliateAccounts Definition ****************
        
        
        //**************** Start AsdCombinedStatementAccounts Definition ****************
        //                 COMBINED STATEMENT TRAILER
        
        class AsdCombinedStatementAccounts
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bCombStmtSysId;
            char      m_szCombStmtSysId[2+1];
            bool      m_bCombStmtControl;
            char      m_szCombStmtControl[35+1];
        
          public:
            long      m_lIndex;

            AsdCombinedStatementAccounts ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bCombStmtSysId = false;
                strcpy(m_szCombStmtSysId, "");
                m_bCombStmtControl = false;
                strcpy(m_szCombStmtControl, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    COMBINED STATEMENT SYSTEM ID
            long lCombStmtSysId () { return 2; };
            RWCString CombStmtSysId (void)
            {
                return m_szCombStmtSysId;
            }
            long CombStmtSysId (const RWCString& rwc)
            {
                return SetString(rwc, m_szCombStmtSysId, sizeof(m_szCombStmtSysId), &m_bCombStmtSysId);
            }
            
            //    COMBINED STATEMENT CONTROL
            long lCombStmtControl () { return 35; };
            RWCString CombStmtControl (void)
            {
                return m_szCombStmtControl;
            }
            long CombStmtControl (const RWCString& rwc)
            {
                return SetString(rwc, m_szCombStmtControl, sizeof(m_szCombStmtControl), &m_bCombStmtControl);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bCombStmtSysId) return true;
                if (m_bCombStmtControl) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "CombinedStatementAccounts", m_lIndex);
                    AddXMLField(pSess, "CombStmtSysId", m_szCombStmtSysId, &m_bCombStmtSysId);
                    AddXMLField(pSess, "CombStmtControl", m_szCombStmtControl, &m_bCombStmtControl);
                    AddXMLCloseRecord(pSess, "CombinedStatementAccounts");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "CombinedStatementAccounts", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "CombStmtSysId", m_szCombStmtSysId);
                    GetXMLField(pSess, "CombStmtControl", m_szCombStmtControl);
                    CloseXMLRecord(pSess, "CombinedStatementAccounts");
                };
            }
        };

        AsdCombinedStatementAccounts  CCombinedStatementAccounts[15];
        AsdCombinedStatementAccounts *CombinedStatementAccounts[15];
        
        //**************** End AsdCombinedStatementAccounts Definition ****************
        
    };

    AsdSDIMCLIB CSDIMCLIB;
    AsdSDIMCLIB *SDIMCLIB;
    
    //**************** End AsdSDIMCLIB Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCIICLData Definition ****************

typedef AsdSDPCIICLData *LPSDPCIICL;
typedef AsdSDPCIICLData::AsdTSHeader *LPSDPCIICL_TSHeader;
typedef AsdSDPCIICLData::AsdSDIMCLIB *LPSDPCIICL_SDIMCLIB;
typedef AsdSDPCIICLData::AsdSDIMCLIB::AsdTransferAffiliateAccounts *LPSDPCIICL_SDIMCLIB_TransferAffiliateAccounts;
typedef AsdSDPCIICLData::AsdSDIMCLIB::AsdCombinedStatementAccounts *LPSDPCIICL_SDIMCLIB_CombinedStatementAccounts;
typedef AsdSDPCIICLData::AsdTSMDA *LPSDPCIICL_TSMDA;
typedef AsdSDPCIICLData::AsdTSMDA::AsdMdaTrmMsg *LPSDPCIICL_TSMDA_MdaTrmMsg;
typedef AsdSDPCIICLData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCIICL_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCIICLData_H

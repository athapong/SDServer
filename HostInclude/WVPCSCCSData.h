#ifndef AsdWVPCSCCSData_H
#define AsdWVPCSCCSData_H

#include <stdlib.h>
#ifdef  AsdWVPCSCCS_INTEGRITY_STRING
#undef  AsdWVPCSCCS_INTEGRITY_STRING
#endif
#define AsdWVPCSCCS_INTEGRITY_STRING        ""

#ifdef  AsdWVPCSCCS_CRC_STRING
#undef  AsdWVPCSCCS_CRC_STRING
#endif
#define AsdWVPCSCCS_CRC_STRING "1383488887"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdWVPCSCCSData Definition ****************
//                 Combined Statement

//                 WVPCSCCSData.h generated by AceGen2 ver. 2.5.09

class AsdWVPCSCCSData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdWVPCSCCSData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "WVPCSCCS.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdWVPCSCCS_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        WVSCCSMT = &CWVSCCSMT;
        TSMDA = &CTSMDA;
    }

    ~AsdWVPCSCCSData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CWVSCCSMT.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdWVPCSCCS_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCSCCS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVSCCSMT.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCSCCS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVSCCSMT.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCSCCS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCSCCS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVSCCSMT.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCSCCS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVSCCSMT.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCSCCS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCSCCS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdWVSCCSMT Definition ****************
    //                 CCW WORK DAG FOR COMBINED STATEMENT                         
    
    //    WVSCCSMT.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/04/02 14:43:21
    class AsdWVSCCSMT
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bNbrRequested;
        char      m_szNbrRequested[4+1];
        bool      m_bTblUsed;
        char      m_szTblUsed[4+1];
        bool      m_bMoreDataInd;
        char      m_szMoreDataInd[1+1];
        bool      m_bScBegKey;
        char      m_szScBegKey[75+1];
        bool      m_bScEndKey;
        char      m_szScEndKey[75+1];
        bool      m_bActCd;
        char      m_szActCd[1+1];
        bool      m_bPagingCd;
        char      m_szPagingCd[1+1];
        bool      m_bCdrScCtl1;
        char      m_szCdrScCtl1[4+1];
        bool      m_bCdrScCtl2;
        char      m_szCdrScCtl2[4+1];
        bool      m_bCdrScCtl3;
        char      m_szCdrScCtl3[4+1];
        bool      m_bCdrScCtl4;
        char      m_szCdrScCtl4[4+1];
        bool      m_bCdrScCustNbr;
        char      m_szCdrScCustNbr[14+1];
        bool      m_bCdrApplId;
        char      m_szCdrApplId[2+1];
        bool      m_bCdrApplCtl1;
        char      m_szCdrApplCtl1[4+1];
        bool      m_bCdrApplCtl2;
        char      m_szCdrApplCtl2[4+1];
        bool      m_bCdrApplCtl3;
        char      m_szCdrApplCtl3[4+1];
        bool      m_bCdrApplCtl4;
        char      m_szCdrApplCtl4[4+1];
        bool      m_bCdrApplAcctNbr;
        char      m_szCdrApplAcctNbr[27+1];
        bool      m_bCdrCustName;
        char      m_szCdrCustName[40+1];
    
      public:
        long      m_lIndex;

        AsdWVSCCSMT ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bNbrRequested = false;
            strcpy(m_szNbrRequested, "+000");
            m_bTblUsed = false;
            strcpy(m_szTblUsed, "+000");
            m_bMoreDataInd = false;
            strcpy(m_szMoreDataInd, "");
            m_bScBegKey = false;
            strcpy(m_szScBegKey, "");
            m_bScEndKey = false;
            strcpy(m_szScEndKey, "");
            m_bActCd = false;
            strcpy(m_szActCd, "");
            m_bPagingCd = false;
            strcpy(m_szPagingCd, "");
            m_bCdrScCtl1 = false;
            strcpy(m_szCdrScCtl1, "");
            m_bCdrScCtl2 = false;
            strcpy(m_szCdrScCtl2, "");
            m_bCdrScCtl3 = false;
            strcpy(m_szCdrScCtl3, "");
            m_bCdrScCtl4 = false;
            strcpy(m_szCdrScCtl4, "");
            m_bCdrScCustNbr = false;
            strcpy(m_szCdrScCustNbr, "");
            m_bCdrApplId = false;
            strcpy(m_szCdrApplId, "");
            m_bCdrApplCtl1 = false;
            strcpy(m_szCdrApplCtl1, "");
            m_bCdrApplCtl2 = false;
            strcpy(m_szCdrApplCtl2, "");
            m_bCdrApplCtl3 = false;
            strcpy(m_szCdrApplCtl3, "");
            m_bCdrApplCtl4 = false;
            strcpy(m_szCdrApplCtl4, "");
            m_bCdrApplAcctNbr = false;
            strcpy(m_szCdrApplAcctNbr, "");
            m_bCdrCustName = false;
            strcpy(m_szCdrCustName, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                ApplAcctRecTbl[lOccurs]  = &CApplAcctRecTbl[lOccurs];
                CApplAcctRecTbl[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                ApplMaintenanceTbl[lOccurs]  = &CApplMaintenanceTbl[lOccurs];
                CApplMaintenanceTbl[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bNbrRequested = false;
            strcpy(m_szNbrRequested, "+000");
            m_bTblUsed = false;
            strcpy(m_szTblUsed, "+000");
            m_bMoreDataInd = false;
            strcpy(m_szMoreDataInd, "");
            m_bScBegKey = false;
            strcpy(m_szScBegKey, "");
            m_bScEndKey = false;
            strcpy(m_szScEndKey, "");
            m_bActCd = false;
            strcpy(m_szActCd, "");
            m_bPagingCd = false;
            strcpy(m_szPagingCd, "");
            m_bCdrScCtl1 = false;
            strcpy(m_szCdrScCtl1, "");
            m_bCdrScCtl2 = false;
            strcpy(m_szCdrScCtl2, "");
            m_bCdrScCtl3 = false;
            strcpy(m_szCdrScCtl3, "");
            m_bCdrScCtl4 = false;
            strcpy(m_szCdrScCtl4, "");
            m_bCdrScCustNbr = false;
            strcpy(m_szCdrScCustNbr, "");
            m_bCdrApplId = false;
            strcpy(m_szCdrApplId, "");
            m_bCdrApplCtl1 = false;
            strcpy(m_szCdrApplCtl1, "");
            m_bCdrApplCtl2 = false;
            strcpy(m_szCdrApplCtl2, "");
            m_bCdrApplCtl3 = false;
            strcpy(m_szCdrApplCtl3, "");
            m_bCdrApplCtl4 = false;
            strcpy(m_szCdrApplCtl4, "");
            m_bCdrApplAcctNbr = false;
            strcpy(m_szCdrApplAcctNbr, "");
            m_bCdrCustName = false;
            strcpy(m_szCdrCustName, "");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                ApplAcctRecTbl[lOccurs]  = &CApplAcctRecTbl[lOccurs];
                CApplAcctRecTbl[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                ApplMaintenanceTbl[lOccurs]  = &CApplMaintenanceTbl[lOccurs];
                CApplMaintenanceTbl[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    NBR REQUESTED
        long lNbrRequested () { return 4; };
        RWCString NbrRequested (void)
        {
            return AceZeroSupp(m_szNbrRequested, &m_szSuppressBuff[0]);
        }
        RWCString NbrRequestedRaw (void)
        {
            return m_szNbrRequested;
        }
        long NbrRequested (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrRequested, sizeof(m_szNbrRequested), &m_bNbrRequested);
        }
        
        //    TBL USED
        long lTblUsed () { return 4; };
        RWCString TblUsed (void)
        {
            return AceZeroSupp(m_szTblUsed, &m_szSuppressBuff[0]);
        }
        RWCString TblUsedRaw (void)
        {
            return m_szTblUsed;
        }
        long TblUsed (const RWCString& rwc)
        {
            return SetString(rwc, m_szTblUsed, sizeof(m_szTblUsed), &m_bTblUsed);
        }
        
        //    MORE DATA INDICATOR
        long lMoreDataInd () { return 1; };
        RWCString MoreDataInd (void)
        {
            return m_szMoreDataInd;
        }
        long MoreDataInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreDataInd, sizeof(m_szMoreDataInd), &m_bMoreDataInd);
        }
        
        //    SC BEGINNING KEY
        long lScBegKey () { return 75; };
        RWCString ScBegKey (void)
        {
            return m_szScBegKey;
        }
        long ScBegKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szScBegKey, sizeof(m_szScBegKey), &m_bScBegKey);
        }
        
        //    SC ENDING KEY
        long lScEndKey () { return 75; };
        RWCString ScEndKey (void)
        {
            return m_szScEndKey;
        }
        long ScEndKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szScEndKey, sizeof(m_szScEndKey), &m_bScEndKey);
        }
        
        //    ACTION CODE
        long lActCd () { return 1; };
        RWCString ActCd (void)
        {
            return m_szActCd;
        }
        long ActCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szActCd, sizeof(m_szActCd), &m_bActCd);
        }
        
        //    PAGING CODE
        long lPagingCd () { return 1; };
        RWCString PagingCd (void)
        {
            return m_szPagingCd;
        }
        long PagingCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szPagingCd, sizeof(m_szPagingCd), &m_bPagingCd);
        }
        
        //    CDR SC CONTROL1
        long lCdrScCtl1 () { return 4; };
        RWCString CdrScCtl1 (void)
        {
            return m_szCdrScCtl1;
        }
        long CdrScCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrScCtl1, sizeof(m_szCdrScCtl1), &m_bCdrScCtl1);
        }
        
        //    CDR SC CONTROL2
        long lCdrScCtl2 () { return 4; };
        RWCString CdrScCtl2 (void)
        {
            return m_szCdrScCtl2;
        }
        long CdrScCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrScCtl2, sizeof(m_szCdrScCtl2), &m_bCdrScCtl2);
        }
        
        //    CDR SC CONTROL3
        long lCdrScCtl3 () { return 4; };
        RWCString CdrScCtl3 (void)
        {
            return m_szCdrScCtl3;
        }
        long CdrScCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrScCtl3, sizeof(m_szCdrScCtl3), &m_bCdrScCtl3);
        }
        
        //    CDR SC CONTROL4
        long lCdrScCtl4 () { return 4; };
        RWCString CdrScCtl4 (void)
        {
            return m_szCdrScCtl4;
        }
        long CdrScCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrScCtl4, sizeof(m_szCdrScCtl4), &m_bCdrScCtl4);
        }
        
        //    CDR SC CUSTOMER NUMBER
        long lCdrScCustNbr () { return 14; };
        RWCString CdrScCustNbr (void)
        {
            return m_szCdrScCustNbr;
        }
        long CdrScCustNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrScCustNbr, sizeof(m_szCdrScCustNbr), &m_bCdrScCustNbr);
        }
        
        //    CDR APPLICATION ID
        long lCdrApplId () { return 2; };
        RWCString CdrApplId (void)
        {
            return m_szCdrApplId;
        }
        long CdrApplId (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrApplId, sizeof(m_szCdrApplId), &m_bCdrApplId);
        }
        
        //    CDR APPLICATION CONTROL1
        long lCdrApplCtl1 () { return 4; };
        RWCString CdrApplCtl1 (void)
        {
            return m_szCdrApplCtl1;
        }
        long CdrApplCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrApplCtl1, sizeof(m_szCdrApplCtl1), &m_bCdrApplCtl1);
        }
        
        //    CDR APPLICATION CONTROL2
        long lCdrApplCtl2 () { return 4; };
        RWCString CdrApplCtl2 (void)
        {
            return m_szCdrApplCtl2;
        }
        long CdrApplCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrApplCtl2, sizeof(m_szCdrApplCtl2), &m_bCdrApplCtl2);
        }
        
        //    CDR APPLICATION CONTROL3
        long lCdrApplCtl3 () { return 4; };
        RWCString CdrApplCtl3 (void)
        {
            return m_szCdrApplCtl3;
        }
        long CdrApplCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrApplCtl3, sizeof(m_szCdrApplCtl3), &m_bCdrApplCtl3);
        }
        
        //    CDR APPLICATION CONTROL4
        long lCdrApplCtl4 () { return 4; };
        RWCString CdrApplCtl4 (void)
        {
            return m_szCdrApplCtl4;
        }
        long CdrApplCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrApplCtl4, sizeof(m_szCdrApplCtl4), &m_bCdrApplCtl4);
        }
        
        //    CDR APPLICATION ACCOUNT NUMBER
        long lCdrApplAcctNbr () { return 27; };
        RWCString CdrApplAcctNbr (void)
        {
            return m_szCdrApplAcctNbr;
        }
        long CdrApplAcctNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrApplAcctNbr, sizeof(m_szCdrApplAcctNbr), &m_bCdrApplAcctNbr);
        }
        
        //    CDR CUSTOMER NAME
        long lCdrCustName () { return 40; };
        RWCString CdrCustName (void)
        {
            return m_szCdrCustName;
        }
        long CdrCustName (const RWCString& rwc)
        {
            return SetString(rwc, m_szCdrCustName, sizeof(m_szCdrCustName), &m_bCdrCustName);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bNbrRequested) return true;
            if (m_bTblUsed) return true;
            if (m_bMoreDataInd) return true;
            if (m_bScBegKey) return true;
            if (m_bScEndKey) return true;
            if (m_bActCd) return true;
            if (m_bPagingCd) return true;
            if (m_bCdrScCtl1) return true;
            if (m_bCdrScCtl2) return true;
            if (m_bCdrScCtl3) return true;
            if (m_bCdrScCtl4) return true;
            if (m_bCdrScCustNbr) return true;
            if (m_bCdrApplId) return true;
            if (m_bCdrApplCtl1) return true;
            if (m_bCdrApplCtl2) return true;
            if (m_bCdrApplCtl3) return true;
            if (m_bCdrApplCtl4) return true;
            if (m_bCdrApplAcctNbr) return true;
            if (m_bCdrCustName) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                if(CApplAcctRecTbl[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                if(CApplMaintenanceTbl[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVSCCSMT", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "NbrRequested", m_szNbrRequested, &m_bNbrRequested);
                AddXMLField(pSess, "TblUsed", m_szTblUsed, &m_bTblUsed);
                AddXMLField(pSess, "MoreDataInd", m_szMoreDataInd, &m_bMoreDataInd);
                AddXMLField(pSess, "ScBegKey", m_szScBegKey, &m_bScBegKey);
                AddXMLField(pSess, "ScEndKey", m_szScEndKey, &m_bScEndKey);
                AddXMLField(pSess, "ActCd", m_szActCd, &m_bActCd);
                AddXMLField(pSess, "PagingCd", m_szPagingCd, &m_bPagingCd);
                AddXMLField(pSess, "CdrScCtl1", m_szCdrScCtl1, &m_bCdrScCtl1);
                AddXMLField(pSess, "CdrScCtl2", m_szCdrScCtl2, &m_bCdrScCtl2);
                AddXMLField(pSess, "CdrScCtl3", m_szCdrScCtl3, &m_bCdrScCtl3);
                AddXMLField(pSess, "CdrScCtl4", m_szCdrScCtl4, &m_bCdrScCtl4);
                AddXMLField(pSess, "CdrScCustNbr", m_szCdrScCustNbr, &m_bCdrScCustNbr);
                AddXMLField(pSess, "CdrApplId", m_szCdrApplId, &m_bCdrApplId);
                AddXMLField(pSess, "CdrApplCtl1", m_szCdrApplCtl1, &m_bCdrApplCtl1);
                AddXMLField(pSess, "CdrApplCtl2", m_szCdrApplCtl2, &m_bCdrApplCtl2);
                AddXMLField(pSess, "CdrApplCtl3", m_szCdrApplCtl3, &m_bCdrApplCtl3);
                AddXMLField(pSess, "CdrApplCtl4", m_szCdrApplCtl4, &m_bCdrApplCtl4);
                AddXMLField(pSess, "CdrApplAcctNbr", m_szCdrApplAcctNbr, &m_bCdrApplAcctNbr);
                AddXMLField(pSess, "CdrCustName", m_szCdrCustName, &m_bCdrCustName);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CApplAcctRecTbl[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CApplMaintenanceTbl[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "WVSCCSMT");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVSCCSMT", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "NbrRequested", m_szNbrRequested);
                GetXMLField(pSess, "TblUsed", m_szTblUsed);
                GetXMLField(pSess, "MoreDataInd", m_szMoreDataInd);
                GetXMLField(pSess, "ScBegKey", m_szScBegKey);
                GetXMLField(pSess, "ScEndKey", m_szScEndKey);
                GetXMLField(pSess, "ActCd", m_szActCd);
                GetXMLField(pSess, "PagingCd", m_szPagingCd);
                GetXMLField(pSess, "CdrScCtl1", m_szCdrScCtl1);
                GetXMLField(pSess, "CdrScCtl2", m_szCdrScCtl2);
                GetXMLField(pSess, "CdrScCtl3", m_szCdrScCtl3);
                GetXMLField(pSess, "CdrScCtl4", m_szCdrScCtl4);
                GetXMLField(pSess, "CdrScCustNbr", m_szCdrScCustNbr);
                GetXMLField(pSess, "CdrApplId", m_szCdrApplId);
                GetXMLField(pSess, "CdrApplCtl1", m_szCdrApplCtl1);
                GetXMLField(pSess, "CdrApplCtl2", m_szCdrApplCtl2);
                GetXMLField(pSess, "CdrApplCtl3", m_szCdrApplCtl3);
                GetXMLField(pSess, "CdrApplCtl4", m_szCdrApplCtl4);
                GetXMLField(pSess, "CdrApplAcctNbr", m_szCdrApplAcctNbr);
                GetXMLField(pSess, "CdrCustName", m_szCdrCustName);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CApplAcctRecTbl[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CApplMaintenanceTbl[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "WVSCCSMT");
            };
        }
        
        //**************** Start AsdApplAcctRecTbl Definition ****************
        //                 APPLICATION ACCOUNT RECORD TABLE
        
        class AsdApplAcctRecTbl
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bAarAcctAction;
            char      m_szAarAcctAction[1+1];
            bool      m_bAarOverrideInd;
            char      m_szAarOverrideInd[1+1];
            bool      m_bAarAcctProcInd;
            char      m_szAarAcctProcInd[1+1];
            bool      m_bAarScCtl1;
            char      m_szAarScCtl1[4+1];
            bool      m_bAarScCtl2;
            char      m_szAarScCtl2[4+1];
            bool      m_bAarScCtl3;
            char      m_szAarScCtl3[4+1];
            bool      m_bAarScCtl4;
            char      m_szAarScCtl4[4+1];
            bool      m_bAarScCustNbr;
            char      m_szAarScCustNbr[14+1];
            bool      m_bAarApplId;
            char      m_szAarApplId[2+1];
            bool      m_bAarApplCtl1;
            char      m_szAarApplCtl1[4+1];
            bool      m_bAarApplCtl2;
            char      m_szAarApplCtl2[4+1];
            bool      m_bAarApplCtl3;
            char      m_szAarApplCtl3[4+1];
            bool      m_bAarApplCtl4;
            char      m_szAarApplCtl4[4+1];
            bool      m_bAarApplAcctNbr;
            char      m_szAarApplAcctNbr[27+1];
            bool      m_bAarCmbStGrp;
            char      m_szAarCmbStGrp[1+1];
            bool      m_bAarCmbStPs;
            char      m_szAarCmbStPs[1+1];
            bool      m_bAarRelPrGrp;
            char      m_szAarRelPrGrp[1+1];
            bool      m_bAarRelPrRd;
            char      m_szAarRelPrRd[1+1];
        
          public:
            long      m_lIndex;

            AsdApplAcctRecTbl ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bAarAcctAction = false;
                strcpy(m_szAarAcctAction, "");
                m_bAarOverrideInd = false;
                strcpy(m_szAarOverrideInd, "");
                m_bAarAcctProcInd = false;
                strcpy(m_szAarAcctProcInd, "");
                m_bAarScCtl1 = false;
                strcpy(m_szAarScCtl1, "");
                m_bAarScCtl2 = false;
                strcpy(m_szAarScCtl2, "");
                m_bAarScCtl3 = false;
                strcpy(m_szAarScCtl3, "");
                m_bAarScCtl4 = false;
                strcpy(m_szAarScCtl4, "");
                m_bAarScCustNbr = false;
                strcpy(m_szAarScCustNbr, "");
                m_bAarApplId = false;
                strcpy(m_szAarApplId, "");
                m_bAarApplCtl1 = false;
                strcpy(m_szAarApplCtl1, "");
                m_bAarApplCtl2 = false;
                strcpy(m_szAarApplCtl2, "");
                m_bAarApplCtl3 = false;
                strcpy(m_szAarApplCtl3, "");
                m_bAarApplCtl4 = false;
                strcpy(m_szAarApplCtl4, "");
                m_bAarApplAcctNbr = false;
                strcpy(m_szAarApplAcctNbr, "");
                m_bAarCmbStGrp = false;
                strcpy(m_szAarCmbStGrp, "");
                m_bAarCmbStPs = false;
                strcpy(m_szAarCmbStPs, "");
                m_bAarRelPrGrp = false;
                strcpy(m_szAarRelPrGrp, "");
                m_bAarRelPrRd = false;
                strcpy(m_szAarRelPrRd, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    APPLICATION ACCOUNT ACTION
            long lAarAcctAction () { return 1; };
            RWCString AarAcctAction (void)
            {
                return m_szAarAcctAction;
            }
            long AarAcctAction (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarAcctAction, sizeof(m_szAarAcctAction), &m_bAarAcctAction);
            }
            
            //    APPLICATION ACCOUNT OVERRIDE INDICATOR
            long lAarOverrideInd () { return 1; };
            RWCString AarOverrideInd (void)
            {
                return m_szAarOverrideInd;
            }
            long AarOverrideInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarOverrideInd, sizeof(m_szAarOverrideInd), &m_bAarOverrideInd);
            }
            
            //    APPLICATION ACCOUNT PROC ID
            long lAarAcctProcInd () { return 1; };
            RWCString AarAcctProcInd (void)
            {
                return m_szAarAcctProcInd;
            }
            long AarAcctProcInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarAcctProcInd, sizeof(m_szAarAcctProcInd), &m_bAarAcctProcInd);
            }
            
            //    APPLICATION ACCOUNT CONTROL1
            long lAarScCtl1 () { return 4; };
            RWCString AarScCtl1 (void)
            {
                return m_szAarScCtl1;
            }
            long AarScCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarScCtl1, sizeof(m_szAarScCtl1), &m_bAarScCtl1);
            }
            
            //    APPLICATION ACCOUNT CONTROL2
            long lAarScCtl2 () { return 4; };
            RWCString AarScCtl2 (void)
            {
                return m_szAarScCtl2;
            }
            long AarScCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarScCtl2, sizeof(m_szAarScCtl2), &m_bAarScCtl2);
            }
            
            //    APPLICATION ACCOUNT CONTROL3
            long lAarScCtl3 () { return 4; };
            RWCString AarScCtl3 (void)
            {
                return m_szAarScCtl3;
            }
            long AarScCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarScCtl3, sizeof(m_szAarScCtl3), &m_bAarScCtl3);
            }
            
            //    APPLICATION ACCOUNT CONTROL4
            long lAarScCtl4 () { return 4; };
            RWCString AarScCtl4 (void)
            {
                return m_szAarScCtl4;
            }
            long AarScCtl4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarScCtl4, sizeof(m_szAarScCtl4), &m_bAarScCtl4);
            }
            
            //    APPLICATION ACCOUNT CUSTOMER NUMBER
            long lAarScCustNbr () { return 14; };
            RWCString AarScCustNbr (void)
            {
                return m_szAarScCustNbr;
            }
            long AarScCustNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarScCustNbr, sizeof(m_szAarScCustNbr), &m_bAarScCustNbr);
            }
            
            //    APPLICATION ACCOUNT ID
            long lAarApplId () { return 2; };
            RWCString AarApplId (void)
            {
                return m_szAarApplId;
            }
            long AarApplId (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarApplId, sizeof(m_szAarApplId), &m_bAarApplId);
            }
            
            //    APPLICATION ACCOUNT REC CONTROL1
            long lAarApplCtl1 () { return 4; };
            RWCString AarApplCtl1 (void)
            {
                return m_szAarApplCtl1;
            }
            long AarApplCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarApplCtl1, sizeof(m_szAarApplCtl1), &m_bAarApplCtl1);
            }
            
            //    APPLICATION ACCOUNT REC CONTROL2
            long lAarApplCtl2 () { return 4; };
            RWCString AarApplCtl2 (void)
            {
                return m_szAarApplCtl2;
            }
            long AarApplCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarApplCtl2, sizeof(m_szAarApplCtl2), &m_bAarApplCtl2);
            }
            
            //    APPLICATION ACCOUNT REC CONTROL3
            long lAarApplCtl3 () { return 4; };
            RWCString AarApplCtl3 (void)
            {
                return m_szAarApplCtl3;
            }
            long AarApplCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarApplCtl3, sizeof(m_szAarApplCtl3), &m_bAarApplCtl3);
            }
            
            //    APPLICATION ACCOUNT REC CONTROL4
            long lAarApplCtl4 () { return 4; };
            RWCString AarApplCtl4 (void)
            {
                return m_szAarApplCtl4;
            }
            long AarApplCtl4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarApplCtl4, sizeof(m_szAarApplCtl4), &m_bAarApplCtl4);
            }
            
            //    APPLICATION ACCCOUNT REC ACCOUNT NUMBER
            long lAarApplAcctNbr () { return 27; };
            RWCString AarApplAcctNbr (void)
            {
                return m_szAarApplAcctNbr;
            }
            long AarApplAcctNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarApplAcctNbr, sizeof(m_szAarApplAcctNbr), &m_bAarApplAcctNbr);
            }
            
            //    APPLICATION ACCOUNT COMBINED ST GROUP
            long lAarCmbStGrp () { return 1; };
            RWCString AarCmbStGrp (void)
            {
                return m_szAarCmbStGrp;
            }
            long AarCmbStGrp (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarCmbStGrp, sizeof(m_szAarCmbStGrp), &m_bAarCmbStGrp);
            }
            
            //    APPLICATION ACCOUNT COMBINED ST PS
            long lAarCmbStPs () { return 1; };
            RWCString AarCmbStPs (void)
            {
                return m_szAarCmbStPs;
            }
            long AarCmbStPs (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarCmbStPs, sizeof(m_szAarCmbStPs), &m_bAarCmbStPs);
            }
            
            //    APPLICATION ACCOUNT RELATIONSHIP PRICING GROUP
            long lAarRelPrGrp () { return 1; };
            RWCString AarRelPrGrp (void)
            {
                return m_szAarRelPrGrp;
            }
            long AarRelPrGrp (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarRelPrGrp, sizeof(m_szAarRelPrGrp), &m_bAarRelPrGrp);
            }
            
            //    APPLICATION ACCOUNT RELATIONSHIP PRICING RD
            long lAarRelPrRd () { return 1; };
            RWCString AarRelPrRd (void)
            {
                return m_szAarRelPrRd;
            }
            long AarRelPrRd (const RWCString& rwc)
            {
                return SetString(rwc, m_szAarRelPrRd, sizeof(m_szAarRelPrRd), &m_bAarRelPrRd);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bAarAcctAction) return true;
                if (m_bAarOverrideInd) return true;
                if (m_bAarAcctProcInd) return true;
                if (m_bAarScCtl1) return true;
                if (m_bAarScCtl2) return true;
                if (m_bAarScCtl3) return true;
                if (m_bAarScCtl4) return true;
                if (m_bAarScCustNbr) return true;
                if (m_bAarApplId) return true;
                if (m_bAarApplCtl1) return true;
                if (m_bAarApplCtl2) return true;
                if (m_bAarApplCtl3) return true;
                if (m_bAarApplCtl4) return true;
                if (m_bAarApplAcctNbr) return true;
                if (m_bAarCmbStGrp) return true;
                if (m_bAarCmbStPs) return true;
                if (m_bAarRelPrGrp) return true;
                if (m_bAarRelPrRd) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "ApplAcctRecTbl", m_lIndex);
                    AddXMLField(pSess, "AarAcctAction", m_szAarAcctAction, &m_bAarAcctAction);
                    AddXMLField(pSess, "AarOverrideInd", m_szAarOverrideInd, &m_bAarOverrideInd);
                    AddXMLField(pSess, "AarAcctProcInd", m_szAarAcctProcInd, &m_bAarAcctProcInd);
                    AddXMLField(pSess, "AarScCtl1", m_szAarScCtl1, &m_bAarScCtl1);
                    AddXMLField(pSess, "AarScCtl2", m_szAarScCtl2, &m_bAarScCtl2);
                    AddXMLField(pSess, "AarScCtl3", m_szAarScCtl3, &m_bAarScCtl3);
                    AddXMLField(pSess, "AarScCtl4", m_szAarScCtl4, &m_bAarScCtl4);
                    AddXMLField(pSess, "AarScCustNbr", m_szAarScCustNbr, &m_bAarScCustNbr);
                    AddXMLField(pSess, "AarApplId", m_szAarApplId, &m_bAarApplId);
                    AddXMLField(pSess, "AarApplCtl1", m_szAarApplCtl1, &m_bAarApplCtl1);
                    AddXMLField(pSess, "AarApplCtl2", m_szAarApplCtl2, &m_bAarApplCtl2);
                    AddXMLField(pSess, "AarApplCtl3", m_szAarApplCtl3, &m_bAarApplCtl3);
                    AddXMLField(pSess, "AarApplCtl4", m_szAarApplCtl4, &m_bAarApplCtl4);
                    AddXMLField(pSess, "AarApplAcctNbr", m_szAarApplAcctNbr, &m_bAarApplAcctNbr);
                    AddXMLField(pSess, "AarCmbStGrp", m_szAarCmbStGrp, &m_bAarCmbStGrp);
                    AddXMLField(pSess, "AarCmbStPs", m_szAarCmbStPs, &m_bAarCmbStPs);
                    AddXMLField(pSess, "AarRelPrGrp", m_szAarRelPrGrp, &m_bAarRelPrGrp);
                    AddXMLField(pSess, "AarRelPrRd", m_szAarRelPrRd, &m_bAarRelPrRd);
                    AddXMLCloseRecord(pSess, "ApplAcctRecTbl");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "ApplAcctRecTbl", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "AarAcctAction", m_szAarAcctAction);
                    GetXMLField(pSess, "AarOverrideInd", m_szAarOverrideInd);
                    GetXMLField(pSess, "AarAcctProcInd", m_szAarAcctProcInd);
                    GetXMLField(pSess, "AarScCtl1", m_szAarScCtl1);
                    GetXMLField(pSess, "AarScCtl2", m_szAarScCtl2);
                    GetXMLField(pSess, "AarScCtl3", m_szAarScCtl3);
                    GetXMLField(pSess, "AarScCtl4", m_szAarScCtl4);
                    GetXMLField(pSess, "AarScCustNbr", m_szAarScCustNbr);
                    GetXMLField(pSess, "AarApplId", m_szAarApplId);
                    GetXMLField(pSess, "AarApplCtl1", m_szAarApplCtl1);
                    GetXMLField(pSess, "AarApplCtl2", m_szAarApplCtl2);
                    GetXMLField(pSess, "AarApplCtl3", m_szAarApplCtl3);
                    GetXMLField(pSess, "AarApplCtl4", m_szAarApplCtl4);
                    GetXMLField(pSess, "AarApplAcctNbr", m_szAarApplAcctNbr);
                    GetXMLField(pSess, "AarCmbStGrp", m_szAarCmbStGrp);
                    GetXMLField(pSess, "AarCmbStPs", m_szAarCmbStPs);
                    GetXMLField(pSess, "AarRelPrGrp", m_szAarRelPrGrp);
                    GetXMLField(pSess, "AarRelPrRd", m_szAarRelPrRd);
                    CloseXMLRecord(pSess, "ApplAcctRecTbl");
                };
            }
        };

        AsdApplAcctRecTbl  CApplAcctRecTbl[16];
        AsdApplAcctRecTbl *ApplAcctRecTbl[16];
        
        //**************** End AsdApplAcctRecTbl Definition ****************
        
        
        //**************** Start AsdApplMaintenanceTbl Definition ****************
        //                 APPLICATION MAINTENANCE TABLE
        
        class AsdApplMaintenanceTbl
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bStMaintRequired;
            char      m_szStMaintRequired[1+1];
            bool      m_bStStmtTrlrPullCd;
            char      m_szStStmtTrlrPullCd[1+1];
            bool      m_bStStmtTrlrCycleNo;
            char      m_szStStmtTrlrCycleNo[2+1];
            bool      m_bImMaintRequired;
            char      m_szImMaintRequired[1+1];
            bool      m_bWmsStmtPull;
            char      m_szWmsStmtPull[1+1];
            bool      m_bWmsStmtFld1;
            char      m_szWmsStmtFld1[2+1];
            bool      m_bWmsStmtFld2;
            char      m_szWmsStmtFld2[2+1];
            bool      m_bWmsStmtFld3;
            char      m_szWmsStmtFld3[2+1];
            bool      m_bWmsStmtFld4;
            char      m_szWmsStmtFld4[2+1];
        
          public:
            long      m_lIndex;

            AsdApplMaintenanceTbl ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bStMaintRequired = false;
                strcpy(m_szStMaintRequired, "");
                m_bStStmtTrlrPullCd = false;
                strcpy(m_szStStmtTrlrPullCd, "");
                m_bStStmtTrlrCycleNo = false;
                strcpy(m_szStStmtTrlrCycleNo, "");
                m_bImMaintRequired = false;
                strcpy(m_szImMaintRequired, "");
                m_bWmsStmtPull = false;
                strcpy(m_szWmsStmtPull, "");
                m_bWmsStmtFld1 = false;
                strcpy(m_szWmsStmtFld1, "00");
                m_bWmsStmtFld2 = false;
                strcpy(m_szWmsStmtFld2, "00");
                m_bWmsStmtFld3 = false;
                strcpy(m_szWmsStmtFld3, "00");
                m_bWmsStmtFld4 = false;
                strcpy(m_szWmsStmtFld4, "00");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    MAINTENANCE ST ACCOUNT
            long lStMaintRequired () { return 1; };
            RWCString StMaintRequired (void)
            {
                return m_szStMaintRequired;
            }
            long StMaintRequired (const RWCString& rwc)
            {
                return SetString(rwc, m_szStMaintRequired, sizeof(m_szStMaintRequired), &m_bStMaintRequired);
            }
            
            //    PULL CODE/CYCLE OR REQUEST
            long lStStmtTrlrPullCd () { return 1; };
            RWCString StStmtTrlrPullCd (void)
            {
                return m_szStStmtTrlrPullCd;
            }
            long StStmtTrlrPullCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szStStmtTrlrPullCd, sizeof(m_szStStmtTrlrPullCd), &m_bStStmtTrlrPullCd);
            }
            
            //    CYCLE NUMBER/REQ IF PULL CODE IS C
            long lStStmtTrlrCycleNo () { return 2; };
            RWCString StStmtTrlrCycleNo (void)
            {
                return m_szStStmtTrlrCycleNo;
            }
            long StStmtTrlrCycleNo (const RWCString& rwc)
            {
                return SetString(rwc, m_szStStmtTrlrCycleNo, sizeof(m_szStStmtTrlrCycleNo), &m_bStStmtTrlrCycleNo);
            }
            
            //    MAINTENANCE IM ACCOUNT
            long lImMaintRequired () { return 1; };
            RWCString ImMaintRequired (void)
            {
                return m_szImMaintRequired;
            }
            long ImMaintRequired (const RWCString& rwc)
            {
                return SetString(rwc, m_szImMaintRequired, sizeof(m_szImMaintRequired), &m_bImMaintRequired);
            }
            
            //    INDICATES WHEN TO GENERATE A STATEMENT FOR THE ACCOUNT
            long lWmsStmtPull () { return 1; };
            RWCString WmsStmtPull (void)
            {
                return m_szWmsStmtPull;
            }
            long WmsStmtPull (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsStmtPull, sizeof(m_szWmsStmtPull), &m_bWmsStmtPull);
            }
            
            //    USED WITH STMT PULL CODE TO INDICATE STMT CYCLE FOR ACCOUNT
            long lWmsStmtFld1 () { return 2; };
            RWCString WmsStmtFld1 (void)
            {
                return m_szWmsStmtFld1;
            }
            long WmsStmtFld1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsStmtFld1, sizeof(m_szWmsStmtFld1), &m_bWmsStmtFld1);
            }
            
            //    USED WITH STMT PULL CODE TO INDICATE STMT CYCLE FOR ACCOUNT
            long lWmsStmtFld2 () { return 2; };
            RWCString WmsStmtFld2 (void)
            {
                return m_szWmsStmtFld2;
            }
            long WmsStmtFld2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsStmtFld2, sizeof(m_szWmsStmtFld2), &m_bWmsStmtFld2);
            }
            
            //    USED WITH STMT PULL CODE TO INDICATE STMT CYCLE FOR ACCOUNT
            long lWmsStmtFld3 () { return 2; };
            RWCString WmsStmtFld3 (void)
            {
                return m_szWmsStmtFld3;
            }
            long WmsStmtFld3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsStmtFld3, sizeof(m_szWmsStmtFld3), &m_bWmsStmtFld3);
            }
            
            //    VARIES DEPENDING ON THE PULL CODE USED
            long lWmsStmtFld4 () { return 2; };
            RWCString WmsStmtFld4 (void)
            {
                return m_szWmsStmtFld4;
            }
            long WmsStmtFld4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szWmsStmtFld4, sizeof(m_szWmsStmtFld4), &m_bWmsStmtFld4);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bStMaintRequired) return true;
                if (m_bStStmtTrlrPullCd) return true;
                if (m_bStStmtTrlrCycleNo) return true;
                if (m_bImMaintRequired) return true;
                if (m_bWmsStmtPull) return true;
                if (m_bWmsStmtFld1) return true;
                if (m_bWmsStmtFld2) return true;
                if (m_bWmsStmtFld3) return true;
                if (m_bWmsStmtFld4) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "ApplMaintenanceTbl", m_lIndex);
                    AddXMLField(pSess, "StMaintRequired", m_szStMaintRequired, &m_bStMaintRequired);
                    AddXMLField(pSess, "StStmtTrlrPullCd", m_szStStmtTrlrPullCd, &m_bStStmtTrlrPullCd);
                    AddXMLField(pSess, "StStmtTrlrCycleNo", m_szStStmtTrlrCycleNo, &m_bStStmtTrlrCycleNo);
                    AddXMLField(pSess, "ImMaintRequired", m_szImMaintRequired, &m_bImMaintRequired);
                    AddXMLField(pSess, "WmsStmtPull", m_szWmsStmtPull, &m_bWmsStmtPull);
                    AddXMLField(pSess, "WmsStmtFld1", m_szWmsStmtFld1, &m_bWmsStmtFld1);
                    AddXMLField(pSess, "WmsStmtFld2", m_szWmsStmtFld2, &m_bWmsStmtFld2);
                    AddXMLField(pSess, "WmsStmtFld3", m_szWmsStmtFld3, &m_bWmsStmtFld3);
                    AddXMLField(pSess, "WmsStmtFld4", m_szWmsStmtFld4, &m_bWmsStmtFld4);
                    AddXMLCloseRecord(pSess, "ApplMaintenanceTbl");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "ApplMaintenanceTbl", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "StMaintRequired", m_szStMaintRequired);
                    GetXMLField(pSess, "StStmtTrlrPullCd", m_szStStmtTrlrPullCd);
                    GetXMLField(pSess, "StStmtTrlrCycleNo", m_szStStmtTrlrCycleNo);
                    GetXMLField(pSess, "ImMaintRequired", m_szImMaintRequired);
                    GetXMLField(pSess, "WmsStmtPull", m_szWmsStmtPull);
                    GetXMLField(pSess, "WmsStmtFld1", m_szWmsStmtFld1);
                    GetXMLField(pSess, "WmsStmtFld2", m_szWmsStmtFld2);
                    GetXMLField(pSess, "WmsStmtFld3", m_szWmsStmtFld3);
                    GetXMLField(pSess, "WmsStmtFld4", m_szWmsStmtFld4);
                    CloseXMLRecord(pSess, "ApplMaintenanceTbl");
                };
            }
        };

        AsdApplMaintenanceTbl  CApplMaintenanceTbl[16];
        AsdApplMaintenanceTbl *ApplMaintenanceTbl[16];
        
        //**************** End AsdApplMaintenanceTbl Definition ****************
        
    };

    AsdWVSCCSMT CWVSCCSMT;
    AsdWVSCCSMT *WVSCCSMT;
    
    //**************** End AsdWVSCCSMT Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdWVPCSCCSData Definition ****************

typedef AsdWVPCSCCSData *LPWVPCSCCS;
typedef AsdWVPCSCCSData::AsdTSHeader *LPWVPCSCCS_TSHeader;
typedef AsdWVPCSCCSData::AsdWVSCCSMT *LPWVPCSCCS_WVSCCSMT;
typedef AsdWVPCSCCSData::AsdWVSCCSMT::AsdApplAcctRecTbl *LPWVPCSCCS_WVSCCSMT_ApplAcctRecTbl;
typedef AsdWVPCSCCSData::AsdWVSCCSMT::AsdApplMaintenanceTbl *LPWVPCSCCS_WVSCCSMT_ApplMaintenanceTbl;
typedef AsdWVPCSCCSData::AsdTSMDA *LPWVPCSCCS_TSMDA;
typedef AsdWVPCSCCSData::AsdTSMDA::AsdMdaTrmMsg *LPWVPCSCCS_TSMDA_MdaTrmMsg;
typedef AsdWVPCSCCSData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPWVPCSCCS_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdWVPCSCCSData_H

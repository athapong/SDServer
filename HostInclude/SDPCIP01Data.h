#ifndef AsdSDPCIP01Data_H
#define AsdSDPCIP01Data_H

#include <stdlib.h>
#ifdef  AsdSDPCIP01_INTEGRITY_STRING
#undef  AsdSDPCIP01_INTEGRITY_STRING
#endif
#define AsdSDPCIP01_INTEGRITY_STRING        ""

#ifdef  AsdSDPCIP01_CRC_STRING
#undef  AsdSDPCIP01_CRC_STRING
#endif
#define AsdSDPCIP01_CRC_STRING "3785127846"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdSDPCIP01Data Definition ****************
//                 IM Account Post

//                 SDPCIP01Data.h generated by AceGen2 ver. 2.5.09

class AsdSDPCIP01Data
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdSDPCIP01Data ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "SDPCIP01.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdSDPCIP01_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        IMCMSD00 = &CIMCMSD00;
        SDIM01MI = &CSDIM01MI;
        TSMDA = &CTSMDA;
    }

    ~AsdSDPCIP01Data ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CIMCMSD00.Reinit();
            CSDIM01MI.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdSDPCIP01_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIP01_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CIMCMSD00.Save(&m_Sess);
        CSDIM01MI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIP01", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CIMCMSD00.Load(&m_Sess);
                        CSDIM01MI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIP01");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIP01_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CIMCMSD00.Save(&m_Sess);
        CSDIM01MI.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "SDPCIP01", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CIMCMSD00.Load(&m_Sess);
                        CSDIM01MI.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "SDPCIP01");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdSDPCIP01_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdIMCMSD00 Definition ****************
    //                 COMMON COMMUNICATION DAG                                    
    
    //    IMCMSD00.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 11/27/02 10:14:22
    class AsdIMCMSD00
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bCtl1;
        char      m_szCtl1[2+1];
        bool      m_bCtl2;
        char      m_szCtl2[3+1];
        bool      m_bCtl3;
        char      m_szCtl3[3+1];
        bool      m_bCtl4;
        char      m_szCtl4[4+1];
        bool      m_bAcctNbr;
        char      m_szAcctNbr[10+1];
        bool      m_bTotalAmt;
        char      m_szTotalAmt[19+1];
        bool      m_bDept;
        char      m_szDept[5+1];
        bool      m_bBatch;
        char      m_szBatch[5+1];
        bool      m_bUserTranCd;
        char      m_szUserTranCd[4+1];
        bool      m_bTranCd;
        char      m_szTranCd[2+1];
        bool      m_bIcrSelData;
        char      m_szIcrSelData[4+1];
        bool      m_bProcessFlag;
        char      m_szProcessFlag[1+1];
        bool      m_bSecProcOpt;
        char      m_szSecProcOpt[1+1];
        bool      m_bSaveAccCcyyddd;
        char      m_szSaveAccCcyyddd[8+1];
        bool      m_bSaveSeq;
        char      m_szSaveSeq[8+1];
    
      public:
        long      m_lIndex;

        AsdIMCMSD00 ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCtl1 = false;
            strcpy(m_szCtl1, "");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "");
            m_bAcctNbr = false;
            strcpy(m_szAcctNbr, "");
            m_bTotalAmt = false;
            strcpy(m_szTotalAmt, "000000000000000.000");
            m_bDept = false;
            strcpy(m_szDept, "");
            m_bBatch = false;
            strcpy(m_szBatch, "");
            m_bUserTranCd = false;
            strcpy(m_szUserTranCd, "");
            m_bTranCd = false;
            strcpy(m_szTranCd, "");
            m_bIcrSelData = false;
            strcpy(m_szIcrSelData, "");
            m_bProcessFlag = false;
            strcpy(m_szProcessFlag, "");
            m_bSecProcOpt = false;
            strcpy(m_szSecProcOpt, "");
            m_bSaveAccCcyyddd = false;
            strcpy(m_szSaveAccCcyyddd, "+0000000");
            m_bSaveSeq = false;
            strcpy(m_szSaveSeq, "+0000000");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCtl1 = false;
            strcpy(m_szCtl1, "");
            m_bCtl2 = false;
            strcpy(m_szCtl2, "");
            m_bCtl3 = false;
            strcpy(m_szCtl3, "");
            m_bCtl4 = false;
            strcpy(m_szCtl4, "");
            m_bAcctNbr = false;
            strcpy(m_szAcctNbr, "");
            m_bTotalAmt = false;
            strcpy(m_szTotalAmt, "000000000000000.000");
            m_bDept = false;
            strcpy(m_szDept, "");
            m_bBatch = false;
            strcpy(m_szBatch, "");
            m_bUserTranCd = false;
            strcpy(m_szUserTranCd, "");
            m_bTranCd = false;
            strcpy(m_szTranCd, "");
            m_bIcrSelData = false;
            strcpy(m_szIcrSelData, "");
            m_bProcessFlag = false;
            strcpy(m_szProcessFlag, "");
            m_bSecProcOpt = false;
            strcpy(m_szSecProcOpt, "");
            m_bSaveAccCcyyddd = false;
            strcpy(m_szSaveAccCcyyddd, "+0000000");
            m_bSaveSeq = false;
            strcpy(m_szSaveSeq, "+0000000");
        }

        
        //    STANDARD CONTROL 1
        long lCtl1 () { return 2; };
        RWCString Ctl1 (void)
        {
            return m_szCtl1;
        }
        long Ctl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl1, sizeof(m_szCtl1), &m_bCtl1);
        }
        
        //    STANDARD CONTROL 2
        long lCtl2 () { return 3; };
        RWCString Ctl2 (void)
        {
            return m_szCtl2;
        }
        long Ctl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl2, sizeof(m_szCtl2), &m_bCtl2);
        }
        
        //    STANDARD CONTROL 3
        long lCtl3 () { return 3; };
        RWCString Ctl3 (void)
        {
            return m_szCtl3;
        }
        long Ctl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl3, sizeof(m_szCtl3), &m_bCtl3);
        }
        
        //    STANDARD CONTROL 4
        long lCtl4 () { return 4; };
        RWCString Ctl4 (void)
        {
            return m_szCtl4;
        }
        long Ctl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCtl4, sizeof(m_szCtl4), &m_bCtl4);
        }
        
        //    STANDARD ACCOUNT NUMBER
        long lAcctNbr () { return 10; };
        RWCString AcctNbr (void)
        {
            return m_szAcctNbr;
        }
        long AcctNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szAcctNbr, sizeof(m_szAcctNbr), &m_bAcctNbr);
        }
        
        //    STANDARD TOTALING AMOUNT
        long lTotalAmt () { return 19; };
        RWCString TotalAmt (void)
        {
            return m_szTotalAmt;
        }
        long TotalAmt (const RWCString& rwc)
        {
            return SetString(rwc, m_szTotalAmt, sizeof(m_szTotalAmt), &m_bTotalAmt);
        }
        
        //    STANDARD DEPARTMENT
        long lDept () { return 5; };
        RWCString Dept (void)
        {
            return m_szDept;
        }
        long Dept (const RWCString& rwc)
        {
            return SetString(rwc, m_szDept, sizeof(m_szDept), &m_bDept);
        }
        
        //    STANDARD BATCH
        long lBatch () { return 5; };
        RWCString Batch (void)
        {
            return m_szBatch;
        }
        long Batch (const RWCString& rwc)
        {
            return SetString(rwc, m_szBatch, sizeof(m_szBatch), &m_bBatch);
        }
        
        //    STANDARD USER TRAN CODE
        long lUserTranCd () { return 4; };
        RWCString UserTranCd (void)
        {
            return m_szUserTranCd;
        }
        long UserTranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserTranCd, sizeof(m_szUserTranCd), &m_bUserTranCd);
        }
        
        //    STANDARD TRAN CODE
        long lTranCd () { return 2; };
        RWCString TranCd (void)
        {
            return m_szTranCd;
        }
        long TranCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranCd, sizeof(m_szTranCd), &m_bTranCd);
        }
        
        //    STANDARD ICR SELECT DATA
        long lIcrSelData () { return 4; };
        RWCString IcrSelData (void)
        {
            return m_szIcrSelData;
        }
        long IcrSelData (const RWCString& rwc)
        {
            return SetString(rwc, m_szIcrSelData, sizeof(m_szIcrSelData), &m_bIcrSelData);
        }
        
        //    PROCESSING CONTROL FLAG
        long lProcessFlag () { return 1; };
        RWCString ProcessFlag (void)
        {
            return m_szProcessFlag;
        }
        long ProcessFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szProcessFlag, sizeof(m_szProcessFlag), &m_bProcessFlag);
        }
        
        //    SECURITY PROCESS OPTION
        long lSecProcOpt () { return 1; };
        RWCString SecProcOpt (void)
        {
            return m_szSecProcOpt;
        }
        long SecProcOpt (const RWCString& rwc)
        {
            return SetString(rwc, m_szSecProcOpt, sizeof(m_szSecProcOpt), &m_bSecProcOpt);
        }
        
        //    SAVE ACCUM DATE
        long lSaveAccCcyyddd () { return 8; };
        RWCString SaveAccCcyyddd (void)
        {
            return AceZeroSupp(m_szSaveAccCcyyddd, &m_szSuppressBuff[0]);
        }
        RWCString SaveAccCcyydddRaw (void)
        {
            return m_szSaveAccCcyyddd;
        }
        long SaveAccCcyyddd (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveAccCcyyddd, sizeof(m_szSaveAccCcyyddd), &m_bSaveAccCcyyddd);
        }
        
        //    SAVE SEQUENCE
        long lSaveSeq () { return 8; };
        RWCString SaveSeq (void)
        {
            return AceZeroSupp(m_szSaveSeq, &m_szSuppressBuff[0]);
        }
        RWCString SaveSeqRaw (void)
        {
            return m_szSaveSeq;
        }
        long SaveSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szSaveSeq, sizeof(m_szSaveSeq), &m_bSaveSeq);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bCtl1) return true;
            if (m_bCtl2) return true;
            if (m_bCtl3) return true;
            if (m_bCtl4) return true;
            if (m_bAcctNbr) return true;
            if (m_bTotalAmt) return true;
            if (m_bDept) return true;
            if (m_bBatch) return true;
            if (m_bUserTranCd) return true;
            if (m_bTranCd) return true;
            if (m_bIcrSelData) return true;
            if (m_bProcessFlag) return true;
            if (m_bSecProcOpt) return true;
            if (m_bSaveAccCcyyddd) return true;
            if (m_bSaveSeq) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "IMCMSD00", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "Ctl1", m_szCtl1, &m_bCtl1);
                AddXMLField(pSess, "Ctl2", m_szCtl2, &m_bCtl2);
                AddXMLField(pSess, "Ctl3", m_szCtl3, &m_bCtl3);
                AddXMLField(pSess, "Ctl4", m_szCtl4, &m_bCtl4);
                AddXMLField(pSess, "AcctNbr", m_szAcctNbr, &m_bAcctNbr);
                AddXMLField(pSess, "TotalAmt", m_szTotalAmt, &m_bTotalAmt);
                AddXMLField(pSess, "Dept", m_szDept, &m_bDept);
                AddXMLField(pSess, "Batch", m_szBatch, &m_bBatch);
                AddXMLField(pSess, "UserTranCd", m_szUserTranCd, &m_bUserTranCd);
                AddXMLField(pSess, "TranCd", m_szTranCd, &m_bTranCd);
                AddXMLField(pSess, "IcrSelData", m_szIcrSelData, &m_bIcrSelData);
                AddXMLField(pSess, "ProcessFlag", m_szProcessFlag, &m_bProcessFlag);
                AddXMLField(pSess, "SecProcOpt", m_szSecProcOpt, &m_bSecProcOpt);
                AddXMLField(pSess, "SaveAccCcyyddd", m_szSaveAccCcyyddd, &m_bSaveAccCcyyddd);
                AddXMLField(pSess, "SaveSeq", m_szSaveSeq, &m_bSaveSeq);
                AddXMLCloseRecord(pSess, "IMCMSD00");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "IMCMSD00", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "Ctl1", m_szCtl1);
                GetXMLField(pSess, "Ctl2", m_szCtl2);
                GetXMLField(pSess, "Ctl3", m_szCtl3);
                GetXMLField(pSess, "Ctl4", m_szCtl4);
                GetXMLField(pSess, "AcctNbr", m_szAcctNbr);
                GetXMLField(pSess, "TotalAmt", m_szTotalAmt);
                GetXMLField(pSess, "Dept", m_szDept);
                GetXMLField(pSess, "Batch", m_szBatch);
                GetXMLField(pSess, "UserTranCd", m_szUserTranCd);
                GetXMLField(pSess, "TranCd", m_szTranCd);
                GetXMLField(pSess, "IcrSelData", m_szIcrSelData);
                GetXMLField(pSess, "ProcessFlag", m_szProcessFlag);
                GetXMLField(pSess, "SecProcOpt", m_szSecProcOpt);
                GetXMLField(pSess, "SaveAccCcyyddd", m_szSaveAccCcyyddd);
                GetXMLField(pSess, "SaveSeq", m_szSaveSeq);
                CloseXMLRecord(pSess, "IMCMSD00");
            };
        }
    };

    AsdIMCMSD00 CIMCMSD00;
    AsdIMCMSD00 *IMCMSD00;
    
    //**************** End AsdIMCMSD00 Definition ****************

    
    //**************** Start AsdSDIM01MI Definition ****************
    //                 SERVICE DELIVERY IM NEW ACCOUNT INPUT                       
    
    //    SDIM01MI.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 05/13/03 11:43:34
    class AsdSDIM01MI
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bWmsNraTaxProvince;
        char      m_szWmsNraTaxProvince[2+1];
        bool      m_bWmsNraTaxCountry;
        char      m_szWmsNraTaxCountry[2+1];
        bool      m_bWmsNraCertName1;
        char      m_szWmsNraCertName1[1+1];
        bool      m_bWmsNraCertName2;
        char      m_szWmsNraCertName2[1+1];
        bool      m_bWmsInfoAlienCode;
        char      m_szWmsInfoAlienCode[1+1];
        bool      m_bWmsAcctType;
        char      m_szWmsAcctType[3+1];
        bool      m_bLinkAcctNbr;
        char      m_szLinkAcctNbr[14+1];
        bool      m_bWmsStmtSpeclHandl;
        char      m_szWmsStmtSpeclHandl[1+1];
        bool      m_bWmsSourceOfFunds;
        char      m_szWmsSourceOfFunds[3+1];
        bool      m_bImMemoOlOffEmp;
        char      m_szImMemoOlOffEmp[1+1];
        bool      m_bWmsOfficer;
        char      m_szWmsOfficer[5+1];
        bool      m_bWmsBranch;
        char      m_szWmsBranch[3+1];
        bool      m_bWmsRegion;
        char      m_szWmsRegion[3+1];
        bool      m_bWmsNameAddrType1;
        char      m_szWmsNameAddrType1[1+1];
        bool      m_bWmsLineNo1;
        char      m_szWmsLineNo1[1+1];
        bool      m_bWmsNameAddress1;
        char      m_szWmsNameAddress1[40+1];
        bool      m_bWmsNameAddrType2;
        char      m_szWmsNameAddrType2[1+1];
        bool      m_bWmsLineNo2;
        char      m_szWmsLineNo2[1+1];
        bool      m_bWmsNameAddress2;
        char      m_szWmsNameAddress2[40+1];
        bool      m_bWmsNameAddrType3;
        char      m_szWmsNameAddrType3[1+1];
        bool      m_bWmsLineNo3;
        char      m_szWmsLineNo3[1+1];
        bool      m_bWmsNameAddress3;
        char      m_szWmsNameAddress3[40+1];
        bool      m_bWmsNameAddrType4;
        char      m_szWmsNameAddrType4[1+1];
        bool      m_bWmsLineNo4;
        char      m_szWmsLineNo4[1+1];
        bool      m_bWmsNameAddress4;
        char      m_szWmsNameAddress4[40+1];
        bool      m_bWmsNameAddrType5;
        char      m_szWmsNameAddrType5[1+1];
        bool      m_bWmsLineNo5;
        char      m_szWmsLineNo5[1+1];
        bool      m_bWmsNameAddress5;
        char      m_szWmsNameAddress5[40+1];
        bool      m_bWmsCityState;
        char      m_szWmsCityState[30+1];
        bool      m_bWmsNaZipCode;
        char      m_szWmsNaZipCode[10+1];
        bool      m_bWmsSsnForeignAddress;
        char      m_szWmsSsnForeignAddress[1+1];
        bool      m_bWmsNaCountry;
        char      m_szWmsNaCountry[2+1];
        bool      m_bWmsTisConsumerFlag;
        char      m_szWmsTisConsumerFlag[1+1];
        bool      m_bWmsSpecInstrCode;
        char      m_szWmsSpecInstrCode[1+1];
        bool      m_bWmsSpecInstr;
        char      m_szWmsSpecInstr[40+1];
        bool      m_bWmsMrktOfficer;
        char      m_szWmsMrktOfficer[5+1];
        bool      m_bWmsStmtPull;
        char      m_szWmsStmtPull[1+1];
        bool      m_bWmsShortName;
        char      m_szWmsShortName[13+1];
        bool      m_bWmsBirthdate;
        char      m_szWmsBirthdate[8+1];
        bool      m_bWmsCustomerNumber;
        char      m_szWmsCustomerNumber[12+1];
        bool      m_bWmsTaxCode;
        char      m_szWmsTaxCode[1+1];
        bool      m_bWmsTaxNoPrefix;
        char      m_szWmsTaxNoPrefix[1+1];
        bool      m_bWmsTaxNo;
        char      m_szWmsTaxNo[9+1];
        bool      m_bWmsTaxNoSuffix;
        char      m_szWmsTaxNoSuffix[1+1];
        bool      m_bWmsTinCertification;
        char      m_szWmsTinCertification[1+1];
        bool      m_bWmsBkupWthldFlag;
        char      m_szWmsBkupWthldFlag[1+1];
        bool      m_bWmsNonTaxable;
        char      m_szWmsNonTaxable[1+1];
        bool      m_bWmsTaxExemptRsn;
        char      m_szWmsTaxExemptRsn[1+1];
        bool      m_bWmsHomeAreaCode;
        char      m_szWmsHomeAreaCode[3+1];
        bool      m_bWmsHomePhoneNo;
        char      m_szWmsHomePhoneNo[7+1];
        bool      m_bWmsBusAreaCode;
        char      m_szWmsBusAreaCode[3+1];
        bool      m_bWmsBusPhoneNo;
        char      m_szWmsBusPhoneNo[7+1];
        bool      m_bWmsBusExtension;
        char      m_szWmsBusExtension[4+1];
        bool      m_bWmsSsnStAddr;
        char      m_szWmsSsnStAddr[40+1];
        bool      m_bWmsSsnCitySt;
        char      m_szWmsSsnCitySt[30+1];
        bool      m_bWmsSsnZip;
        char      m_szWmsSsnZip[10+1];
        bool      m_bWmsScRelCode;
        char      m_szWmsScRelCode[1+1];
        bool      m_bWmsRelAcct;
        char      m_szWmsRelAcct[10+1];
        bool      m_bWmsRelCtl1;
        char      m_szWmsRelCtl1[2+1];
        bool      m_bWmsRelCtl2;
        char      m_szWmsRelCtl2[3+1];
        bool      m_bWmsRelCtl3;
        char      m_szWmsRelCtl3[3+1];
        bool      m_bWmsRelCtl4;
        char      m_szWmsRelCtl4[4+1];
        bool      m_bWmsClsOvrride;
        char      m_szWmsClsOvrride[1+1];
        bool      m_bWmsMtdAnalysis;
        char      m_szWmsMtdAnalysis[1+1];
        bool      m_bWmsScCycle;
        char      m_szWmsScCycle[1+1];
        bool      m_bWmsScCharge;
        char      m_szWmsScCharge[1+1];
        bool      m_bWmsScWaiveReason;
        char      m_szWmsScWaiveReason[2+1];
        bool      m_bWmsGovernmentId;
        char      m_szWmsGovernmentId[25+1];
    
      public:
        long      m_lIndex;

        AsdSDIM01MI ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bWmsNraTaxProvince = false;
            strcpy(m_szWmsNraTaxProvince, "");
            m_bWmsNraTaxCountry = false;
            strcpy(m_szWmsNraTaxCountry, "");
            m_bWmsNraCertName1 = false;
            strcpy(m_szWmsNraCertName1, "");
            m_bWmsNraCertName2 = false;
            strcpy(m_szWmsNraCertName2, "");
            m_bWmsInfoAlienCode = false;
            strcpy(m_szWmsInfoAlienCode, "");
            m_bWmsAcctType = false;
            strcpy(m_szWmsAcctType, "");
            m_bLinkAcctNbr = false;
            strcpy(m_szLinkAcctNbr, "");
            m_bWmsStmtSpeclHandl = false;
            strcpy(m_szWmsStmtSpeclHandl, "");
            m_bWmsSourceOfFunds = false;
            strcpy(m_szWmsSourceOfFunds, "");
            m_bImMemoOlOffEmp = false;
            strcpy(m_szImMemoOlOffEmp, "");
            m_bWmsOfficer = false;
            strcpy(m_szWmsOfficer, "");
            m_bWmsBranch = false;
            strcpy(m_szWmsBranch, "");
            m_bWmsRegion = false;
            strcpy(m_szWmsRegion, "");
            m_bWmsNameAddrType1 = false;
            strcpy(m_szWmsNameAddrType1, "");
            m_bWmsLineNo1 = false;
            strcpy(m_szWmsLineNo1, "");
            m_bWmsNameAddress1 = false;
            strcpy(m_szWmsNameAddress1, "");
            m_bWmsNameAddrType2 = false;
            strcpy(m_szWmsNameAddrType2, "");
            m_bWmsLineNo2 = false;
            strcpy(m_szWmsLineNo2, "");
            m_bWmsNameAddress2 = false;
            strcpy(m_szWmsNameAddress2, "");
            m_bWmsNameAddrType3 = false;
            strcpy(m_szWmsNameAddrType3, "");
            m_bWmsLineNo3 = false;
            strcpy(m_szWmsLineNo3, "");
            m_bWmsNameAddress3 = false;
            strcpy(m_szWmsNameAddress3, "");
            m_bWmsNameAddrType4 = false;
            strcpy(m_szWmsNameAddrType4, "");
            m_bWmsLineNo4 = false;
            strcpy(m_szWmsLineNo4, "");
            m_bWmsNameAddress4 = false;
            strcpy(m_szWmsNameAddress4, "");
            m_bWmsNameAddrType5 = false;
            strcpy(m_szWmsNameAddrType5, "");
            m_bWmsLineNo5 = false;
            strcpy(m_szWmsLineNo5, "");
            m_bWmsNameAddress5 = false;
            strcpy(m_szWmsNameAddress5, "");
            m_bWmsCityState = false;
            strcpy(m_szWmsCityState, "");
            m_bWmsNaZipCode = false;
            strcpy(m_szWmsNaZipCode, "");
            m_bWmsSsnForeignAddress = false;
            strcpy(m_szWmsSsnForeignAddress, "");
            m_bWmsNaCountry = false;
            strcpy(m_szWmsNaCountry, "");
            m_bWmsTisConsumerFlag = false;
            strcpy(m_szWmsTisConsumerFlag, "");
            m_bWmsSpecInstrCode = false;
            strcpy(m_szWmsSpecInstrCode, "");
            m_bWmsSpecInstr = false;
            strcpy(m_szWmsSpecInstr, "");
            m_bWmsMrktOfficer = false;
            strcpy(m_szWmsMrktOfficer, "");
            m_bWmsStmtPull = false;
            strcpy(m_szWmsStmtPull, "");
            m_bWmsShortName = false;
            strcpy(m_szWmsShortName, "");
            m_bWmsBirthdate = false;
            strcpy(m_szWmsBirthdate, "");
            m_bWmsCustomerNumber = false;
            strcpy(m_szWmsCustomerNumber, "");
            m_bWmsTaxCode = false;
            strcpy(m_szWmsTaxCode, "");
            m_bWmsTaxNoPrefix = false;
            strcpy(m_szWmsTaxNoPrefix, "");
            m_bWmsTaxNo = false;
            strcpy(m_szWmsTaxNo, "");
            m_bWmsTaxNoSuffix = false;
            strcpy(m_szWmsTaxNoSuffix, "");
            m_bWmsTinCertification = false;
            strcpy(m_szWmsTinCertification, "");
            m_bWmsBkupWthldFlag = false;
            strcpy(m_szWmsBkupWthldFlag, "");
            m_bWmsNonTaxable = false;
            strcpy(m_szWmsNonTaxable, "");
            m_bWmsTaxExemptRsn = false;
            strcpy(m_szWmsTaxExemptRsn, "");
            m_bWmsHomeAreaCode = false;
            strcpy(m_szWmsHomeAreaCode, "");
            m_bWmsHomePhoneNo = false;
            strcpy(m_szWmsHomePhoneNo, "");
            m_bWmsBusAreaCode = false;
            strcpy(m_szWmsBusAreaCode, "");
            m_bWmsBusPhoneNo = false;
            strcpy(m_szWmsBusPhoneNo, "");
            m_bWmsBusExtension = false;
            strcpy(m_szWmsBusExtension, "");
            m_bWmsSsnStAddr = false;
            strcpy(m_szWmsSsnStAddr, "");
            m_bWmsSsnCitySt = false;
            strcpy(m_szWmsSsnCitySt, "");
            m_bWmsSsnZip = false;
            strcpy(m_szWmsSsnZip, "");
            m_bWmsScRelCode = false;
            strcpy(m_szWmsScRelCode, "");
            m_bWmsRelAcct = false;
            strcpy(m_szWmsRelAcct, "");
            m_bWmsRelCtl1 = false;
            strcpy(m_szWmsRelCtl1, "");
            m_bWmsRelCtl2 = false;
            strcpy(m_szWmsRelCtl2, "");
            m_bWmsRelCtl3 = false;
            strcpy(m_szWmsRelCtl3, "");
            m_bWmsRelCtl4 = false;
            strcpy(m_szWmsRelCtl4, "");
            m_bWmsClsOvrride = false;
            strcpy(m_szWmsClsOvrride, "");
            m_bWmsMtdAnalysis = false;
            strcpy(m_szWmsMtdAnalysis, "");
            m_bWmsScCycle = false;
            strcpy(m_szWmsScCycle, "");
            m_bWmsScCharge = false;
            strcpy(m_szWmsScCharge, "");
            m_bWmsScWaiveReason = false;
            strcpy(m_szWmsScWaiveReason, "");
            m_bWmsGovernmentId = false;
            strcpy(m_szWmsGovernmentId, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bWmsNraTaxProvince = false;
            strcpy(m_szWmsNraTaxProvince, "");
            m_bWmsNraTaxCountry = false;
            strcpy(m_szWmsNraTaxCountry, "");
            m_bWmsNraCertName1 = false;
            strcpy(m_szWmsNraCertName1, "");
            m_bWmsNraCertName2 = false;
            strcpy(m_szWmsNraCertName2, "");
            m_bWmsInfoAlienCode = false;
            strcpy(m_szWmsInfoAlienCode, "");
            m_bWmsAcctType = false;
            strcpy(m_szWmsAcctType, "");
            m_bLinkAcctNbr = false;
            strcpy(m_szLinkAcctNbr, "");
            m_bWmsStmtSpeclHandl = false;
            strcpy(m_szWmsStmtSpeclHandl, "");
            m_bWmsSourceOfFunds = false;
            strcpy(m_szWmsSourceOfFunds, "");
            m_bImMemoOlOffEmp = false;
            strcpy(m_szImMemoOlOffEmp, "");
            m_bWmsOfficer = false;
            strcpy(m_szWmsOfficer, "");
            m_bWmsBranch = false;
            strcpy(m_szWmsBranch, "");
            m_bWmsRegion = false;
            strcpy(m_szWmsRegion, "");
            m_bWmsNameAddrType1 = false;
            strcpy(m_szWmsNameAddrType1, "");
            m_bWmsLineNo1 = false;
            strcpy(m_szWmsLineNo1, "");
            m_bWmsNameAddress1 = false;
            strcpy(m_szWmsNameAddress1, "");
            m_bWmsNameAddrType2 = false;
            strcpy(m_szWmsNameAddrType2, "");
            m_bWmsLineNo2 = false;
            strcpy(m_szWmsLineNo2, "");
            m_bWmsNameAddress2 = false;
            strcpy(m_szWmsNameAddress2, "");
            m_bWmsNameAddrType3 = false;
            strcpy(m_szWmsNameAddrType3, "");
            m_bWmsLineNo3 = false;
            strcpy(m_szWmsLineNo3, "");
            m_bWmsNameAddress3 = false;
            strcpy(m_szWmsNameAddress3, "");
            m_bWmsNameAddrType4 = false;
            strcpy(m_szWmsNameAddrType4, "");
            m_bWmsLineNo4 = false;
            strcpy(m_szWmsLineNo4, "");
            m_bWmsNameAddress4 = false;
            strcpy(m_szWmsNameAddress4, "");
            m_bWmsNameAddrType5 = false;
            strcpy(m_szWmsNameAddrType5, "");
            m_bWmsLineNo5 = false;
            strcpy(m_szWmsLineNo5, "");
            m_bWmsNameAddress5 = false;
            strcpy(m_szWmsNameAddress5, "");
            m_bWmsCityState = false;
            strcpy(m_szWmsCityState, "");
            m_bWmsNaZipCode = false;
            strcpy(m_szWmsNaZipCode, "");
            m_bWmsSsnForeignAddress = false;
            strcpy(m_szWmsSsnForeignAddress, "");
            m_bWmsNaCountry = false;
            strcpy(m_szWmsNaCountry, "");
            m_bWmsTisConsumerFlag = false;
            strcpy(m_szWmsTisConsumerFlag, "");
            m_bWmsSpecInstrCode = false;
            strcpy(m_szWmsSpecInstrCode, "");
            m_bWmsSpecInstr = false;
            strcpy(m_szWmsSpecInstr, "");
            m_bWmsMrktOfficer = false;
            strcpy(m_szWmsMrktOfficer, "");
            m_bWmsStmtPull = false;
            strcpy(m_szWmsStmtPull, "");
            m_bWmsShortName = false;
            strcpy(m_szWmsShortName, "");
            m_bWmsBirthdate = false;
            strcpy(m_szWmsBirthdate, "");
            m_bWmsCustomerNumber = false;
            strcpy(m_szWmsCustomerNumber, "");
            m_bWmsTaxCode = false;
            strcpy(m_szWmsTaxCode, "");
            m_bWmsTaxNoPrefix = false;
            strcpy(m_szWmsTaxNoPrefix, "");
            m_bWmsTaxNo = false;
            strcpy(m_szWmsTaxNo, "");
            m_bWmsTaxNoSuffix = false;
            strcpy(m_szWmsTaxNoSuffix, "");
            m_bWmsTinCertification = false;
            strcpy(m_szWmsTinCertification, "");
            m_bWmsBkupWthldFlag = false;
            strcpy(m_szWmsBkupWthldFlag, "");
            m_bWmsNonTaxable = false;
            strcpy(m_szWmsNonTaxable, "");
            m_bWmsTaxExemptRsn = false;
            strcpy(m_szWmsTaxExemptRsn, "");
            m_bWmsHomeAreaCode = false;
            strcpy(m_szWmsHomeAreaCode, "");
            m_bWmsHomePhoneNo = false;
            strcpy(m_szWmsHomePhoneNo, "");
            m_bWmsBusAreaCode = false;
            strcpy(m_szWmsBusAreaCode, "");
            m_bWmsBusPhoneNo = false;
            strcpy(m_szWmsBusPhoneNo, "");
            m_bWmsBusExtension = false;
            strcpy(m_szWmsBusExtension, "");
            m_bWmsSsnStAddr = false;
            strcpy(m_szWmsSsnStAddr, "");
            m_bWmsSsnCitySt = false;
            strcpy(m_szWmsSsnCitySt, "");
            m_bWmsSsnZip = false;
            strcpy(m_szWmsSsnZip, "");
            m_bWmsScRelCode = false;
            strcpy(m_szWmsScRelCode, "");
            m_bWmsRelAcct = false;
            strcpy(m_szWmsRelAcct, "");
            m_bWmsRelCtl1 = false;
            strcpy(m_szWmsRelCtl1, "");
            m_bWmsRelCtl2 = false;
            strcpy(m_szWmsRelCtl2, "");
            m_bWmsRelCtl3 = false;
            strcpy(m_szWmsRelCtl3, "");
            m_bWmsRelCtl4 = false;
            strcpy(m_szWmsRelCtl4, "");
            m_bWmsClsOvrride = false;
            strcpy(m_szWmsClsOvrride, "");
            m_bWmsMtdAnalysis = false;
            strcpy(m_szWmsMtdAnalysis, "");
            m_bWmsScCycle = false;
            strcpy(m_szWmsScCycle, "");
            m_bWmsScCharge = false;
            strcpy(m_szWmsScCharge, "");
            m_bWmsScWaiveReason = false;
            strcpy(m_szWmsScWaiveReason, "");
            m_bWmsGovernmentId = false;
            strcpy(m_szWmsGovernmentId, "");
        }

        
        //    NON RESIDENT ALIEN TAX PROVINCE
        long lWmsNraTaxProvince () { return 2; };
        RWCString WmsNraTaxProvince (void)
        {
            return m_szWmsNraTaxProvince;
        }
        long WmsNraTaxProvince (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNraTaxProvince, sizeof(m_szWmsNraTaxProvince), &m_bWmsNraTaxProvince);
        }
        
        //    CODE DEFINED BY IRS USED FOR 1042S REPORTING
        long lWmsNraTaxCountry () { return 2; };
        RWCString WmsNraTaxCountry (void)
        {
            return m_szWmsNraTaxCountry;
        }
        long WmsNraTaxCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNraTaxCountry, sizeof(m_szWmsNraTaxCountry), &m_bWmsNraTaxCountry);
        }
        
        //    STATUS OF THE W-8 CERTIFICATION FOR PRIMARY ACCT HOLDER
        long lWmsNraCertName1 () { return 1; };
        RWCString WmsNraCertName1 (void)
        {
            return m_szWmsNraCertName1;
        }
        long WmsNraCertName1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNraCertName1, sizeof(m_szWmsNraCertName1), &m_bWmsNraCertName1);
        }
        
        //    INDICATES THE STATUS OF W-8 CERT FOR THE SECDRY ACCT HOLDER
        long lWmsNraCertName2 () { return 1; };
        RWCString WmsNraCertName2 (void)
        {
            return m_szWmsNraCertName2;
        }
        long WmsNraCertName2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNraCertName2, sizeof(m_szWmsNraCertName2), &m_bWmsNraCertName2);
        }
        
        //    INDICATES IF CUSTOMER IS AN ALIEN
        long lWmsInfoAlienCode () { return 1; };
        RWCString WmsInfoAlienCode (void)
        {
            return m_szWmsInfoAlienCode;
        }
        long WmsInfoAlienCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsInfoAlienCode, sizeof(m_szWmsInfoAlienCode), &m_bWmsInfoAlienCode);
        }
        
        //    IDENTIFIES THE TYPE OF PRODUCT
        long lWmsAcctType () { return 3; };
        RWCString WmsAcctType (void)
        {
            return m_szWmsAcctType;
        }
        long WmsAcctType (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsAcctType, sizeof(m_szWmsAcctType), &m_bWmsAcctType);
        }
        
        //    ACCT NBR OF ASSOCIATED ACCOUNT
        long lLinkAcctNbr () { return 14; };
        RWCString LinkAcctNbr (void)
        {
            return m_szLinkAcctNbr;
        }
        long LinkAcctNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szLinkAcctNbr, sizeof(m_szLinkAcctNbr), &m_bLinkAcctNbr);
        }
        
        //    CAUSES STMT TO SORT DIRECTLY BEHIND THE REG SPEC HNDLNG STMT
        long lWmsStmtSpeclHandl () { return 1; };
        RWCString WmsStmtSpeclHandl (void)
        {
            return m_szWmsStmtSpeclHandl;
        }
        long WmsStmtSpeclHandl (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtSpeclHandl, sizeof(m_szWmsStmtSpeclHandl), &m_bWmsStmtSpeclHandl);
        }
        
        //    USER-DEFINED SOURCE OF FUNDS CODE
        long lWmsSourceOfFunds () { return 3; };
        RWCString WmsSourceOfFunds (void)
        {
            return m_szWmsSourceOfFunds;
        }
        long WmsSourceOfFunds (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSourceOfFunds, sizeof(m_szWmsSourceOfFunds), &m_bWmsSourceOfFunds);
        }
        
        //    ACCOUNT HOLDER'S RELATIONSHIP WITH THE INSTITUTION
        long lImMemoOlOffEmp () { return 1; };
        RWCString ImMemoOlOffEmp (void)
        {
            return m_szImMemoOlOffEmp;
        }
        long ImMemoOlOffEmp (const RWCString& rwc)
        {
            return SetString(rwc, m_szImMemoOlOffEmp, sizeof(m_szImMemoOlOffEmp), &m_bImMemoOlOffEmp);
        }
        
        //    USER-DEFINED FIELD FOR OFFICER ASSOCIATED WITH THE ACCOUNT
        long lWmsOfficer () { return 5; };
        RWCString WmsOfficer (void)
        {
            return m_szWmsOfficer;
        }
        long WmsOfficer (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsOfficer, sizeof(m_szWmsOfficer), &m_bWmsOfficer);
        }
        
        //    USER-DEFINED: IDENTIFIES BRANCH WHERE ACCOUNT WAS OPENED
        long lWmsBranch () { return 3; };
        RWCString WmsBranch (void)
        {
            return m_szWmsBranch;
        }
        long WmsBranch (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBranch, sizeof(m_szWmsBranch), &m_bWmsBranch);
        }
        
        //    USER DEFINED REGION CODE
        long lWmsRegion () { return 3; };
        RWCString WmsRegion (void)
        {
            return m_szWmsRegion;
        }
        long WmsRegion (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsRegion, sizeof(m_szWmsRegion), &m_bWmsRegion);
        }
        
        //    INDICATES TYPE OF NAME/ADDRESS LINE
        long lWmsNameAddrType1 () { return 1; };
        RWCString WmsNameAddrType1 (void)
        {
            return m_szWmsNameAddrType1;
        }
        long WmsNameAddrType1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddrType1, sizeof(m_szWmsNameAddrType1), &m_bWmsNameAddrType1);
        }
        
        //    INDICATES SEQUENCE OF THE LINE WITHIN THE TYPE
        long lWmsLineNo1 () { return 1; };
        RWCString WmsLineNo1 (void)
        {
            return m_szWmsLineNo1;
        }
        long WmsLineNo1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLineNo1, sizeof(m_szWmsLineNo1), &m_bWmsLineNo1);
        }
        
        //    LINES FOR NAME AND ADDRESS
        long lWmsNameAddress1 () { return 40; };
        RWCString WmsNameAddress1 (void)
        {
            return m_szWmsNameAddress1;
        }
        long WmsNameAddress1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddress1, sizeof(m_szWmsNameAddress1), &m_bWmsNameAddress1);
        }
        
        //    INDICATES TYPE OF NAME/ADDRESS LINE
        long lWmsNameAddrType2 () { return 1; };
        RWCString WmsNameAddrType2 (void)
        {
            return m_szWmsNameAddrType2;
        }
        long WmsNameAddrType2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddrType2, sizeof(m_szWmsNameAddrType2), &m_bWmsNameAddrType2);
        }
        
        //    INDICATES SEQUENCE OF THE LINE WITHIN THE TYPE
        long lWmsLineNo2 () { return 1; };
        RWCString WmsLineNo2 (void)
        {
            return m_szWmsLineNo2;
        }
        long WmsLineNo2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLineNo2, sizeof(m_szWmsLineNo2), &m_bWmsLineNo2);
        }
        
        //    LINES FOR NAME AND ADDRESS
        long lWmsNameAddress2 () { return 40; };
        RWCString WmsNameAddress2 (void)
        {
            return m_szWmsNameAddress2;
        }
        long WmsNameAddress2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddress2, sizeof(m_szWmsNameAddress2), &m_bWmsNameAddress2);
        }
        
        //    INDICATES TYPE OF NAME/ADDRESS LINE
        long lWmsNameAddrType3 () { return 1; };
        RWCString WmsNameAddrType3 (void)
        {
            return m_szWmsNameAddrType3;
        }
        long WmsNameAddrType3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddrType3, sizeof(m_szWmsNameAddrType3), &m_bWmsNameAddrType3);
        }
        
        //    INDICATES SEQUENCE OF THE LINE WITHIN THE TYPE
        long lWmsLineNo3 () { return 1; };
        RWCString WmsLineNo3 (void)
        {
            return m_szWmsLineNo3;
        }
        long WmsLineNo3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLineNo3, sizeof(m_szWmsLineNo3), &m_bWmsLineNo3);
        }
        
        //    LINES FOR NAME AND ADDRESS
        long lWmsNameAddress3 () { return 40; };
        RWCString WmsNameAddress3 (void)
        {
            return m_szWmsNameAddress3;
        }
        long WmsNameAddress3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddress3, sizeof(m_szWmsNameAddress3), &m_bWmsNameAddress3);
        }
        
        //    INDICATES TYPE OF NAME/ADDRESS LINE
        long lWmsNameAddrType4 () { return 1; };
        RWCString WmsNameAddrType4 (void)
        {
            return m_szWmsNameAddrType4;
        }
        long WmsNameAddrType4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddrType4, sizeof(m_szWmsNameAddrType4), &m_bWmsNameAddrType4);
        }
        
        //    INDICATES SEQUENCE OF THE LINE WITHIN THE TYPE
        long lWmsLineNo4 () { return 1; };
        RWCString WmsLineNo4 (void)
        {
            return m_szWmsLineNo4;
        }
        long WmsLineNo4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLineNo4, sizeof(m_szWmsLineNo4), &m_bWmsLineNo4);
        }
        
        //    LINES FOR NAME AND ADDRESS
        long lWmsNameAddress4 () { return 40; };
        RWCString WmsNameAddress4 (void)
        {
            return m_szWmsNameAddress4;
        }
        long WmsNameAddress4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddress4, sizeof(m_szWmsNameAddress4), &m_bWmsNameAddress4);
        }
        
        //    INDICATES TYPE OF NAME/ADDRESS LINE
        long lWmsNameAddrType5 () { return 1; };
        RWCString WmsNameAddrType5 (void)
        {
            return m_szWmsNameAddrType5;
        }
        long WmsNameAddrType5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddrType5, sizeof(m_szWmsNameAddrType5), &m_bWmsNameAddrType5);
        }
        
        //    INDICATES SEQUENCE OF THE LINE WITHIN THE TYPE
        long lWmsLineNo5 () { return 1; };
        RWCString WmsLineNo5 (void)
        {
            return m_szWmsLineNo5;
        }
        long WmsLineNo5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsLineNo5, sizeof(m_szWmsLineNo5), &m_bWmsLineNo5);
        }
        
        //    LINES FOR NAME AND ADDRESS
        long lWmsNameAddress5 () { return 40; };
        RWCString WmsNameAddress5 (void)
        {
            return m_szWmsNameAddress5;
        }
        long WmsNameAddress5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNameAddress5, sizeof(m_szWmsNameAddress5), &m_bWmsNameAddress5);
        }
        
        //    CITY AND STATE INFORMATION
        long lWmsCityState () { return 30; };
        RWCString WmsCityState (void)
        {
            return m_szWmsCityState;
        }
        long WmsCityState (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCityState, sizeof(m_szWmsCityState), &m_bWmsCityState);
        }
        
        //    ZIP CODE
        long lWmsNaZipCode () { return 10; };
        RWCString WmsNaZipCode (void)
        {
            return m_szWmsNaZipCode;
        }
        long WmsNaZipCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNaZipCode, sizeof(m_szWmsNaZipCode), &m_bWmsNaZipCode);
        }
        
        //    INDICATES WHETHER ACCT HOLDER'S ADDR IS FOREIGN OR DOMESTIC
        long lWmsSsnForeignAddress () { return 1; };
        RWCString WmsSsnForeignAddress (void)
        {
            return m_szWmsSsnForeignAddress;
        }
        long WmsSsnForeignAddress (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSsnForeignAddress, sizeof(m_szWmsSsnForeignAddress), &m_bWmsSsnForeignAddress);
        }
        
        //    COUNTRY CODE USED FOR NAME ADDRESS PURPOSES
        long lWmsNaCountry () { return 2; };
        RWCString WmsNaCountry (void)
        {
            return m_szWmsNaCountry;
        }
        long WmsNaCountry (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNaCountry, sizeof(m_szWmsNaCountry), &m_bWmsNaCountry);
        }
        
        //    TRUTH IN SAVINGS CONSUMER FLAG
        long lWmsTisConsumerFlag () { return 1; };
        RWCString WmsTisConsumerFlag (void)
        {
            return m_szWmsTisConsumerFlag;
        }
        long WmsTisConsumerFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTisConsumerFlag, sizeof(m_szWmsTisConsumerFlag), &m_bWmsTisConsumerFlag);
        }
        
        //    SPECIAL INSTRUCTION CODE.
        long lWmsSpecInstrCode () { return 1; };
        RWCString WmsSpecInstrCode (void)
        {
            return m_szWmsSpecInstrCode;
        }
        long WmsSpecInstrCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSpecInstrCode, sizeof(m_szWmsSpecInstrCode), &m_bWmsSpecInstrCode);
        }
        
        //    SPECIAL INSTRUCTIONS
        long lWmsSpecInstr () { return 40; };
        RWCString WmsSpecInstr (void)
        {
            return m_szWmsSpecInstr;
        }
        long WmsSpecInstr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSpecInstr, sizeof(m_szWmsSpecInstr), &m_bWmsSpecInstr);
        }
        
        //    OFFICER ASSIGNED TO THE ACCT FOR MARKETING PURPOSES
        long lWmsMrktOfficer () { return 5; };
        RWCString WmsMrktOfficer (void)
        {
            return m_szWmsMrktOfficer;
        }
        long WmsMrktOfficer (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsMrktOfficer, sizeof(m_szWmsMrktOfficer), &m_bWmsMrktOfficer);
        }
        
        //    INDICATES WHEN TO GENERATE A STATEMENT FOR THE ACCOUNT
        long lWmsStmtPull () { return 1; };
        RWCString WmsStmtPull (void)
        {
            return m_szWmsStmtPull;
        }
        long WmsStmtPull (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsStmtPull, sizeof(m_szWmsStmtPull), &m_bWmsStmtPull);
        }
        
        //    ABBREVIATED VERSION OF THE CUSTOMER'S NAME
        long lWmsShortName () { return 13; };
        RWCString WmsShortName (void)
        {
            return m_szWmsShortName;
        }
        long WmsShortName (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsShortName, sizeof(m_szWmsShortName), &m_bWmsShortName);
        }
        
        //    CUSTOMERS BIRTHDATE
        long lWmsBirthdate () { return 8; };
        RWCString WmsBirthdate (void)
        {
            return m_szWmsBirthdate;
        }
        long WmsBirthdate (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBirthdate, sizeof(m_szWmsBirthdate), &m_bWmsBirthdate);
        }
        
        //    USER-DEFINED NUMBER THAT IDENTIFIES THE CUSTOMER
        long lWmsCustomerNumber () { return 12; };
        RWCString WmsCustomerNumber (void)
        {
            return m_szWmsCustomerNumber;
        }
        long WmsCustomerNumber (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsCustomerNumber, sizeof(m_szWmsCustomerNumber), &m_bWmsCustomerNumber);
        }
        
        //    INDICATES HOW THE TAX NUMBER IS USED (BUS OR PERSONAL)
        long lWmsTaxCode () { return 1; };
        RWCString WmsTaxCode (void)
        {
            return m_szWmsTaxCode;
        }
        long WmsTaxCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTaxCode, sizeof(m_szWmsTaxCode), &m_bWmsTaxCode);
        }
        
        //    ALPHA PREFIX IF USED
        long lWmsTaxNoPrefix () { return 1; };
        RWCString WmsTaxNoPrefix (void)
        {
            return m_szWmsTaxNoPrefix;
        }
        long WmsTaxNoPrefix (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTaxNoPrefix, sizeof(m_szWmsTaxNoPrefix), &m_bWmsTaxNoPrefix);
        }
        
        //    BUSINESS TAX NUMBER OR PERSONAL SSN
        long lWmsTaxNo () { return 9; };
        RWCString WmsTaxNo (void)
        {
            return m_szWmsTaxNo;
        }
        long WmsTaxNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTaxNo, sizeof(m_szWmsTaxNo), &m_bWmsTaxNo);
        }
        
        //    ALPHA SUFFIX IF USED
        long lWmsTaxNoSuffix () { return 1; };
        RWCString WmsTaxNoSuffix (void)
        {
            return m_szWmsTaxNoSuffix;
        }
        long WmsTaxNoSuffix (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTaxNoSuffix, sizeof(m_szWmsTaxNoSuffix), &m_bWmsTaxNoSuffix);
        }
        
        //    INDICATES IF TAX IF CERTIFICATION IS ON FILE
        long lWmsTinCertification () { return 1; };
        RWCString WmsTinCertification (void)
        {
            return m_szWmsTinCertification;
        }
        long WmsTinCertification (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTinCertification, sizeof(m_szWmsTinCertification), &m_bWmsTinCertification);
        }
        
        //    INDICATES THE REASON FOR BACKUP WITHHOLDING
        long lWmsBkupWthldFlag () { return 1; };
        RWCString WmsBkupWthldFlag (void)
        {
            return m_szWmsBkupWthldFlag;
        }
        long WmsBkupWthldFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBkupWthldFlag, sizeof(m_szWmsBkupWthldFlag), &m_bWmsBkupWthldFlag);
        }
        
        //    INDICATES WHETHER INTEREST IS REPORTED TO IRS
        long lWmsNonTaxable () { return 1; };
        RWCString WmsNonTaxable (void)
        {
            return m_szWmsNonTaxable;
        }
        long WmsNonTaxable (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsNonTaxable, sizeof(m_szWmsNonTaxable), &m_bWmsNonTaxable);
        }
        
        //    USER DEFINED
        long lWmsTaxExemptRsn () { return 1; };
        RWCString WmsTaxExemptRsn (void)
        {
            return m_szWmsTaxExemptRsn;
        }
        long WmsTaxExemptRsn (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsTaxExemptRsn, sizeof(m_szWmsTaxExemptRsn), &m_bWmsTaxExemptRsn);
        }
        
        //    CUSTOMERS HOME AREA CODE
        long lWmsHomeAreaCode () { return 3; };
        RWCString WmsHomeAreaCode (void)
        {
            return m_szWmsHomeAreaCode;
        }
        long WmsHomeAreaCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsHomeAreaCode, sizeof(m_szWmsHomeAreaCode), &m_bWmsHomeAreaCode);
        }
        
        //    CUSTOMERS HOME PHONE NUMBER
        long lWmsHomePhoneNo () { return 7; };
        RWCString WmsHomePhoneNo (void)
        {
            return m_szWmsHomePhoneNo;
        }
        long WmsHomePhoneNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsHomePhoneNo, sizeof(m_szWmsHomePhoneNo), &m_bWmsHomePhoneNo);
        }
        
        //    CUSTOMER'S BUSINESS AREA CODE
        long lWmsBusAreaCode () { return 3; };
        RWCString WmsBusAreaCode (void)
        {
            return m_szWmsBusAreaCode;
        }
        long WmsBusAreaCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBusAreaCode, sizeof(m_szWmsBusAreaCode), &m_bWmsBusAreaCode);
        }
        
        //    CUSTOMER'S BUSINESS PHONE NUMBER
        long lWmsBusPhoneNo () { return 7; };
        RWCString WmsBusPhoneNo (void)
        {
            return m_szWmsBusPhoneNo;
        }
        long WmsBusPhoneNo (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBusPhoneNo, sizeof(m_szWmsBusPhoneNo), &m_bWmsBusPhoneNo);
        }
        
        //    CUSTOMER'S BUSINESS EXTENSION
        long lWmsBusExtension () { return 4; };
        RWCString WmsBusExtension (void)
        {
            return m_szWmsBusExtension;
        }
        long WmsBusExtension (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsBusExtension, sizeof(m_szWmsBusExtension), &m_bWmsBusExtension);
        }
        
        //    STREET ADDRESS
        long lWmsSsnStAddr () { return 40; };
        RWCString WmsSsnStAddr (void)
        {
            return m_szWmsSsnStAddr;
        }
        long WmsSsnStAddr (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSsnStAddr, sizeof(m_szWmsSsnStAddr), &m_bWmsSsnStAddr);
        }
        
        //    CITY AND STATE INFORMATION
        long lWmsSsnCitySt () { return 30; };
        RWCString WmsSsnCitySt (void)
        {
            return m_szWmsSsnCitySt;
        }
        long WmsSsnCitySt (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSsnCitySt, sizeof(m_szWmsSsnCitySt), &m_bWmsSsnCitySt);
        }
        
        //    ZIP CODE
        long lWmsSsnZip () { return 10; };
        RWCString WmsSsnZip (void)
        {
            return m_szWmsSsnZip;
        }
        long WmsSsnZip (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsSsnZip, sizeof(m_szWmsSsnZip), &m_bWmsSsnZip);
        }
        
        //    INDICATES THAT ACCT IS RELATED TO ANOTHER DDA ACCT FOR SC
        long lWmsScRelCode () { return 1; };
        RWCString WmsScRelCode (void)
        {
            return m_szWmsScRelCode;
        }
        long WmsScRelCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsScRelCode, sizeof(m_szWmsScRelCode), &m_bWmsScRelCode);
        }
        
        //    FOR SUBSIDIARY ACCTS THIS IS CONTROL INFO OF THE PRIME ACCT
        long lWmsRelAcct () { return 10; };
        RWCString WmsRelAcct (void)
        {
            return m_szWmsRelAcct;
        }
        long WmsRelAcct (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsRelAcct, sizeof(m_szWmsRelAcct), &m_bWmsRelAcct);
        }
        
        //    FOR SUBSIDIARY ACCTS THIS IS CONTROL INFO OF THE PRIME ACCT
        long lWmsRelCtl1 () { return 2; };
        RWCString WmsRelCtl1 (void)
        {
            return m_szWmsRelCtl1;
        }
        long WmsRelCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsRelCtl1, sizeof(m_szWmsRelCtl1), &m_bWmsRelCtl1);
        }
        
        //    FOR SUBSIDIARY ACCTS THIS IS CONTROL INFO OF THE PRIME ACCT
        long lWmsRelCtl2 () { return 3; };
        RWCString WmsRelCtl2 (void)
        {
            return m_szWmsRelCtl2;
        }
        long WmsRelCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsRelCtl2, sizeof(m_szWmsRelCtl2), &m_bWmsRelCtl2);
        }
        
        //    FOR SUBSIDIARY ACCTS THIS IS CONTROL INFO OF THE PRIME ACCT
        long lWmsRelCtl3 () { return 3; };
        RWCString WmsRelCtl3 (void)
        {
            return m_szWmsRelCtl3;
        }
        long WmsRelCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsRelCtl3, sizeof(m_szWmsRelCtl3), &m_bWmsRelCtl3);
        }
        
        //    FOR SUBSIDIARY ACCTS THIS IS CONTROL INFO OF THE PRIME ACCT
        long lWmsRelCtl4 () { return 4; };
        RWCString WmsRelCtl4 (void)
        {
            return m_szWmsRelCtl4;
        }
        long WmsRelCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsRelCtl4, sizeof(m_szWmsRelCtl4), &m_bWmsRelCtl4);
        }
        
        //    SUPPRESSES AUTOMATIC CLOSING OF THE ACCT IF BALANCE IS ZERO
        long lWmsClsOvrride () { return 1; };
        RWCString WmsClsOvrride (void)
        {
            return m_szWmsClsOvrride;
        }
        long WmsClsOvrride (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsClsOvrride, sizeof(m_szWmsClsOvrride), &m_bWmsClsOvrride);
        }
        
        //    INDICATES WHETHER TO INCLUDE ACCT IN END OF MONTH ANALYSIS
        long lWmsMtdAnalysis () { return 1; };
        RWCString WmsMtdAnalysis (void)
        {
            return m_szWmsMtdAnalysis;
        }
        long WmsMtdAnalysis (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsMtdAnalysis, sizeof(m_szWmsMtdAnalysis), &m_bWmsMtdAnalysis);
        }
        
        //    INDICATES SERVICE CHARGE CYCLE
        long lWmsScCycle () { return 1; };
        RWCString WmsScCycle (void)
        {
            return m_szWmsScCycle;
        }
        long WmsScCycle (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsScCycle, sizeof(m_szWmsScCycle), &m_bWmsScCycle);
        }
        
        //    INDICATES WHETHER TO WAIVE THE SERVICE CHARGE
        long lWmsScCharge () { return 1; };
        RWCString WmsScCharge (void)
        {
            return m_szWmsScCharge;
        }
        long WmsScCharge (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsScCharge, sizeof(m_szWmsScCharge), &m_bWmsScCharge);
        }
        
        //    REASON TO WAIVE THE SERVICE CHARGE
        long lWmsScWaiveReason () { return 2; };
        RWCString WmsScWaiveReason (void)
        {
            return m_szWmsScWaiveReason;
        }
        long WmsScWaiveReason (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsScWaiveReason, sizeof(m_szWmsScWaiveReason), &m_bWmsScWaiveReason);
        }
        
        //    GOVERNMENT ID
        long lWmsGovernmentId () { return 25; };
        RWCString WmsGovernmentId (void)
        {
            return m_szWmsGovernmentId;
        }
        long WmsGovernmentId (const RWCString& rwc)
        {
            return SetString(rwc, m_szWmsGovernmentId, sizeof(m_szWmsGovernmentId), &m_bWmsGovernmentId);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bWmsNraTaxProvince) return true;
            if (m_bWmsNraTaxCountry) return true;
            if (m_bWmsNraCertName1) return true;
            if (m_bWmsNraCertName2) return true;
            if (m_bWmsInfoAlienCode) return true;
            if (m_bWmsAcctType) return true;
            if (m_bLinkAcctNbr) return true;
            if (m_bWmsStmtSpeclHandl) return true;
            if (m_bWmsSourceOfFunds) return true;
            if (m_bImMemoOlOffEmp) return true;
            if (m_bWmsOfficer) return true;
            if (m_bWmsBranch) return true;
            if (m_bWmsRegion) return true;
            if (m_bWmsNameAddrType1) return true;
            if (m_bWmsLineNo1) return true;
            if (m_bWmsNameAddress1) return true;
            if (m_bWmsNameAddrType2) return true;
            if (m_bWmsLineNo2) return true;
            if (m_bWmsNameAddress2) return true;
            if (m_bWmsNameAddrType3) return true;
            if (m_bWmsLineNo3) return true;
            if (m_bWmsNameAddress3) return true;
            if (m_bWmsNameAddrType4) return true;
            if (m_bWmsLineNo4) return true;
            if (m_bWmsNameAddress4) return true;
            if (m_bWmsNameAddrType5) return true;
            if (m_bWmsLineNo5) return true;
            if (m_bWmsNameAddress5) return true;
            if (m_bWmsCityState) return true;
            if (m_bWmsNaZipCode) return true;
            if (m_bWmsSsnForeignAddress) return true;
            if (m_bWmsNaCountry) return true;
            if (m_bWmsTisConsumerFlag) return true;
            if (m_bWmsSpecInstrCode) return true;
            if (m_bWmsSpecInstr) return true;
            if (m_bWmsMrktOfficer) return true;
            if (m_bWmsStmtPull) return true;
            if (m_bWmsShortName) return true;
            if (m_bWmsBirthdate) return true;
            if (m_bWmsCustomerNumber) return true;
            if (m_bWmsTaxCode) return true;
            if (m_bWmsTaxNoPrefix) return true;
            if (m_bWmsTaxNo) return true;
            if (m_bWmsTaxNoSuffix) return true;
            if (m_bWmsTinCertification) return true;
            if (m_bWmsBkupWthldFlag) return true;
            if (m_bWmsNonTaxable) return true;
            if (m_bWmsTaxExemptRsn) return true;
            if (m_bWmsHomeAreaCode) return true;
            if (m_bWmsHomePhoneNo) return true;
            if (m_bWmsBusAreaCode) return true;
            if (m_bWmsBusPhoneNo) return true;
            if (m_bWmsBusExtension) return true;
            if (m_bWmsSsnStAddr) return true;
            if (m_bWmsSsnCitySt) return true;
            if (m_bWmsSsnZip) return true;
            if (m_bWmsScRelCode) return true;
            if (m_bWmsRelAcct) return true;
            if (m_bWmsRelCtl1) return true;
            if (m_bWmsRelCtl2) return true;
            if (m_bWmsRelCtl3) return true;
            if (m_bWmsRelCtl4) return true;
            if (m_bWmsClsOvrride) return true;
            if (m_bWmsMtdAnalysis) return true;
            if (m_bWmsScCycle) return true;
            if (m_bWmsScCharge) return true;
            if (m_bWmsScWaiveReason) return true;
            if (m_bWmsGovernmentId) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDIM01MI", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "WmsNraTaxProvince", m_szWmsNraTaxProvince, &m_bWmsNraTaxProvince);
                AddXMLField(pSess, "WmsNraTaxCountry", m_szWmsNraTaxCountry, &m_bWmsNraTaxCountry);
                AddXMLField(pSess, "WmsNraCertName1", m_szWmsNraCertName1, &m_bWmsNraCertName1);
                AddXMLField(pSess, "WmsNraCertName2", m_szWmsNraCertName2, &m_bWmsNraCertName2);
                AddXMLField(pSess, "WmsInfoAlienCode", m_szWmsInfoAlienCode, &m_bWmsInfoAlienCode);
                AddXMLField(pSess, "WmsAcctType", m_szWmsAcctType, &m_bWmsAcctType);
                AddXMLField(pSess, "LinkAcctNbr", m_szLinkAcctNbr, &m_bLinkAcctNbr);
                AddXMLField(pSess, "WmsStmtSpeclHandl", m_szWmsStmtSpeclHandl, &m_bWmsStmtSpeclHandl);
                AddXMLField(pSess, "WmsSourceOfFunds", m_szWmsSourceOfFunds, &m_bWmsSourceOfFunds);
                AddXMLField(pSess, "ImMemoOlOffEmp", m_szImMemoOlOffEmp, &m_bImMemoOlOffEmp);
                AddXMLField(pSess, "WmsOfficer", m_szWmsOfficer, &m_bWmsOfficer);
                AddXMLField(pSess, "WmsBranch", m_szWmsBranch, &m_bWmsBranch);
                AddXMLField(pSess, "WmsRegion", m_szWmsRegion, &m_bWmsRegion);
                AddXMLField(pSess, "WmsNameAddrType1", m_szWmsNameAddrType1, &m_bWmsNameAddrType1);
                AddXMLField(pSess, "WmsLineNo1", m_szWmsLineNo1, &m_bWmsLineNo1);
                AddXMLField(pSess, "WmsNameAddress1", m_szWmsNameAddress1, &m_bWmsNameAddress1);
                AddXMLField(pSess, "WmsNameAddrType2", m_szWmsNameAddrType2, &m_bWmsNameAddrType2);
                AddXMLField(pSess, "WmsLineNo2", m_szWmsLineNo2, &m_bWmsLineNo2);
                AddXMLField(pSess, "WmsNameAddress2", m_szWmsNameAddress2, &m_bWmsNameAddress2);
                AddXMLField(pSess, "WmsNameAddrType3", m_szWmsNameAddrType3, &m_bWmsNameAddrType3);
                AddXMLField(pSess, "WmsLineNo3", m_szWmsLineNo3, &m_bWmsLineNo3);
                AddXMLField(pSess, "WmsNameAddress3", m_szWmsNameAddress3, &m_bWmsNameAddress3);
                AddXMLField(pSess, "WmsNameAddrType4", m_szWmsNameAddrType4, &m_bWmsNameAddrType4);
                AddXMLField(pSess, "WmsLineNo4", m_szWmsLineNo4, &m_bWmsLineNo4);
                AddXMLField(pSess, "WmsNameAddress4", m_szWmsNameAddress4, &m_bWmsNameAddress4);
                AddXMLField(pSess, "WmsNameAddrType5", m_szWmsNameAddrType5, &m_bWmsNameAddrType5);
                AddXMLField(pSess, "WmsLineNo5", m_szWmsLineNo5, &m_bWmsLineNo5);
                AddXMLField(pSess, "WmsNameAddress5", m_szWmsNameAddress5, &m_bWmsNameAddress5);
                AddXMLField(pSess, "WmsCityState", m_szWmsCityState, &m_bWmsCityState);
                AddXMLField(pSess, "WmsNaZipCode", m_szWmsNaZipCode, &m_bWmsNaZipCode);
                AddXMLField(pSess, "WmsSsnForeignAddress", m_szWmsSsnForeignAddress, &m_bWmsSsnForeignAddress);
                AddXMLField(pSess, "WmsNaCountry", m_szWmsNaCountry, &m_bWmsNaCountry);
                AddXMLField(pSess, "WmsTisConsumerFlag", m_szWmsTisConsumerFlag, &m_bWmsTisConsumerFlag);
                AddXMLField(pSess, "WmsSpecInstrCode", m_szWmsSpecInstrCode, &m_bWmsSpecInstrCode);
                AddXMLField(pSess, "WmsSpecInstr", m_szWmsSpecInstr, &m_bWmsSpecInstr);
                AddXMLField(pSess, "WmsMrktOfficer", m_szWmsMrktOfficer, &m_bWmsMrktOfficer);
                AddXMLField(pSess, "WmsStmtPull", m_szWmsStmtPull, &m_bWmsStmtPull);
                AddXMLField(pSess, "WmsShortName", m_szWmsShortName, &m_bWmsShortName);
                AddXMLField(pSess, "WmsBirthdate", m_szWmsBirthdate, &m_bWmsBirthdate);
                AddXMLField(pSess, "WmsCustomerNumber", m_szWmsCustomerNumber, &m_bWmsCustomerNumber);
                AddXMLField(pSess, "WmsTaxCode", m_szWmsTaxCode, &m_bWmsTaxCode);
                AddXMLField(pSess, "WmsTaxNoPrefix", m_szWmsTaxNoPrefix, &m_bWmsTaxNoPrefix);
                AddXMLField(pSess, "WmsTaxNo", m_szWmsTaxNo, &m_bWmsTaxNo);
                AddXMLField(pSess, "WmsTaxNoSuffix", m_szWmsTaxNoSuffix, &m_bWmsTaxNoSuffix);
                AddXMLField(pSess, "WmsTinCertification", m_szWmsTinCertification, &m_bWmsTinCertification);
                AddXMLField(pSess, "WmsBkupWthldFlag", m_szWmsBkupWthldFlag, &m_bWmsBkupWthldFlag);
                AddXMLField(pSess, "WmsNonTaxable", m_szWmsNonTaxable, &m_bWmsNonTaxable);
                AddXMLField(pSess, "WmsTaxExemptRsn", m_szWmsTaxExemptRsn, &m_bWmsTaxExemptRsn);
                AddXMLField(pSess, "WmsHomeAreaCode", m_szWmsHomeAreaCode, &m_bWmsHomeAreaCode);
                AddXMLField(pSess, "WmsHomePhoneNo", m_szWmsHomePhoneNo, &m_bWmsHomePhoneNo);
                AddXMLField(pSess, "WmsBusAreaCode", m_szWmsBusAreaCode, &m_bWmsBusAreaCode);
                AddXMLField(pSess, "WmsBusPhoneNo", m_szWmsBusPhoneNo, &m_bWmsBusPhoneNo);
                AddXMLField(pSess, "WmsBusExtension", m_szWmsBusExtension, &m_bWmsBusExtension);
                AddXMLField(pSess, "WmsSsnStAddr", m_szWmsSsnStAddr, &m_bWmsSsnStAddr);
                AddXMLField(pSess, "WmsSsnCitySt", m_szWmsSsnCitySt, &m_bWmsSsnCitySt);
                AddXMLField(pSess, "WmsSsnZip", m_szWmsSsnZip, &m_bWmsSsnZip);
                AddXMLField(pSess, "WmsScRelCode", m_szWmsScRelCode, &m_bWmsScRelCode);
                AddXMLField(pSess, "WmsRelAcct", m_szWmsRelAcct, &m_bWmsRelAcct);
                AddXMLField(pSess, "WmsRelCtl1", m_szWmsRelCtl1, &m_bWmsRelCtl1);
                AddXMLField(pSess, "WmsRelCtl2", m_szWmsRelCtl2, &m_bWmsRelCtl2);
                AddXMLField(pSess, "WmsRelCtl3", m_szWmsRelCtl3, &m_bWmsRelCtl3);
                AddXMLField(pSess, "WmsRelCtl4", m_szWmsRelCtl4, &m_bWmsRelCtl4);
                AddXMLField(pSess, "WmsClsOvrride", m_szWmsClsOvrride, &m_bWmsClsOvrride);
                AddXMLField(pSess, "WmsMtdAnalysis", m_szWmsMtdAnalysis, &m_bWmsMtdAnalysis);
                AddXMLField(pSess, "WmsScCycle", m_szWmsScCycle, &m_bWmsScCycle);
                AddXMLField(pSess, "WmsScCharge", m_szWmsScCharge, &m_bWmsScCharge);
                AddXMLField(pSess, "WmsScWaiveReason", m_szWmsScWaiveReason, &m_bWmsScWaiveReason);
                AddXMLField(pSess, "WmsGovernmentId", m_szWmsGovernmentId, &m_bWmsGovernmentId);
                AddXMLCloseRecord(pSess, "SDIM01MI");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDIM01MI", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "WmsNraTaxProvince", m_szWmsNraTaxProvince);
                GetXMLField(pSess, "WmsNraTaxCountry", m_szWmsNraTaxCountry);
                GetXMLField(pSess, "WmsNraCertName1", m_szWmsNraCertName1);
                GetXMLField(pSess, "WmsNraCertName2", m_szWmsNraCertName2);
                GetXMLField(pSess, "WmsInfoAlienCode", m_szWmsInfoAlienCode);
                GetXMLField(pSess, "WmsAcctType", m_szWmsAcctType);
                GetXMLField(pSess, "LinkAcctNbr", m_szLinkAcctNbr);
                GetXMLField(pSess, "WmsStmtSpeclHandl", m_szWmsStmtSpeclHandl);
                GetXMLField(pSess, "WmsSourceOfFunds", m_szWmsSourceOfFunds);
                GetXMLField(pSess, "ImMemoOlOffEmp", m_szImMemoOlOffEmp);
                GetXMLField(pSess, "WmsOfficer", m_szWmsOfficer);
                GetXMLField(pSess, "WmsBranch", m_szWmsBranch);
                GetXMLField(pSess, "WmsRegion", m_szWmsRegion);
                GetXMLField(pSess, "WmsNameAddrType1", m_szWmsNameAddrType1);
                GetXMLField(pSess, "WmsLineNo1", m_szWmsLineNo1);
                GetXMLField(pSess, "WmsNameAddress1", m_szWmsNameAddress1);
                GetXMLField(pSess, "WmsNameAddrType2", m_szWmsNameAddrType2);
                GetXMLField(pSess, "WmsLineNo2", m_szWmsLineNo2);
                GetXMLField(pSess, "WmsNameAddress2", m_szWmsNameAddress2);
                GetXMLField(pSess, "WmsNameAddrType3", m_szWmsNameAddrType3);
                GetXMLField(pSess, "WmsLineNo3", m_szWmsLineNo3);
                GetXMLField(pSess, "WmsNameAddress3", m_szWmsNameAddress3);
                GetXMLField(pSess, "WmsNameAddrType4", m_szWmsNameAddrType4);
                GetXMLField(pSess, "WmsLineNo4", m_szWmsLineNo4);
                GetXMLField(pSess, "WmsNameAddress4", m_szWmsNameAddress4);
                GetXMLField(pSess, "WmsNameAddrType5", m_szWmsNameAddrType5);
                GetXMLField(pSess, "WmsLineNo5", m_szWmsLineNo5);
                GetXMLField(pSess, "WmsNameAddress5", m_szWmsNameAddress5);
                GetXMLField(pSess, "WmsCityState", m_szWmsCityState);
                GetXMLField(pSess, "WmsNaZipCode", m_szWmsNaZipCode);
                GetXMLField(pSess, "WmsSsnForeignAddress", m_szWmsSsnForeignAddress);
                GetXMLField(pSess, "WmsNaCountry", m_szWmsNaCountry);
                GetXMLField(pSess, "WmsTisConsumerFlag", m_szWmsTisConsumerFlag);
                GetXMLField(pSess, "WmsSpecInstrCode", m_szWmsSpecInstrCode);
                GetXMLField(pSess, "WmsSpecInstr", m_szWmsSpecInstr);
                GetXMLField(pSess, "WmsMrktOfficer", m_szWmsMrktOfficer);
                GetXMLField(pSess, "WmsStmtPull", m_szWmsStmtPull);
                GetXMLField(pSess, "WmsShortName", m_szWmsShortName);
                GetXMLField(pSess, "WmsBirthdate", m_szWmsBirthdate);
                GetXMLField(pSess, "WmsCustomerNumber", m_szWmsCustomerNumber);
                GetXMLField(pSess, "WmsTaxCode", m_szWmsTaxCode);
                GetXMLField(pSess, "WmsTaxNoPrefix", m_szWmsTaxNoPrefix);
                GetXMLField(pSess, "WmsTaxNo", m_szWmsTaxNo);
                GetXMLField(pSess, "WmsTaxNoSuffix", m_szWmsTaxNoSuffix);
                GetXMLField(pSess, "WmsTinCertification", m_szWmsTinCertification);
                GetXMLField(pSess, "WmsBkupWthldFlag", m_szWmsBkupWthldFlag);
                GetXMLField(pSess, "WmsNonTaxable", m_szWmsNonTaxable);
                GetXMLField(pSess, "WmsTaxExemptRsn", m_szWmsTaxExemptRsn);
                GetXMLField(pSess, "WmsHomeAreaCode", m_szWmsHomeAreaCode);
                GetXMLField(pSess, "WmsHomePhoneNo", m_szWmsHomePhoneNo);
                GetXMLField(pSess, "WmsBusAreaCode", m_szWmsBusAreaCode);
                GetXMLField(pSess, "WmsBusPhoneNo", m_szWmsBusPhoneNo);
                GetXMLField(pSess, "WmsBusExtension", m_szWmsBusExtension);
                GetXMLField(pSess, "WmsSsnStAddr", m_szWmsSsnStAddr);
                GetXMLField(pSess, "WmsSsnCitySt", m_szWmsSsnCitySt);
                GetXMLField(pSess, "WmsSsnZip", m_szWmsSsnZip);
                GetXMLField(pSess, "WmsScRelCode", m_szWmsScRelCode);
                GetXMLField(pSess, "WmsRelAcct", m_szWmsRelAcct);
                GetXMLField(pSess, "WmsRelCtl1", m_szWmsRelCtl1);
                GetXMLField(pSess, "WmsRelCtl2", m_szWmsRelCtl2);
                GetXMLField(pSess, "WmsRelCtl3", m_szWmsRelCtl3);
                GetXMLField(pSess, "WmsRelCtl4", m_szWmsRelCtl4);
                GetXMLField(pSess, "WmsClsOvrride", m_szWmsClsOvrride);
                GetXMLField(pSess, "WmsMtdAnalysis", m_szWmsMtdAnalysis);
                GetXMLField(pSess, "WmsScCycle", m_szWmsScCycle);
                GetXMLField(pSess, "WmsScCharge", m_szWmsScCharge);
                GetXMLField(pSess, "WmsScWaiveReason", m_szWmsScWaiveReason);
                GetXMLField(pSess, "WmsGovernmentId", m_szWmsGovernmentId);
                CloseXMLRecord(pSess, "SDIM01MI");
            };
        }
    };

    AsdSDIM01MI CSDIM01MI;
    AsdSDIM01MI *SDIM01MI;
    
    //**************** End AsdSDIM01MI Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdSDPCIP01Data Definition ****************

typedef AsdSDPCIP01Data *LPSDPCIP01;
typedef AsdSDPCIP01Data::AsdTSHeader *LPSDPCIP01_TSHeader;
typedef AsdSDPCIP01Data::AsdIMCMSD00 *LPSDPCIP01_IMCMSD00;
typedef AsdSDPCIP01Data::AsdSDIM01MI *LPSDPCIP01_SDIM01MI;
typedef AsdSDPCIP01Data::AsdTSMDA *LPSDPCIP01_TSMDA;
typedef AsdSDPCIP01Data::AsdTSMDA::AsdMdaTrmMsg *LPSDPCIP01_TSMDA_MdaTrmMsg;
typedef AsdSDPCIP01Data::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPSDPCIP01_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdSDPCIP01Data_H

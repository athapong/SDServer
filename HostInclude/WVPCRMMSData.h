#ifndef AsdWVPCRMMSData_H
#define AsdWVPCRMMSData_H

#include <stdlib.h>
#ifdef  AsdWVPCRMMS_INTEGRITY_STRING
#undef  AsdWVPCRMMS_INTEGRITY_STRING
#endif
#define AsdWVPCRMMS_INTEGRITY_STRING        ""

#ifdef  AsdWVPCRMMS_CRC_STRING
#undef  AsdWVPCRMMS_CRC_STRING
#endif
#define AsdWVPCRMMS_CRC_STRING "2143059103"

#include <rw/cstring.h>

#include <AceUserIncludesExit.h>

#include <bcAce2.h>

//**************** Start AsdWVPCRMMSData Definition ****************
//                 RM Customer Detail Inquiry

//                 WVPCRMMSData.h generated by AceGen2 ver. 2.5.09

class AsdWVPCRMMSData
{
  public:
    #include <AceUserExit.h>
  private:
    SESSIONDATA m_Sess;      // The one and only instance of SessionData

  public:
    AsdWVPCRMMSData ()  // Constructors
    {
        InitializeSessionData(&m_Sess);                      // InitializeSessionData declared in bcAce2.h
        m_Sess.pFileName = "WVPCRMMS.ace";                       // This variable is fixed at gen time
        m_Sess.pProtocol = "TLU0";                           // This variable is fixed at gen time
        m_Sess.pIntegrityString = AsdWVPCRMMS_INTEGRITY_STRING;  // This variable is fixed at gen time
        strcpy(m_Sess.szSession, "");                    // This variable is fixed at gen time

        TSHeader = &CTSHeader;
        WVRMTR00 = &CWVRMTR00;
        WVRMINQ = &CWVRMINQ;
        SDRMUCIB = &CSDRMUCIB;
        TSMDA = &CTSMDA;
    }

    ~AsdWVPCRMMSData ()  // Destructor
    {
        if(m_Sess.lAuthCode != 0)
            FreeSession();
    }

    /********************************************************************
     *    Reinit() - used to clear the proxy on Execute when proxy's
     *               dirty data does not get updated by ACE.
     *    WARNING:  NOT FOR USE WITH SessionExecute!
     *              Reinit will not initialize proxy if used with
     *              SessionExecute.
     ********************************************************************/
    void Reinit (void)
    {
        if ( m_Sess.lAuthCode == 0 )
        {
            CTSHeader.Reinit();
            CWVRMTR00.Reinit();
            CWVRMINQ.Reinit();
            CSDRMUCIB.Reinit();
            CTSMDA.Reinit();
        }
    }

    RWCString AceServerIP (void)
    {
        return m_Sess.szAceServerIP;
    }
    long AceServerIP (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szAceServerIP, sizeof(m_Sess.szAceServerIP));
    }

    RWCString Session (void)
    {
        return m_Sess.szSession;
    }
    long Session (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szSession, sizeof(m_Sess.szSession));
    }

    long AuthCode (void)
    {
        return m_Sess.lAuthCode;
    }
    long AuthCode (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lAuthCode);
    }
    long Handle (void)
    {
        return m_Sess.lHandle;
    }
    long Handle (const long lInput)
    {
        return SetLong(lInput, &m_Sess.lHandle);
    }
    RWCString Timeout (void)
    {
        return m_Sess.szTimeout;
    }
    long Timeout (const RWCString& rwc)
    {
        return SetString(rwc, m_Sess.szTimeout, sizeof(m_Sess.szTimeout));
    }
    bool bPassedIntegrityCheck (void)
    {
        return (m_Sess.bPassedIntegrityCheck);
    }

    long ReturnCode (void)
    {
        return (atoi(m_Sess.szRetVal));
    }

    RWCString Message (void)
    {
        return m_Sess.szRetMessage;
    }

    RWCString HostLUName (void)
    {
        AddXMLRecord(&m_Sess, NULL, -1);  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);  // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pGetHostLUName , NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pIntegrityTag, AsdWVPCRMMS_INTEGRITY_STRING, NULL);
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);  // ACE
        return GetHostLUName(&m_Sess);
    }
    RWCString TranslinkLUName (void)
    {
        return GetHostLUName(&m_Sess);
    }

    long Execute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pExecute, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCRMMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVRMTR00.Save(&m_Sess);
        CWVRMINQ.Save(&m_Sess);
        CSDRMUCIB.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCRMMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVRMTR00.Load(&m_Sess);
                        CWVRMINQ.Load(&m_Sess);
                        CSDRMUCIB.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCRMMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long SessionExecute (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pSessExec, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCRMMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA
        CTSHeader.Save(&m_Sess);
        CWVRMTR00.Save(&m_Sess);
        CWVRMINQ.Save(&m_Sess);
        CSDRMUCIB.Save(&m_Sess);
        CTSMDA.Save(&m_Sess);
    
        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                if (GetXMLRecord(&m_Sess, m_Sess.pDataTag, NULL, NULL))      // DATA
                {
                    if(GetXMLRecord(&m_Sess, "WVPCRMMS", NULL, NULL))
                    {
                        CTSHeader.Load(&m_Sess);
                        CWVRMTR00.Load(&m_Sess);
                        CWVRMINQ.Load(&m_Sess);
                        CSDRMUCIB.Load(&m_Sess);
                        CTSMDA.Load(&m_Sess);
    
                        CloseXMLRecord(&m_Sess, "WVPCRMMS");
                    }
    
                    CloseXMLRecord(&m_Sess, m_Sess.pDataTag);                                 // DATA
                }
                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        return ret;
    }
    long FreeSession (void)
    {
        long ret;

        ReadSessionFile(&m_Sess);
        AddXMLRecord(&m_Sess, NULL, -1);                  // NULL name initializes the buffers
        AddXMLRecord(&m_Sess, m_Sess.pAceTag, -1);        // ACE
        AddXMLField(&m_Sess, m_Sess.pCommandTag, m_Sess.pFreeSession, NULL);
        AddXMLField(&m_Sess, m_Sess.pAuthCodeTag, m_Sess.lAuthCode, NULL);
        AddXMLField(&m_Sess, m_Sess.pHandleTag, m_Sess.lHandle, NULL);
        AddXMLField(&m_Sess, m_Sess.pTimeoutTag, m_Sess.szTimeout, NULL);
        AddXMLField(&m_Sess, m_Sess.pProtocolTag, m_Sess.pProtocol, NULL);
        AddXMLField(&m_Sess, m_Sess.pFilenameTag, m_Sess.pFileName, NULL);
        AddXMLField(&m_Sess, m_Sess.pSessionTag, m_Sess.szSession, NULL);

        AddXMLField(&m_Sess, m_Sess.pCRCTag, AsdWVPCRMMS_CRC_STRING, NULL);
        AddXMLRecord(&m_Sess, m_Sess.pDataTag, -1);       // DATA

        AddXMLCloseRecord(&m_Sess, m_Sess.pDataTag);           // DATA
        AddXMLCloseRecord(&m_Sess, m_Sess.pAceTag);            // ACE

        if ((ret = ExecuteXMLTransaction(&m_Sess)) == 0)
        {
            if (GetXMLRecord(&m_Sess, m_Sess.pAceTag, NULL, NULL))
            {
                GetXMLField(&m_Sess, m_Sess.pGetHostLUName, m_Sess.szHostLUName);
                GetXMLField(&m_Sess, m_Sess.pReturnCode, m_Sess.szRetVal);
                GetXMLField(&m_Sess, m_Sess.pMessage, m_Sess.szRetMessage);
                GetCRCStatus(&m_Sess, m_Sess.pCRCMatchTag, &m_Sess.bPassedIntegrityCheck);
                GetXMLField(&m_Sess, m_Sess.pAuthCodeTag, &m_Sess.lAuthCode);
                GetXMLField(&m_Sess, m_Sess.pHandleTag, &m_Sess.lHandle);

                CloseXMLRecord(&m_Sess, m_Sess.pAceTag);                                     // ACE
            }
        }
        m_Sess.lAuthCode = 0;
        m_Sess.lHandle = 0;
        Reinit();
        return ret;
    }
    
    //**************** Start AsdTSHeader Definition ****************
    //                 ALLTEL LU0/LU62 TS HEADER AREA, VERSION 1
    
    class AsdTSHeader
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRemoteTPName;
        char      m_szRemoteTPName[4+1];
        bool      m_bPSBARC1;
        char      m_szPSBARC1[3+1];
        bool      m_bExtTranCode;
        char      m_szExtTranCode[4+1];
        bool      m_bOverrideTellerId;
        char      m_szOverrideTellerId[8+1];
        bool      m_bTranSeq;
        char      m_szTranSeq[4+1];
        bool      m_bTranStatus[3];
        short     m_nTranStatus[3];
        bool      m_bTranTime;
        char      m_szTranTime[6+1];
        bool      m_bLandFill0;
        char      m_szLandFill0[8+1];
        bool      m_bRecLen;
        char      m_szRecLen[6+1];
        bool      m_bUserId;
        char      m_szUserId[8+1];
        bool      m_bFunSecurityCode;
        char      m_szFunSecurityCode[1+1];
        bool      m_bBusModuleType;
        char      m_szBusModuleType[1+1];
        bool      m_bBusinessModule;
        char      m_szBusinessModule[8+1];
        bool      m_bMaximumSeverity;
        char      m_szMaximumSeverity[2+1];
        bool      m_bAppcErrorCode;
        char      m_szAppcErrorCode[4+1];
        bool      m_bNumDags;
        char      m_szNumDags[3+1];
    
      public:
        long      m_lIndex;

        AsdTSHeader ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRemoteTPName = false;
            strcpy(m_szRemoteTPName, "");
            m_bPSBARC1 = false;
            strcpy(m_szPSBARC1, "");
            m_bExtTranCode = false;
            strcpy(m_szExtTranCode, "");
            m_bOverrideTellerId = false;
            strcpy(m_szOverrideTellerId, "");
            m_bTranSeq = false;
            strcpy(m_szTranSeq, "");
            long lOccurs;
        
            for ( lOccurs = 0; lOccurs < 3; lOccurs++ )
            {
                m_bTranStatus[lOccurs] = false;
            m_nTranStatus[lOccurs] = 32;
            }
            m_bTranTime = false;
            strcpy(m_szTranTime, "");
            m_bLandFill0 = false;
            strcpy(m_szLandFill0, "0");
            m_bRecLen = false;
            strcpy(m_szRecLen, "+00000");
            m_bUserId = false;
            strcpy(m_szUserId, "");
            m_bFunSecurityCode = false;
            strcpy(m_szFunSecurityCode, "");
            m_bBusModuleType = false;
            strcpy(m_szBusModuleType, "");
            m_bBusinessModule = false;
            strcpy(m_szBusinessModule, "");
            m_bMaximumSeverity = false;
            strcpy(m_szMaximumSeverity, "");
            m_bAppcErrorCode = false;
            strcpy(m_szAppcErrorCode, "");
            m_bNumDags = false;
            strcpy(m_szNumDags, "+00");
        }

        
        //    CICS Trancode, probably PC01
        long lRemoteTPName () { return 4; };
        RWCString RemoteTPName (void)
        {
            return m_szRemoteTPName;
        }
        long RemoteTPName (const RWCString& rwc)
        {
            return SetString(rwc, m_szRemoteTPName, sizeof(m_szRemoteTPName), &m_bRemoteTPName);
        }
        
        //    SBA leftover from older teller days
        long lPSBARC1 () { return 3; };
        RWCString PSBARC1 (void)
        {
            return m_szPSBARC1;
        }
        long PSBARC1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szPSBARC1, sizeof(m_szPSBARC1), &m_bPSBARC1);
        }
        
        //    ExtTranCode
        long lExtTranCode () { return 4; };
        RWCString ExtTranCode (void)
        {
            return m_szExtTranCode;
        }
        long ExtTranCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szExtTranCode, sizeof(m_szExtTranCode), &m_bExtTranCode);
        }
        
        //    OverrideTellerId
        long lOverrideTellerId () { return 8; };
        RWCString OverrideTellerId (void)
        {
            return m_szOverrideTellerId;
        }
        long OverrideTellerId (const RWCString& rwc)
        {
            return SetString(rwc, m_szOverrideTellerId, sizeof(m_szOverrideTellerId), &m_bOverrideTellerId);
        }
        
        //    TranSeq
        long lTranSeq () { return 4; };
        RWCString TranSeq (void)
        {
            return m_szTranSeq;
        }
        long TranSeq (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranSeq, sizeof(m_szTranSeq), &m_bTranSeq);
        }
        
        //    TranStatus
        short TranStatus (long i)
        {
            if (i >= 0 && i < 3)
                return m_nTranStatus[i];
            else
                return 0;
        }
        long TranStatus (const short nValue, long i)
        {
            if (i >= 0 && i < 3)
                return SetShort(nValue, &m_nTranStatus[i], &m_bTranStatus[i]);
            else
                return -1;
        }
        
        //    TranTime
        long lTranTime () { return 6; };
        RWCString TranTime (void)
        {
            return m_szTranTime;
        }
        long TranTime (const RWCString& rwc)
        {
            return SetString(rwc, m_szTranTime, sizeof(m_szTranTime), &m_bTranTime);
        }
        
        //    LandFill0
        long lLandFill0 () { return 8; };
        RWCString LandFill0 (void)
        {
            return m_szLandFill0;
        }
        long LandFill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szLandFill0, sizeof(m_szLandFill0), &m_bLandFill0);
        }
        
        //    RecLen
        long lRecLen () { return 6; };
        RWCString RecLen (void)
        {
            return m_szRecLen;
        }
        long RecLen (const RWCString& rwc)
        {
            return SetString(rwc, m_szRecLen, sizeof(m_szRecLen), &m_bRecLen);
        }
        
        //    UserId
        long lUserId () { return 8; };
        RWCString UserId (void)
        {
            return m_szUserId;
        }
        long UserId (const RWCString& rwc)
        {
            return SetString(rwc, m_szUserId, sizeof(m_szUserId), &m_bUserId);
        }
        
        //    FunSecurityCode
        long lFunSecurityCode () { return 1; };
        RWCString FunSecurityCode (void)
        {
            return m_szFunSecurityCode;
        }
        long FunSecurityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szFunSecurityCode, sizeof(m_szFunSecurityCode), &m_bFunSecurityCode);
        }
        
        //    BusModuleType
        long lBusModuleType () { return 1; };
        RWCString BusModuleType (void)
        {
            return m_szBusModuleType;
        }
        long BusModuleType (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusModuleType, sizeof(m_szBusModuleType), &m_bBusModuleType);
        }
        
        //    BusinessModule
        long lBusinessModule () { return 8; };
        RWCString BusinessModule (void)
        {
            return m_szBusinessModule;
        }
        long BusinessModule (const RWCString& rwc)
        {
            return SetString(rwc, m_szBusinessModule, sizeof(m_szBusinessModule), &m_bBusinessModule);
        }
        
        //    MaximumSeverity
        long lMaximumSeverity () { return 2; };
        RWCString MaximumSeverity (void)
        {
            return m_szMaximumSeverity;
        }
        long MaximumSeverity (const RWCString& rwc)
        {
            return SetString(rwc, m_szMaximumSeverity, sizeof(m_szMaximumSeverity), &m_bMaximumSeverity);
        }
        
        //    AppcErrorCode
        long lAppcErrorCode () { return 4; };
        RWCString AppcErrorCode (void)
        {
            return m_szAppcErrorCode;
        }
        long AppcErrorCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szAppcErrorCode, sizeof(m_szAppcErrorCode), &m_bAppcErrorCode);
        }
        
        //    NumDags
        long lNumDags () { return 3; };
        RWCString NumDags (void)
        {
            return m_szNumDags;
        }
        long NumDags (const RWCString& rwc)
        {
            return SetString(rwc, m_szNumDags, sizeof(m_szNumDags), &m_bNumDags);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRemoteTPName) return true;
            if (m_bPSBARC1) return true;
            if (m_bExtTranCode) return true;
            if (m_bOverrideTellerId) return true;
            if (m_bTranSeq) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 3; lOccurs++)
                if (m_bTranStatus[lOccurs]) return true;
            if (m_bTranTime) return true;
            if (m_bLandFill0) return true;
            if (m_bRecLen) return true;
            if (m_bUserId) return true;
            if (m_bFunSecurityCode) return true;
            if (m_bBusModuleType) return true;
            if (m_bBusinessModule) return true;
            if (m_bMaximumSeverity) return true;
            if (m_bAppcErrorCode) return true;
            if (m_bNumDags) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSHeader", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RemoteTPName", m_szRemoteTPName, &m_bRemoteTPName);
                AddXMLField(pSess, "PSBARC1", m_szPSBARC1, &m_bPSBARC1);
                AddXMLField(pSess, "ExtTranCode", m_szExtTranCode, &m_bExtTranCode);
                AddXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId, &m_bOverrideTellerId);
                AddXMLField(pSess, "TranSeq", m_szTranSeq, &m_bTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    AddXMLField(pSess, "TranStatus", m_nTranStatus[lOccurs], &m_bTranStatus[lOccurs], lOccurs);
                AddXMLField(pSess, "TranTime", m_szTranTime, &m_bTranTime);
                AddXMLField(pSess, "LandFill0", m_szLandFill0, &m_bLandFill0);
                AddXMLField(pSess, "RecLen", m_szRecLen, &m_bRecLen);
                AddXMLField(pSess, "UserId", m_szUserId, &m_bUserId);
                AddXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode, &m_bFunSecurityCode);
                AddXMLField(pSess, "BusModuleType", m_szBusModuleType, &m_bBusModuleType);
                AddXMLField(pSess, "BusinessModule", m_szBusinessModule, &m_bBusinessModule);
                AddXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity, &m_bMaximumSeverity);
                AddXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode, &m_bAppcErrorCode);
                AddXMLField(pSess, "NumDags", m_szNumDags, &m_bNumDags);
                AddXMLCloseRecord(pSess, "TSHeader");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSHeader", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RemoteTPName", m_szRemoteTPName);
                GetXMLField(pSess, "PSBARC1", m_szPSBARC1);
                GetXMLField(pSess, "ExtTranCode", m_szExtTranCode);
                GetXMLField(pSess, "OverrideTellerId", m_szOverrideTellerId);
                GetXMLField(pSess, "TranSeq", m_szTranSeq);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 3; lOccurs++)
                    GetXMLField(pSess, "TranStatus", &m_nTranStatus[lOccurs], lOccurs);
                GetXMLField(pSess, "TranTime", m_szTranTime);
                GetXMLField(pSess, "LandFill0", m_szLandFill0);
                GetXMLField(pSess, "RecLen", m_szRecLen);
                GetXMLField(pSess, "UserId", m_szUserId);
                GetXMLField(pSess, "FunSecurityCode", m_szFunSecurityCode);
                GetXMLField(pSess, "BusModuleType", m_szBusModuleType);
                GetXMLField(pSess, "BusinessModule", m_szBusinessModule);
                GetXMLField(pSess, "MaximumSeverity", m_szMaximumSeverity);
                GetXMLField(pSess, "AppcErrorCode", m_szAppcErrorCode);
                GetXMLField(pSess, "NumDags", m_szNumDags);
                CloseXMLRecord(pSess, "TSHeader");
            };
        }
    };

    AsdTSHeader CTSHeader;
    AsdTSHeader *TSHeader;
    
    //**************** End AsdTSHeader Definition ****************

    
    //**************** Start AsdWVRMTR00 Definition ****************
    //                 CSW INTERFACE WITH RM - INPUT                               
    
    //    WVRMTR00.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/18/02 13:37:33
    class AsdWVRMTR00
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bCustCtl1;
        char      m_szCustCtl1[4+1];
        bool      m_bCustCtl2;
        char      m_szCustCtl2[4+1];
        bool      m_bCustCtl3;
        char      m_szCustCtl3[4+1];
        bool      m_bCustCtl4;
        char      m_szCustCtl4[4+1];
        bool      m_bCustNbr;
        char      m_szCustNbr[14+1];
        bool      m_bRelActSubCd1;
        char      m_szRelActSubCd1[1+1];
        bool      m_bPhDataInd;
        char      m_szPhDataInd[1+1];
        bool      m_bPersDataInd;
        char      m_szPersDataInd[1+1];
        bool      m_bEmplHistDataInd;
        char      m_szEmplHistDataInd[1+1];
        bool      m_bRmksDataInd;
        char      m_szRmksDataInd[1+1];
        bool      m_bEmailDataInd;
        char      m_szEmailDataInd[1+1];
        bool      m_bPhNbrReq;
        char      m_szPhNbrReq[4+1];
        bool      m_bRmkNbrReq;
        char      m_szRmkNbrReq[4+1];
        bool      m_bAddrNbrReq;
        char      m_szAddrNbrReq[4+1];
        bool      m_bRelNbrReq;
        char      m_szRelNbrReq[4+1];
        bool      m_bRelMoreInd;
        char      m_szRelMoreInd[1+1];
        bool      m_bRelSavKey;
        char      m_szRelSavKey[100+1];
    
      public:
        long      m_lIndex;

        AsdWVRMTR00 ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCustCtl1 = false;
            strcpy(m_szCustCtl1, "0000");
            m_bCustCtl2 = false;
            strcpy(m_szCustCtl2, "0000");
            m_bCustCtl3 = false;
            strcpy(m_szCustCtl3, "0000");
            m_bCustCtl4 = false;
            strcpy(m_szCustCtl4, "0000");
            m_bCustNbr = false;
            strcpy(m_szCustNbr, "00000000000000");
            m_bRelActSubCd1 = false;
            strcpy(m_szRelActSubCd1, "");
            m_bPhDataInd = false;
            strcpy(m_szPhDataInd, "");
            m_bPersDataInd = false;
            strcpy(m_szPersDataInd, "");
            m_bEmplHistDataInd = false;
            strcpy(m_szEmplHistDataInd, "");
            m_bRmksDataInd = false;
            strcpy(m_szRmksDataInd, "");
            m_bEmailDataInd = false;
            strcpy(m_szEmailDataInd, "");
            m_bPhNbrReq = false;
            strcpy(m_szPhNbrReq, "+000");
            m_bRmkNbrReq = false;
            strcpy(m_szRmkNbrReq, "+000");
            m_bAddrNbrReq = false;
            strcpy(m_szAddrNbrReq, "+000");
            m_bRelNbrReq = false;
            strcpy(m_szRelNbrReq, "+000");
            m_bRelMoreInd = false;
            strcpy(m_szRelMoreInd, "");
            m_bRelSavKey = false;
            strcpy(m_szRelSavKey, "");
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCustCtl1 = false;
            strcpy(m_szCustCtl1, "0000");
            m_bCustCtl2 = false;
            strcpy(m_szCustCtl2, "0000");
            m_bCustCtl3 = false;
            strcpy(m_szCustCtl3, "0000");
            m_bCustCtl4 = false;
            strcpy(m_szCustCtl4, "0000");
            m_bCustNbr = false;
            strcpy(m_szCustNbr, "00000000000000");
            m_bRelActSubCd1 = false;
            strcpy(m_szRelActSubCd1, "");
            m_bPhDataInd = false;
            strcpy(m_szPhDataInd, "");
            m_bPersDataInd = false;
            strcpy(m_szPersDataInd, "");
            m_bEmplHistDataInd = false;
            strcpy(m_szEmplHistDataInd, "");
            m_bRmksDataInd = false;
            strcpy(m_szRmksDataInd, "");
            m_bEmailDataInd = false;
            strcpy(m_szEmailDataInd, "");
            m_bPhNbrReq = false;
            strcpy(m_szPhNbrReq, "+000");
            m_bRmkNbrReq = false;
            strcpy(m_szRmkNbrReq, "+000");
            m_bAddrNbrReq = false;
            strcpy(m_szAddrNbrReq, "+000");
            m_bRelNbrReq = false;
            strcpy(m_szRelNbrReq, "+000");
            m_bRelMoreInd = false;
            strcpy(m_szRelMoreInd, "");
            m_bRelSavKey = false;
            strcpy(m_szRelSavKey, "");
        }

        
        //    INSTITUTION-DEFINED FIRST LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl1 () { return 4; };
        RWCString CustCtl1 (void)
        {
            return m_szCustCtl1;
        }
        long CustCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustCtl1, sizeof(m_szCustCtl1), &m_bCustCtl1);
        }
        
        //    INSTITUTION-DEFINED SECOND LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl2 () { return 4; };
        RWCString CustCtl2 (void)
        {
            return m_szCustCtl2;
        }
        long CustCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustCtl2, sizeof(m_szCustCtl2), &m_bCustCtl2);
        }
        
        //    INSTITUTION-DEFINED THIRD LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl3 () { return 4; };
        RWCString CustCtl3 (void)
        {
            return m_szCustCtl3;
        }
        long CustCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustCtl3, sizeof(m_szCustCtl3), &m_bCustCtl3);
        }
        
        //    INSTITUTION-DEFINED FOURTH LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl4 () { return 4; };
        RWCString CustCtl4 (void)
        {
            return m_szCustCtl4;
        }
        long CustCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustCtl4, sizeof(m_szCustCtl4), &m_bCustCtl4);
        }
        
        //    UNIQUE NUMBER IDENTIFYING THE CUSTOMER.
        long lCustNbr () { return 14; };
        RWCString CustNbr (void)
        {
            return m_szCustNbr;
        }
        long CustNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustNbr, sizeof(m_szCustNbr), &m_bCustNbr);
        }
        
        //    ACTION CODE
        long lRelActSubCd1 () { return 1; };
        RWCString RelActSubCd1 (void)
        {
            return m_szRelActSubCd1;
        }
        long RelActSubCd1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szRelActSubCd1, sizeof(m_szRelActSubCd1), &m_bRelActSubCd1);
        }
        
        //    INDICATES WHETHER TELEPHONE INFORMATION EXISTS FOR CUSTOMER.
        long lPhDataInd () { return 1; };
        RWCString PhDataInd (void)
        {
            return m_szPhDataInd;
        }
        long PhDataInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szPhDataInd, sizeof(m_szPhDataInd), &m_bPhDataInd);
        }
        
        //    INDICATES WHETHER PERSONAL DEMOGRAPHIC INFO EXISTS FOR CUST.
        long lPersDataInd () { return 1; };
        RWCString PersDataInd (void)
        {
            return m_szPersDataInd;
        }
        long PersDataInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szPersDataInd, sizeof(m_szPersDataInd), &m_bPersDataInd);
        }
        
        //    INDICATES WHETHER EMPLOYMENT HIST INFO EXISTS FOR CUSTOMER.
        long lEmplHistDataInd () { return 1; };
        RWCString EmplHistDataInd (void)
        {
            return m_szEmplHistDataInd;
        }
        long EmplHistDataInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szEmplHistDataInd, sizeof(m_szEmplHistDataInd), &m_bEmplHistDataInd);
        }
        
        //    INDICATES WHETHER REMARKS EXIST FOR THE CUSTOMER.
        long lRmksDataInd () { return 1; };
        RWCString RmksDataInd (void)
        {
            return m_szRmksDataInd;
        }
        long RmksDataInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRmksDataInd, sizeof(m_szRmksDataInd), &m_bRmksDataInd);
        }
        
        //    INDICATES IF A EMAIL SEGMENT IS PRESENT
        long lEmailDataInd () { return 1; };
        RWCString EmailDataInd (void)
        {
            return m_szEmailDataInd;
        }
        long EmailDataInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szEmailDataInd, sizeof(m_szEmailDataInd), &m_bEmailDataInd);
        }
        
        //    NUMBER OF SEGMENTS TO SEND TO THE SCREEN FOR VIEWING.
        long lPhNbrReq () { return 4; };
        RWCString PhNbrReq (void)
        {
            return AceZeroSupp(m_szPhNbrReq, &m_szSuppressBuff[0]);
        }
        RWCString PhNbrReqRaw (void)
        {
            return m_szPhNbrReq;
        }
        long PhNbrReq (const RWCString& rwc)
        {
            return SetString(rwc, m_szPhNbrReq, sizeof(m_szPhNbrReq), &m_bPhNbrReq);
        }
        
        //    NUMBER OF SEGMENTS TO SEND TO THE SCREEN FOR VIEWING.
        long lRmkNbrReq () { return 4; };
        RWCString RmkNbrReq (void)
        {
            return AceZeroSupp(m_szRmkNbrReq, &m_szSuppressBuff[0]);
        }
        RWCString RmkNbrReqRaw (void)
        {
            return m_szRmkNbrReq;
        }
        long RmkNbrReq (const RWCString& rwc)
        {
            return SetString(rwc, m_szRmkNbrReq, sizeof(m_szRmkNbrReq), &m_bRmkNbrReq);
        }
        
        //    NUMBER OF SEGMENTS TO SEND TO THE SCREEN FOR VIEWING.
        long lAddrNbrReq () { return 4; };
        RWCString AddrNbrReq (void)
        {
            return AceZeroSupp(m_szAddrNbrReq, &m_szSuppressBuff[0]);
        }
        RWCString AddrNbrReqRaw (void)
        {
            return m_szAddrNbrReq;
        }
        long AddrNbrReq (const RWCString& rwc)
        {
            return SetString(rwc, m_szAddrNbrReq, sizeof(m_szAddrNbrReq), &m_bAddrNbrReq);
        }
        
        //    NUMBER OF SEGMENTS TO SEND TO THE SCREEN FOR VIEWING.
        long lRelNbrReq () { return 4; };
        RWCString RelNbrReq (void)
        {
            return AceZeroSupp(m_szRelNbrReq, &m_szSuppressBuff[0]);
        }
        RWCString RelNbrReqRaw (void)
        {
            return m_szRelNbrReq;
        }
        long RelNbrReq (const RWCString& rwc)
        {
            return SetString(rwc, m_szRelNbrReq, sizeof(m_szRelNbrReq), &m_bRelNbrReq);
        }
        
        //    INDICATES WHETHER ADDITIONAL RELATIONSHIPS EXIST.
        long lRelMoreInd () { return 1; };
        RWCString RelMoreInd (void)
        {
            return m_szRelMoreInd;
        }
        long RelMoreInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRelMoreInd, sizeof(m_szRelMoreInd), &m_bRelMoreInd);
        }
        
        //    KEY TO THE LAST ENTRY ON A LIST SCREEN.
        long lRelSavKey () { return 100; };
        RWCString RelSavKey (void)
        {
            return m_szRelSavKey;
        }
        long RelSavKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szRelSavKey, sizeof(m_szRelSavKey), &m_bRelSavKey);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bCustCtl1) return true;
            if (m_bCustCtl2) return true;
            if (m_bCustCtl3) return true;
            if (m_bCustCtl4) return true;
            if (m_bCustNbr) return true;
            if (m_bRelActSubCd1) return true;
            if (m_bPhDataInd) return true;
            if (m_bPersDataInd) return true;
            if (m_bEmplHistDataInd) return true;
            if (m_bRmksDataInd) return true;
            if (m_bEmailDataInd) return true;
            if (m_bPhNbrReq) return true;
            if (m_bRmkNbrReq) return true;
            if (m_bAddrNbrReq) return true;
            if (m_bRelNbrReq) return true;
            if (m_bRelMoreInd) return true;
            if (m_bRelSavKey) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVRMTR00", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "CustCtl1", m_szCustCtl1, &m_bCustCtl1);
                AddXMLField(pSess, "CustCtl2", m_szCustCtl2, &m_bCustCtl2);
                AddXMLField(pSess, "CustCtl3", m_szCustCtl3, &m_bCustCtl3);
                AddXMLField(pSess, "CustCtl4", m_szCustCtl4, &m_bCustCtl4);
                AddXMLField(pSess, "CustNbr", m_szCustNbr, &m_bCustNbr);
                AddXMLField(pSess, "RelActSubCd1", m_szRelActSubCd1, &m_bRelActSubCd1);
                AddXMLField(pSess, "PhDataInd", m_szPhDataInd, &m_bPhDataInd);
                AddXMLField(pSess, "PersDataInd", m_szPersDataInd, &m_bPersDataInd);
                AddXMLField(pSess, "EmplHistDataInd", m_szEmplHistDataInd, &m_bEmplHistDataInd);
                AddXMLField(pSess, "RmksDataInd", m_szRmksDataInd, &m_bRmksDataInd);
                AddXMLField(pSess, "EmailDataInd", m_szEmailDataInd, &m_bEmailDataInd);
                AddXMLField(pSess, "PhNbrReq", m_szPhNbrReq, &m_bPhNbrReq);
                AddXMLField(pSess, "RmkNbrReq", m_szRmkNbrReq, &m_bRmkNbrReq);
                AddXMLField(pSess, "AddrNbrReq", m_szAddrNbrReq, &m_bAddrNbrReq);
                AddXMLField(pSess, "RelNbrReq", m_szRelNbrReq, &m_bRelNbrReq);
                AddXMLField(pSess, "RelMoreInd", m_szRelMoreInd, &m_bRelMoreInd);
                AddXMLField(pSess, "RelSavKey", m_szRelSavKey, &m_bRelSavKey);
                AddXMLCloseRecord(pSess, "WVRMTR00");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVRMTR00", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "CustCtl1", m_szCustCtl1);
                GetXMLField(pSess, "CustCtl2", m_szCustCtl2);
                GetXMLField(pSess, "CustCtl3", m_szCustCtl3);
                GetXMLField(pSess, "CustCtl4", m_szCustCtl4);
                GetXMLField(pSess, "CustNbr", m_szCustNbr);
                GetXMLField(pSess, "RelActSubCd1", m_szRelActSubCd1);
                GetXMLField(pSess, "PhDataInd", m_szPhDataInd);
                GetXMLField(pSess, "PersDataInd", m_szPersDataInd);
                GetXMLField(pSess, "EmplHistDataInd", m_szEmplHistDataInd);
                GetXMLField(pSess, "RmksDataInd", m_szRmksDataInd);
                GetXMLField(pSess, "EmailDataInd", m_szEmailDataInd);
                GetXMLField(pSess, "PhNbrReq", m_szPhNbrReq);
                GetXMLField(pSess, "RmkNbrReq", m_szRmkNbrReq);
                GetXMLField(pSess, "AddrNbrReq", m_szAddrNbrReq);
                GetXMLField(pSess, "RelNbrReq", m_szRelNbrReq);
                GetXMLField(pSess, "RelMoreInd", m_szRelMoreInd);
                GetXMLField(pSess, "RelSavKey", m_szRelSavKey);
                CloseXMLRecord(pSess, "WVRMTR00");
            };
        }
    };

    AsdWVRMTR00 CWVRMTR00;
    AsdWVRMTR00 *WVRMTR00;
    
    //**************** End AsdWVRMTR00 Definition ****************

    
    //**************** Start AsdWVRMINQ Definition ****************
    //                 CSW INTERFACE WITH RM - OUTPUT                              
    
    //    WVRMINQ.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 05/21/03 10:48:29
    class AsdWVRMINQ
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bCustCtl1;
        char      m_szCustCtl1[4+1];
        bool      m_bCustCtl2;
        char      m_szCustCtl2[4+1];
        bool      m_bCustCtl3;
        char      m_szCustCtl3[4+1];
        bool      m_bCustCtl4;
        char      m_szCustCtl4[4+1];
        bool      m_bCustNbr;
        char      m_szCustNbr[14+1];
        bool      m_bNameLine1;
        char      m_szNameLine1[40+1];
        bool      m_bNameLine2;
        char      m_szNameLine2[40+1];
        bool      m_bNameLine3;
        char      m_szNameLine3[40+1];
        bool      m_bNameLine4;
        char      m_szNameLine4[40+1];
        bool      m_bFirstName;
        char      m_szFirstName[25+1];
        bool      m_bMidName;
        char      m_szMidName[25+1];
        bool      m_bLstName;
        char      m_szLstName[25+1];
        bool      m_bTitl;
        char      m_szTitl[25+1];
        bool      m_bSalutation;
        char      m_szSalutation[25+1];
        bool      m_bCustStatCd;
        char      m_szCustStatCd[2+1];
        bool      m_bCustTypCd;
        char      m_szCustTypCd[1+1];
        bool      m_bTin;
        char      m_szTin[10+1];
        bool      m_bTinCertCd;
        char      m_szTinCertCd[1+1];
        bool      m_bTinCd;
        char      m_szTinCd[1+1];
        bool      m_bVipCd;
        char      m_szVipCd[2+1];
        bool      m_bOffEmpDirCd;
        char      m_szOffEmpDirCd[1+1];
        bool      m_bInstOfOffEmpDir;
        char      m_szInstOfOffEmpDir[1+1];
        bool      m_bStkhldrInd;
        char      m_szStkhldrInd[1+1];
        bool      m_bLstMaintDt;
        char      m_szLstMaintDt[8+1];
        bool      m_bIbCustInd;
        char      m_szIbCustInd[1+1];
        bool      m_bIbPrefCommTypCd;
        char      m_szIbPrefCommTypCd[1+1];
        bool      m_bRespBr;
        char      m_szRespBr[5+1];
        bool      m_bCustOffCd;
        char      m_szCustOffCd[5+1];
        bool      m_bCustUsr1;
        char      m_szCustUsr1[10+1];
        bool      m_bCustUsr2;
        char      m_szCustUsr2[10+1];
        bool      m_bCustUsr3;
        char      m_szCustUsr3[10+1];
        bool      m_bCustUsr4;
        char      m_szCustUsr4[10+1];
        bool      m_bCustUsr5;
        char      m_szCustUsr5[10+1];
        bool      m_bCustUsr6;
        char      m_szCustUsr6[10+1];
        bool      m_bGenderCd;
        char      m_szGenderCd[1+1];
        bool      m_bDob;
        char      m_szDob[8+1];
        bool      m_bMotherMaidName;
        char      m_szMotherMaidName[24+1];
        bool      m_bSpouseName;
        char      m_szSpouseName[40+1];
        bool      m_bNbrChildren;
        char      m_szNbrChildren[4+1];
        bool      m_bDrvrsLicns;
        char      m_szDrvrsLicns[20+1];
        bool      m_bDrvrsLicnsSt;
        char      m_szDrvrsLicnsSt[2+1];
        bool      m_bPassportIdNbr;
        char      m_szPassportIdNbr[20+1];
        bool      m_bPassportCtry;
        char      m_szPassportCtry[20+1];
        bool      m_bPhTblUsed;
        short     m_nPhTblUsed;
        bool      m_bEmailTypCd;
        char      m_szEmailTypCd[1+1];
        bool      m_bEmailAddr;
        char      m_szEmailAddr[70+1];
        bool      m_bAddrTblUsed;
        short     m_nAddrTblUsed;
        bool      m_bRelSavKey;
        char      m_szRelSavKey[100+1];
        bool      m_bRelMoreInd;
        char      m_szRelMoreInd[1+1];
        bool      m_bRelTblUsed;
        short     m_nRelTblUsed;
        bool      m_bAcctTblUsed;
        short     m_nAcctTblUsed;
        bool      m_bEmplStartDt;
        char      m_szEmplStartDt[8+1];
        bool      m_bEmplStpDt;
        char      m_szEmplStpDt[8+1];
        bool      m_bEmprName;
        char      m_szEmprName[40+1];
        bool      m_bRmkTblUsed;
        short     m_nRmkTblUsed;
        bool      m_bShareCustInfoCd;
        char      m_szShareCustInfoCd[1+1];
        bool      m_bShareInfoMaintDt;
        char      m_szShareInfoMaintDt[8+1];
        bool      m_bLoanGuidance;
        char      m_szLoanGuidance[17+1];
        bool      m_bAvlblLoanGuidance;
        char      m_szAvlblLoanGuidance[17+1];
    
      public:
        long      m_lIndex;

        AsdWVRMINQ ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCustCtl1 = false;
            strcpy(m_szCustCtl1, "0000");
            m_bCustCtl2 = false;
            strcpy(m_szCustCtl2, "0000");
            m_bCustCtl3 = false;
            strcpy(m_szCustCtl3, "0000");
            m_bCustCtl4 = false;
            strcpy(m_szCustCtl4, "0000");
            m_bCustNbr = false;
            strcpy(m_szCustNbr, "00000000000000");
            m_bNameLine1 = false;
            strcpy(m_szNameLine1, "");
            m_bNameLine2 = false;
            strcpy(m_szNameLine2, "");
            m_bNameLine3 = false;
            strcpy(m_szNameLine3, "");
            m_bNameLine4 = false;
            strcpy(m_szNameLine4, "");
            m_bFirstName = false;
            strcpy(m_szFirstName, "");
            m_bMidName = false;
            strcpy(m_szMidName, "");
            m_bLstName = false;
            strcpy(m_szLstName, "");
            m_bTitl = false;
            strcpy(m_szTitl, "");
            m_bSalutation = false;
            strcpy(m_szSalutation, "");
            m_bCustStatCd = false;
            strcpy(m_szCustStatCd, "");
            m_bCustTypCd = false;
            strcpy(m_szCustTypCd, "");
            m_bTin = false;
            strcpy(m_szTin, "");
            m_bTinCertCd = false;
            strcpy(m_szTinCertCd, "");
            m_bTinCd = false;
            strcpy(m_szTinCd, "");
            m_bVipCd = false;
            strcpy(m_szVipCd, "");
            m_bOffEmpDirCd = false;
            strcpy(m_szOffEmpDirCd, "");
            m_bInstOfOffEmpDir = false;
            strcpy(m_szInstOfOffEmpDir, "");
            m_bStkhldrInd = false;
            strcpy(m_szStkhldrInd, "");
            m_bLstMaintDt = false;
            strcpy(m_szLstMaintDt, "");
            m_bIbCustInd = false;
            strcpy(m_szIbCustInd, "");
            m_bIbPrefCommTypCd = false;
            strcpy(m_szIbPrefCommTypCd, "");
            m_bRespBr = false;
            strcpy(m_szRespBr, "");
            m_bCustOffCd = false;
            strcpy(m_szCustOffCd, "");
            m_bCustUsr1 = false;
            strcpy(m_szCustUsr1, "");
            m_bCustUsr2 = false;
            strcpy(m_szCustUsr2, "");
            m_bCustUsr3 = false;
            strcpy(m_szCustUsr3, "");
            m_bCustUsr4 = false;
            strcpy(m_szCustUsr4, "");
            m_bCustUsr5 = false;
            strcpy(m_szCustUsr5, "");
            m_bCustUsr6 = false;
            strcpy(m_szCustUsr6, "");
            m_bGenderCd = false;
            strcpy(m_szGenderCd, "");
            m_bDob = false;
            strcpy(m_szDob, "");
            m_bMotherMaidName = false;
            strcpy(m_szMotherMaidName, "");
            m_bSpouseName = false;
            strcpy(m_szSpouseName, "");
            m_bNbrChildren = false;
            strcpy(m_szNbrChildren, "+000");
            m_bDrvrsLicns = false;
            strcpy(m_szDrvrsLicns, "");
            m_bDrvrsLicnsSt = false;
            strcpy(m_szDrvrsLicnsSt, "");
            m_bPassportIdNbr = false;
            strcpy(m_szPassportIdNbr, "");
            m_bPassportCtry = false;
            strcpy(m_szPassportCtry, "");
            m_bPhTblUsed = false;
            m_nPhTblUsed = 0;
            m_bEmailTypCd = false;
            strcpy(m_szEmailTypCd, "");
            m_bEmailAddr = false;
            strcpy(m_szEmailAddr, "");
            m_bAddrTblUsed = false;
            m_nAddrTblUsed = 0;
            m_bRelSavKey = false;
            strcpy(m_szRelSavKey, "");
            m_bRelMoreInd = false;
            strcpy(m_szRelMoreInd, "");
            m_bRelTblUsed = false;
            m_nRelTblUsed = 0;
            m_bAcctTblUsed = false;
            m_nAcctTblUsed = 0;
            m_bEmplStartDt = false;
            strcpy(m_szEmplStartDt, "");
            m_bEmplStpDt = false;
            strcpy(m_szEmplStpDt, "");
            m_bEmprName = false;
            strcpy(m_szEmprName, "");
            m_bRmkTblUsed = false;
            m_nRmkTblUsed = 0;
            m_bShareCustInfoCd = false;
            strcpy(m_szShareCustInfoCd, "");
            m_bShareInfoMaintDt = false;
            strcpy(m_szShareInfoMaintDt, "");
            m_bLoanGuidance = false;
            strcpy(m_szLoanGuidance, "+0000000000000.00");
            m_bAvlblLoanGuidance = false;
            strcpy(m_szAvlblLoanGuidance, "+0000000000000.00");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                PhInfo[lOccurs]  = &CPhInfo[lOccurs];
                CPhInfo[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 5; lOccurs++)
            {
                AddrInfo[lOccurs]  = &CAddrInfo[lOccurs];
                CAddrInfo[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                RelData[lOccurs]  = &CRelData[lOccurs];
                CRelData[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                ApplData[lOccurs]  = &CApplData[lOccurs];
                CApplData[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                RmkInfo[lOccurs]  = &CRmkInfo[lOccurs];
                CRmkInfo[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bCustCtl1 = false;
            strcpy(m_szCustCtl1, "0000");
            m_bCustCtl2 = false;
            strcpy(m_szCustCtl2, "0000");
            m_bCustCtl3 = false;
            strcpy(m_szCustCtl3, "0000");
            m_bCustCtl4 = false;
            strcpy(m_szCustCtl4, "0000");
            m_bCustNbr = false;
            strcpy(m_szCustNbr, "00000000000000");
            m_bNameLine1 = false;
            strcpy(m_szNameLine1, "");
            m_bNameLine2 = false;
            strcpy(m_szNameLine2, "");
            m_bNameLine3 = false;
            strcpy(m_szNameLine3, "");
            m_bNameLine4 = false;
            strcpy(m_szNameLine4, "");
            m_bFirstName = false;
            strcpy(m_szFirstName, "");
            m_bMidName = false;
            strcpy(m_szMidName, "");
            m_bLstName = false;
            strcpy(m_szLstName, "");
            m_bTitl = false;
            strcpy(m_szTitl, "");
            m_bSalutation = false;
            strcpy(m_szSalutation, "");
            m_bCustStatCd = false;
            strcpy(m_szCustStatCd, "");
            m_bCustTypCd = false;
            strcpy(m_szCustTypCd, "");
            m_bTin = false;
            strcpy(m_szTin, "");
            m_bTinCertCd = false;
            strcpy(m_szTinCertCd, "");
            m_bTinCd = false;
            strcpy(m_szTinCd, "");
            m_bVipCd = false;
            strcpy(m_szVipCd, "");
            m_bOffEmpDirCd = false;
            strcpy(m_szOffEmpDirCd, "");
            m_bInstOfOffEmpDir = false;
            strcpy(m_szInstOfOffEmpDir, "");
            m_bStkhldrInd = false;
            strcpy(m_szStkhldrInd, "");
            m_bLstMaintDt = false;
            strcpy(m_szLstMaintDt, "");
            m_bIbCustInd = false;
            strcpy(m_szIbCustInd, "");
            m_bIbPrefCommTypCd = false;
            strcpy(m_szIbPrefCommTypCd, "");
            m_bRespBr = false;
            strcpy(m_szRespBr, "");
            m_bCustOffCd = false;
            strcpy(m_szCustOffCd, "");
            m_bCustUsr1 = false;
            strcpy(m_szCustUsr1, "");
            m_bCustUsr2 = false;
            strcpy(m_szCustUsr2, "");
            m_bCustUsr3 = false;
            strcpy(m_szCustUsr3, "");
            m_bCustUsr4 = false;
            strcpy(m_szCustUsr4, "");
            m_bCustUsr5 = false;
            strcpy(m_szCustUsr5, "");
            m_bCustUsr6 = false;
            strcpy(m_szCustUsr6, "");
            m_bGenderCd = false;
            strcpy(m_szGenderCd, "");
            m_bDob = false;
            strcpy(m_szDob, "");
            m_bMotherMaidName = false;
            strcpy(m_szMotherMaidName, "");
            m_bSpouseName = false;
            strcpy(m_szSpouseName, "");
            m_bNbrChildren = false;
            strcpy(m_szNbrChildren, "+000");
            m_bDrvrsLicns = false;
            strcpy(m_szDrvrsLicns, "");
            m_bDrvrsLicnsSt = false;
            strcpy(m_szDrvrsLicnsSt, "");
            m_bPassportIdNbr = false;
            strcpy(m_szPassportIdNbr, "");
            m_bPassportCtry = false;
            strcpy(m_szPassportCtry, "");
            m_bPhTblUsed = false;
            m_nPhTblUsed = 0;
            m_bEmailTypCd = false;
            strcpy(m_szEmailTypCd, "");
            m_bEmailAddr = false;
            strcpy(m_szEmailAddr, "");
            m_bAddrTblUsed = false;
            m_nAddrTblUsed = 0;
            m_bRelSavKey = false;
            strcpy(m_szRelSavKey, "");
            m_bRelMoreInd = false;
            strcpy(m_szRelMoreInd, "");
            m_bRelTblUsed = false;
            m_nRelTblUsed = 0;
            m_bAcctTblUsed = false;
            m_nAcctTblUsed = 0;
            m_bEmplStartDt = false;
            strcpy(m_szEmplStartDt, "");
            m_bEmplStpDt = false;
            strcpy(m_szEmplStpDt, "");
            m_bEmprName = false;
            strcpy(m_szEmprName, "");
            m_bRmkTblUsed = false;
            m_nRmkTblUsed = 0;
            m_bShareCustInfoCd = false;
            strcpy(m_szShareCustInfoCd, "");
            m_bShareInfoMaintDt = false;
            strcpy(m_szShareInfoMaintDt, "");
            m_bLoanGuidance = false;
            strcpy(m_szLoanGuidance, "+0000000000000.00");
            m_bAvlblLoanGuidance = false;
            strcpy(m_szAvlblLoanGuidance, "+0000000000000.00");
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                PhInfo[lOccurs]  = &CPhInfo[lOccurs];
                CPhInfo[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 5; lOccurs++)
            {
                AddrInfo[lOccurs]  = &CAddrInfo[lOccurs];
                CAddrInfo[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                RelData[lOccurs]  = &CRelData[lOccurs];
                CRelData[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                ApplData[lOccurs]  = &CApplData[lOccurs];
                CApplData[lOccurs].m_lIndex = lOccurs;
            }
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                RmkInfo[lOccurs]  = &CRmkInfo[lOccurs];
                CRmkInfo[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    INSTITUTION-DEFINED FIRST LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl1 () { return 4; };
        RWCString CustCtl1 (void)
        {
            return m_szCustCtl1;
        }
        long CustCtl1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustCtl1, sizeof(m_szCustCtl1), &m_bCustCtl1);
        }
        
        //    INSTITUTION-DEFINED SECOND LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl2 () { return 4; };
        RWCString CustCtl2 (void)
        {
            return m_szCustCtl2;
        }
        long CustCtl2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustCtl2, sizeof(m_szCustCtl2), &m_bCustCtl2);
        }
        
        //    INSTITUTION-DEFINED THIRD LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl3 () { return 4; };
        RWCString CustCtl3 (void)
        {
            return m_szCustCtl3;
        }
        long CustCtl3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustCtl3, sizeof(m_szCustCtl3), &m_bCustCtl3);
        }
        
        //    INSTITUTION-DEFINED FOURTH LEVEL CONTROL FOR THE CUSTOMER.
        long lCustCtl4 () { return 4; };
        RWCString CustCtl4 (void)
        {
            return m_szCustCtl4;
        }
        long CustCtl4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustCtl4, sizeof(m_szCustCtl4), &m_bCustCtl4);
        }
        
        //    UNIQUE NUMBER IDENTIFYING THE CUSTOMER.
        long lCustNbr () { return 14; };
        RWCString CustNbr (void)
        {
            return m_szCustNbr;
        }
        long CustNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustNbr, sizeof(m_szCustNbr), &m_bCustNbr);
        }
        
        //    FIRST LINE OF THE CUSTOMER'S PRIMARY NAME.
        long lNameLine1 () { return 40; };
        RWCString NameLine1 (void)
        {
            return m_szNameLine1;
        }
        long NameLine1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNameLine1, sizeof(m_szNameLine1), &m_bNameLine1);
        }
        
        //    SECOND LINE OF THE CUSTOMER'S PRIMARY NAME.
        long lNameLine2 () { return 40; };
        RWCString NameLine2 (void)
        {
            return m_szNameLine2;
        }
        long NameLine2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNameLine2, sizeof(m_szNameLine2), &m_bNameLine2);
        }
        
        //    THIRD LINE OF THE CUSTOMER'S PRIMARY NAME.
        long lNameLine3 () { return 40; };
        RWCString NameLine3 (void)
        {
            return m_szNameLine3;
        }
        long NameLine3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNameLine3, sizeof(m_szNameLine3), &m_bNameLine3);
        }
        
        //    FOURTH LINE OF THE CUSTORMER'S PRIMARY NAME.
        long lNameLine4 () { return 40; };
        RWCString NameLine4 (void)
        {
            return m_szNameLine4;
        }
        long NameLine4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szNameLine4, sizeof(m_szNameLine4), &m_bNameLine4);
        }
        
        //    CUSTOMER'S FIRST NAME.
        long lFirstName () { return 25; };
        RWCString FirstName (void)
        {
            return m_szFirstName;
        }
        long FirstName (const RWCString& rwc)
        {
            return SetString(rwc, m_szFirstName, sizeof(m_szFirstName), &m_bFirstName);
        }
        
        //    CUSTOMER'S MIDDLE NAME.
        long lMidName () { return 25; };
        RWCString MidName (void)
        {
            return m_szMidName;
        }
        long MidName (const RWCString& rwc)
        {
            return SetString(rwc, m_szMidName, sizeof(m_szMidName), &m_bMidName);
        }
        
        //    CUSTOMER'S LAST (FAMILY) NAME.
        long lLstName () { return 25; };
        RWCString LstName (void)
        {
            return m_szLstName;
        }
        long LstName (const RWCString& rwc)
        {
            return SetString(rwc, m_szLstName, sizeof(m_szLstName), &m_bLstName);
        }
        
        //    PROFESSIONAL TITLE ON THE PERSONAL CUSTOMER'S NAME LINE.
        long lTitl () { return 25; };
        RWCString Titl (void)
        {
            return m_szTitl;
        }
        long Titl (const RWCString& rwc)
        {
            return SetString(rwc, m_szTitl, sizeof(m_szTitl), &m_bTitl);
        }
        
        //    COURTESY TITLE ON PERSONAL CUSTOMER'S NAME LINE.
        long lSalutation () { return 25; };
        RWCString Salutation (void)
        {
            return m_szSalutation;
        }
        long Salutation (const RWCString& rwc)
        {
            return SetString(rwc, m_szSalutation, sizeof(m_szSalutation), &m_bSalutation);
        }
        
        //    CUSTOMER STATUS CODE
        long lCustStatCd () { return 2; };
        RWCString CustStatCd (void)
        {
            return m_szCustStatCd;
        }
        long CustStatCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustStatCd, sizeof(m_szCustStatCd), &m_bCustStatCd);
        }
        
        //    INDICATES WHETHER CUSTOMER IS PERSONAL OR COMMERCIAL.
        long lCustTypCd () { return 1; };
        RWCString CustTypCd (void)
        {
            return m_szCustTypCd;
        }
        long CustTypCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustTypCd, sizeof(m_szCustTypCd), &m_bCustTypCd);
        }
        
        //    CUSTOMER'S TAX IDENTIFICATION NUMBER (SSN, EIN, OR TIN).
        long lTin () { return 10; };
        RWCString Tin (void)
        {
            return m_szTin;
        }
        long Tin (const RWCString& rwc)
        {
            return SetString(rwc, m_szTin, sizeof(m_szTin), &m_bTin);
        }
        
        //    W-9 CERT STATUS OR IRS NOTIF OF WRONG TIN OR UNDERREPORTING.
        long lTinCertCd () { return 1; };
        RWCString TinCertCd (void)
        {
            return m_szTinCertCd;
        }
        long TinCertCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szTinCertCd, sizeof(m_szTinCertCd), &m_bTinCertCd);
        }
        
        //    INDICATES WHETHER TIN IS AN EIN, SSN, TIN, OR NOT AVAILABLE.
        long lTinCd () { return 1; };
        RWCString TinCd (void)
        {
            return m_szTinCd;
        }
        long TinCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szTinCd, sizeof(m_szTinCd), &m_bTinCd);
        }
        
        //    INDICATES WHETHER THE CUSTOMER IS A VIP OR PUBLIC OFFICIAL.
        long lVipCd () { return 2; };
        RWCString VipCd (void)
        {
            return m_szVipCd;
        }
        long VipCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szVipCd, sizeof(m_szVipCd), &m_bVipCd);
        }
        
        //    INDICATES WHETHER CUST IS OFFICER, DIR, OR EMPL OF INSTITUT.
        long lOffEmpDirCd () { return 1; };
        RWCString OffEmpDirCd (void)
        {
            return m_szOffEmpDirCd;
        }
        long OffEmpDirCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szOffEmpDirCd, sizeof(m_szOffEmpDirCd), &m_bOffEmpDirCd);
        }
        
        //    INSTITUTION WHERE THE OFFICER, EMPLOYEE, OR DIRECTOR WORKS.
        long lInstOfOffEmpDir () { return 1; };
        RWCString InstOfOffEmpDir (void)
        {
            return m_szInstOfOffEmpDir;
        }
        long InstOfOffEmpDir (const RWCString& rwc)
        {
            return SetString(rwc, m_szInstOfOffEmpDir, sizeof(m_szInstOfOffEmpDir), &m_bInstOfOffEmpDir);
        }
        
        //    INDICATES WHETHER CUST IS A STOCKHOLDER OF THE INSTITUTION.
        long lStkhldrInd () { return 1; };
        RWCString StkhldrInd (void)
        {
            return m_szStkhldrInd;
        }
        long StkhldrInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szStkhldrInd, sizeof(m_szStkhldrInd), &m_bStkhldrInd);
        }
        
        //    DATE OF THE LAST MAINTENANCE TO THE RECORD.
        long lLstMaintDt () { return 8; };
        RWCString LstMaintDt (void)
        {
            return m_szLstMaintDt;
        }
        long LstMaintDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szLstMaintDt, sizeof(m_szLstMaintDt), &m_bLstMaintDt);
        }
        
        //    INTERNET BANK CUSTOMER INDICATOR
        long lIbCustInd () { return 1; };
        RWCString IbCustInd (void)
        {
            return m_szIbCustInd;
        }
        long IbCustInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szIbCustInd, sizeof(m_szIbCustInd), &m_bIbCustInd);
        }
        
        //    PREFERRED IB COMMUNICATION LOCATION TYPE CODE
        long lIbPrefCommTypCd () { return 1; };
        RWCString IbPrefCommTypCd (void)
        {
            return m_szIbPrefCommTypCd;
        }
        long IbPrefCommTypCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szIbPrefCommTypCd, sizeof(m_szIbPrefCommTypCd), &m_bIbPrefCommTypCd);
        }
        
        //    INSTITUTION-DEF CODE FOR BRANCH RESPONSIBLE FOR CUSTOMER.
        long lRespBr () { return 5; };
        RWCString RespBr (void)
        {
            return m_szRespBr;
        }
        long RespBr (const RWCString& rwc)
        {
            return SetString(rwc, m_szRespBr, sizeof(m_szRespBr), &m_bRespBr);
        }
        
        //    OFFICER ASSIGNED TO THE CUSTOMER.
        long lCustOffCd () { return 5; };
        RWCString CustOffCd (void)
        {
            return m_szCustOffCd;
        }
        long CustOffCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustOffCd, sizeof(m_szCustOffCd), &m_bCustOffCd);
        }
        
        //    FIRST FIELD AVAILABLE FOR USER-DEFINED VALUES.
        long lCustUsr1 () { return 10; };
        RWCString CustUsr1 (void)
        {
            return m_szCustUsr1;
        }
        long CustUsr1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustUsr1, sizeof(m_szCustUsr1), &m_bCustUsr1);
        }
        
        //    SECOND FIELD AVAILABLE FOR USER-DEFINED VALUES.
        long lCustUsr2 () { return 10; };
        RWCString CustUsr2 (void)
        {
            return m_szCustUsr2;
        }
        long CustUsr2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustUsr2, sizeof(m_szCustUsr2), &m_bCustUsr2);
        }
        
        //    THIRD FIELD AVAILABLE FOR USER-DEFINED VALUES.
        long lCustUsr3 () { return 10; };
        RWCString CustUsr3 (void)
        {
            return m_szCustUsr3;
        }
        long CustUsr3 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustUsr3, sizeof(m_szCustUsr3), &m_bCustUsr3);
        }
        
        //    FOURTH FIELD AVAILABLE FOR USER-DEFINED VALUES.
        long lCustUsr4 () { return 10; };
        RWCString CustUsr4 (void)
        {
            return m_szCustUsr4;
        }
        long CustUsr4 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustUsr4, sizeof(m_szCustUsr4), &m_bCustUsr4);
        }
        
        //    FIFTH FIELD AVAILABLE FOR USER-DEFINED VALUES.
        long lCustUsr5 () { return 10; };
        RWCString CustUsr5 (void)
        {
            return m_szCustUsr5;
        }
        long CustUsr5 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustUsr5, sizeof(m_szCustUsr5), &m_bCustUsr5);
        }
        
        //    SIXTH FIELD AVAILABLE FOR USER-DEFINED VALUES.
        long lCustUsr6 () { return 10; };
        RWCString CustUsr6 (void)
        {
            return m_szCustUsr6;
        }
        long CustUsr6 (const RWCString& rwc)
        {
            return SetString(rwc, m_szCustUsr6, sizeof(m_szCustUsr6), &m_bCustUsr6);
        }
        
        //    CUSTOMER'S GENDER.
        long lGenderCd () { return 1; };
        RWCString GenderCd (void)
        {
            return m_szGenderCd;
        }
        long GenderCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szGenderCd, sizeof(m_szGenderCd), &m_bGenderCd);
        }
        
        //    CUSTOMER'S BIRTH DATE OR DATE EST IF COMMERCIAL CUSTOMER.
        long lDob () { return 8; };
        RWCString Dob (void)
        {
            return m_szDob;
        }
        long Dob (const RWCString& rwc)
        {
            return SetString(rwc, m_szDob, sizeof(m_szDob), &m_bDob);
        }
        
        //    MAIDEN NAME OF THE CUSTOMER'S MOTHER.
        long lMotherMaidName () { return 24; };
        RWCString MotherMaidName (void)
        {
            return m_szMotherMaidName;
        }
        long MotherMaidName (const RWCString& rwc)
        {
            return SetString(rwc, m_szMotherMaidName, sizeof(m_szMotherMaidName), &m_bMotherMaidName);
        }
        
        //    NAME OF THE CUSTOMER'S SPOUSE.
        long lSpouseName () { return 40; };
        RWCString SpouseName (void)
        {
            return m_szSpouseName;
        }
        long SpouseName (const RWCString& rwc)
        {
            return SetString(rwc, m_szSpouseName, sizeof(m_szSpouseName), &m_bSpouseName);
        }
        
        //    NUMBER OF CHILDREN THE CUSTOMER HAS.
        long lNbrChildren () { return 4; };
        RWCString NbrChildren (void)
        {
            return AceZeroSupp(m_szNbrChildren, &m_szSuppressBuff[0]);
        }
        RWCString NbrChildrenRaw (void)
        {
            return m_szNbrChildren;
        }
        long NbrChildren (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrChildren, sizeof(m_szNbrChildren), &m_bNbrChildren);
        }
        
        //    CUSTOMER'S DRIVERS LICENSE NUMBER.
        long lDrvrsLicns () { return 20; };
        RWCString DrvrsLicns (void)
        {
            return m_szDrvrsLicns;
        }
        long DrvrsLicns (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrvrsLicns, sizeof(m_szDrvrsLicns), &m_bDrvrsLicns);
        }
        
        //    STATE WHERE THE CUSTOMER'S DRIVERS LICENSE WAS ISSUED.
        long lDrvrsLicnsSt () { return 2; };
        RWCString DrvrsLicnsSt (void)
        {
            return m_szDrvrsLicnsSt;
        }
        long DrvrsLicnsSt (const RWCString& rwc)
        {
            return SetString(rwc, m_szDrvrsLicnsSt, sizeof(m_szDrvrsLicnsSt), &m_bDrvrsLicnsSt);
        }
        
        //    CUSTOMER'S PASSPORT (VISA) IDENTIFICATION NUMBER.
        long lPassportIdNbr () { return 20; };
        RWCString PassportIdNbr (void)
        {
            return m_szPassportIdNbr;
        }
        long PassportIdNbr (const RWCString& rwc)
        {
            return SetString(rwc, m_szPassportIdNbr, sizeof(m_szPassportIdNbr), &m_bPassportIdNbr);
        }
        
        //    COUNTRY WHERE THE CUSTOMER'S PASSPORT WAS ISSUED.
        long lPassportCtry () { return 20; };
        RWCString PassportCtry (void)
        {
            return m_szPassportCtry;
        }
        long PassportCtry (const RWCString& rwc)
        {
            return SetString(rwc, m_szPassportCtry, sizeof(m_szPassportCtry), &m_bPassportCtry);
        }
        
        //    NUMBER OF CUST PHONE SEGMENTS ACTUALLY STORED IN TRAN DAG.
        short PhTblUsed (void)
        {
            return m_nPhTblUsed;
        }
        long PhTblUsed (const short nValue)
        {
            return SetShort(nValue, &m_nPhTblUsed, &m_bPhTblUsed);
        }
        
        //    EMAIL TYPE CODE
        long lEmailTypCd () { return 1; };
        RWCString EmailTypCd (void)
        {
            return m_szEmailTypCd;
        }
        long EmailTypCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szEmailTypCd, sizeof(m_szEmailTypCd), &m_bEmailTypCd);
        }
        
        //    EMAIL ADDRESS
        long lEmailAddr () { return 70; };
        RWCString EmailAddr (void)
        {
            return m_szEmailAddr;
        }
        long EmailAddr (const RWCString& rwc)
        {
            return SetString(rwc, m_szEmailAddr, sizeof(m_szEmailAddr), &m_bEmailAddr);
        }
        
        //    NUMBER OF ADDRESS RECORDS ACTUALLY STORED IN THE TRAN DAG.
        short AddrTblUsed (void)
        {
            return m_nAddrTblUsed;
        }
        long AddrTblUsed (const short nValue)
        {
            return SetShort(nValue, &m_nAddrTblUsed, &m_bAddrTblUsed);
        }
        
        //    KEY TO THE LAST ENTRY ON A LIST SCREEN.
        long lRelSavKey () { return 100; };
        RWCString RelSavKey (void)
        {
            return m_szRelSavKey;
        }
        long RelSavKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szRelSavKey, sizeof(m_szRelSavKey), &m_bRelSavKey);
        }
        
        //    INDICATES WHETHER ADDITIONAL RELATIONSHIPS EXIST.
        long lRelMoreInd () { return 1; };
        RWCString RelMoreInd (void)
        {
            return m_szRelMoreInd;
        }
        long RelMoreInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szRelMoreInd, sizeof(m_szRelMoreInd), &m_bRelMoreInd);
        }
        
        //    NUMBER OF RELATIONSHIP RECORDS ACTUALLY STORED IN TRAN DAG.
        short RelTblUsed (void)
        {
            return m_nRelTblUsed;
        }
        long RelTblUsed (const short nValue)
        {
            return SetShort(nValue, &m_nRelTblUsed, &m_bRelTblUsed);
        }
        
        //    NUMBER OF ACCOUNT RECORDS ACTUALLY STORED IN THE TRAN DAG.
        short AcctTblUsed (void)
        {
            return m_nAcctTblUsed;
        }
        long AcctTblUsed (const short nValue)
        {
            return SetShort(nValue, &m_nAcctTblUsed, &m_bAcctTblUsed);
        }
        
        //    DATE THE CUSTOMER BEGAN EMPLOYMENT WITH THE EMPLOYER.
        long lEmplStartDt () { return 8; };
        RWCString EmplStartDt (void)
        {
            return m_szEmplStartDt;
        }
        long EmplStartDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szEmplStartDt, sizeof(m_szEmplStartDt), &m_bEmplStartDt);
        }
        
        //    DATE THE CUSTOMER ENDED EMPLOYMENT WITH THE EMPLOYER.
        long lEmplStpDt () { return 8; };
        RWCString EmplStpDt (void)
        {
            return m_szEmplStpDt;
        }
        long EmplStpDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szEmplStpDt, sizeof(m_szEmplStpDt), &m_bEmplStpDt);
        }
        
        //    NAME OF THE CUSTOMER'S EMPLOYER.
        long lEmprName () { return 40; };
        RWCString EmprName (void)
        {
            return m_szEmprName;
        }
        long EmprName (const RWCString& rwc)
        {
            return SetString(rwc, m_szEmprName, sizeof(m_szEmprName), &m_bEmprName);
        }
        
        //    NUMBER OF REMARK SEGMENTS STORED IN THE TRAN DATA GROUP.
        short RmkTblUsed (void)
        {
            return m_nRmkTblUsed;
        }
        long RmkTblUsed (const short nValue)
        {
            return SetShort(nValue, &m_nRmkTblUsed, &m_bRmkTblUsed);
        }
        
        //    SHARE CUSTOMER INFORMATION CODE
        long lShareCustInfoCd () { return 1; };
        RWCString ShareCustInfoCd (void)
        {
            return m_szShareCustInfoCd;
        }
        long ShareCustInfoCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szShareCustInfoCd, sizeof(m_szShareCustInfoCd), &m_bShareCustInfoCd);
        }
        
        //    SHARE CUSTOMER INFO MAINTENANCE DATE
        long lShareInfoMaintDt () { return 8; };
        RWCString ShareInfoMaintDt (void)
        {
            return m_szShareInfoMaintDt;
        }
        long ShareInfoMaintDt (const RWCString& rwc)
        {
            return SetString(rwc, m_szShareInfoMaintDt, sizeof(m_szShareInfoMaintDt), &m_bShareInfoMaintDt);
        }
        
        //    LOAN GUIDANCE
        long lLoanGuidance () { return 17; };
        RWCString LoanGuidance (void)
        {
            return AceZeroSupp(m_szLoanGuidance, &m_szSuppressBuff[0]);
        }
        RWCString LoanGuidanceRaw (void)
        {
            return m_szLoanGuidance;
        }
        long LoanGuidance (const RWCString& rwc)
        {
            return SetString(rwc, m_szLoanGuidance, sizeof(m_szLoanGuidance), &m_bLoanGuidance);
        }
        
        //    AVAILABLE LOAN GUIDANCE
        long lAvlblLoanGuidance () { return 17; };
        RWCString AvlblLoanGuidance (void)
        {
            return AceZeroSupp(m_szAvlblLoanGuidance, &m_szSuppressBuff[0]);
        }
        RWCString AvlblLoanGuidanceRaw (void)
        {
            return m_szAvlblLoanGuidance;
        }
        long AvlblLoanGuidance (const RWCString& rwc)
        {
            return SetString(rwc, m_szAvlblLoanGuidance, sizeof(m_szAvlblLoanGuidance), &m_bAvlblLoanGuidance);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bCustCtl1) return true;
            if (m_bCustCtl2) return true;
            if (m_bCustCtl3) return true;
            if (m_bCustCtl4) return true;
            if (m_bCustNbr) return true;
            if (m_bNameLine1) return true;
            if (m_bNameLine2) return true;
            if (m_bNameLine3) return true;
            if (m_bNameLine4) return true;
            if (m_bFirstName) return true;
            if (m_bMidName) return true;
            if (m_bLstName) return true;
            if (m_bTitl) return true;
            if (m_bSalutation) return true;
            if (m_bCustStatCd) return true;
            if (m_bCustTypCd) return true;
            if (m_bTin) return true;
            if (m_bTinCertCd) return true;
            if (m_bTinCd) return true;
            if (m_bVipCd) return true;
            if (m_bOffEmpDirCd) return true;
            if (m_bInstOfOffEmpDir) return true;
            if (m_bStkhldrInd) return true;
            if (m_bLstMaintDt) return true;
            if (m_bIbCustInd) return true;
            if (m_bIbPrefCommTypCd) return true;
            if (m_bRespBr) return true;
            if (m_bCustOffCd) return true;
            if (m_bCustUsr1) return true;
            if (m_bCustUsr2) return true;
            if (m_bCustUsr3) return true;
            if (m_bCustUsr4) return true;
            if (m_bCustUsr5) return true;
            if (m_bCustUsr6) return true;
            if (m_bGenderCd) return true;
            if (m_bDob) return true;
            if (m_bMotherMaidName) return true;
            if (m_bSpouseName) return true;
            if (m_bNbrChildren) return true;
            if (m_bDrvrsLicns) return true;
            if (m_bDrvrsLicnsSt) return true;
            if (m_bPassportIdNbr) return true;
            if (m_bPassportCtry) return true;
            if (m_bPhTblUsed) return true;
            if (m_bEmailTypCd) return true;
            if (m_bEmailAddr) return true;
            if (m_bAddrTblUsed) return true;
            if (m_bRelSavKey) return true;
            if (m_bRelMoreInd) return true;
            if (m_bRelTblUsed) return true;
            if (m_bAcctTblUsed) return true;
            if (m_bEmplStartDt) return true;
            if (m_bEmplStpDt) return true;
            if (m_bEmprName) return true;
            if (m_bRmkTblUsed) return true;
            if (m_bShareCustInfoCd) return true;
            if (m_bShareInfoMaintDt) return true;
            if (m_bLoanGuidance) return true;
            if (m_bAvlblLoanGuidance) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                if(CPhInfo[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 5; lOccurs++)
            {
                if(CAddrInfo[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                if(CRelData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                if(CApplData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                if(CRmkInfo[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "WVRMINQ", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "CustCtl1", m_szCustCtl1, &m_bCustCtl1);
                AddXMLField(pSess, "CustCtl2", m_szCustCtl2, &m_bCustCtl2);
                AddXMLField(pSess, "CustCtl3", m_szCustCtl3, &m_bCustCtl3);
                AddXMLField(pSess, "CustCtl4", m_szCustCtl4, &m_bCustCtl4);
                AddXMLField(pSess, "CustNbr", m_szCustNbr, &m_bCustNbr);
                AddXMLField(pSess, "NameLine1", m_szNameLine1, &m_bNameLine1);
                AddXMLField(pSess, "NameLine2", m_szNameLine2, &m_bNameLine2);
                AddXMLField(pSess, "NameLine3", m_szNameLine3, &m_bNameLine3);
                AddXMLField(pSess, "NameLine4", m_szNameLine4, &m_bNameLine4);
                AddXMLField(pSess, "FirstName", m_szFirstName, &m_bFirstName);
                AddXMLField(pSess, "MidName", m_szMidName, &m_bMidName);
                AddXMLField(pSess, "LstName", m_szLstName, &m_bLstName);
                AddXMLField(pSess, "Titl", m_szTitl, &m_bTitl);
                AddXMLField(pSess, "Salutation", m_szSalutation, &m_bSalutation);
                AddXMLField(pSess, "CustStatCd", m_szCustStatCd, &m_bCustStatCd);
                AddXMLField(pSess, "CustTypCd", m_szCustTypCd, &m_bCustTypCd);
                AddXMLField(pSess, "Tin", m_szTin, &m_bTin);
                AddXMLField(pSess, "TinCertCd", m_szTinCertCd, &m_bTinCertCd);
                AddXMLField(pSess, "TinCd", m_szTinCd, &m_bTinCd);
                AddXMLField(pSess, "VipCd", m_szVipCd, &m_bVipCd);
                AddXMLField(pSess, "OffEmpDirCd", m_szOffEmpDirCd, &m_bOffEmpDirCd);
                AddXMLField(pSess, "InstOfOffEmpDir", m_szInstOfOffEmpDir, &m_bInstOfOffEmpDir);
                AddXMLField(pSess, "StkhldrInd", m_szStkhldrInd, &m_bStkhldrInd);
                AddXMLField(pSess, "LstMaintDt", m_szLstMaintDt, &m_bLstMaintDt);
                AddXMLField(pSess, "IbCustInd", m_szIbCustInd, &m_bIbCustInd);
                AddXMLField(pSess, "IbPrefCommTypCd", m_szIbPrefCommTypCd, &m_bIbPrefCommTypCd);
                AddXMLField(pSess, "RespBr", m_szRespBr, &m_bRespBr);
                AddXMLField(pSess, "CustOffCd", m_szCustOffCd, &m_bCustOffCd);
                AddXMLField(pSess, "CustUsr1", m_szCustUsr1, &m_bCustUsr1);
                AddXMLField(pSess, "CustUsr2", m_szCustUsr2, &m_bCustUsr2);
                AddXMLField(pSess, "CustUsr3", m_szCustUsr3, &m_bCustUsr3);
                AddXMLField(pSess, "CustUsr4", m_szCustUsr4, &m_bCustUsr4);
                AddXMLField(pSess, "CustUsr5", m_szCustUsr5, &m_bCustUsr5);
                AddXMLField(pSess, "CustUsr6", m_szCustUsr6, &m_bCustUsr6);
                AddXMLField(pSess, "GenderCd", m_szGenderCd, &m_bGenderCd);
                AddXMLField(pSess, "Dob", m_szDob, &m_bDob);
                AddXMLField(pSess, "MotherMaidName", m_szMotherMaidName, &m_bMotherMaidName);
                AddXMLField(pSess, "SpouseName", m_szSpouseName, &m_bSpouseName);
                AddXMLField(pSess, "NbrChildren", m_szNbrChildren, &m_bNbrChildren);
                AddXMLField(pSess, "DrvrsLicns", m_szDrvrsLicns, &m_bDrvrsLicns);
                AddXMLField(pSess, "DrvrsLicnsSt", m_szDrvrsLicnsSt, &m_bDrvrsLicnsSt);
                AddXMLField(pSess, "PassportIdNbr", m_szPassportIdNbr, &m_bPassportIdNbr);
                AddXMLField(pSess, "PassportCtry", m_szPassportCtry, &m_bPassportCtry);
                AddXMLField(pSess, "PhTblUsed", m_nPhTblUsed, &m_bPhTblUsed);
                AddXMLField(pSess, "EmailTypCd", m_szEmailTypCd, &m_bEmailTypCd);
                AddXMLField(pSess, "EmailAddr", m_szEmailAddr, &m_bEmailAddr);
                AddXMLField(pSess, "AddrTblUsed", m_nAddrTblUsed, &m_bAddrTblUsed);
                AddXMLField(pSess, "RelSavKey", m_szRelSavKey, &m_bRelSavKey);
                AddXMLField(pSess, "RelMoreInd", m_szRelMoreInd, &m_bRelMoreInd);
                AddXMLField(pSess, "RelTblUsed", m_nRelTblUsed, &m_bRelTblUsed);
                AddXMLField(pSess, "AcctTblUsed", m_nAcctTblUsed, &m_bAcctTblUsed);
                AddXMLField(pSess, "EmplStartDt", m_szEmplStartDt, &m_bEmplStartDt);
                AddXMLField(pSess, "EmplStpDt", m_szEmplStpDt, &m_bEmplStpDt);
                AddXMLField(pSess, "EmprName", m_szEmprName, &m_bEmprName);
                AddXMLField(pSess, "RmkTblUsed", m_nRmkTblUsed, &m_bRmkTblUsed);
                AddXMLField(pSess, "ShareCustInfoCd", m_szShareCustInfoCd, &m_bShareCustInfoCd);
                AddXMLField(pSess, "ShareInfoMaintDt", m_szShareInfoMaintDt, &m_bShareInfoMaintDt);
                AddXMLField(pSess, "LoanGuidance", m_szLoanGuidance, &m_bLoanGuidance);
                AddXMLField(pSess, "AvlblLoanGuidance", m_szAvlblLoanGuidance, &m_bAvlblLoanGuidance);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CPhInfo[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 5; lOccurs++)
                {
                    CAddrInfo[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CRelData[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CApplData[lOccurs].Save(pSess);
                }
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CRmkInfo[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "WVRMINQ");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "WVRMINQ", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "CustCtl1", m_szCustCtl1);
                GetXMLField(pSess, "CustCtl2", m_szCustCtl2);
                GetXMLField(pSess, "CustCtl3", m_szCustCtl3);
                GetXMLField(pSess, "CustCtl4", m_szCustCtl4);
                GetXMLField(pSess, "CustNbr", m_szCustNbr);
                GetXMLField(pSess, "NameLine1", m_szNameLine1);
                GetXMLField(pSess, "NameLine2", m_szNameLine2);
                GetXMLField(pSess, "NameLine3", m_szNameLine3);
                GetXMLField(pSess, "NameLine4", m_szNameLine4);
                GetXMLField(pSess, "FirstName", m_szFirstName);
                GetXMLField(pSess, "MidName", m_szMidName);
                GetXMLField(pSess, "LstName", m_szLstName);
                GetXMLField(pSess, "Titl", m_szTitl);
                GetXMLField(pSess, "Salutation", m_szSalutation);
                GetXMLField(pSess, "CustStatCd", m_szCustStatCd);
                GetXMLField(pSess, "CustTypCd", m_szCustTypCd);
                GetXMLField(pSess, "Tin", m_szTin);
                GetXMLField(pSess, "TinCertCd", m_szTinCertCd);
                GetXMLField(pSess, "TinCd", m_szTinCd);
                GetXMLField(pSess, "VipCd", m_szVipCd);
                GetXMLField(pSess, "OffEmpDirCd", m_szOffEmpDirCd);
                GetXMLField(pSess, "InstOfOffEmpDir", m_szInstOfOffEmpDir);
                GetXMLField(pSess, "StkhldrInd", m_szStkhldrInd);
                GetXMLField(pSess, "LstMaintDt", m_szLstMaintDt);
                GetXMLField(pSess, "IbCustInd", m_szIbCustInd);
                GetXMLField(pSess, "IbPrefCommTypCd", m_szIbPrefCommTypCd);
                GetXMLField(pSess, "RespBr", m_szRespBr);
                GetXMLField(pSess, "CustOffCd", m_szCustOffCd);
                GetXMLField(pSess, "CustUsr1", m_szCustUsr1);
                GetXMLField(pSess, "CustUsr2", m_szCustUsr2);
                GetXMLField(pSess, "CustUsr3", m_szCustUsr3);
                GetXMLField(pSess, "CustUsr4", m_szCustUsr4);
                GetXMLField(pSess, "CustUsr5", m_szCustUsr5);
                GetXMLField(pSess, "CustUsr6", m_szCustUsr6);
                GetXMLField(pSess, "GenderCd", m_szGenderCd);
                GetXMLField(pSess, "Dob", m_szDob);
                GetXMLField(pSess, "MotherMaidName", m_szMotherMaidName);
                GetXMLField(pSess, "SpouseName", m_szSpouseName);
                GetXMLField(pSess, "NbrChildren", m_szNbrChildren);
                GetXMLField(pSess, "DrvrsLicns", m_szDrvrsLicns);
                GetXMLField(pSess, "DrvrsLicnsSt", m_szDrvrsLicnsSt);
                GetXMLField(pSess, "PassportIdNbr", m_szPassportIdNbr);
                GetXMLField(pSess, "PassportCtry", m_szPassportCtry);
                GetXMLField(pSess, "PhTblUsed", &m_nPhTblUsed);
                GetXMLField(pSess, "EmailTypCd", m_szEmailTypCd);
                GetXMLField(pSess, "EmailAddr", m_szEmailAddr);
                GetXMLField(pSess, "AddrTblUsed", &m_nAddrTblUsed);
                GetXMLField(pSess, "RelSavKey", m_szRelSavKey);
                GetXMLField(pSess, "RelMoreInd", m_szRelMoreInd);
                GetXMLField(pSess, "RelTblUsed", &m_nRelTblUsed);
                GetXMLField(pSess, "AcctTblUsed", &m_nAcctTblUsed);
                GetXMLField(pSess, "EmplStartDt", m_szEmplStartDt);
                GetXMLField(pSess, "EmplStpDt", m_szEmplStpDt);
                GetXMLField(pSess, "EmprName", m_szEmprName);
                GetXMLField(pSess, "RmkTblUsed", &m_nRmkTblUsed);
                GetXMLField(pSess, "ShareCustInfoCd", m_szShareCustInfoCd);
                GetXMLField(pSess, "ShareInfoMaintDt", m_szShareInfoMaintDt);
                GetXMLField(pSess, "LoanGuidance", m_szLoanGuidance);
                GetXMLField(pSess, "AvlblLoanGuidance", m_szAvlblLoanGuidance);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CPhInfo[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 5; lOccurs++)
                {
                    CAddrInfo[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CRelData[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CApplData[lOccurs].Load(pSess);
                }
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CRmkInfo[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "WVRMINQ");
            };
        }
        
        //**************** Start AsdPhInfo Definition ****************
        //                 PHONE INFORMATION GROUP ITEM
        
        class AsdPhInfo
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bPhTypCd;
            char      m_szPhTypCd[1+1];
            bool      m_bPhNbr;
            char      m_szPhNbr[18+1];
            bool      m_bPhExt;
            char      m_szPhExt[4+1];
            bool      m_bPhUsaInd;
            char      m_szPhUsaInd[1+1];
        
          public:
            long      m_lIndex;

            AsdPhInfo ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bPhTypCd = false;
                strcpy(m_szPhTypCd, "");
                m_bPhNbr = false;
                strcpy(m_szPhNbr, "");
                m_bPhExt = false;
                strcpy(m_szPhExt, "");
                m_bPhUsaInd = false;
                strcpy(m_szPhUsaInd, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    TYPE OF TELEPHONE NUMBER (BUSINESS, FAX, ETC.).
            long lPhTypCd () { return 1; };
            RWCString PhTypCd (void)
            {
                return m_szPhTypCd;
            }
            long PhTypCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szPhTypCd, sizeof(m_szPhTypCd), &m_bPhTypCd);
            }
            
            //    CUSTOMER'S TELEPHONE NUMBER.
            long lPhNbr () { return 18; };
            RWCString PhNbr (void)
            {
                return m_szPhNbr;
            }
            long PhNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szPhNbr, sizeof(m_szPhNbr), &m_bPhNbr);
            }
            
            //    CUSTOMER'S TELEPHONE EXTENSION.
            long lPhExt () { return 4; };
            RWCString PhExt (void)
            {
                return m_szPhExt;
            }
            long PhExt (const RWCString& rwc)
            {
                return SetString(rwc, m_szPhExt, sizeof(m_szPhExt), &m_bPhExt);
            }
            
            //    INDICATES WHETHER TO EDIT PHONE NUM FOR U.S. REQUIREMENTS.
            long lPhUsaInd () { return 1; };
            RWCString PhUsaInd (void)
            {
                return m_szPhUsaInd;
            }
            long PhUsaInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szPhUsaInd, sizeof(m_szPhUsaInd), &m_bPhUsaInd);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bPhTypCd) return true;
                if (m_bPhNbr) return true;
                if (m_bPhExt) return true;
                if (m_bPhUsaInd) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "PhInfo", m_lIndex);
                    AddXMLField(pSess, "PhTypCd", m_szPhTypCd, &m_bPhTypCd);
                    AddXMLField(pSess, "PhNbr", m_szPhNbr, &m_bPhNbr);
                    AddXMLField(pSess, "PhExt", m_szPhExt, &m_bPhExt);
                    AddXMLField(pSess, "PhUsaInd", m_szPhUsaInd, &m_bPhUsaInd);
                    AddXMLCloseRecord(pSess, "PhInfo");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "PhInfo", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "PhTypCd", m_szPhTypCd);
                    GetXMLField(pSess, "PhNbr", m_szPhNbr);
                    GetXMLField(pSess, "PhExt", m_szPhExt);
                    GetXMLField(pSess, "PhUsaInd", m_szPhUsaInd);
                    CloseXMLRecord(pSess, "PhInfo");
                };
            }
        };

        AsdPhInfo  CPhInfo[16];
        AsdPhInfo *PhInfo[16];
        
        //**************** End AsdPhInfo Definition ****************
        
        
        //**************** Start AsdAddrInfo Definition ****************
        //                 GROUP LEVEL ADDR INFO
        
        class AsdAddrInfo
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bAddrSeqNbr;
            char      m_szAddrSeqNbr[3+1];
            bool      m_bAddrLine1;
            char      m_szAddrLine1[40+1];
            bool      m_bAddrLine2;
            char      m_szAddrLine2[40+1];
            bool      m_bAddrLine3;
            char      m_szAddrLine3[40+1];
            bool      m_bAddrLine4;
            char      m_szAddrLine4[40+1];
            bool      m_bCity;
            char      m_szCity[20+1];
            bool      m_bSt;
            char      m_szSt[20+1];
            bool      m_bZipCd;
            char      m_szZipCd[10+1];
            bool      m_bSeasFutrAddrInd;
            char      m_szSeasFutrAddrInd[1+1];
            bool      m_bCtry;
            char      m_szCtry[20+1];
            bool      m_bUsPostalReqInd;
            char      m_szUsPostalReqInd[1+1];
            bool      m_bPrtCtryInd;
            char      m_szPrtCtryInd[1+1];
        
          public:
            long      m_lIndex;

            AsdAddrInfo ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bAddrSeqNbr = false;
                strcpy(m_szAddrSeqNbr, "000");
                m_bAddrLine1 = false;
                strcpy(m_szAddrLine1, "");
                m_bAddrLine2 = false;
                strcpy(m_szAddrLine2, "");
                m_bAddrLine3 = false;
                strcpy(m_szAddrLine3, "");
                m_bAddrLine4 = false;
                strcpy(m_szAddrLine4, "");
                m_bCity = false;
                strcpy(m_szCity, "");
                m_bSt = false;
                strcpy(m_szSt, "");
                m_bZipCd = false;
                strcpy(m_szZipCd, "");
                m_bSeasFutrAddrInd = false;
                strcpy(m_szSeasFutrAddrInd, "");
                m_bCtry = false;
                strcpy(m_szCtry, "");
                m_bUsPostalReqInd = false;
                strcpy(m_szUsPostalReqInd, "");
                m_bPrtCtryInd = false;
                strcpy(m_szPrtCtryInd, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    SEQ NUM THAT IDENTIFIES EACH ADDRESS SET THE CUSTOMER HAS.
            long lAddrSeqNbr () { return 3; };
            RWCString AddrSeqNbr (void)
            {
                return m_szAddrSeqNbr;
            }
            long AddrSeqNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szAddrSeqNbr, sizeof(m_szAddrSeqNbr), &m_bAddrSeqNbr);
            }
            
            //    FIRST LINE OF CUSTOMER'S ADDRESS OR SPECIAL INSTRUCTIONS.
            long lAddrLine1 () { return 40; };
            RWCString AddrLine1 (void)
            {
                return m_szAddrLine1;
            }
            long AddrLine1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAddrLine1, sizeof(m_szAddrLine1), &m_bAddrLine1);
            }
            
            //    SECOND LINE OF CUSTOMER'S ADDRESS OR SPECIAL INSTRUCTIONS.
            long lAddrLine2 () { return 40; };
            RWCString AddrLine2 (void)
            {
                return m_szAddrLine2;
            }
            long AddrLine2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAddrLine2, sizeof(m_szAddrLine2), &m_bAddrLine2);
            }
            
            //    THIRD LINE OF CUSTOMER'S ADDRESS OR SPECIAL INSTRUCTIONS.
            long lAddrLine3 () { return 40; };
            RWCString AddrLine3 (void)
            {
                return m_szAddrLine3;
            }
            long AddrLine3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAddrLine3, sizeof(m_szAddrLine3), &m_bAddrLine3);
            }
            
            //    FOURTH LINE OF CUSTOMER'S ADDRESS OR SPECIAL INSTRUCTIONS.
            long lAddrLine4 () { return 40; };
            RWCString AddrLine4 (void)
            {
                return m_szAddrLine4;
            }
            long AddrLine4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szAddrLine4, sizeof(m_szAddrLine4), &m_bAddrLine4);
            }
            
            //    CITY FOR THE ADDRESS.
            long lCity () { return 20; };
            RWCString City (void)
            {
                return m_szCity;
            }
            long City (const RWCString& rwc)
            {
                return SetString(rwc, m_szCity, sizeof(m_szCity), &m_bCity);
            }
            
            //    STATE FOR THE ADDRESS.
            long lSt () { return 20; };
            RWCString St (void)
            {
                return m_szSt;
            }
            long St (const RWCString& rwc)
            {
                return SetString(rwc, m_szSt, sizeof(m_szSt), &m_bSt);
            }
            
            //    ZIP CODE OR POSTAL CODE FOR THE ADDRESS.
            long lZipCd () { return 10; };
            RWCString ZipCd (void)
            {
                return m_szZipCd;
            }
            long ZipCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szZipCd, sizeof(m_szZipCd), &m_bZipCd);
            }
            
            //    INDICATES WHETHER CUSTOMER HAS A SEASONAL OR FUTURE ADDRESS.
            long lSeasFutrAddrInd () { return 1; };
            RWCString SeasFutrAddrInd (void)
            {
                return m_szSeasFutrAddrInd;
            }
            long SeasFutrAddrInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szSeasFutrAddrInd, sizeof(m_szSeasFutrAddrInd), &m_bSeasFutrAddrInd);
            }
            
            //    COUNTRY FOR THE ADDRESS.
            long lCtry () { return 20; };
            RWCString Ctry (void)
            {
                return m_szCtry;
            }
            long Ctry (const RWCString& rwc)
            {
                return SetString(rwc, m_szCtry, sizeof(m_szCtry), &m_bCtry);
            }
            
            //    INDICATES WHETHER ADDRESS MEETS U.S. POSTAL REQUIREMENTS.
            long lUsPostalReqInd () { return 1; };
            RWCString UsPostalReqInd (void)
            {
                return m_szUsPostalReqInd;
            }
            long UsPostalReqInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szUsPostalReqInd, sizeof(m_szUsPostalReqInd), &m_bUsPostalReqInd);
            }
            
            //    INDICATES WHETHER TO PRINT THE COUNTRY IN THE ADDRESS.
            long lPrtCtryInd () { return 1; };
            RWCString PrtCtryInd (void)
            {
                return m_szPrtCtryInd;
            }
            long PrtCtryInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szPrtCtryInd, sizeof(m_szPrtCtryInd), &m_bPrtCtryInd);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bAddrSeqNbr) return true;
                if (m_bAddrLine1) return true;
                if (m_bAddrLine2) return true;
                if (m_bAddrLine3) return true;
                if (m_bAddrLine4) return true;
                if (m_bCity) return true;
                if (m_bSt) return true;
                if (m_bZipCd) return true;
                if (m_bSeasFutrAddrInd) return true;
                if (m_bCtry) return true;
                if (m_bUsPostalReqInd) return true;
                if (m_bPrtCtryInd) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "AddrInfo", m_lIndex);
                    AddXMLField(pSess, "AddrSeqNbr", m_szAddrSeqNbr, &m_bAddrSeqNbr);
                    AddXMLField(pSess, "AddrLine1", m_szAddrLine1, &m_bAddrLine1);
                    AddXMLField(pSess, "AddrLine2", m_szAddrLine2, &m_bAddrLine2);
                    AddXMLField(pSess, "AddrLine3", m_szAddrLine3, &m_bAddrLine3);
                    AddXMLField(pSess, "AddrLine4", m_szAddrLine4, &m_bAddrLine4);
                    AddXMLField(pSess, "City", m_szCity, &m_bCity);
                    AddXMLField(pSess, "St", m_szSt, &m_bSt);
                    AddXMLField(pSess, "ZipCd", m_szZipCd, &m_bZipCd);
                    AddXMLField(pSess, "SeasFutrAddrInd", m_szSeasFutrAddrInd, &m_bSeasFutrAddrInd);
                    AddXMLField(pSess, "Ctry", m_szCtry, &m_bCtry);
                    AddXMLField(pSess, "UsPostalReqInd", m_szUsPostalReqInd, &m_bUsPostalReqInd);
                    AddXMLField(pSess, "PrtCtryInd", m_szPrtCtryInd, &m_bPrtCtryInd);
                    AddXMLCloseRecord(pSess, "AddrInfo");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "AddrInfo", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "AddrSeqNbr", m_szAddrSeqNbr);
                    GetXMLField(pSess, "AddrLine1", m_szAddrLine1);
                    GetXMLField(pSess, "AddrLine2", m_szAddrLine2);
                    GetXMLField(pSess, "AddrLine3", m_szAddrLine3);
                    GetXMLField(pSess, "AddrLine4", m_szAddrLine4);
                    GetXMLField(pSess, "City", m_szCity);
                    GetXMLField(pSess, "St", m_szSt);
                    GetXMLField(pSess, "ZipCd", m_szZipCd);
                    GetXMLField(pSess, "SeasFutrAddrInd", m_szSeasFutrAddrInd);
                    GetXMLField(pSess, "Ctry", m_szCtry);
                    GetXMLField(pSess, "UsPostalReqInd", m_szUsPostalReqInd);
                    GetXMLField(pSess, "PrtCtryInd", m_szPrtCtryInd);
                    CloseXMLRecord(pSess, "AddrInfo");
                };
            }
        };

        AsdAddrInfo  CAddrInfo[5];
        AsdAddrInfo *AddrInfo[5];
        
        //**************** End AsdAddrInfo Definition ****************
        
        
        //**************** Start AsdRelData Definition ****************
        //                 GROUP LEVEL TO DESCRIBE REL DATA
        
        class AsdRelData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFromRelCd;
            char      m_szFromRelCd[3+1];
            bool      m_bToRelCd;
            char      m_szToRelCd[3+1];
            bool      m_bIbAcctInd;
            char      m_szIbAcctInd[1+1];
            bool      m_bIbBillPayInd;
            char      m_szIbBillPayInd[1+1];
            bool      m_bIbXferFromInd;
            char      m_szIbXferFromInd[1+1];
            bool      m_bIbXferToInd;
            char      m_szIbXferToInd[1+1];
            bool      m_bIbDownloadDetInd;
            char      m_szIbDownloadDetInd[1+1];
            bool      m_bCombStmtInd;
            char      m_szCombStmtInd[1+1];
            bool      m_bRelPrInd;
            char      m_szRelPrInd[1+1];
        
          public:
            long      m_lIndex;

            AsdRelData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFromRelCd = false;
                strcpy(m_szFromRelCd, "");
                m_bToRelCd = false;
                strcpy(m_szToRelCd, "");
                m_bIbAcctInd = false;
                strcpy(m_szIbAcctInd, "");
                m_bIbBillPayInd = false;
                strcpy(m_szIbBillPayInd, "");
                m_bIbXferFromInd = false;
                strcpy(m_szIbXferFromInd, "");
                m_bIbXferToInd = false;
                strcpy(m_szIbXferToInd, "");
                m_bIbDownloadDetInd = false;
                strcpy(m_szIbDownloadDetInd, "");
                m_bCombStmtInd = false;
                strcpy(m_szCombStmtInd, "");
                m_bRelPrInd = false;
                strcpy(m_szRelPrInd, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    INSTITUTION-DEF CODE FOR THE FROM RELATIONSHIP REQUESTED.
            long lFromRelCd () { return 3; };
            RWCString FromRelCd (void)
            {
                return m_szFromRelCd;
            }
            long FromRelCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szFromRelCd, sizeof(m_szFromRelCd), &m_bFromRelCd);
            }
            
            //    INSTITUTION-DEFINED CODE FOR THE TO RELATIONHIP REQUESTED.
            long lToRelCd () { return 3; };
            RWCString ToRelCd (void)
            {
                return m_szToRelCd;
            }
            long ToRelCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szToRelCd, sizeof(m_szToRelCd), &m_bToRelCd);
            }
            
            //    INTERNET BANK ACCOUNT INDICATOR
            long lIbAcctInd () { return 1; };
            RWCString IbAcctInd (void)
            {
                return m_szIbAcctInd;
            }
            long IbAcctInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szIbAcctInd, sizeof(m_szIbAcctInd), &m_bIbAcctInd);
            }
            
            //    INTERNET BANK BILL PAY INDICATOR
            long lIbBillPayInd () { return 1; };
            RWCString IbBillPayInd (void)
            {
                return m_szIbBillPayInd;
            }
            long IbBillPayInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szIbBillPayInd, sizeof(m_szIbBillPayInd), &m_bIbBillPayInd);
            }
            
            //    INTERNET BANK TRANSFER FROM INDICATOR
            long lIbXferFromInd () { return 1; };
            RWCString IbXferFromInd (void)
            {
                return m_szIbXferFromInd;
            }
            long IbXferFromInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szIbXferFromInd, sizeof(m_szIbXferFromInd), &m_bIbXferFromInd);
            }
            
            //    INTERNET BANK TRANSFER TO INDICATOR
            long lIbXferToInd () { return 1; };
            RWCString IbXferToInd (void)
            {
                return m_szIbXferToInd;
            }
            long IbXferToInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szIbXferToInd, sizeof(m_szIbXferToInd), &m_bIbXferToInd);
            }
            
            //    INTERNET BANK DOWNLOAD DETAIL INDICATOR
            long lIbDownloadDetInd () { return 1; };
            RWCString IbDownloadDetInd (void)
            {
                return m_szIbDownloadDetInd;
            }
            long IbDownloadDetInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szIbDownloadDetInd, sizeof(m_szIbDownloadDetInd), &m_bIbDownloadDetInd);
            }
            
            //    INDICATES IF CUST IS ON THE COMBINED STMT FILE
            long lCombStmtInd () { return 1; };
            RWCString CombStmtInd (void)
            {
                return m_szCombStmtInd;
            }
            long CombStmtInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szCombStmtInd, sizeof(m_szCombStmtInd), &m_bCombStmtInd);
            }
            
            //    IS THIS ACCOUNT IN REL PRICING FOR THIS CUSTOMER?
            long lRelPrInd () { return 1; };
            RWCString RelPrInd (void)
            {
                return m_szRelPrInd;
            }
            long RelPrInd (const RWCString& rwc)
            {
                return SetString(rwc, m_szRelPrInd, sizeof(m_szRelPrInd), &m_bRelPrInd);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFromRelCd) return true;
                if (m_bToRelCd) return true;
                if (m_bIbAcctInd) return true;
                if (m_bIbBillPayInd) return true;
                if (m_bIbXferFromInd) return true;
                if (m_bIbXferToInd) return true;
                if (m_bIbDownloadDetInd) return true;
                if (m_bCombStmtInd) return true;
                if (m_bRelPrInd) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "RelData", m_lIndex);
                    AddXMLField(pSess, "FromRelCd", m_szFromRelCd, &m_bFromRelCd);
                    AddXMLField(pSess, "ToRelCd", m_szToRelCd, &m_bToRelCd);
                    AddXMLField(pSess, "IbAcctInd", m_szIbAcctInd, &m_bIbAcctInd);
                    AddXMLField(pSess, "IbBillPayInd", m_szIbBillPayInd, &m_bIbBillPayInd);
                    AddXMLField(pSess, "IbXferFromInd", m_szIbXferFromInd, &m_bIbXferFromInd);
                    AddXMLField(pSess, "IbXferToInd", m_szIbXferToInd, &m_bIbXferToInd);
                    AddXMLField(pSess, "IbDownloadDetInd", m_szIbDownloadDetInd, &m_bIbDownloadDetInd);
                    AddXMLField(pSess, "CombStmtInd", m_szCombStmtInd, &m_bCombStmtInd);
                    AddXMLField(pSess, "RelPrInd", m_szRelPrInd, &m_bRelPrInd);
                    AddXMLCloseRecord(pSess, "RelData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "RelData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "FromRelCd", m_szFromRelCd);
                    GetXMLField(pSess, "ToRelCd", m_szToRelCd);
                    GetXMLField(pSess, "IbAcctInd", m_szIbAcctInd);
                    GetXMLField(pSess, "IbBillPayInd", m_szIbBillPayInd);
                    GetXMLField(pSess, "IbXferFromInd", m_szIbXferFromInd);
                    GetXMLField(pSess, "IbXferToInd", m_szIbXferToInd);
                    GetXMLField(pSess, "IbDownloadDetInd", m_szIbDownloadDetInd);
                    GetXMLField(pSess, "CombStmtInd", m_szCombStmtInd);
                    GetXMLField(pSess, "RelPrInd", m_szRelPrInd);
                    CloseXMLRecord(pSess, "RelData");
                };
            }
        };

        AsdRelData  CRelData[16];
        AsdRelData *RelData[16];
        
        //**************** End AsdRelData Definition ****************
        
        
        //**************** Start AsdApplData Definition ****************
        //                 GROUP LEVEL OF ACCOUNT DATA
        
        class AsdApplData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bApplId;
            char      m_szApplId[2+1];
            bool      m_bApplCtl1;
            char      m_szApplCtl1[4+1];
            bool      m_bApplCtl2;
            char      m_szApplCtl2[4+1];
            bool      m_bApplCtl3;
            char      m_szApplCtl3[4+1];
            bool      m_bApplCtl4;
            char      m_szApplCtl4[4+1];
            bool      m_bApplAcctNbr;
            char      m_szApplAcctNbr[27+1];
            bool      m_bApplProdCd;
            char      m_szApplProdCd[4+1];
            bool      m_bApplBal1;
            char      m_szApplBal1[19+1];
            bool      m_bApplStatCd;
            char      m_szApplStatCd[6+1];
            bool      m_bCurrCd;
            char      m_szCurrCd[3+1];
            bool      m_bIntlCurrDec;
            char      m_szIntlCurrDec[1+1];
            bool      m_bApplTypCd;
            char      m_szApplTypCd[2+1];
            bool      m_bUserCharField1;
            char      m_szUserCharField1[15+1];
            bool      m_bUserNumField1;
            char      m_szUserNumField1[17+1];
        
          public:
            long      m_lIndex;

            AsdApplData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bApplId = false;
                strcpy(m_szApplId, "");
                m_bApplCtl1 = false;
                strcpy(m_szApplCtl1, "0000");
                m_bApplCtl2 = false;
                strcpy(m_szApplCtl2, "0000");
                m_bApplCtl3 = false;
                strcpy(m_szApplCtl3, "0000");
                m_bApplCtl4 = false;
                strcpy(m_szApplCtl4, "0000");
                m_bApplAcctNbr = false;
                strcpy(m_szApplAcctNbr, "");
                m_bApplProdCd = false;
                strcpy(m_szApplProdCd, "");
                m_bApplBal1 = false;
                strcpy(m_szApplBal1, "+000000000000000.00");
                m_bApplStatCd = false;
                strcpy(m_szApplStatCd, "");
                m_bCurrCd = false;
                strcpy(m_szCurrCd, "");
                m_bIntlCurrDec = false;
                strcpy(m_szIntlCurrDec, "");
                m_bApplTypCd = false;
                strcpy(m_szApplTypCd, "");
                m_bUserCharField1 = false;
                strcpy(m_szUserCharField1, "");
                m_bUserNumField1 = false;
                strcpy(m_szUserNumField1, "+0000000000000.00");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    ACCOUNT'S APPLICATION IDENTIFIER.
            long lApplId () { return 2; };
            RWCString ApplId (void)
            {
                return m_szApplId;
            }
            long ApplId (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplId, sizeof(m_szApplId), &m_bApplId);
            }
            
            //    INSTITUTION-DEFINED FIRST LEVEL CONTROL FOR THE APPLICATION.
            long lApplCtl1 () { return 4; };
            RWCString ApplCtl1 (void)
            {
                return m_szApplCtl1;
            }
            long ApplCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplCtl1, sizeof(m_szApplCtl1), &m_bApplCtl1);
            }
            
            //    INSTITUTION-DEFINED SECOND LEVEL CTRL FOR THE APPLICATION.
            long lApplCtl2 () { return 4; };
            RWCString ApplCtl2 (void)
            {
                return m_szApplCtl2;
            }
            long ApplCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplCtl2, sizeof(m_szApplCtl2), &m_bApplCtl2);
            }
            
            //    INSTITUTION-DEFINED THIRD LEVEL CTRL FOR THE APPLICATION.
            long lApplCtl3 () { return 4; };
            RWCString ApplCtl3 (void)
            {
                return m_szApplCtl3;
            }
            long ApplCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplCtl3, sizeof(m_szApplCtl3), &m_bApplCtl3);
            }
            
            //    INSTITUTION-DEFINED FOURTH LEVEL CTRL FOR THE APPLICATION.
            long lApplCtl4 () { return 4; };
            RWCString ApplCtl4 (void)
            {
                return m_szApplCtl4;
            }
            long ApplCtl4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplCtl4, sizeof(m_szApplCtl4), &m_bApplCtl4);
            }
            
            //    APPL ACCT NUM (IF AN ACCT), OR RM CUST NUM (IF A CUSTOMER).
            long lApplAcctNbr () { return 27; };
            RWCString ApplAcctNbr (void)
            {
                return m_szApplAcctNbr;
            }
            long ApplAcctNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplAcctNbr, sizeof(m_szApplAcctNbr), &m_bApplAcctNbr);
            }
            
            //    ACCOUNT'S PRODUCT CODE FROM THE APPLICATION.
            long lApplProdCd () { return 4; };
            RWCString ApplProdCd (void)
            {
                return m_szApplProdCd;
            }
            long ApplProdCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplProdCd, sizeof(m_szApplProdCd), &m_bApplProdCd);
            }
            
            //    ACCOUNT BALANCE FROM THE APPLICATION.
            long lApplBal1 () { return 19; };
            RWCString ApplBal1 (void)
            {
                return AceZeroSupp(m_szApplBal1, &m_szSuppressBuff[0]);
            }
            RWCString ApplBal1Raw (void)
            {
                return m_szApplBal1;
            }
            long ApplBal1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplBal1, sizeof(m_szApplBal1), &m_bApplBal1);
            }
            
            //    ACCOUNT'S STATUS, BASED ON STATUS CODE FROM THE APPLICATION.
            long lApplStatCd () { return 6; };
            RWCString ApplStatCd (void)
            {
                return m_szApplStatCd;
            }
            long ApplStatCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplStatCd, sizeof(m_szApplStatCd), &m_bApplStatCd);
            }
            
            //    CURRENCY THE CUSTOMER PRIMARILY USES.
            long lCurrCd () { return 3; };
            RWCString CurrCd (void)
            {
                return m_szCurrCd;
            }
            long CurrCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szCurrCd, sizeof(m_szCurrCd), &m_bCurrCd);
            }
            
            //    NUMBER OF DECIMAL PLACES USED IN THE CURRENCY.
            long lIntlCurrDec () { return 1; };
            RWCString IntlCurrDec (void)
            {
                return m_szIntlCurrDec;
            }
            long IntlCurrDec (const RWCString& rwc)
            {
                return SetString(rwc, m_szIntlCurrDec, sizeof(m_szIntlCurrDec), &m_bIntlCurrDec);
            }
            
            //    IS ID(INTEREST DEPOSIT) IF ACCT HAS TIERED OR IOD/SAV RATE.
            long lApplTypCd () { return 2; };
            RWCString ApplTypCd (void)
            {
                return m_szApplTypCd;
            }
            long ApplTypCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplTypCd, sizeof(m_szApplTypCd), &m_bApplTypCd);
            }
            
            //    USER CHARACTER FIELD 1.
            long lUserCharField1 () { return 15; };
            RWCString UserCharField1 (void)
            {
                return m_szUserCharField1;
            }
            long UserCharField1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szUserCharField1, sizeof(m_szUserCharField1), &m_bUserCharField1);
            }
            
            //    USER NUMERIC FIELD 1.
            long lUserNumField1 () { return 17; };
            RWCString UserNumField1 (void)
            {
                return AceZeroSupp(m_szUserNumField1, &m_szSuppressBuff[0]);
            }
            RWCString UserNumField1Raw (void)
            {
                return m_szUserNumField1;
            }
            long UserNumField1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szUserNumField1, sizeof(m_szUserNumField1), &m_bUserNumField1);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bApplId) return true;
                if (m_bApplCtl1) return true;
                if (m_bApplCtl2) return true;
                if (m_bApplCtl3) return true;
                if (m_bApplCtl4) return true;
                if (m_bApplAcctNbr) return true;
                if (m_bApplProdCd) return true;
                if (m_bApplBal1) return true;
                if (m_bApplStatCd) return true;
                if (m_bCurrCd) return true;
                if (m_bIntlCurrDec) return true;
                if (m_bApplTypCd) return true;
                if (m_bUserCharField1) return true;
                if (m_bUserNumField1) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "ApplData", m_lIndex);
                    AddXMLField(pSess, "ApplId", m_szApplId, &m_bApplId);
                    AddXMLField(pSess, "ApplCtl1", m_szApplCtl1, &m_bApplCtl1);
                    AddXMLField(pSess, "ApplCtl2", m_szApplCtl2, &m_bApplCtl2);
                    AddXMLField(pSess, "ApplCtl3", m_szApplCtl3, &m_bApplCtl3);
                    AddXMLField(pSess, "ApplCtl4", m_szApplCtl4, &m_bApplCtl4);
                    AddXMLField(pSess, "ApplAcctNbr", m_szApplAcctNbr, &m_bApplAcctNbr);
                    AddXMLField(pSess, "ApplProdCd", m_szApplProdCd, &m_bApplProdCd);
                    AddXMLField(pSess, "ApplBal1", m_szApplBal1, &m_bApplBal1);
                    AddXMLField(pSess, "ApplStatCd", m_szApplStatCd, &m_bApplStatCd);
                    AddXMLField(pSess, "CurrCd", m_szCurrCd, &m_bCurrCd);
                    AddXMLField(pSess, "IntlCurrDec", m_szIntlCurrDec, &m_bIntlCurrDec);
                    AddXMLField(pSess, "ApplTypCd", m_szApplTypCd, &m_bApplTypCd);
                    AddXMLField(pSess, "UserCharField1", m_szUserCharField1, &m_bUserCharField1);
                    AddXMLField(pSess, "UserNumField1", m_szUserNumField1, &m_bUserNumField1);
                    AddXMLCloseRecord(pSess, "ApplData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "ApplData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "ApplId", m_szApplId);
                    GetXMLField(pSess, "ApplCtl1", m_szApplCtl1);
                    GetXMLField(pSess, "ApplCtl2", m_szApplCtl2);
                    GetXMLField(pSess, "ApplCtl3", m_szApplCtl3);
                    GetXMLField(pSess, "ApplCtl4", m_szApplCtl4);
                    GetXMLField(pSess, "ApplAcctNbr", m_szApplAcctNbr);
                    GetXMLField(pSess, "ApplProdCd", m_szApplProdCd);
                    GetXMLField(pSess, "ApplBal1", m_szApplBal1);
                    GetXMLField(pSess, "ApplStatCd", m_szApplStatCd);
                    GetXMLField(pSess, "CurrCd", m_szCurrCd);
                    GetXMLField(pSess, "IntlCurrDec", m_szIntlCurrDec);
                    GetXMLField(pSess, "ApplTypCd", m_szApplTypCd);
                    GetXMLField(pSess, "UserCharField1", m_szUserCharField1);
                    GetXMLField(pSess, "UserNumField1", m_szUserNumField1);
                    CloseXMLRecord(pSess, "ApplData");
                };
            }
        };

        AsdApplData  CApplData[16];
        AsdApplData *ApplData[16];
        
        //**************** End AsdApplData Definition ****************
        
        
        //**************** Start AsdRmkInfo Definition ****************
        //                 GROUP OF ELEMENTS THAT MAKES UP THE CUSTOMER REMARKS INFO.
        
        class AsdRmkInfo
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bRmkAddDt;
            char      m_szRmkAddDt[8+1];
            bool      m_bRmkAddTime;
            char      m_szRmkAddTime[6+1];
            bool      m_bRmkDesc;
            char      m_szRmkDesc[70+1];
        
          public:
            long      m_lIndex;

            AsdRmkInfo ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bRmkAddDt = false;
                strcpy(m_szRmkAddDt, "");
                m_bRmkAddTime = false;
                strcpy(m_szRmkAddTime, "");
                m_bRmkDesc = false;
                strcpy(m_szRmkDesc, "");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    DATE THE REMARKS SEGMENT WAS ADDED TO THE CUSTOMER RECORD.
            long lRmkAddDt () { return 8; };
            RWCString RmkAddDt (void)
            {
                return m_szRmkAddDt;
            }
            long RmkAddDt (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmkAddDt, sizeof(m_szRmkAddDt), &m_bRmkAddDt);
            }
            
            //    TIME THE REMARKS SEGMENT WAS ADDED TO THE CUSTOMER RECORD.
            long lRmkAddTime () { return 6; };
            RWCString RmkAddTime (void)
            {
                return m_szRmkAddTime;
            }
            long RmkAddTime (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmkAddTime, sizeof(m_szRmkAddTime), &m_bRmkAddTime);
            }
            
            //    REMARKS TEXT.
            long lRmkDesc () { return 70; };
            RWCString RmkDesc (void)
            {
                return m_szRmkDesc;
            }
            long RmkDesc (const RWCString& rwc)
            {
                return SetString(rwc, m_szRmkDesc, sizeof(m_szRmkDesc), &m_bRmkDesc);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bRmkAddDt) return true;
                if (m_bRmkAddTime) return true;
                if (m_bRmkDesc) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "RmkInfo", m_lIndex);
                    AddXMLField(pSess, "RmkAddDt", m_szRmkAddDt, &m_bRmkAddDt);
                    AddXMLField(pSess, "RmkAddTime", m_szRmkAddTime, &m_bRmkAddTime);
                    AddXMLField(pSess, "RmkDesc", m_szRmkDesc, &m_bRmkDesc);
                    AddXMLCloseRecord(pSess, "RmkInfo");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "RmkInfo", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "RmkAddDt", m_szRmkAddDt);
                    GetXMLField(pSess, "RmkAddTime", m_szRmkAddTime);
                    GetXMLField(pSess, "RmkDesc", m_szRmkDesc);
                    CloseXMLRecord(pSess, "RmkInfo");
                };
            }
        };

        AsdRmkInfo  CRmkInfo[16];
        AsdRmkInfo *RmkInfo[16];
        
        //**************** End AsdRmkInfo Definition ****************
        
    };

    AsdWVRMINQ CWVRMINQ;
    AsdWVRMINQ *WVRMINQ;
    
    //**************** End AsdWVRMINQ Definition ****************

    
    //**************** Start AsdSDRMUCIB Definition ****************
    //                 SD RM NICKNAME INQUIRY                                      
    
    //    SDRMUCIB.map
    //    generated by Dsm2Ace ver. 2.3.03
    //    on 06/26/02 14:16:32
    class AsdSDRMUCIB
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bRelBegKey;
        char      m_szRelBegKey[100+1];
        bool      m_bRelEndKey;
        char      m_szRelEndKey[100+1];
        bool      m_bPgDirCd;
        char      m_szPgDirCd[1+1];
        bool      m_bNbrReq;
        char      m_szNbrReq[4+1];
        bool      m_bMoreInd;
        char      m_szMoreInd[1+1];
        bool      m_bTblUsed;
        short     m_nTblUsed;
    
      public:
        long      m_lIndex;

        AsdSDRMUCIB ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRelBegKey = false;
            strcpy(m_szRelBegKey, "");
            m_bRelEndKey = false;
            strcpy(m_szRelEndKey, "");
            m_bPgDirCd = false;
            strcpy(m_szPgDirCd, "");
            m_bNbrReq = false;
            strcpy(m_szNbrReq, "+000");
            m_bMoreInd = false;
            strcpy(m_szMoreInd, "");
            m_bTblUsed = false;
            m_nTblUsed = 0;
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                RelData[lOccurs]  = &CRelData[lOccurs];
                CRelData[lOccurs].m_lIndex = lOccurs;
            }
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bRelBegKey = false;
            strcpy(m_szRelBegKey, "");
            m_bRelEndKey = false;
            strcpy(m_szRelEndKey, "");
            m_bPgDirCd = false;
            strcpy(m_szPgDirCd, "");
            m_bNbrReq = false;
            strcpy(m_szNbrReq, "+000");
            m_bMoreInd = false;
            strcpy(m_szMoreInd, "");
            m_bTblUsed = false;
            m_nTblUsed = 0;
            long lOccurs;
        
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                RelData[lOccurs]  = &CRelData[lOccurs];
                CRelData[lOccurs].m_lIndex = lOccurs;
            }
        }

        
        //    KEY TO THE FIRST ENTRY ON A LIST SCREEN.
        long lRelBegKey () { return 100; };
        RWCString RelBegKey (void)
        {
            return m_szRelBegKey;
        }
        long RelBegKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szRelBegKey, sizeof(m_szRelBegKey), &m_bRelBegKey);
        }
        
        //    KEY TO THE LAST ENTRY ON A LIST SCREEN.
        long lRelEndKey () { return 100; };
        RWCString RelEndKey (void)
        {
            return m_szRelEndKey;
        }
        long RelEndKey (const RWCString& rwc)
        {
            return SetString(rwc, m_szRelEndKey, sizeof(m_szRelEndKey), &m_bRelEndKey);
        }
        
        //    DIRECTION IN WHICH PAGING OCCURRED (F-FORWARD, B-BACKWARD).
        long lPgDirCd () { return 1; };
        RWCString PgDirCd (void)
        {
            return m_szPgDirCd;
        }
        long PgDirCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szPgDirCd, sizeof(m_szPgDirCd), &m_bPgDirCd);
        }
        
        //    NUMBER OF SEGMENTS TO SEND TO THE SCREEN FOR VIEWING.
        long lNbrReq () { return 4; };
        RWCString NbrReq (void)
        {
            return AceZeroSupp(m_szNbrReq, &m_szSuppressBuff[0]);
        }
        RWCString NbrReqRaw (void)
        {
            return m_szNbrReq;
        }
        long NbrReq (const RWCString& rwc)
        {
            return SetString(rwc, m_szNbrReq, sizeof(m_szNbrReq), &m_bNbrReq);
        }
        
        //    INDICATES WHETHER ADDITIONAL SEGMENTS OR RECORDS EXIST.
        long lMoreInd () { return 1; };
        RWCString MoreInd (void)
        {
            return m_szMoreInd;
        }
        long MoreInd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMoreInd, sizeof(m_szMoreInd), &m_bMoreInd);
        }
        
        //    NUMBER OF RECORDS ACTUALLY STORED IN THE TRANSACTION DAG.
        short TblUsed (void)
        {
            return m_nTblUsed;
        }
        long TblUsed (const short nValue)
        {
            return SetShort(nValue, &m_nTblUsed, &m_bTblUsed);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bRelBegKey) return true;
            if (m_bRelEndKey) return true;
            if (m_bPgDirCd) return true;
            if (m_bNbrReq) return true;
            if (m_bMoreInd) return true;
            if (m_bTblUsed) return true;
            long lOccurs;
            for (lOccurs = 0; lOccurs < 16; lOccurs++)
            {
                if(CRelData[lOccurs].HasDataToSave())
                {
                    return true;
                }
            }
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "SDRMUCIB", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "RelBegKey", m_szRelBegKey, &m_bRelBegKey);
                AddXMLField(pSess, "RelEndKey", m_szRelEndKey, &m_bRelEndKey);
                AddXMLField(pSess, "PgDirCd", m_szPgDirCd, &m_bPgDirCd);
                AddXMLField(pSess, "NbrReq", m_szNbrReq, &m_bNbrReq);
                AddXMLField(pSess, "MoreInd", m_szMoreInd, &m_bMoreInd);
                AddXMLField(pSess, "TblUsed", m_nTblUsed, &m_bTblUsed);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CRelData[lOccurs].Save(pSess);
                }
                AddXMLCloseRecord(pSess, "SDRMUCIB");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "SDRMUCIB", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "RelBegKey", m_szRelBegKey);
                GetXMLField(pSess, "RelEndKey", m_szRelEndKey);
                GetXMLField(pSess, "PgDirCd", m_szPgDirCd);
                GetXMLField(pSess, "NbrReq", m_szNbrReq);
                GetXMLField(pSess, "MoreInd", m_szMoreInd);
                GetXMLField(pSess, "TblUsed", &m_nTblUsed);
                long lOccurs;
                for (lOccurs = 0; lOccurs < 16; lOccurs++)
                {
                    CRelData[lOccurs].Load(pSess);
                }
                CloseXMLRecord(pSess, "SDRMUCIB");
            };
        }
        
        //**************** Start AsdRelData Definition ****************
        //                 GROUP LEVEL TO DESCRIBE REL DATA
        
        class AsdRelData
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFromEntCd;
            char      m_szFromEntCd[2+1];
            bool      m_bRelCtl1;
            char      m_szRelCtl1[4+1];
            bool      m_bRelCtl2;
            char      m_szRelCtl2[4+1];
            bool      m_bRelCtl3;
            char      m_szRelCtl3[4+1];
            bool      m_bRelCtl4;
            char      m_szRelCtl4[4+1];
            bool      m_bRelCustNbr;
            char      m_szRelCustNbr[14+1];
            bool      m_bRelSeqNbr;
            char      m_szRelSeqNbr[3+1];
            bool      m_bToEntCd;
            char      m_szToEntCd[2+1];
            bool      m_bToApplCd;
            char      m_szToApplCd[2+1];
            bool      m_bPriSecOthCd;
            char      m_szPriSecOthCd[1+1];
            bool      m_bRelUseCd;
            char      m_szRelUseCd[6+1];
            bool      m_bCustCtl1;
            char      m_szCustCtl1[4+1];
            bool      m_bCustCtl2;
            char      m_szCustCtl2[4+1];
            bool      m_bCustCtl3;
            char      m_szCustCtl3[4+1];
            bool      m_bCustCtl4;
            char      m_szCustCtl4[4+1];
            bool      m_bApplAcctNbr;
            char      m_szApplAcctNbr[27+1];
            bool      m_bApplId;
            char      m_szApplId[2+1];
            bool      m_bNickname;
            char      m_szNickname[20+1];
        
          public:
            long      m_lIndex;

            AsdRelData ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFromEntCd = false;
                strcpy(m_szFromEntCd, "");
                m_bRelCtl1 = false;
                strcpy(m_szRelCtl1, "0000");
                m_bRelCtl2 = false;
                strcpy(m_szRelCtl2, "0000");
                m_bRelCtl3 = false;
                strcpy(m_szRelCtl3, "0000");
                m_bRelCtl4 = false;
                strcpy(m_szRelCtl4, "0000");
                m_bRelCustNbr = false;
                strcpy(m_szRelCustNbr, "00000000000000");
                m_bRelSeqNbr = false;
                strcpy(m_szRelSeqNbr, "000");
                m_bToEntCd = false;
                strcpy(m_szToEntCd, "");
                m_bToApplCd = false;
                strcpy(m_szToApplCd, "");
                m_bPriSecOthCd = false;
                strcpy(m_szPriSecOthCd, "");
                m_bRelUseCd = false;
                strcpy(m_szRelUseCd, "");
                m_bCustCtl1 = false;
                strcpy(m_szCustCtl1, "0000");
                m_bCustCtl2 = false;
                strcpy(m_szCustCtl2, "0000");
                m_bCustCtl3 = false;
                strcpy(m_szCustCtl3, "0000");
                m_bCustCtl4 = false;
                strcpy(m_szCustCtl4, "0000");
                m_bApplAcctNbr = false;
                strcpy(m_szApplAcctNbr, "000000000000000000000000000");
                m_bApplId = false;
                strcpy(m_szApplId, "00");
                m_bNickname = false;
                strcpy(m_szNickname, "00000000000000000000");
            
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            //    CODE OF FROM ENTITY TYPE BEING RELATED
            long lFromEntCd () { return 2; };
            RWCString FromEntCd (void)
            {
                return m_szFromEntCd;
            }
            long FromEntCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szFromEntCd, sizeof(m_szFromEntCd), &m_bFromEntCd);
            }
            
            //    HIGHEST LEVEL OF CUSTOMER CONTROL FOR THIS RELATIONSHIP
            long lRelCtl1 () { return 4; };
            RWCString RelCtl1 (void)
            {
                return m_szRelCtl1;
            }
            long RelCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRelCtl1, sizeof(m_szRelCtl1), &m_bRelCtl1);
            }
            
            //    SECOND LEVEL OF CUSTOMER CONTROL FOR THIS RELATIONSHIP
            long lRelCtl2 () { return 4; };
            RWCString RelCtl2 (void)
            {
                return m_szRelCtl2;
            }
            long RelCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRelCtl2, sizeof(m_szRelCtl2), &m_bRelCtl2);
            }
            
            //    THIRD LEVEL OF CUSTOMER CONTROL FOR THIS RELATIONSHIP
            long lRelCtl3 () { return 4; };
            RWCString RelCtl3 (void)
            {
                return m_szRelCtl3;
            }
            long RelCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRelCtl3, sizeof(m_szRelCtl3), &m_bRelCtl3);
            }
            
            //    FOURTH LEVEL OF CUSTOMER CONTROL FOR THIS RELATIONSHIP
            long lRelCtl4 () { return 4; };
            RWCString RelCtl4 (void)
            {
                return m_szRelCtl4;
            }
            long RelCtl4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szRelCtl4, sizeof(m_szRelCtl4), &m_bRelCtl4);
            }
            
            //    CUSTOMER NUMBER
            long lRelCustNbr () { return 14; };
            RWCString RelCustNbr (void)
            {
                return m_szRelCustNbr;
            }
            long RelCustNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szRelCustNbr, sizeof(m_szRelCustNbr), &m_bRelCustNbr);
            }
            
            //    RELATIONSHIP SEQUENCE NUMBER
            long lRelSeqNbr () { return 3; };
            RWCString RelSeqNbr (void)
            {
                return m_szRelSeqNbr;
            }
            long RelSeqNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szRelSeqNbr, sizeof(m_szRelSeqNbr), &m_bRelSeqNbr);
            }
            
            //    CODE OF ENTITY TYPE BEING RELATED TO
            long lToEntCd () { return 2; };
            RWCString ToEntCd (void)
            {
                return m_szToEntCd;
            }
            long ToEntCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szToEntCd, sizeof(m_szToEntCd), &m_bToEntCd);
            }
            
            //    APPLICATION CODE OF TO-ACCT (SORTING/STORAGE PURPOSES)
            long lToApplCd () { return 2; };
            RWCString ToApplCd (void)
            {
                return m_szToApplCd;
            }
            long ToApplCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szToApplCd, sizeof(m_szToApplCd), &m_bToApplCd);
            }
            
            //    INDICATES CUST IS PRIMARY, SECONDARY, OR OTHER ACCT OWNER.
            long lPriSecOthCd () { return 1; };
            RWCString PriSecOthCd (void)
            {
                return m_szPriSecOthCd;
            }
            long PriSecOthCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szPriSecOthCd, sizeof(m_szPriSecOthCd), &m_bPriSecOthCd);
            }
            
            //    NAME/ADDRESS USE CODE
            long lRelUseCd () { return 6; };
            RWCString RelUseCd (void)
            {
                return m_szRelUseCd;
            }
            long RelUseCd (const RWCString& rwc)
            {
                return SetString(rwc, m_szRelUseCd, sizeof(m_szRelUseCd), &m_bRelUseCd);
            }
            
            //    INSTITUTION-DEFINED FIRST LEVEL CONTROL FOR THE CUSTOMER.
            long lCustCtl1 () { return 4; };
            RWCString CustCtl1 (void)
            {
                return m_szCustCtl1;
            }
            long CustCtl1 (const RWCString& rwc)
            {
                return SetString(rwc, m_szCustCtl1, sizeof(m_szCustCtl1), &m_bCustCtl1);
            }
            
            //    INSTITUTION-DEFINED SECOND LEVEL CONTROL FOR THE CUSTOMER.
            long lCustCtl2 () { return 4; };
            RWCString CustCtl2 (void)
            {
                return m_szCustCtl2;
            }
            long CustCtl2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szCustCtl2, sizeof(m_szCustCtl2), &m_bCustCtl2);
            }
            
            //    INSTITUTION-DEFINED THIRD LEVEL CONTROL FOR THE CUSTOMER.
            long lCustCtl3 () { return 4; };
            RWCString CustCtl3 (void)
            {
                return m_szCustCtl3;
            }
            long CustCtl3 (const RWCString& rwc)
            {
                return SetString(rwc, m_szCustCtl3, sizeof(m_szCustCtl3), &m_bCustCtl3);
            }
            
            //    INSTITUTION-DEFINED FOURTH LEVEL CONTROL FOR THE CUSTOMER.
            long lCustCtl4 () { return 4; };
            RWCString CustCtl4 (void)
            {
                return m_szCustCtl4;
            }
            long CustCtl4 (const RWCString& rwc)
            {
                return SetString(rwc, m_szCustCtl4, sizeof(m_szCustCtl4), &m_bCustCtl4);
            }
            
            //    APPL ACCT NUM (IF AN ACCT), OR RM CUST NUM (IF A CUSTOMER).
            long lApplAcctNbr () { return 27; };
            RWCString ApplAcctNbr (void)
            {
                return m_szApplAcctNbr;
            }
            long ApplAcctNbr (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplAcctNbr, sizeof(m_szApplAcctNbr), &m_bApplAcctNbr);
            }
            
            //    APPLICATION IDENTIFICATION CODE
            long lApplId () { return 2; };
            RWCString ApplId (void)
            {
                return m_szApplId;
            }
            long ApplId (const RWCString& rwc)
            {
                return SetString(rwc, m_szApplId, sizeof(m_szApplId), &m_bApplId);
            }
            
            //    NICKNAME
            long lNickname () { return 20; };
            RWCString Nickname (void)
            {
                return m_szNickname;
            }
            long Nickname (const RWCString& rwc)
            {
                return SetString(rwc, m_szNickname, sizeof(m_szNickname), &m_bNickname);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFromEntCd) return true;
                if (m_bRelCtl1) return true;
                if (m_bRelCtl2) return true;
                if (m_bRelCtl3) return true;
                if (m_bRelCtl4) return true;
                if (m_bRelCustNbr) return true;
                if (m_bRelSeqNbr) return true;
                if (m_bToEntCd) return true;
                if (m_bToApplCd) return true;
                if (m_bPriSecOthCd) return true;
                if (m_bRelUseCd) return true;
                if (m_bCustCtl1) return true;
                if (m_bCustCtl2) return true;
                if (m_bCustCtl3) return true;
                if (m_bCustCtl4) return true;
                if (m_bApplAcctNbr) return true;
                if (m_bApplId) return true;
                if (m_bNickname) return true;
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "RelData", m_lIndex);
                    AddXMLField(pSess, "FromEntCd", m_szFromEntCd, &m_bFromEntCd);
                    AddXMLField(pSess, "RelCtl1", m_szRelCtl1, &m_bRelCtl1);
                    AddXMLField(pSess, "RelCtl2", m_szRelCtl2, &m_bRelCtl2);
                    AddXMLField(pSess, "RelCtl3", m_szRelCtl3, &m_bRelCtl3);
                    AddXMLField(pSess, "RelCtl4", m_szRelCtl4, &m_bRelCtl4);
                    AddXMLField(pSess, "RelCustNbr", m_szRelCustNbr, &m_bRelCustNbr);
                    AddXMLField(pSess, "RelSeqNbr", m_szRelSeqNbr, &m_bRelSeqNbr);
                    AddXMLField(pSess, "ToEntCd", m_szToEntCd, &m_bToEntCd);
                    AddXMLField(pSess, "ToApplCd", m_szToApplCd, &m_bToApplCd);
                    AddXMLField(pSess, "PriSecOthCd", m_szPriSecOthCd, &m_bPriSecOthCd);
                    AddXMLField(pSess, "RelUseCd", m_szRelUseCd, &m_bRelUseCd);
                    AddXMLField(pSess, "CustCtl1", m_szCustCtl1, &m_bCustCtl1);
                    AddXMLField(pSess, "CustCtl2", m_szCustCtl2, &m_bCustCtl2);
                    AddXMLField(pSess, "CustCtl3", m_szCustCtl3, &m_bCustCtl3);
                    AddXMLField(pSess, "CustCtl4", m_szCustCtl4, &m_bCustCtl4);
                    AddXMLField(pSess, "ApplAcctNbr", m_szApplAcctNbr, &m_bApplAcctNbr);
                    AddXMLField(pSess, "ApplId", m_szApplId, &m_bApplId);
                    AddXMLField(pSess, "Nickname", m_szNickname, &m_bNickname);
                    AddXMLCloseRecord(pSess, "RelData");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "RelData", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "FromEntCd", m_szFromEntCd);
                    GetXMLField(pSess, "RelCtl1", m_szRelCtl1);
                    GetXMLField(pSess, "RelCtl2", m_szRelCtl2);
                    GetXMLField(pSess, "RelCtl3", m_szRelCtl3);
                    GetXMLField(pSess, "RelCtl4", m_szRelCtl4);
                    GetXMLField(pSess, "RelCustNbr", m_szRelCustNbr);
                    GetXMLField(pSess, "RelSeqNbr", m_szRelSeqNbr);
                    GetXMLField(pSess, "ToEntCd", m_szToEntCd);
                    GetXMLField(pSess, "ToApplCd", m_szToApplCd);
                    GetXMLField(pSess, "PriSecOthCd", m_szPriSecOthCd);
                    GetXMLField(pSess, "RelUseCd", m_szRelUseCd);
                    GetXMLField(pSess, "CustCtl1", m_szCustCtl1);
                    GetXMLField(pSess, "CustCtl2", m_szCustCtl2);
                    GetXMLField(pSess, "CustCtl3", m_szCustCtl3);
                    GetXMLField(pSess, "CustCtl4", m_szCustCtl4);
                    GetXMLField(pSess, "ApplAcctNbr", m_szApplAcctNbr);
                    GetXMLField(pSess, "ApplId", m_szApplId);
                    GetXMLField(pSess, "Nickname", m_szNickname);
                    CloseXMLRecord(pSess, "RelData");
                };
            }
        };

        AsdRelData  CRelData[16];
        AsdRelData *RelData[16];
        
        //**************** End AsdRelData Definition ****************
        
    };

    AsdSDRMUCIB CSDRMUCIB;
    AsdSDRMUCIB *SDRMUCIB;
    
    //**************** End AsdSDRMUCIB Definition ****************

    
    //**************** Start AsdTSMDA Definition ****************
    //                 TRANSACTION SYSTEM MESSAGE DATA AREA                        
    
    //    TSMDA.map
    //    generated by Dsm2Ace ver. 3.0.04
    //    on 07/22/02 11:24:35
    class AsdTSMDA
    {
      private:
        bool      m_bHostInitOverride;
        char      m_szHostInitOverride[16];
        bool      m_bReceived;
        char      m_szSuppressBuff[100];
        bool      m_bMdaEyeCatcher;
        char      m_szMdaEyeCatcher[8+1];
        bool      m_bMdaEndingAddr;
        long      m_lMdaEndingAddr;
        bool      m_bMdaNextAvailPosition;
        short     m_nMdaNextAvailPosition;
        bool      m_bMdaForcPostHiSerLvl;
        char      m_szMdaForcPostHiSerLvl[1+1];
        bool      m_bMdaHiSeverityLvl;
        char      m_szMdaHiSeverityLvl[2+1];
        bool      m_bMdaHiSeverityCode;
        char      m_szMdaHiSeverityCode[1+1];
        bool      m_bMdaOccurrenceInProc;
        short     m_nMdaOccurrenceInProc;
        bool      m_bMdaMaxPossibleMsgs;
        short     m_nMdaMaxPossibleMsgs;
        bool      m_bMdaOccurrenceLength;
        short     m_nMdaOccurrenceLength;
        bool      m_bMdaOccurToDisplay;
        short     m_nMdaOccurToDisplay;
        bool      m_bFill0;
        char      m_szFill0[5+1];
        bool      m_bMdaStmAssocPcaAddr;
        long      m_lMdaStmAssocPcaAddr;
        bool      m_bMdaStmDag;
        char      m_szMdaStmDag[8+1];
        bool      m_bMdaStmFieldId;
        char      m_szMdaStmFieldId[8+1];
        bool      m_bMdaStmFieldDimen1;
        short     m_nMdaStmFieldDimen1;
        bool      m_bMdaStmFieldDimen2;
        short     m_nMdaStmFieldDimen2;
        bool      m_bMdaStmFieldDimen3;
        short     m_nMdaStmFieldDimen3;
        bool      m_bMdaStmScrProcOrd;
        char      m_szMdaStmScrProcOrd[2+1];
        bool      m_bMdaStmSeverityLvl;
        char      m_szMdaStmSeverityLvl[2+1];
        bool      m_bMdaStmFieldRow;
        char      m_szMdaStmFieldRow[1+1];
        bool      m_bMdaStmFieldCol;
        char      m_szMdaStmFieldCol[1+1];
        bool      m_bMdaStmProgramId;
        char      m_szMdaStmProgramId[8+1];
        bool      m_bMdaStmMessageCode;
        char      m_szMdaStmMessageCode[6+1];
        bool      m_bMdaStmVariable1;
        char      m_szMdaStmVariable1[25+1];
        bool      m_bMdaStmVariable2;
        char      m_szMdaStmVariable2[25+1];
        bool      m_bMdaStmProcessedFlag;
        char      m_szMdaStmProcessedFlag[1+1];
        bool      m_bMdaStmCursorPosition;
        char      m_szMdaStmCursorPosition[2+1];
        bool      m_bMdaStmRoutingFlag;
        char      m_szMdaStmRoutingFlag[1+1];
        bool      m_bMdaStmSecurityFlag;
        char      m_szMdaStmSecurityFlag[1+1];
        bool      m_bMdaStmForcePostFlag;
        char      m_szMdaStmForcePostFlag[1+1];
        bool      m_bMdaStmMsgSeverityCd;
        char      m_szMdaStmMsgSeverityCd[1+1];
        bool      m_bFill1;
        char      m_szFill1[16+1];
    
      public:
        long      m_lIndex;

        AsdTSMDA ()  // Constructor
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        void HostInitOverride (InitValue iv, short custom = 0)
        {
            AceHostInitOverride(m_szHostInitOverride, &m_bHostInitOverride, iv, custom);
        }

        bool bReceived (void)
        {
            return m_bReceived;
        }
        void Reinit()
        {
            m_bHostInitOverride = false;
            strcpy(m_szHostInitOverride, "");
            m_bReceived = false;
            m_lIndex = -1;
            m_bMdaEyeCatcher = false;
            strcpy(m_szMdaEyeCatcher, "");
            m_bMdaEndingAddr = false;
            m_lMdaEndingAddr = 0;
            m_bMdaNextAvailPosition = false;
            m_nMdaNextAvailPosition = 0;
            m_bMdaForcPostHiSerLvl = false;
            strcpy(m_szMdaForcPostHiSerLvl, "");
            m_bMdaHiSeverityLvl = false;
            strcpy(m_szMdaHiSeverityLvl, "");
            m_bMdaHiSeverityCode = false;
            strcpy(m_szMdaHiSeverityCode, "");
            m_bMdaOccurrenceInProc = false;
            m_nMdaOccurrenceInProc = 0;
            m_bMdaMaxPossibleMsgs = false;
            m_nMdaMaxPossibleMsgs = 0;
            m_bMdaOccurrenceLength = false;
            m_nMdaOccurrenceLength = 0;
            m_bMdaOccurToDisplay = false;
            m_nMdaOccurToDisplay = 0;
            m_bFill0 = false;
            strcpy(m_szFill0, "");
            m_bMdaStmAssocPcaAddr = false;
            m_lMdaStmAssocPcaAddr = 0;
            m_bMdaStmDag = false;
            strcpy(m_szMdaStmDag, "");
            m_bMdaStmFieldId = false;
            strcpy(m_szMdaStmFieldId, "");
            m_bMdaStmFieldDimen1 = false;
            m_nMdaStmFieldDimen1 = 0;
            m_bMdaStmFieldDimen2 = false;
            m_nMdaStmFieldDimen2 = 0;
            m_bMdaStmFieldDimen3 = false;
            m_nMdaStmFieldDimen3 = 0;
            m_bMdaStmScrProcOrd = false;
            strcpy(m_szMdaStmScrProcOrd, "");
            m_bMdaStmSeverityLvl = false;
            strcpy(m_szMdaStmSeverityLvl, "");
            m_bMdaStmFieldRow = false;
            strcpy(m_szMdaStmFieldRow, "");
            m_bMdaStmFieldCol = false;
            strcpy(m_szMdaStmFieldCol, "");
            m_bMdaStmProgramId = false;
            strcpy(m_szMdaStmProgramId, "");
            m_bMdaStmMessageCode = false;
            strcpy(m_szMdaStmMessageCode, "");
            m_bMdaStmVariable1 = false;
            strcpy(m_szMdaStmVariable1, "");
            m_bMdaStmVariable2 = false;
            strcpy(m_szMdaStmVariable2, "");
            m_bMdaStmProcessedFlag = false;
            strcpy(m_szMdaStmProcessedFlag, "");
            m_bMdaStmCursorPosition = false;
            strcpy(m_szMdaStmCursorPosition, "");
            m_bMdaStmRoutingFlag = false;
            strcpy(m_szMdaStmRoutingFlag, "");
            m_bMdaStmSecurityFlag = false;
            strcpy(m_szMdaStmSecurityFlag, "");
            m_bMdaStmForcePostFlag = false;
            strcpy(m_szMdaStmForcePostFlag, "");
            m_bMdaStmMsgSeverityCd = false;
            strcpy(m_szMdaStmMsgSeverityCd, "");
            m_bFill1 = false;
            strcpy(m_szFill1, "");
            MdaTrmMsg  = &CMdaTrmMsg;
        }

        
        //    MDA EYE CATCHER
        long lMdaEyeCatcher () { return 8; };
        RWCString MdaEyeCatcher (void)
        {
            return m_szMdaEyeCatcher;
        }
        long MdaEyeCatcher (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaEyeCatcher, sizeof(m_szMdaEyeCatcher), &m_bMdaEyeCatcher);
        }
        
        //    MDA ENDING ADDRESS
        long MdaEndingAddr (void)
        {
            return m_lMdaEndingAddr;
        }
        long MdaEndingAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaEndingAddr, &m_bMdaEndingAddr);
        }
        
        //    MDA NEXT AVAILABLE POSITION
        short MdaNextAvailPosition (void)
        {
            return m_nMdaNextAvailPosition;
        }
        long MdaNextAvailPosition (const short nValue)
        {
            return SetShort(nValue, &m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
        }
        
        //    FORCE POST HIGHEST SEVERITY LEVEL
        long lMdaForcPostHiSerLvl () { return 1; };
        RWCString MdaForcPostHiSerLvl (void)
        {
            return m_szMdaForcPostHiSerLvl;
        }
        long MdaForcPostHiSerLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaForcPostHiSerLvl, sizeof(m_szMdaForcPostHiSerLvl), &m_bMdaForcPostHiSerLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY LEVEL
        long lMdaHiSeverityLvl () { return 2; };
        RWCString MdaHiSeverityLvl (void)
        {
            return m_szMdaHiSeverityLvl;
        }
        long MdaHiSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityLvl, sizeof(m_szMdaHiSeverityLvl), &m_bMdaHiSeverityLvl);
        }
        
        //    MESSAGE HIGHEST SEVERITY CODE
        long lMdaHiSeverityCode () { return 1; };
        RWCString MdaHiSeverityCode (void)
        {
            return m_szMdaHiSeverityCode;
        }
        long MdaHiSeverityCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaHiSeverityCode, sizeof(m_szMdaHiSeverityCode), &m_bMdaHiSeverityCode);
        }
        
        //    MESSAGE OCCURENCE IN PROCESS
        short MdaOccurrenceInProc (void)
        {
            return m_nMdaOccurrenceInProc;
        }
        long MdaOccurrenceInProc (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
        }
        
        //    MAXIMUM MESSAGES FOR TERMINAL TYPE
        short MdaMaxPossibleMsgs (void)
        {
            return m_nMdaMaxPossibleMsgs;
        }
        long MdaMaxPossibleMsgs (const short nValue)
        {
            return SetShort(nValue, &m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
        }
        
        //    MDA OCCURRENCE LENGTH
        short MdaOccurrenceLength (void)
        {
            return m_nMdaOccurrenceLength;
        }
        long MdaOccurrenceLength (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
        }
        
        //    MDA OCCURRENCE BEING DISPLAYED
        short MdaOccurToDisplay (void)
        {
            return m_nMdaOccurToDisplay;
        }
        long MdaOccurToDisplay (const short nValue)
        {
            return SetShort(nValue, &m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
        }
        
        long lFill0 () { return 5; };
        RWCString Fill0 (void)
        {
            return m_szFill0;
        }
        long Fill0 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill0, sizeof(m_szFill0), &m_bFill0);
        }
        
        //    ADDRESS OF PCA ASSOCIATED WITH THIS MESSAGE
        long MdaStmAssocPcaAddr (void)
        {
            return m_lMdaStmAssocPcaAddr;
        }
        long MdaStmAssocPcaAddr (long lValue)
        {
            return SetLong(lValue, &m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
        }
        
        //    DATAGROUP NAME
        long lMdaStmDag () { return 8; };
        RWCString MdaStmDag (void)
        {
            return m_szMdaStmDag;
        }
        long MdaStmDag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmDag, sizeof(m_szMdaStmDag), &m_bMdaStmDag);
        }
        
        //    FIELD IDENTIFICATION
        long lMdaStmFieldId () { return 8; };
        RWCString MdaStmFieldId (void)
        {
            return m_szMdaStmFieldId;
        }
        long MdaStmFieldId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldId, sizeof(m_szMdaStmFieldId), &m_bMdaStmFieldId);
        }
        
        //    FIELD DIMENSION 1
        short MdaStmFieldDimen1 (void)
        {
            return m_nMdaStmFieldDimen1;
        }
        long MdaStmFieldDimen1 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
        }
        
        //    FIELD DIMENSION 2
        short MdaStmFieldDimen2 (void)
        {
            return m_nMdaStmFieldDimen2;
        }
        long MdaStmFieldDimen2 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
        }
        
        //    FIELD DIMENSION 3
        short MdaStmFieldDimen3 (void)
        {
            return m_nMdaStmFieldDimen3;
        }
        long MdaStmFieldDimen3 (const short nValue)
        {
            return SetShort(nValue, &m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
        }
        
        //    MDA SCREEN PROCESS ORDER
        long lMdaStmScrProcOrd () { return 2; };
        RWCString MdaStmScrProcOrd (void)
        {
            return m_szMdaStmScrProcOrd;
        }
        long MdaStmScrProcOrd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmScrProcOrd, sizeof(m_szMdaStmScrProcOrd), &m_bMdaStmScrProcOrd);
        }
        
        //    MDA SEVERITY LEVEL
        long lMdaStmSeverityLvl () { return 2; };
        RWCString MdaStmSeverityLvl (void)
        {
            return m_szMdaStmSeverityLvl;
        }
        long MdaStmSeverityLvl (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSeverityLvl, sizeof(m_szMdaStmSeverityLvl), &m_bMdaStmSeverityLvl);
        }
        
        //    MDA FIELD ROW
        long lMdaStmFieldRow () { return 1; };
        RWCString MdaStmFieldRow (void)
        {
            return m_szMdaStmFieldRow;
        }
        long MdaStmFieldRow (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldRow, sizeof(m_szMdaStmFieldRow), &m_bMdaStmFieldRow);
        }
        
        //    MDA FIELD COLUMN
        long lMdaStmFieldCol () { return 1; };
        RWCString MdaStmFieldCol (void)
        {
            return m_szMdaStmFieldCol;
        }
        long MdaStmFieldCol (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmFieldCol, sizeof(m_szMdaStmFieldCol), &m_bMdaStmFieldCol);
        }
        
        //    PROGRAM IDENTIFICATION
        long lMdaStmProgramId () { return 8; };
        RWCString MdaStmProgramId (void)
        {
            return m_szMdaStmProgramId;
        }
        long MdaStmProgramId (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProgramId, sizeof(m_szMdaStmProgramId), &m_bMdaStmProgramId);
        }
        
        //    MESSAGE CODE
        long lMdaStmMessageCode () { return 6; };
        RWCString MdaStmMessageCode (void)
        {
            return m_szMdaStmMessageCode;
        }
        long MdaStmMessageCode (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMessageCode, sizeof(m_szMdaStmMessageCode), &m_bMdaStmMessageCode);
        }
        
        //    VARIABLE DATA 1
        long lMdaStmVariable1 () { return 25; };
        RWCString MdaStmVariable1 (void)
        {
            return m_szMdaStmVariable1;
        }
        long MdaStmVariable1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable1, sizeof(m_szMdaStmVariable1), &m_bMdaStmVariable1);
        }
        
        //    VARIABLE DATA 2
        long lMdaStmVariable2 () { return 25; };
        RWCString MdaStmVariable2 (void)
        {
            return m_szMdaStmVariable2;
        }
        long MdaStmVariable2 (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmVariable2, sizeof(m_szMdaStmVariable2), &m_bMdaStmVariable2);
        }
        
        //    STEM PROCESSED FLAG
        long lMdaStmProcessedFlag () { return 1; };
        RWCString MdaStmProcessedFlag (void)
        {
            return m_szMdaStmProcessedFlag;
        }
        long MdaStmProcessedFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmProcessedFlag, sizeof(m_szMdaStmProcessedFlag), &m_bMdaStmProcessedFlag);
        }
        
        //    CURSOR POSITION
        long lMdaStmCursorPosition () { return 2; };
        RWCString MdaStmCursorPosition (void)
        {
            return m_szMdaStmCursorPosition;
        }
        long MdaStmCursorPosition (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmCursorPosition, sizeof(m_szMdaStmCursorPosition), &m_bMdaStmCursorPosition);
        }
        
        //    ROUTINE FLAG
        long lMdaStmRoutingFlag () { return 1; };
        RWCString MdaStmRoutingFlag (void)
        {
            return m_szMdaStmRoutingFlag;
        }
        long MdaStmRoutingFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmRoutingFlag, sizeof(m_szMdaStmRoutingFlag), &m_bMdaStmRoutingFlag);
        }
        
        //    SECURITY FLAG
        long lMdaStmSecurityFlag () { return 1; };
        RWCString MdaStmSecurityFlag (void)
        {
            return m_szMdaStmSecurityFlag;
        }
        long MdaStmSecurityFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmSecurityFlag, sizeof(m_szMdaStmSecurityFlag), &m_bMdaStmSecurityFlag);
        }
        
        //    FORCE POST FLAG
        long lMdaStmForcePostFlag () { return 1; };
        RWCString MdaStmForcePostFlag (void)
        {
            return m_szMdaStmForcePostFlag;
        }
        long MdaStmForcePostFlag (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmForcePostFlag, sizeof(m_szMdaStmForcePostFlag), &m_bMdaStmForcePostFlag);
        }
        
        //    MESSAGE SEVERITY CODE
        long lMdaStmMsgSeverityCd () { return 1; };
        RWCString MdaStmMsgSeverityCd (void)
        {
            return m_szMdaStmMsgSeverityCd;
        }
        long MdaStmMsgSeverityCd (const RWCString& rwc)
        {
            return SetString(rwc, m_szMdaStmMsgSeverityCd, sizeof(m_szMdaStmMsgSeverityCd), &m_bMdaStmMsgSeverityCd);
        }
        
        long lFill1 () { return 16; };
        RWCString Fill1 (void)
        {
            return m_szFill1;
        }
        long Fill1 (const RWCString& rwc)
        {
            return SetString(rwc, m_szFill1, sizeof(m_szFill1), &m_bFill1);
        }
        
        bool HasDataToSave (void)
        {
            if (m_bHostInitOverride) return true;
            if (m_bMdaEyeCatcher) return true;
            if (m_bMdaEndingAddr) return true;
            if (m_bMdaNextAvailPosition) return true;
            if (m_bMdaForcPostHiSerLvl) return true;
            if (m_bMdaHiSeverityLvl) return true;
            if (m_bMdaHiSeverityCode) return true;
            if (m_bMdaOccurrenceInProc) return true;
            if (m_bMdaMaxPossibleMsgs) return true;
            if (m_bMdaOccurrenceLength) return true;
            if (m_bMdaOccurToDisplay) return true;
            if (m_bFill0) return true;
            if (m_bMdaStmAssocPcaAddr) return true;
            if (m_bMdaStmDag) return true;
            if (m_bMdaStmFieldId) return true;
            if (m_bMdaStmFieldDimen1) return true;
            if (m_bMdaStmFieldDimen2) return true;
            if (m_bMdaStmFieldDimen3) return true;
            if (m_bMdaStmScrProcOrd) return true;
            if (m_bMdaStmSeverityLvl) return true;
            if (m_bMdaStmFieldRow) return true;
            if (m_bMdaStmFieldCol) return true;
            if (m_bMdaStmProgramId) return true;
            if (m_bMdaStmMessageCode) return true;
            if (m_bMdaStmVariable1) return true;
            if (m_bMdaStmVariable2) return true;
            if (m_bMdaStmProcessedFlag) return true;
            if (m_bMdaStmCursorPosition) return true;
            if (m_bMdaStmRoutingFlag) return true;
            if (m_bMdaStmSecurityFlag) return true;
            if (m_bMdaStmForcePostFlag) return true;
            if (m_bMdaStmMsgSeverityCd) return true;
            if (m_bFill1) return true;
            if (CMdaTrmMsg.HasDataToSave()) return true;
            return false;
        }

        void Save (SESSIONDATA *pSess)
        {
            if (HasDataToSave())
            {
                AddXMLRecord(pSess, "TSMDA", m_lIndex);
                AddXMLField(pSess, "HostInitOverride", m_szHostInitOverride, &m_bHostInitOverride);
                AddXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher, &m_bMdaEyeCatcher);
                AddXMLField(pSess, "MdaEndingAddr", m_lMdaEndingAddr, &m_bMdaEndingAddr);
                AddXMLField(pSess, "MdaNextAvailPosition", m_nMdaNextAvailPosition, &m_bMdaNextAvailPosition);
                AddXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl, &m_bMdaForcPostHiSerLvl);
                AddXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl, &m_bMdaHiSeverityLvl);
                AddXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode, &m_bMdaHiSeverityCode);
                AddXMLField(pSess, "MdaOccurrenceInProc", m_nMdaOccurrenceInProc, &m_bMdaOccurrenceInProc);
                AddXMLField(pSess, "MdaMaxPossibleMsgs", m_nMdaMaxPossibleMsgs, &m_bMdaMaxPossibleMsgs);
                AddXMLField(pSess, "MdaOccurrenceLength", m_nMdaOccurrenceLength, &m_bMdaOccurrenceLength);
                AddXMLField(pSess, "MdaOccurToDisplay", m_nMdaOccurToDisplay, &m_bMdaOccurToDisplay);
                AddXMLField(pSess, "Fill0", m_szFill0, &m_bFill0);
                AddXMLField(pSess, "MdaStmAssocPcaAddr", m_lMdaStmAssocPcaAddr, &m_bMdaStmAssocPcaAddr);
                AddXMLField(pSess, "MdaStmDag", m_szMdaStmDag, &m_bMdaStmDag);
                AddXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId, &m_bMdaStmFieldId);
                AddXMLField(pSess, "MdaStmFieldDimen1", m_nMdaStmFieldDimen1, &m_bMdaStmFieldDimen1);
                AddXMLField(pSess, "MdaStmFieldDimen2", m_nMdaStmFieldDimen2, &m_bMdaStmFieldDimen2);
                AddXMLField(pSess, "MdaStmFieldDimen3", m_nMdaStmFieldDimen3, &m_bMdaStmFieldDimen3);
                AddXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd, &m_bMdaStmScrProcOrd);
                AddXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl, &m_bMdaStmSeverityLvl);
                AddXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow, &m_bMdaStmFieldRow);
                AddXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol, &m_bMdaStmFieldCol);
                AddXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId, &m_bMdaStmProgramId);
                AddXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode, &m_bMdaStmMessageCode);
                AddXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1, &m_bMdaStmVariable1);
                AddXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2, &m_bMdaStmVariable2);
                AddXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag, &m_bMdaStmProcessedFlag);
                AddXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition, &m_bMdaStmCursorPosition);
                AddXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag, &m_bMdaStmRoutingFlag);
                AddXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag, &m_bMdaStmSecurityFlag);
                AddXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag, &m_bMdaStmForcePostFlag);
                AddXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd, &m_bMdaStmMsgSeverityCd);
                AddXMLField(pSess, "Fill1", m_szFill1, &m_bFill1);
                CMdaTrmMsg.Save(pSess);
                AddXMLCloseRecord(pSess, "TSMDA");  // ACE
            };
        }

        void Load (SESSIONDATA *pSess)
        {
            if (GetXMLRecord(pSess, "TSMDA", m_lIndex, &m_bReceived))
            {
                GetXMLField(pSess, "MdaEyeCatcher", m_szMdaEyeCatcher);
                GetXMLField(pSess, "MdaEndingAddr", &m_lMdaEndingAddr);
                GetXMLField(pSess, "MdaNextAvailPosition", &m_nMdaNextAvailPosition);
                GetXMLField(pSess, "MdaForcPostHiSerLvl", m_szMdaForcPostHiSerLvl);
                GetXMLField(pSess, "MdaHiSeverityLvl", m_szMdaHiSeverityLvl);
                GetXMLField(pSess, "MdaHiSeverityCode", m_szMdaHiSeverityCode);
                GetXMLField(pSess, "MdaOccurrenceInProc", &m_nMdaOccurrenceInProc);
                GetXMLField(pSess, "MdaMaxPossibleMsgs", &m_nMdaMaxPossibleMsgs);
                GetXMLField(pSess, "MdaOccurrenceLength", &m_nMdaOccurrenceLength);
                GetXMLField(pSess, "MdaOccurToDisplay", &m_nMdaOccurToDisplay);
                GetXMLField(pSess, "Fill0", m_szFill0);
                GetXMLField(pSess, "MdaStmAssocPcaAddr", &m_lMdaStmAssocPcaAddr);
                GetXMLField(pSess, "MdaStmDag", m_szMdaStmDag);
                GetXMLField(pSess, "MdaStmFieldId", m_szMdaStmFieldId);
                GetXMLField(pSess, "MdaStmFieldDimen1", &m_nMdaStmFieldDimen1);
                GetXMLField(pSess, "MdaStmFieldDimen2", &m_nMdaStmFieldDimen2);
                GetXMLField(pSess, "MdaStmFieldDimen3", &m_nMdaStmFieldDimen3);
                GetXMLField(pSess, "MdaStmScrProcOrd", m_szMdaStmScrProcOrd);
                GetXMLField(pSess, "MdaStmSeverityLvl", m_szMdaStmSeverityLvl);
                GetXMLField(pSess, "MdaStmFieldRow", m_szMdaStmFieldRow);
                GetXMLField(pSess, "MdaStmFieldCol", m_szMdaStmFieldCol);
                GetXMLField(pSess, "MdaStmProgramId", m_szMdaStmProgramId);
                GetXMLField(pSess, "MdaStmMessageCode", m_szMdaStmMessageCode);
                GetXMLField(pSess, "MdaStmVariable1", m_szMdaStmVariable1);
                GetXMLField(pSess, "MdaStmVariable2", m_szMdaStmVariable2);
                GetXMLField(pSess, "MdaStmProcessedFlag", m_szMdaStmProcessedFlag);
                GetXMLField(pSess, "MdaStmCursorPosition", m_szMdaStmCursorPosition);
                GetXMLField(pSess, "MdaStmRoutingFlag", m_szMdaStmRoutingFlag);
                GetXMLField(pSess, "MdaStmSecurityFlag", m_szMdaStmSecurityFlag);
                GetXMLField(pSess, "MdaStmForcePostFlag", m_szMdaStmForcePostFlag);
                GetXMLField(pSess, "MdaStmMsgSeverityCd", m_szMdaStmMsgSeverityCd);
                GetXMLField(pSess, "Fill1", m_szFill1);
                CMdaTrmMsg.Load(pSess);
                CloseXMLRecord(pSess, "TSMDA");
            };
        }
        
        //**************** Start AsdMdaTrmMsg Definition ****************
        //                 
        
        class AsdMdaTrmMsg
        {
          private:
            bool      m_bReceived;
            char      m_szSuppressBuff[100];
            bool      m_bFill2;
            char      m_szFill2[84+1];
        
          public:
            long      m_lIndex;

            AsdMdaTrmMsg ()  // Constructor
            {
                m_bReceived = false;
                m_lIndex = -1;
                m_bFill2 = false;
                strcpy(m_szFill2, "");
            
                long lOccurs;
            
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    MdaMsg[lOccurs] = &CMdaMsg[lOccurs];

                    CMdaMsg[lOccurs].m_lIndex = lOccurs;
                }
            }

            bool bReceived (void)
            {
                return m_bReceived;
            }

            
            long lFill2 () { return 84; };
            RWCString Fill2 (void)
            {
                return m_szFill2;
            }
            long Fill2 (const RWCString& rwc)
            {
                return SetString(rwc, m_szFill2, sizeof(m_szFill2), &m_bFill2);
            }
            
            bool HasDataToSave (void)
            {
                if (m_bFill2) return true;
                long lOccurs;
                for (lOccurs = 0; lOccurs < 14; lOccurs++)
                {
                    if(CMdaMsg[lOccurs].HasDataToSave())
                    {
                        return true;
                    }
                }
                return false;
            }

            void Save (SESSIONDATA *pSess)
            {
                if (HasDataToSave())
                {
                    AddXMLRecord(pSess, "MdaTrmMsg", m_lIndex);
                    AddXMLField(pSess, "Fill2", m_szFill2, &m_bFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Save(pSess);
                    }
                    AddXMLCloseRecord(pSess, "MdaTrmMsg");  // ACE
                };
            }

            void Load (SESSIONDATA *pSess)
            {
                if (GetXMLRecord(pSess, "MdaTrmMsg", m_lIndex, &m_bReceived))
                {
                    GetXMLField(pSess, "Fill2", m_szFill2);
                    long lOccurs;
                    for (lOccurs = 0; lOccurs < 14; lOccurs++)
                    {
                        CMdaMsg[lOccurs].Load(pSess);
                    }
                    CloseXMLRecord(pSess, "MdaTrmMsg");
                };
            }
            
            //**************** Start AsdMdaMsg Definition ****************
            //                 
            
            class AsdMdaMsg
            {
              private:
                bool      m_bReceived;
                char      m_szSuppressBuff[100];
                bool      m_bMdaAssocPcaAddr;
                long      m_lMdaAssocPcaAddr;
                bool      m_bMdaDag;
                char      m_szMdaDag[8+1];
                bool      m_bMdaFieldId;
                char      m_szMdaFieldId[8+1];
                bool      m_bMdaFieldDimen1;
                short     m_nMdaFieldDimen1;
                bool      m_bMdaFieldDimen2;
                short     m_nMdaFieldDimen2;
                bool      m_bMdaFieldDimen3;
                short     m_nMdaFieldDimen3;
                bool      m_bMdaAdScrProcOrd;
                char      m_szMdaAdScrProcOrd[2+1];
                bool      m_bMdaSeverityLvl;
                char      m_szMdaSeverityLvl[2+1];
                bool      m_bMdaAdFieldRow;
                char      m_szMdaAdFieldRow[1+1];
                bool      m_bMdaAdFieldCol;
                char      m_szMdaAdFieldCol[1+1];
                bool      m_bMdaProgramId;
                char      m_szMdaProgramId[8+1];
                bool      m_bMdaMessageCode;
                char      m_szMdaMessageCode[6+1];
                bool      m_bMdaVariable1;
                char      m_szMdaVariable1[25+1];
                bool      m_bMdaVariable2;
                char      m_szMdaVariable2[25+1];
                bool      m_bMdaCursorPosition;
                char      m_szMdaCursorPosition[2+1];
                bool      m_bMdaRoutingFlag;
                char      m_szMdaRoutingFlag[1+1];
                bool      m_bMdaSecurityFlag;
                char      m_szMdaSecurityFlag[1+1];
                bool      m_bMdaForcePostFlag;
                char      m_szMdaForcePostFlag[1+1];
                bool      m_bMdaMsgSeverityCode;
                char      m_szMdaMsgSeverityCode[1+1];
                bool      m_bMdaProcessedFlag;
                char      m_szMdaProcessedFlag[1+1];
                bool      m_bMdaAcctKey;
                char      m_szMdaAcctKey[16+1];
            
              public:
                long      m_lIndex;

                AsdMdaMsg ()  // Constructor
                {
                    m_bReceived = false;
                    m_lIndex = -1;
                    m_bMdaAssocPcaAddr = false;
                    m_lMdaAssocPcaAddr = 0;
                    m_bMdaDag = false;
                    strcpy(m_szMdaDag, "");
                    m_bMdaFieldId = false;
                    strcpy(m_szMdaFieldId, "");
                    m_bMdaFieldDimen1 = false;
                    m_nMdaFieldDimen1 = 0;
                    m_bMdaFieldDimen2 = false;
                    m_nMdaFieldDimen2 = 0;
                    m_bMdaFieldDimen3 = false;
                    m_nMdaFieldDimen3 = 0;
                    m_bMdaAdScrProcOrd = false;
                    strcpy(m_szMdaAdScrProcOrd, "");
                    m_bMdaSeverityLvl = false;
                    strcpy(m_szMdaSeverityLvl, "");
                    m_bMdaAdFieldRow = false;
                    strcpy(m_szMdaAdFieldRow, "");
                    m_bMdaAdFieldCol = false;
                    strcpy(m_szMdaAdFieldCol, "");
                    m_bMdaProgramId = false;
                    strcpy(m_szMdaProgramId, "");
                    m_bMdaMessageCode = false;
                    strcpy(m_szMdaMessageCode, "");
                    m_bMdaVariable1 = false;
                    strcpy(m_szMdaVariable1, "");
                    m_bMdaVariable2 = false;
                    strcpy(m_szMdaVariable2, "");
                    m_bMdaCursorPosition = false;
                    strcpy(m_szMdaCursorPosition, "");
                    m_bMdaRoutingFlag = false;
                    strcpy(m_szMdaRoutingFlag, "");
                    m_bMdaSecurityFlag = false;
                    strcpy(m_szMdaSecurityFlag, "");
                    m_bMdaForcePostFlag = false;
                    strcpy(m_szMdaForcePostFlag, "");
                    m_bMdaMsgSeverityCode = false;
                    strcpy(m_szMdaMsgSeverityCode, "");
                    m_bMdaProcessedFlag = false;
                    strcpy(m_szMdaProcessedFlag, "");
                    m_bMdaAcctKey = false;
                    strcpy(m_szMdaAcctKey, "");
                
                }

                bool bReceived (void)
                {
                    return m_bReceived;
                }

                
                //    ASSOCIATED PCA ADDRESS
                long MdaAssocPcaAddr (void)
                {
                    return m_lMdaAssocPcaAddr;
                }
                long MdaAssocPcaAddr (long lValue)
                {
                    return SetLong(lValue, &m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                }
                
                //    DATAGROUP ID
                long lMdaDag () { return 8; };
                RWCString MdaDag (void)
                {
                    return m_szMdaDag;
                }
                long MdaDag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaDag, sizeof(m_szMdaDag), &m_bMdaDag);
                }
                
                //    FIELD ID
                long lMdaFieldId () { return 8; };
                RWCString MdaFieldId (void)
                {
                    return m_szMdaFieldId;
                }
                long MdaFieldId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaFieldId, sizeof(m_szMdaFieldId), &m_bMdaFieldId);
                }
                
                //    FIELD DIMENSION 1
                short MdaFieldDimen1 (void)
                {
                    return m_nMdaFieldDimen1;
                }
                long MdaFieldDimen1 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                }
                
                //    FIELD DIMENSION 2
                short MdaFieldDimen2 (void)
                {
                    return m_nMdaFieldDimen2;
                }
                long MdaFieldDimen2 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                }
                
                //    FIELD DIMENSION 3
                short MdaFieldDimen3 (void)
                {
                    return m_nMdaFieldDimen3;
                }
                long MdaFieldDimen3 (const short nValue)
                {
                    return SetShort(nValue, &m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                }
                
                //    SCREEN PROCESSING ORDER
                long lMdaAdScrProcOrd () { return 2; };
                RWCString MdaAdScrProcOrd (void)
                {
                    return m_szMdaAdScrProcOrd;
                }
                long MdaAdScrProcOrd (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdScrProcOrd, sizeof(m_szMdaAdScrProcOrd), &m_bMdaAdScrProcOrd);
                }
                
                //    SEVERITY LEVEL
                long lMdaSeverityLvl () { return 2; };
                RWCString MdaSeverityLvl (void)
                {
                    return m_szMdaSeverityLvl;
                }
                long MdaSeverityLvl (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSeverityLvl, sizeof(m_szMdaSeverityLvl), &m_bMdaSeverityLvl);
                }
                
                //    FIELD ROW
                long lMdaAdFieldRow () { return 1; };
                RWCString MdaAdFieldRow (void)
                {
                    return m_szMdaAdFieldRow;
                }
                long MdaAdFieldRow (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldRow, sizeof(m_szMdaAdFieldRow), &m_bMdaAdFieldRow);
                }
                
                //    FIELD COLUMN
                long lMdaAdFieldCol () { return 1; };
                RWCString MdaAdFieldCol (void)
                {
                    return m_szMdaAdFieldCol;
                }
                long MdaAdFieldCol (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAdFieldCol, sizeof(m_szMdaAdFieldCol), &m_bMdaAdFieldCol);
                }
                
                //    PROGRAM IDENTIFICATION
                long lMdaProgramId () { return 8; };
                RWCString MdaProgramId (void)
                {
                    return m_szMdaProgramId;
                }
                long MdaProgramId (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProgramId, sizeof(m_szMdaProgramId), &m_bMdaProgramId);
                }
                
                //    MESSAGE CODE
                long lMdaMessageCode () { return 6; };
                RWCString MdaMessageCode (void)
                {
                    return m_szMdaMessageCode;
                }
                long MdaMessageCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMessageCode, sizeof(m_szMdaMessageCode), &m_bMdaMessageCode);
                }
                
                //    VARIABLE DATA 1
                long lMdaVariable1 () { return 25; };
                RWCString MdaVariable1 (void)
                {
                    return m_szMdaVariable1;
                }
                long MdaVariable1 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable1, sizeof(m_szMdaVariable1), &m_bMdaVariable1);
                }
                
                //    VARIABLE DATA 2
                long lMdaVariable2 () { return 25; };
                RWCString MdaVariable2 (void)
                {
                    return m_szMdaVariable2;
                }
                long MdaVariable2 (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaVariable2, sizeof(m_szMdaVariable2), &m_bMdaVariable2);
                }
                
                //    CURSOR POSITION
                long lMdaCursorPosition () { return 2; };
                RWCString MdaCursorPosition (void)
                {
                    return m_szMdaCursorPosition;
                }
                long MdaCursorPosition (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaCursorPosition, sizeof(m_szMdaCursorPosition), &m_bMdaCursorPosition);
                }
                
                //    ROUTINE FLAG
                long lMdaRoutingFlag () { return 1; };
                RWCString MdaRoutingFlag (void)
                {
                    return m_szMdaRoutingFlag;
                }
                long MdaRoutingFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaRoutingFlag, sizeof(m_szMdaRoutingFlag), &m_bMdaRoutingFlag);
                }
                
                //    SECURITY FLAG
                long lMdaSecurityFlag () { return 1; };
                RWCString MdaSecurityFlag (void)
                {
                    return m_szMdaSecurityFlag;
                }
                long MdaSecurityFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaSecurityFlag, sizeof(m_szMdaSecurityFlag), &m_bMdaSecurityFlag);
                }
                
                //    FORCE POST FLAG
                long lMdaForcePostFlag () { return 1; };
                RWCString MdaForcePostFlag (void)
                {
                    return m_szMdaForcePostFlag;
                }
                long MdaForcePostFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaForcePostFlag, sizeof(m_szMdaForcePostFlag), &m_bMdaForcePostFlag);
                }
                
                //    MESSAGE SEVERITY CODE
                long lMdaMsgSeverityCode () { return 1; };
                RWCString MdaMsgSeverityCode (void)
                {
                    return m_szMdaMsgSeverityCode;
                }
                long MdaMsgSeverityCode (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaMsgSeverityCode, sizeof(m_szMdaMsgSeverityCode), &m_bMdaMsgSeverityCode);
                }
                
                //    PROCESSED FLAG
                long lMdaProcessedFlag () { return 1; };
                RWCString MdaProcessedFlag (void)
                {
                    return m_szMdaProcessedFlag;
                }
                long MdaProcessedFlag (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaProcessedFlag, sizeof(m_szMdaProcessedFlag), &m_bMdaProcessedFlag);
                }
                
                //    ACCOUNT KEY
                long lMdaAcctKey () { return 16; };
                RWCString MdaAcctKey (void)
                {
                    return m_szMdaAcctKey;
                }
                long MdaAcctKey (const RWCString& rwc)
                {
                    return SetString(rwc, m_szMdaAcctKey, sizeof(m_szMdaAcctKey), &m_bMdaAcctKey);
                }
                
                bool HasDataToSave (void)
                {
                    if (m_bMdaAssocPcaAddr) return true;
                    if (m_bMdaDag) return true;
                    if (m_bMdaFieldId) return true;
                    if (m_bMdaFieldDimen1) return true;
                    if (m_bMdaFieldDimen2) return true;
                    if (m_bMdaFieldDimen3) return true;
                    if (m_bMdaAdScrProcOrd) return true;
                    if (m_bMdaSeverityLvl) return true;
                    if (m_bMdaAdFieldRow) return true;
                    if (m_bMdaAdFieldCol) return true;
                    if (m_bMdaProgramId) return true;
                    if (m_bMdaMessageCode) return true;
                    if (m_bMdaVariable1) return true;
                    if (m_bMdaVariable2) return true;
                    if (m_bMdaCursorPosition) return true;
                    if (m_bMdaRoutingFlag) return true;
                    if (m_bMdaSecurityFlag) return true;
                    if (m_bMdaForcePostFlag) return true;
                    if (m_bMdaMsgSeverityCode) return true;
                    if (m_bMdaProcessedFlag) return true;
                    if (m_bMdaAcctKey) return true;
                    return false;
                }

                void Save (SESSIONDATA *pSess)
                {
                    if (HasDataToSave())
                    {
                        AddXMLRecord(pSess, "MdaMsg", m_lIndex);
                        AddXMLField(pSess, "MdaAssocPcaAddr", m_lMdaAssocPcaAddr, &m_bMdaAssocPcaAddr);
                        AddXMLField(pSess, "MdaDag", m_szMdaDag, &m_bMdaDag);
                        AddXMLField(pSess, "MdaFieldId", m_szMdaFieldId, &m_bMdaFieldId);
                        AddXMLField(pSess, "MdaFieldDimen1", m_nMdaFieldDimen1, &m_bMdaFieldDimen1);
                        AddXMLField(pSess, "MdaFieldDimen2", m_nMdaFieldDimen2, &m_bMdaFieldDimen2);
                        AddXMLField(pSess, "MdaFieldDimen3", m_nMdaFieldDimen3, &m_bMdaFieldDimen3);
                        AddXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd, &m_bMdaAdScrProcOrd);
                        AddXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl, &m_bMdaSeverityLvl);
                        AddXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow, &m_bMdaAdFieldRow);
                        AddXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol, &m_bMdaAdFieldCol);
                        AddXMLField(pSess, "MdaProgramId", m_szMdaProgramId, &m_bMdaProgramId);
                        AddXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode, &m_bMdaMessageCode);
                        AddXMLField(pSess, "MdaVariable1", m_szMdaVariable1, &m_bMdaVariable1);
                        AddXMLField(pSess, "MdaVariable2", m_szMdaVariable2, &m_bMdaVariable2);
                        AddXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition, &m_bMdaCursorPosition);
                        AddXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag, &m_bMdaRoutingFlag);
                        AddXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag, &m_bMdaSecurityFlag);
                        AddXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag, &m_bMdaForcePostFlag);
                        AddXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode, &m_bMdaMsgSeverityCode);
                        AddXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag, &m_bMdaProcessedFlag);
                        AddXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey, &m_bMdaAcctKey);
                        AddXMLCloseRecord(pSess, "MdaMsg");  // ACE
                    };
                }

                void Load (SESSIONDATA *pSess)
                {
                    if (GetXMLRecord(pSess, "MdaMsg", m_lIndex, &m_bReceived))
                    {
                        GetXMLField(pSess, "MdaAssocPcaAddr", &m_lMdaAssocPcaAddr);
                        GetXMLField(pSess, "MdaDag", m_szMdaDag);
                        GetXMLField(pSess, "MdaFieldId", m_szMdaFieldId);
                        GetXMLField(pSess, "MdaFieldDimen1", &m_nMdaFieldDimen1);
                        GetXMLField(pSess, "MdaFieldDimen2", &m_nMdaFieldDimen2);
                        GetXMLField(pSess, "MdaFieldDimen3", &m_nMdaFieldDimen3);
                        GetXMLField(pSess, "MdaAdScrProcOrd", m_szMdaAdScrProcOrd);
                        GetXMLField(pSess, "MdaSeverityLvl", m_szMdaSeverityLvl);
                        GetXMLField(pSess, "MdaAdFieldRow", m_szMdaAdFieldRow);
                        GetXMLField(pSess, "MdaAdFieldCol", m_szMdaAdFieldCol);
                        GetXMLField(pSess, "MdaProgramId", m_szMdaProgramId);
                        GetXMLField(pSess, "MdaMessageCode", m_szMdaMessageCode);
                        GetXMLField(pSess, "MdaVariable1", m_szMdaVariable1);
                        GetXMLField(pSess, "MdaVariable2", m_szMdaVariable2);
                        GetXMLField(pSess, "MdaCursorPosition", m_szMdaCursorPosition);
                        GetXMLField(pSess, "MdaRoutingFlag", m_szMdaRoutingFlag);
                        GetXMLField(pSess, "MdaSecurityFlag", m_szMdaSecurityFlag);
                        GetXMLField(pSess, "MdaForcePostFlag", m_szMdaForcePostFlag);
                        GetXMLField(pSess, "MdaMsgSeverityCode", m_szMdaMsgSeverityCode);
                        GetXMLField(pSess, "MdaProcessedFlag", m_szMdaProcessedFlag);
                        GetXMLField(pSess, "MdaAcctKey", m_szMdaAcctKey);
                        CloseXMLRecord(pSess, "MdaMsg");
                    };
                }
            };

            AsdMdaMsg  CMdaMsg[14];
            AsdMdaMsg *MdaMsg[14];
            
            //**************** End AsdMdaMsg Definition ****************
            
        };

        AsdMdaTrmMsg  CMdaTrmMsg;
        AsdMdaTrmMsg *MdaTrmMsg;
        
        //**************** End AsdMdaTrmMsg Definition ****************
        
    };

    AsdTSMDA CTSMDA;
    AsdTSMDA *TSMDA;
    
    //**************** End AsdTSMDA Definition ****************

};

//**************** End AsdWVPCRMMSData Definition ****************

typedef AsdWVPCRMMSData *LPWVPCRMMS;
typedef AsdWVPCRMMSData::AsdTSHeader *LPWVPCRMMS_TSHeader;
typedef AsdWVPCRMMSData::AsdWVRMTR00 *LPWVPCRMMS_WVRMTR00;
typedef AsdWVPCRMMSData::AsdWVRMINQ *LPWVPCRMMS_WVRMINQ;
typedef AsdWVPCRMMSData::AsdWVRMINQ::AsdPhInfo *LPWVPCRMMS_WVRMINQ_PhInfo;
typedef AsdWVPCRMMSData::AsdWVRMINQ::AsdAddrInfo *LPWVPCRMMS_WVRMINQ_AddrInfo;
typedef AsdWVPCRMMSData::AsdWVRMINQ::AsdRelData *LPWVPCRMMS_WVRMINQ_RelData;
typedef AsdWVPCRMMSData::AsdWVRMINQ::AsdApplData *LPWVPCRMMS_WVRMINQ_ApplData;
typedef AsdWVPCRMMSData::AsdWVRMINQ::AsdRmkInfo *LPWVPCRMMS_WVRMINQ_RmkInfo;
typedef AsdWVPCRMMSData::AsdSDRMUCIB *LPWVPCRMMS_SDRMUCIB;
typedef AsdWVPCRMMSData::AsdSDRMUCIB::AsdRelData *LPWVPCRMMS_SDRMUCIB_RelData;
typedef AsdWVPCRMMSData::AsdTSMDA *LPWVPCRMMS_TSMDA;
typedef AsdWVPCRMMSData::AsdTSMDA::AsdMdaTrmMsg *LPWVPCRMMS_TSMDA_MdaTrmMsg;
typedef AsdWVPCRMMSData::AsdTSMDA::AsdMdaTrmMsg::AsdMdaMsg *LPWVPCRMMS_TSMDA_MdaTrmMsg_MdaMsg;
#endif    // AsdWVPCRMMSData_H
